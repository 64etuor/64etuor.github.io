<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Documents]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://64etuor.github.io</link><image><url>https://64etuor.github.io/site-lib/media/favicon.png</url><title>Documents</title><link>https://64etuor.github.io</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 17 Jul 2025 15:21:49 GMT</lastBuildDate><atom:link href="https://64etuor.github.io/site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 17 Jul 2025 15:21:37 GMT</pubDate><copyright><![CDATA[Yangha Park]]></copyright><ttl>60</ttl><dc:creator>Yangha Park</dc:creator><item><title><![CDATA[2025-07-16]]></title><description><![CDATA[
"지금 양말을 신고 있는가? Are you wearing socks?" 잘 때가 됐으니 그렇지 않다.
비가 추적이니 양말을 신고 싶은 기분도 아니다.
장화가 없으니 이 비에 밖을 나서기 어렵다.
그러나 장화가 없어도 맨발이라면 밖에 나섬직 하다. 영원히 간직하고 싶은 기억이 있다면 뭐야? 어머니와 함께 글을 쓰던 기억.
글은 애상이요, 끊이지 않는 단말마 같은 것이라
이 앞에 메아리 치는 계곡을 홀로 나서는 건 영 두려운 일이고, 또 영영 두려운 일이라서 차마 용기가 없다.
눈 앞에 번개가 막 부딪혀 오는 마당에 글자 따위를 쓸 사람이 대체 어딨는가? 그나마 그것도 홀로 된 참이라면.
그러므로 다시는 돌아오지 않을 과거만을 추억하면서 길을 나서지 않는 사람은,
으레 그렇듯 우물 안에서 세상을 논할 것이다마는.
세상이 그런 개구리를 위하여 함께 울어 줄 희망 따윈 진즉에 가뭄이다.
또 비가 온 들 채워지지 않는 우물도 있기 마련이다.
오늘의 '생각을 자극'하는 글귀
첫 만남에서 성공적인 대화를 나누려면 ""뭘 좋아하세요?""라고 물어보라.
처음 만난 사람에게 ""무슨 일 하세요?""라고 묻지 마라. 이 질을 받은 상대방은 일과 회사에 관한 이야기 이외에 다른 이야기를 할 의지가 꺾인다. 대신 이렇게 물어보자. ""뭘 좋아하세요?"" 상대방의 호기심을 자극하고 관심사를 표현할 수 있는 질문을 던져야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-16.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-16.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 17 Jul 2025 15:21:29 GMT</pubDate></item><item><title><![CDATA[2025-07-17 나의 가장 큰 장점, 최근에 가장 당환했던 순간]]></title><description><![CDATA[
"나의 가장 큰 장점은? What is your biggest strength?" " 감정적으로 안정되었다는 게 큰 장점인 거 같다. 그리고 동시에 단점이기도 하다.
글을 쓰고 싶은 순간은 대게 감정적인 순간이기 때문이다.
나는 어린 날의 내가 쓰던 글을 보는 것을 좋아한다.
거기에는 감정이 크게 묻어 있어서 꽤나 짙은 향이 나는데,
요새 쓰는 시나 글은 영 밍밍한 맛 뿐이다.
감정의 스펙트럼이 작아지다 보니 타인과 공감대를 형성하는 데도 조금 어려움이 있는 거 같다.
크게 기쁠 일도 없고, 크게 슬플 일도 없는 요새가 다행인 지 불행인 지 아리송할 따름이다. 최근에 가장 당황했던 순간은 언제야? 커서, 클로드 코드, Gemini CLI 를 동시에 쓰면서 프로젝트 작업을 하고 있다.
다른 레포지토리에서 작업을 하면 문제가 없는데 바로 어제 모노 레포에서 브랜치를 옮기면서 작업하다가 내 실수인지 ide끼리 쓰기 경합 사태가 일어난 것인지 오류가 뜨더니 Git에서 추적하지 않던 (다른 코딩 툴이 작업한 코드인데 브랜치에 해당하는 코드가 아니라 커밋을 안 하고 있었다.) 코드를 다 날려 먹었다. 급할 수록 돌아가라던데… 한동안 멍하니 컴퓨터만 쳐다 보고 있었는데, 허망하고 황망하기 짝이 없었다.
옛날에 사무 작업을 할 때도 곧잘 저장을 안 하다가 파일을 날리고 시간을 날린 적이 많은데 참 고쳐지지 않는 습관이다!
오늘의 '생각을 자극'하는 글귀
지식을 가장한 신념을 조심하라. 확신은 우리를 착각에 빠뜨린다.
내 생각을 남에게 강요한다고 사실이 되지는 않는다. 설득당하는 사람은 자기 자신뿐이다. 지식을 가장한 신념을 조심하라. 세상에 확실한 것은 없으며 확신은 우리를 쉽게 착각에 빠뜨린다. 죽을힘을 다해 올라간 언덕이 처음부터 올라가지 말았어야 할 언덕일 수도 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-17-나의-가장-큰-장점,-최근에-가장-당환했던-순간.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-17 나의 가장 큰 장점, 최근에 가장 당환했던 순간.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 17 Jul 2025 15:16:47 GMT</pubDate></item><item><title><![CDATA[멍때리기의-과학ㆍ궤도]]></title><link>https://64etuor.github.io/500_resources/00_achieves/멍때리기/멍때리기의-과학ㆍ궤도.html</link><guid isPermaLink="false">500_Resources/00_Achieves/멍때리기/멍때리기의-과학ㆍ궤도.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 22 Jan 2025 10:18:24 GMT</pubDate></item><item><title><![CDATA[(공고문)-2024년도-중앙부처-및-지자체-창업지원사업-통합공고문]]></title><link>https://64etuor.github.io/500_resources/정부지원창업/(공고문)-2024년도-중앙부처-및-지자체-창업지원사업-통합공고문.html</link><guid isPermaLink="false">500_Resources/정부지원창업/(공고문)-2024년도-중앙부처-및-지자체-창업지원사업-통합공고문.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 22 Jan 2025 10:18:24 GMT</pubDate></item><item><title><![CDATA[착각]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/착각.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/착각.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 14 Jan 2024 09:00:16 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 25주차 회고]]></title><description><![CDATA[ 프로젝트에 시간을 너무 쏟지 않으려고 했는데 생각보다 너무 많이 할애했다.
덕분에 독서랑 개인 일과가 너무 밀려서 당장 프로젝트가 끝나는 순간부터 해야 할 일이 산더미처럼 쌓였다.
프로젝트에 영향을 안 받으려고 했는데 뭐 인간사에서 이게 어쩔 수 있나 싶긴 함.
아무튼 중간 중간 뒤처진 것들은 순도 100% 백수로 전환되면서 채우면 되긴 한다.
SW 부트캠프:
데이터베이스 모델링의 중요성을 뼈저리게 실감한다.
DB 변경 사항 때문에 만들었던 모든 코드를 고치면서 모든 시간을 낭비했다.
파이썬 서버는 수정하다가 도저히 답이 없어서 코드 전체를 삭제하고 다시 만들기 시작했다.
분석 쪽 모델을 먼저 만든다는 게 사실상 어불성설이었는데 프로젝트 기간이 짧다 보니 미리 만든 게 화근이었다.
덕분에 만들어야 하는 기능은 마무리 못하고 수정에만 모든 시간을 할애해서 보람도 없고, 지치기는 지칠 데로 지치고…(깃 코드 이력을 보니 +9만 lines - 3만 lines…)
설계를 보다 철저히 해야 하는데 설계도 결국 경험이 선행되야 잘 할 수 있는 거라 경험이 쌓였다는 느낌.
아 근데 진짜 너무 질리기는 한다. ㅋㅋㅋㅋ
본래 구현하려고 했던 기능 대다수는 포기해야 프로젝트 기간을 맞출 듯.
본격적인 칼질 타임 시작. 목표: 아이캔대학 follow-up
결과: 당연히 못했다. ㅋㅋㅋ 프로젝트 마무리 후 다시 재개 미친 듯이 코드만 쳐다 보고 있었기는 하다. 모든 게 Minus. 마이크로 매니징의 유행이 지났지만, 마이크로 매니징이 필요한 부분도 분명 있는 거 같다. 매니지먼트란 무엇인가? 목표: 프로젝트 기능 마무리 및 배포.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-25주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 25주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Jul 2025 17:03:47 GMT</pubDate></item><item><title><![CDATA[2025-07-15 나의 아킬레스건, 나와 똑같은 사람이 존재한다면]]></title><description><![CDATA[
"나의 아킬래스건은 무엇인가? What is your Achilles' heel?" 학력이라고 생각한다.
결국 중요한 건 능력이라고 생각해서 학력을 크게 신경 쓰지 않았고,
대학도 호기롭게 죄 그만 뒀다.
그 학력이 없어서 할 수 있는 일이 너무 제한된 바람에 고생을 많이 했다.
원하던 가시밭길을 걸었으니 행복하면서도 불행한 이중적인 삶을 살았다.
남에게든 자식에게든 절대 추천할 만한 길은 아닌 거 같다.
다만 아킬레스건으로 칭할 정도로 스스로 상처 입거나 열등감이 있는 건 아니라서,
여전히 본심은 학력이 뭐 대수인가라는 생각을 하긴 한다.
그러나 그건 내 짧은 생각일 뿐이고 현실에서는 엄청난 대수임은 확실하다.
데이터는 작은 확률을 무시하니까. (그게 이득이긴 해!) 너와 똑같은 사람이 존재한다면 어떨까? 나는 학습력이 좋고 반면교사를 모토로 삼은 사람이다.
나랑 똑같은 사람을 만난다면 나의 못난 점을 보면서 ‘나는 저렇게 살 지 말아야지.’ 다짐할 것이다.
그리고나서 나는 그 내가 관찰하던 나와 또다른 형태의 못난 사람이 되어 있을 것이다.
아마 평생 못날 팔자로 태어난 것 마냥.
오늘의 '생각을 자극'하는 글귀
"타인의 기대가 아닌자신 이상을 따라야 한다.
정체성에 관한 가장 중요한 질문은 ""남들이 나를 어떻게 생각하는가?""가 아니라 ""내가 어떤 사람이 되고 싶은가?다. 70개의 연구 결과, 정신 건강은 타인의 기대가 아니라 삶에서 자신의 이상을 얼마나 따르느냐에 달려 있다. 행복은 태도와 가치관의 간격이 좁혀질 때 찾아온다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-15-나의-아킬레스건,-나와-똑같은-사람이-존재한다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-15 나의 아킬레스건, 나와 똑같은 사람이 존재한다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Jul 2025 16:50:32 GMT</pubDate></item><item><title><![CDATA[2025-07-14 비밀이 있는지, 아무도 시키지 않아도 즐겁게 하는 일]]></title><description><![CDATA[
"비밀이 있는가? 하나 이상인가? Do you have a secret? More than one?" 당연히 있다. 하나 이상일 것이다.
그러나 남을 속이거나 해하려는 의도의 비밀은 아니다.
비밀을 부끄럽게 생각해서 감추는 것도 아니다.
말할 필요가 생긴다면 언제든 밝힐 비밀들이기는 하다.
갑자기 명탐정 코난에서 베르무트가 했던 대사가 떠오르는 건 왜인가.
A secret makes a woman woman. 아무도 시키지 않았는데 즐겁게 하는 건 뭐야? 웹툰 보기, 게임하기, 책 보기, 노래하기 등등.
아무도 시키지 않았는데 즐거운 일은 너무나 많은데 굳이 나열할 필요가 있을까!
즐겁다는 건 남의 인정을 바라지 않는다는 뜻이 될 수도 있는데!
오늘의 '생각을 자극'하는 글귀
"행복의 열쇠는 가진 것에 감사하는 마음에 있다.
불만은 더 좋을 수도 있었다고 말하는 것이다. 지혜는 더 나쁠 수 있었다고 말하는 것이다. ""만약 ~ 했더라면.""이라는 생각은 잘못된 일에 대한 후회지만, ""적어도 ~했어.""는 일이 잘못되지 않은 것에 대한 감사의 표현이다. 행복의 열쇠는 없는 것을 한탄하지 않고 가진 것에 감사하는 마음에 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-14-비밀이-있는지,-아무도-시키지-않아도-즐겁게-하는-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-14 비밀이 있는지, 아무도 시키지 않아도 즐겁게 하는 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 14 Jul 2025 16:38:42 GMT</pubDate></item><item><title><![CDATA[2025-07-13 나를 감성에 젖게 만드는 것, 인생을 크게 뒤흔든 선택]]></title><description><![CDATA[
"나를 감성에 젖게 만드는 것은? What are you sentimental about?" 노래와 문학이 아닐까..?
예전엔 노래를 듣거나 어떤 이야기를 읽고 눈물을 흘릴 때가 가끔 있었는데,
그다지 부끄럽게 생각하지 않는다. 오히려 눈물이 안 나는 지금의 내가 별로 맘에 안 든다.
그 외에는 상황이랄까.
여유가 없는 상황에서는 쉽게 감성에 젖고 더 감정에 솔직하게 되는 거 같다.
세월과 함께 얼굴에 주름은 더 깊어져만 가는데,
내 감성의 지문은 반대로 옅어져만 가는 것 같아 아쉬운 생각이 종종 든다. 인생을 크게 뒤흔들었던 선택을 해 본 적이 있어? 해 본 적이 있다. 그것도 제법 많이.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-13-나를-감성에-젖게-만드는-것,-인생을-크게-뒤흔든-선택.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-13 나를 감성에 젖게 만드는 것, 인생을 크게 뒤흔든 선택.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 13 Jul 2025 20:02:45 GMT</pubDate></item><item><title><![CDATA[(공고문) 2024년도 중앙부처 및 지자체 창업지원사업 통합공고문]]></title><link>https://64etuor.github.io/500_resources/정부지원창업/(공고문)-2024년도-중앙부처-및-지자체-창업지원사업-통합공고문.html</link><guid isPermaLink="false">500_Resources/정부지원창업/(공고문) 2024년도 중앙부처 및 지자체 창업지원사업 통합공고문.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 07:40:32 GMT</pubDate></item><item><title><![CDATA[멍때리기의 과학ㆍ궤도]]></title><link>https://64etuor.github.io/500_resources/00_achieves/멍때리기/멍때리기의-과학ㆍ궤도.html</link><guid isPermaLink="false">500_Resources/00_Achieves/멍때리기/멍때리기의 과학ㆍ궤도.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 29 Dec 2024 10:43:45 GMT</pubDate></item><item><title><![CDATA[착각]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/착각.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/착각.txt</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 14 Jan 2024 07:26:20 GMT</pubDate></item><item><title><![CDATA[2025-07-12 완벽한 나, 나를 화나게 하는 것]]></title><description><![CDATA[
"_ 은(는) 완벽하다. __ is perfect." 나는 완벽하다. 내가 나이기에 필요한 모든 조건을 완벽하게 충족하는 사람은 이 세상에 나밖에 없다. 내가 나이기에 필요한 조건은 시시각각 다채롭게 변화하는데 조금의 지체 없이 그 무질서한 변화를 따라갈 수 있는 사람도 나밖에 없다. 그러므로 이 세상에 완벽한 나는 단 하나 뿐이다. 항상 너를 화나게 만드는 건 뭐야? 부당함에 대항할 수 없는 나에게 분개할 때가 있다.
또 어떠한 잘못된 상황이 있을 때 그걸 개선하거나 반전 시킬 수 없는 스스로의 무능력함에 화가 날 때가 있다.
매일 루틴을 실패하는 내 게으름에도 화가 난다!!!
오늘의 '생각을 자극'하는 글귀
"조심스럽게 차선을 바꾸는 것이 성장을 나아가는 길이다.
한 차선을 너무 오래 유지하지 마라. 그러면 시야를 넓힐 수 없다. 차선을 바꿀 때에는 사각지대를 확인하고 다가오는 차를 잘 피해야 한다. 갑자기 방향을 틀면 사고가 날 수 있다. 한 차선을 고수하면 정체가 발생한다. 조심스럽게 차선을 바꾸는 것이 성장으로 나아가는 길이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-12-완벽한-나,-나를-화나게-하는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-12 완벽한 나, 나를 화나게 하는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 12 Jul 2025 14:17:23 GMT</pubDate></item><item><title><![CDATA[2025-07-11 닮고 싶은 문학작품 속 주인공, 꾸준히 모으는 것]]></title><description><![CDATA[
"닮고 싶은 문학작품 속 주인공은? If you were a literary character, who would you be?" 내가 좋아하는 문학작품의 주인공은 우연인지 죄다 나약해 빠지고 어딘가 많이 모자란 사람들이다. 우연스럽게 나 또한 나약해 빠지고 게으르며 모자란 곳 투성이라 닮은 것이 많은 셈인데, 이건 닮고 싶어서 닮은 것이 아니기 때문에 닮고 싶은 주인공이라기엔 어폐가 있다.
그래서 그나마 개중에 흠이 덜한 사람을 떠올려 보자니 막상 떠오르는 것들이 없다. 남들에게 자랑할 만한 문학은 많아도 자랑할 만한 주인공은 찾기 쉽지 않다.
말하자면 이런 것이다.
톨스토이의 단편집 ‘두 노인’에는 두 인물이 등장한다. 신앙심 깊은 두 노인, 부유하고 엄격한 예핌과 가난하지만 너그러운 옐리세이가 함께 예루살렘으로 성지 순례를 떠난다. 여정 중 옐리세이는 굶주림으로 죽어가는 한 가족을 발견하고 자신의 순례를 포기한다. 그는 가진 돈을 모두 털어 가족에게 음식과 보살핌을 베풀고, 그들이 다시 자립할 수 있도록 헌신적으로 돕는다.
반면, 예핌은 혼자 예루살렘에 도착해 모든 종교적 의식을 경건하게 마친다. 하지만 성전에서 기도하던 중, 그는 그곳에 오지 않은 옐리세이가 빛나는 모습으로 자신보다 앞서 있는 환영을 보게 된다. 집으로 돌아오는 길에 예핌은 옐리세이가 구한 가족을 만나 모든 이야기를 듣는다. 그리고 진정한 순례는 성스러운 땅을 밟는 행위가 아니라 고통받는 이웃에게 자비를 베푸는 것임을 깊이 깨닫는다. 위는 AI의 요약이다 보니 정확하고 공정한 해석은 아니겠지만 아무튼 개략적인 내용은 저렇다. 이 이야기는 내가 가장 오랫동안 좋아하는 것 중의 하나인데, 이야기가 가지는 메시지 또한 입체적이어서 그렇다.
각설하고 결론만 말하면 나는 예핌을 닮고 싶은 것도 예리세이(옐리세이, 에리세이 아주 번역이 다양하다.)를 닮고 싶은 것도 아니다.
다만 그들이 가진 좋은 점만 선택적으로 닮고 싶다는 생각만은 하고 있는데, 둘 중 어느 하나가 못나거나 잘났다는 평가 따위를 하지 않는 전제에서 양쪽 다 충분히 좋은 속성을 많이 가진 개체라고 생각하기 때문이다.
아무튼 졸리니까 한마디로 줄이면,
이 세상에 절대적으로 좋고 나쁜 게 어디 있겠느냐.
하는 나의 짧은 생각이올시다. 꾸준히 모으고 있는 게 있어? 한 때는 음악 CD를 모았는데 그게 내가 어떤 음악을 좋아한다는 증거를 수집하는 행위로 느껴진 순간 그만 두었다.
그리고 또 한 때는 책을 모았는데 내 행위의 이유가 책을 읽는 그 행위 자체가 좋아서가 아닌 지적 허영 때문임을 깨달아서 그만 두었다.
다육 식물을 모을 때도 있었는데 그게 단순히 사람을 대하는 게 싫기 때문이란 걸 알았을 때 조용히 관뒀다.
이후에 자잘하게 모으려고 시도한 것들이 있었으나 그 행위의 근본 원인이 내 모자람의 단편임을 발견할 때가 많았다.
학습 효과인 지 요새는 뭔가를 모으려고 시도하지 않는데 아마 내 못난 점을 발견하는데 지친 까닭이다.
오늘의 '생각을 자극'하는 글귀
"한 사람의 감정에 결정에 좌우되어서는 안 된다.
인간관계가 삐걱거릴 때마다 한쪽 바퀴에만 기름칠하는 것은 건강하지 못한 패턴이다. 먼저 화내거나 불안한 모습을 보이는 사람을 곧바로 달래주면 힘의 불균형이 생긴다. 한 사람의 감정에 결정이 좌우되어서는 안 된다. 결정은 양쪽 모두의 가치가 포함되어야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-11-닮고-싶은-문학작품-속-주인공,-꾸준히-모으는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-11 닮고 싶은 문학작품 속 주인공, 꾸준히 모으는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 11 Jul 2025 18:37:11 GMT</pubDate></item><item><title><![CDATA[2025-07-10 부모님과의 최근 대화, 오감 중 가장 예민한 감각]]></title><description><![CDATA[
"부모님과 마지막으로 대화를 나눈 적은 언제인가? When was the last time you spoke to your parents?" 2주 전쯤 배편을 예약해 드린다고 통화한 게 마지막이다.
아무래도 아버지와 엄청나게 살가운 사이는 아니라서 일상을 시시콜콜 공유하지는 않는다.
대게의 대화는 결혼 못하는 아들에 대한 핀잔으로 마무리되지만,
이제는 만성적인 내성이 생겨 버려서 아픈 것도 모르겠다.
아주 어려서부터 오래도록 떨어져 지낸 세월의 벽이 참으로 두텁다.
어쨌든 피는 물보다 진하다고 가족의 기본적인 관계 정도는 확보하고 싶은데 실상 충분한 노력을 들이고 있는가는 의심스럽기 짝이 없다.
관계 개선을 미래의 내 배우자와 자식들에게 위임하는 모양새가 될 것도 같아서 그래도 예전보다 전화는 자주 드리는 편이다.
천천히, 그러나 빠르게 개선해야 할 일들이다…! 오감 중에서 가장 예민한 감각은 뭐야? 오감으로 제한을 두자면 내 경우에 가장 예민한 건 시각인 거 같다. 결벽증까진 아닌데 남보다 예민한 건 확실하다. 특히 디자인을 할 때 1픽셀이라도 뭔가 틀어지거나 원하는 모습과 다르면 너무 불편하다.
다행히 내 작업물에 대하여 훨씬 엄격한 편이라 남과 트러블이 생긴 적은 딱히 없다.
나쁜 버릇으로 생각하지 않는다. 항상 노력한 만큼 보람이 남는 거라 생각하고 결과가 또 그랬다.
보다 나아지는 길이 괴로울지언정 나쁠 리는 없으니까.
오늘의 '생각을 자극'하는 글귀
"시간을 어떻게 쓰느냐가 당신이 중요하게 여기는 대상을 보여준다.
무엇을 이루었는지를 보면 그 사람의행동을 파악할 수 있다. 무엇을 희생했는지를 보면 그 사람의 됨됨이를 알 수 있다. 당신이 시간을 어디에 쓰는가는 당신이 무엇에서 동기부여를 얻는지 알려준다. 무엇을 기꺼이 포기할 것인지는 당신에게 중요한 가치를 보여준다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-10-부모님과의-최근-대화,-오감-중-가장-예민한-감각.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-10 부모님과의 최근 대화, 오감 중 가장 예민한 감각.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 10 Jul 2025 09:22:40 GMT</pubDate></item><item><title><![CDATA[2025-07-09 오늘이 유쾌했던 이유, 최근에 찍은 사진]]></title><description><![CDATA[
"오늘이 유쾌했던 이유는 _ (이)다. Today was delightful becuase ___." 오늘이 유쾌했던 이유? 점심이 맛있어서?
오랜만에 파스타와 피자를 먹었는데 접시까지 핥아 먹을 뻔 했다.
프로젝트 막바지 기간이라 팀원들이 다들 초췌해 진 게 눈에 보이는데, 그나마 함께 맛있는 점심을 먹으면서 분위기가 좀 풀어진 거 같아 좋았다.
물론 점심 먹고 난 이후에 원 상태로 돌아가기 까지 얼마 걸리진 않았지만. ㅎㅎㅎ
기간이 얼마 남지 않았는데 할 일이 아직 많이 남아 있어서 다들 스트레스를 받는 거 같다.
프로젝트를 시작할 때부터 좀 일을 좀 계획적, 효율적으로 해서 좀 일찍 마무리를 해 놓고 남는 시간에 디테일을 잡자고 얘기했지만…
자고로 인간은 똥인지 된장인지 먹어 봐야 아는 법이다.
나도 그냥 많이 먹어 봐서 아는 거지 원래부터 계획적이고 성실한 사람은 아닌 터라 별 말은 안 하고 있다.
이렇게 될 게 뻔히 보였으나 뭐 어쩌겠는가 허허. 최근에 찍은 사진은 어떤 거야? <img alt="Pasted image 20250709190815.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250709190815.png" target="_self">
마지막 사진..?? 음식 사진…
오늘의 '생각을 자극'하는 글귀
"충성은 사람이 아닌 원칙에 해야 한다.
리더를 따를 때는 어떤 상황에서 더 이상 따르지 않을지를 생각해 보아야 한다. 이 질문에 대한 답이 ""그런 상황은 없다.""라면, 당신의 기준은 위험에 빠져 있는 것이다. 당신이 충성해야 하는 것은 사람이 아니라 원칙이어야 한다. 무조건적인 사랑을 받을 자격이 있는 리더는 없다. 헌신은 인격으로 얻는 것이다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-09-오늘이-유쾌했던-이유,-최근에-찍은-사진.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-09 오늘이 유쾌했던 이유, 최근에 찍은 사진.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 09 Jul 2025 10:08:46 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250709190815.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250709190815.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-07-08 장마를 좋아하는지, 오랫동안 좋아한 가수와 노래]]></title><description><![CDATA[
"장마를 좋아하는가? Do you like the monsoon?" " 좋아하지도 싫어하지도 않는다. 물론 재난 수준의 장마가 좋을 리는 없지만.
비가 많이 온다면 그 핑계로 파전에 막걸리를 먹어도 좋고,
바깥 출입을 자제하고 책을 많이 읽거나, 게임을 많이 해도 좋겠다.
마침 비가 오는데 오랜만에 막걸리를 한 잔 먹어볼까?
어제 해 먹고 남은 감바스가 있는데 이게 잘 어울릴는지는 영 모르겠다. 오랫동안 좋아한 가수나 노래는 뭐야? 좋아하는 노래들이 많지만 특정 가수를 좋아하지는 않는다.
꾸준히 오래 듣고 있는 밴드나 가수는 넬, 자우림, 김광진, James Morrison, John Legend 등이 있다.
중학생 때부터 들었으니 20년이 넘게 듣고 있는 셈인데 너무 취향인 곡들이 많아서 쉽게 질리지가 않는다.
새로운 청음 시도를 좋아해서 음악을 듣는 스펙트럼이 많이 넓어졌지만 옛날 노래들의 매력은 여전하다.
내가 우울할 적에 함께 우울했고, 내가 기쁠 적에 함께 기뻤기 때문에 더욱 각별한 마음이 있기도 하고.
내게 음악이 단순 음악 이상의 가치를 지니게 된 건, 내가 그 노래나 가사에 투영한 어떤 의미를 발견하거나, 혹은 의도치 않게 음악으로부터 위로 받은 순간들이 하나 둘 쌓이면서 부터다.
지금 당장도 떠오르는 순간들이 꽤 많은데 노래나 문학 등 예술이 없었더라면 나는 아마 더 오랜 시간 힘들어 하고 더 오랜 시간 허무에 빠져 있었을 거란 생각이 든다.
노래가 있는 세상은 참 다행인 세상이다.
오늘의 '생각을 자극'하는 글귀
문제를 제대로 알아야 정확한 해결책이 나온다.
갈등 상황에서 당신이 내놓은 해결책을 마음에 들어하지 않는 사람은 문제를 무시하는 경향이 있다. 해결책을 찾기 전에 먼저 무엇이 잘못되었는지 의견을 조율하는 것이 도움이 된다. 그러면 해결책을 찾지 못하더라도 함께 문제를 진단하는 능력을 연마할 수 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-08-장마를-좋아하는지,-오랫동안-좋아한-가수와-노래.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-08 장마를 좋아하는지, 오랫동안 좋아한 가수와 노래.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 08 Jul 2025 09:52:28 GMT</pubDate></item><item><title><![CDATA[2025-07-07 최근에 많이 웃은 적, 일과 삶의 균형을 맞추는 법]]></title><description><![CDATA[
"최근에 가장 많이 웃었던 적은? What did you laugh the most lately? " 매일 잘 웃는다. 웃음의 양을 측정하지 않기 때문에 언제 가장 많이 웃었는지는 모르겠다.
웃을 일이 없으면 개그 프로그램을 본다.
개그콘서트의 심곡파출소가 요새 내 유튜브에 자주 등장하는데 정말 뻘~하게 웃기다. :D
제가 보이세요~ 힣히힣힣ㅎ힣힣 일과 삶의 균형을 맞추기 위해 어떤 노력을 하고 있어? 그런 것은 없다. 그냥 일할 땐 일에만 엄청 집중한다. 그리고 쉴 때는 쉬는 데만 집중한다.
매일 동일한 싸이클은 아니지만, 그냥 한 주기가 보통보다 훨씬 길다고 생각하면 나쁠 것도 없다.
건강한 삶은 아니지만 오랜 습관이 되어서 고치기가 어렵다.
의도하고 만든 습관이 아니고 그냥 나에게 가장 자연스러운 업무나 공부 방식이다.
아마 내 가족이 생겨서 책임과 의무가 생기기 전까지는 계속 이런 습관이 유지될 거 같다.
오늘의 '생각을 자극'하는 글귀
"일을 더 많이 하는 것보다는 가치 있는 일을 잘 해내야 한다.
새앗ㄴ성을 과대 평가되었다. 가장 중요한 것은 결과물으 ㅣ양이 아니라 질이다. 어마어마한 생산량으로 사람들을 놀라게 할 수는 있지만 다른 사람에게 영향력을 미치려면 생산품의 질이 높아야 한다. 일을 더 많이 하는 것보다는 가치 있는 일을 잘 해내야 성공한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-07-최근에-많이-웃은-적,-일과-삶의-균형을-맞추는-법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-07 최근에 많이 웃은 적, 일과 삶의 균형을 맞추는 법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Jul 2025 11:09:06 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 24주차 회고]]></title><description><![CDATA[ 체력이 정말 빈곤하다는 게 실감된다.
목요일에 상가 둘러 본다고 강남 인근을 돌고 수원에 야구 보러 갔다가 새벽이 되서야 집에 도착했는데,
다음 날 하루 종일 침대에 누워서 사경을 헤맸다.
오래 돌아다니긴 했지만 확실히 20대 때와는 상황이 다르다.
운동을 해야 한다는 당연한 말로 귀결되겠지만 왜 이렇게 습관이 안 될까…
매 주 루틴의 정상화를 미루고 있는 암울한 모습.
SW 부트캠프:
더미데이터 만드는 데 시간을 참 많이도 썼다.
코드로 패턴을 만들어서 데이터를 생성하다 보니 RandomForest에 Logistic Regression 적용했을 때 데이터가 과적합되는 문제가 있었다. 노이즈 팩터도 적용하고 패턴 무시 등 이것저것 신경을 많이 썼다. 덕분에 꽤 현실적인 데이터를 추출하는 데 성공. 막상 끝나고 나니 왜 이렇게까지 했을까 싶긴 하지만 AUC Score가 1에 근접한 걸 보면 불편함을 참을 수가 없다. (불편하면 몸이 고생하는 게 맞다.) 그래도 한 번 고생해 봤으니 나중에 더미 생성할 일이 생겼을 땐 처음부터 설계를 잘할 수 있을 거 같은 예감.
생성한 데이터를 기반으로 여러 가지 분석 모델을 파이썬 서버에 탑재하고 있다.
일단 MVP가 목표이니 만큼 기본적인 통계 &amp; 간단한 분석 &amp; 간단한 이탈 학습 모델 등 쉽고 직관적인 통계, 분석만 적용할 예정.
Dash 서버를 오랜만에 띄웠는데 부트스트랩을 입힌 대시보드가 왜 이렇게 촌스러워 보이는지 모르겠다. (요새 BI 툴 GUI들이 워낙 잘 나오다 보니…)
<img alt="Pasted image 20250706174251.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250706174251.png" target="_self">
예전엔 이 정도면 예쁘다고 느꼈는데…
ETL도 마무리 됐고, 이제 나머지 다른 사람들 기능 구현되는 즉시 내 기능도 마무리하고, AWS 올릴 준비를 하면 될 듯… 사실 아직도 서버에 어떻게 올리고 CI/CD할 지 감이 안 오긴 한다.
뭐 닥쳐 보면 알겠지. 목표: 아이캔대학 강의 마무리, 거인의 노트, 에리히 프롬 독서 마무리, 거취 결정(여기 회고에다가 목표를 써 놓으니 그 다음 주 일요일 전까진 절대 다시 안 보게 된다. 앱에 명시를 하는 게 나을 지도??)
결과: 또 실패. 주간 목표를 앱의 TODO로 등록했다. 진짜 이젠 더 이상의 실패는 Naver, 거취 결정은 좀 애매하게 된 듯. 여러 가능성을 열어 두고 생각해 봐야 할 거 같다. 그래도 오랜만에 나들이를 해서 기분은 좋다. 힘들었지만… 개선할 점이 진짜 너무너무너무너무 많다. 사실 쉬지도 않고 너무 달리다가 축 처진 것도 있긴 한데, 부트캠프 끝나고 나서 다시 제대로 인간 개조를 해야 할 듯 (ㅋㅋ) 부동산 상가를 보면서 고려해야 할 여러 가지 새로운 요소에 대해 느끼게 됐다. 결국 사업은 관찰력과 통찰이라는 생각. 목표: 아이캔대학 강의 Follow-up
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-24주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 24주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 06 Jul 2025 08:58:53 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250706174251.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250706174251.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-07-06 타인과 관계를 유지하는데 꼭 필요한 것]]></title><description><![CDATA[
"이 세상에서 가장 잘생겼다고 (혹은 예쁘다고) 생각하는 사람은 누구인가? Who is the most charming (or beautiful) person you know?" 타인과 관계를 유지하는 데 꼭 필요한 건 뭐라고 생각해? 주기적인 연락. 내가 가장 못하는 것이기도 하다.
내 가장 친한 친구와의 관계를 통해 배운 것이 있는데 가치관이나 성격, 취향, 취미, 관심사 등 일반적으로 관계가 성립하기 위해 필수적으로 보이는 서로간의 연관 관계나 유사점들이 적다 할 지라도 함께 보낸 시간이 길어지면 정이 쌓이고 소중한 관계가 될 수 있다는 것이다.
실제로 완전 정반대 성향을 갖고 있던 나와 내 친구가 그렇게 친할 수 있었던 건 다른 게 아니라 서로 오랜 시간을 만났다는 단 하나의 이유다.
성향이 맞지 않아서 싸우기도 많이 했고, 우여곡절이 많았는데 결국 시간이 쌓이니 미운 정도 정이라고 서로의 가장 친한 친구가 됐다. 중간에 외국 생활도 하고 떨어져 지낸 시간도 긴 데, 주기적으로 꼭 연락을 하며 지냈다.
휴대폰이 없던 옛날이야 연락처를 몰라 연락을 못했다지만, 지금 시대에는 서로의 연락처를 몰라 연락을 못한다기 보다 그냥 어색한 관계가 되어 끊어지는 인연들이 많다.
그에 반해 주기적인 연락만 있다면 인연은 언제든 접합하기 쉬운 것이라 사소한 계기라도 생기거든 안부를 묻는 습관을 가지려고는 하는데,
참 그게 잘 안 되네!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-06-타인과-관계를-유지하는데-꼭-필요한-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-06 타인과 관계를 유지하는데 꼭 필요한 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 06 Jul 2025 07:13:54 GMT</pubDate></item><item><title><![CDATA[2025-07-05 나의 신조, 내가 겪은 가장 미스테리한 경험]]></title><description><![CDATA[
"나의 신조는 무엇인가? What is your motto?" 나의 신조라고 부를 만한 거창한 문장이 있는지는 조금 고민해 볼 문제이다.
이 부분에서 으레 게으른 완벽주의자들이 그렇듯이 ‘완벽하게 하지 못 할 것이기 때문에 시작하지 않는다.’ 라는 행동관이 나에게도 똑같이 적용되고 있음을 관찰할 수 있다.
신조를 정하면 그것을 어길 가능성이 생기기 때문에 부러 나의 신념을 명시하지 않는 게 내 속내이지 싶다.
법전 읊듯이 나만의 헌법과 도덕을 나열하는 것은 쉬운 일일 수도 있다.
그러나 언제나 어려운 것은 말한 것을 지키는 일이고, 그러한 명시된 문장이 고정된 반면에 상황은 언제나 다변하는 것이라 이 세상의 절대적인 정의와 윤리를 알지 못하는 이상 나는 언제나 변덕스러운 인간일 수 밖에 없다.
나는 나의 그러한 변덕을 싫어한다.
나의 변덕은 항시 위선을 떨게 마련이며, 이따금 관찰하는 나의 위선이 썩 맘에 들지 않았던 탓에 더 정의로운 길을 찾는 노력보다는, 덜 위선적인 길을 택했다. 단순히 이 길이 더 쉽고, 내 마음이 더 편하다는 이유로.
내가 군자의 관상을 갖지 못하는 까닭은 끝내 내 마음의 저항이 덜한 길을 택한 탓이다.
불의를 미워하는 이들을 존경하면서도 나 스스로는 그렇게 될 수 없음을 자인하고 타협한 내 모습이, 인생의 중턱을 넘어가는 내 삶의 태도이자 신조가 돼 버렸음을 부인할 수 없다.
그러나 세상에 어찌 영웅만이 있겠는가.
내가 소인배가 될 상인가?
아마 그럴 지도. 네가 겪은 가장 미스테리한 경험은 뭐야?
오늘의 '생각을 자극'하는 글귀
"퍼스널 브랜드를 만들 시간에 인간관계를 쌓는 편이 더 낫다.
퍼스널 브랜드를 구축하는 데 애쓰느니 그 시간을 인간관계에 투자하는 편이 낫다. 상품에 브랜드가 있다면 사람에게는 관계와 평판이 있따. 자신을 마케팅해서 만들어진 이미지는 진정성잉 없다. 진정성은 행동과 가치관을 일치시키는 것이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-05-나의-신조,-내가-겪은-가장-미스테리한-경험.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-05 나의 신조, 내가 겪은 가장 미스테리한 경험.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 05 Jul 2025 17:38:46 GMT</pubDate></item><item><title><![CDATA[2025-07-04 하루에 가장 오랜 시간을 지내는 곳]]></title><description><![CDATA[
__ 은(는) 재미있다. __ is fun. 하루에 가장 오랜 시간을 지내는 곳을 소개해 줘 대게 하루에 12시간 이상 컴퓨터 앞에 앉아 있다.
스트레칭을 자주 하는 편인데, 그럼에도 결리는 곳이 한 두 군데가 아니다.
PT가 끝났는데 아직도 운동에 재미를 붙이지는 못했다.
내 몸에 확실히 도움이 되는 게 느껴지지만 단순 반복 운동은 진짜 너무나 지루하다.
배드민턴 같은 운동은 재밌게 했었는데 뭔가 흥미를 느낄 만 한 운동을 찾는 게 시급할 거 같다.
나름 재밌는 운동이라는 클라이밍도 정 붙이는데 실패했는데,
또 어떤 선택지가 있을까 고민중.
오늘의 '생각을 자극'하는 글귀
얼마나 많은 자유를 가졌는가. 얼마나 많은 자유를 나눠주는가.
성공의 가장 중요한 척도는 지위나 권력, 또는 부가 아니라 얼마나 많은 자유를 가졌는가, 얼마나 많은 자유를 나눠주는가다. 시간을 어떻게 사용하고 아이디어를 어떻게 나눌지 선택하는 것이야말로 진정한 권리이다. 책임은 남들이 그 권리를 누리도록 자신의 자원을 써서 도와주는 것이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-04-하루에-가장-오랜-시간을-지내는-곳.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-04 하루에 가장 오랜 시간을 지내는 곳.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 04 Jul 2025 14:40:15 GMT</pubDate></item><item><title><![CDATA[2025-07-03 마지막으로 가 본 바다, 있는 그대로의 나를 보여줄 수 있는 사람]]></title><description><![CDATA[
"마지막으로 가본 바다는? What was the last beach you went to?" 작년에 친구들과 강릉 바다에 놀러 갔다.
물놀이를 하고, 저녁에는 회와 대게, 소주를 잔뜩 먹었다.
가고 싶은 맛집이 많았는데 시간과 체력, 위의 용량이 모자랐다.
다음 날 스쿠버 다이빙을 하면 좋았겠지만 시간이 넉넉치 않아서 대신 서핑을 했다.
온난화 덕분에 해파리가 극성이라 전신 수트를 입었는데도 피부가 꽤 따가웠는데,
그래도 바다에 왔다 간 추억은 남기려고 인내하면서 파도를 기다렸다.
다행히 파도는 꽤 좋았지만 체력이 문제였다.
패딩이 너무 느려서 파도의 속도를 맞추질 못해 연거푸 고배를 마셨고,
겨우 겨우 한 번 파도를 탄 걸 끝으로 작년 여름이 종료되었다.
그래도 독도네 꼬막비빔밥은 갔으니 강릉에 간 소기의 목적은 다 달성한 바와 진배 없다.
만족스러웠던 여름이었다. 있는 그대로의 너를 보여줄 수 있는 사람은 누구야? 스스로를 꾸미는 행동에 별로 익숙하지 않아서 그냥 남들이 보는 내 모습이 대부분 그대로의 나일 거 같다. 불편함을 싫어하기 때문에 내가 나로 있을 수 없는 장소에는 애초에 가질 않는다. 나를 싫어하는 사람에게 억지로 맞춰 줄 생각도 없고, 남을 이용하기 위한 계략 따위도 없다. 내 행동과 언어를 사람보다는 상황에 맞추는 편이라 날 불편하게 생각했던 사람도 꽤나 많을 거라 생각을 한다. 이것도 좋은 태도는 아닌데, 딱히 내가 스트레스 받으면서까지 추구해야 할 관계의 철학을 아직까지는 발견하지 못했다. 아마 야망이 좀 더 커진다면 나의 생각도 바뀌려나.
그래도 조금 더 편한 나를 보여줄 수 있는 사람이라면 내 친동생인 거 같다.
오늘의 '생각을 자극'하는 글귀
"기계적인 긍정의 말보다 이해의 말 한마디가 더 중요하다.
사람들은 무너졌을 때 '힘 내!'라는 말을 듣고 싶어 하지 않는다. 긍정적인 반응을 강요하는 것은 오히려 그들의 감정을 무시하는 처사다. 그들은 어떤 감정을 느껴야 한다는 말을 듣고 싶은 게 아니라 지금 느끼는 감정을 있는 그대로 알아주기를 바란다. 기계적인 긍정의 말보다 진심으로 이해해주는 말 한마디가 더 중요하다"
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-03-마지막으로-가-본-바다,-있는-그대로의-나를-보여줄-수-있는-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-03 마지막으로 가 본 바다, 있는 그대로의 나를 보여줄 수 있는 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 03 Jul 2025 02:27:11 GMT</pubDate></item><item><title><![CDATA[2025-07-02 오늘 취소한 일, 꿈을 꾸는지]]></title><description><![CDATA[
"오늘 취소한 일은 __ (이)다. Today you cancelled __." 저번 달에 마무리하기로 한 책의 독서를 자꾸 미루게 된다. 오늘도 좀 피곤해서 미룰 거 같다.
근데 진짜 피곤한 걸. 꿈은 자주 꾸는 편이야? 기억에 남는 꿈이 있어? " 꿈을 잘 꾸지는 않는데, 보통 중간에 깼다가 다시 잠들었을 때 꿈을 꾸는 경우가 있다.
꿈에 의미 부여를 잘 하지 않는 편이라 특별히 기억에 남는 꿈은 잘 모르겠다.
꿈이 나의 마음 상태를 반영한다는 믿음은 있다.
크게 걱정할 게 없는 나날들이라 이상하고 괴로운 꿈들을 꾸지 않는 것만으로도 다행이고,
참 감사하며 하루를 보낸다.
오늘도 모두 수고하셨습니다.
오늘의 '생각을 자극'하는 글귀
기업의 가치선언보다는 눈에 보이는 환경을 믿어라.
대개 기업의 가치선언문은 구성원들의 경험과는 상관없는 공수표에 불과하다. 겉치레에 불과한 화렴함에는 신경쓰지 마라. 실제 조직문화는 사람들의 행동 방식을 결정하고, 상벌의 기준이 된다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-02-오늘-취소한-일,-꿈을-꾸는지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-02 오늘 취소한 일, 꿈을 꾸는지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 02 Jul 2025 12:48:24 GMT</pubDate></item><item><title><![CDATA[[ML] 평가 - F1 Score와 ROC-AUC]]></title><description><![CDATA[F1 Score는 재현율과 정밀도에 밀접한 관련이 있음관련 내용을 먼저 살펴보자$$Precision = \frac{TP}{FP+TP}$$$$Recall = \frac{TP}{FN+TP} $$정밀도를 100%로 만드는 법확실한 기준이 되는 경우만 Positive로 예]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/ml-평가-f1-score와-roc-auc.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/ML 평가 - F1 Score와 ROC-AUC.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 02 Jul 2025 11:44:53 GMT</pubDate><enclosure url="https://velog.velcdn.com/images/gangjoo/post/400cbc1f-b71d-4f9a-8984-f728ffe964d1/image.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://velog.velcdn.com/images/gangjoo/post/400cbc1f-b71d-4f9a-8984-f728ffe964d1/image.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[index]]></title><description><![CDATA[📂 Folder tree
.├── 📁 700_Studies/
│ ├── 📁 2501-2507 한화BEYOND SW캠프/
│ │ ├── 📁 0_pre-course/
│ │ ├── 📘 1_학습노트/
│ │ ├── ✍️ 2_회고/
│ │ └── 📑 index 한화시스템과&nbsp;엔코아가 협력하여 운영하는 디지털 인재 양성&nbsp;프로그램 오프라인 집중형 부트캠프 형태로 운영 오프라인 교육과 맞춤형&nbsp;온라인 콘텐츠를 함께 제공 한화시스템 방산전자와 IT분야의 스마트 기술을 보유한 글로벌 토털 솔루션 기업 4차산업혁명시대의 혁신&nbsp;선도 엔코아 국내 데이터&nbsp;시장의 전문 기업 데이터 거버넌스, 시스템 구축, 빅데이터 분석&nbsp;등 전문 서비스&nbsp;제공 IT&nbsp;교육 전문기관으로서의 역량&nbsp;보유 엔코아 누적 교육생: 3,500명 취업 부트캠프 운영&nbsp;횟수: 110회 BEYOND SW캠프 1~8기&nbsp;한화시스템&nbsp;채용연계: 3명 체계적인 교육운영 시스템&nbsp;보유 취업지원 서비스 제공 오프라인 교육의 장점을 최대한&nbsp;활용 기업에서 신뢰할 수 있는 검증된 인재 양성에&nbsp;중점 ]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/index.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/index.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 02 Jul 2025 11:36:00 GMT</pubDate></item><item><title><![CDATA[앤드류 응의 머신러닝(7-1): 과적합 문제]]></title><description><![CDATA[온라인 강의 플랫폼 코세라의 창립자인 앤드류 응 (Andrew Ng) 교수는 인공지능 업계의 거장입니다. 그가 스탠퍼드 대학에서 머신 러닝 입문자에게 한 강의를 그대로 코세라 온라인 강의 (Coursera.org)에서 무료로 배울 수 있습니다. 이 강의는 머신러닝 입문자들의 필수코스입니다. 인공지능과 머신러닝을 혼자 공부하면서 자연스럽게 만나게 되는 강의입]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/앤드류-응의-머신러닝(7-1)-과적합-문제.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/앤드류 응의 머신러닝(7-1) 과적합 문제.md</guid><dc:creator><![CDATA[[[라인하트]]]]></dc:creator><pubDate>Wed, 02 Jul 2025 11:30:29 GMT</pubDate><enclosure url="http://t1.daumcdn.net/brunch/service/user/17Xk/image/F8qshn_Lwb7KFeleDZ-RGWssLVE.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://t1.daumcdn.net/brunch/service/user/17Xk/image/F8qshn_Lwb7KFeleDZ-RGWssLVE.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Hateoas]]></title><description><![CDATA[HATEOAS(Hypermedia as the Engine of Application State)는 REST 아키텍처의 한 가지 제약조건으로, 응답 내에 하이퍼미디어(링크 등)를 포함시켜 클라이언트의 상호작용 흐름을 서버가 주도하는 개념입니다 (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" target="_self">HATEOAS REST Services With Spring</a>) (<a data-tooltip-position="top" aria-label="https://bepoz-study-diary.tistory.com/197#:~:text=,cannot%20be%20a%20REST%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://bepoz-study-diary.tistory.com/197#:~:text=,cannot%20be%20a%20REST%20API" target="_self">[Spring] HATEOAS에 대해 — 파즈의 공부 일기</a>). 쉽게 말해, REST API의 응답에 관련 리소스나 수행 가능한 행동의 URI를 링크 형태로 포함시키는 것을 의미합니다. <br>HATEOAS를 적용한 API에서는 클라이언트가 서버와 상호작용을 할 때, 처음 진입점이 되는 URI와 하이퍼미디어 처리에 대한 기본 지식만으로 추가 정보를 발견하고 활용할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/HATEOAS#:~:text=With%20HATEOAS%2C%20a%20client%20interacts,a%20generic%20understanding%20of%20hypermedia" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/HATEOAS#:~:text=With%20HATEOAS%2C%20a%20client%20interacts,a%20generic%20understanding%20of%20hypermedia" target="_self">HATEOAS - Wikipedia</a>). 예를 들어 클라이언트는 초기 엔드포인트에서 받은 응답 속 링크들을 따라가면서, 별도의 API 명세서나 하드코딩 없이도 다음에 무엇을 할 수 있는지 동적으로 발견할 수 있죠. 이러한 특성 덕분에 클라이언트와 서버의 결합도를 낮추고, 서버 측 기능을 독립적으로 발전시킬 수 있다는 장점이 있습니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/HATEOAS#:~:text=By%20contrast%2C%20clients%20and%20servers,IDL" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/HATEOAS#:~:text=By%20contrast%2C%20clients%20and%20servers,IDL" target="_self">HATEOAS - Wikipedia</a>). 정리하면:
<br>자체 문서화 &amp; 발견 가능성: 응답에 포함된 링크만 따라가면 되므로, 클라이언트는 서비스와 상호작용하는 방법을 응답으로부터 자연스럽게 알게 됩니다 (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" target="_self">HATEOAS REST Services With Spring</a>). API 사용을 위한 별도의 문서를 덜 의존해도 되고, 링크를 통해 마치 웹 사이트를 탐색하듯 REST API를 탐색할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>).
<br>유연한 클라이언트: 서버가 응답에 제공하는 URI를 그대로 사용하므로, 서버 쪽 URI 구조나 경로가 변경되더라도 클라이언트 코드를 수정할 필요성이 줄어듭니다 (<a data-tooltip-position="top" aria-label="https://bepoz-study-diary.tistory.com/197#:~:text=1,%ED%99%95%EC%8B%A0%EC%9D%84%20%EA%B0%80%EC%A7%88%20%EC%88%98%20%EC%9E%88%EA%B2%8C%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://bepoz-study-diary.tistory.com/197#:~:text=1,%ED%99%95%EC%8B%A0%EC%9D%84%20%EA%B0%80%EC%A7%88%20%EC%88%98%20%EC%9E%88%EA%B2%8C%20%EB%90%9C%EB%8B%A4" target="_self">[Spring] HATEOAS에 대해 — 파즈의 공부 일기</a>). 즉, 하드코딩된 경로 대신 항상 최신 정보(링크)를 따라가기 때문에 API 변경에 유연하게 대응합니다.
상태 기반 상호작용: 리소스의 현재 상태에 따라 제공되는 링크가 달라지므로, 클라이언트는 현재 상황에서 수행 가능한 액션만 선택하게 됩니다. 이를 통해 잘못된 동작 시도(예를 들어 이미 판매 완료된 게시글을 다시 구매 요청하는 등)를 자연스럽게 예방하고, 클라이언트 로직은 단순해집니다.
<br>독립적인 확장성: 이러한 하이퍼미디어 원칙(HATEOAS)을 따르면 REST API의 진정한 특성을 살릴 수 있습니다. REST를 제안한 Roy Fielding도 하이퍼텍스트(링크 등)가 없으면 REST API라 부를 수 없다고 강조했죠 (<a data-tooltip-position="top" aria-label="https://bepoz-study-diary.tistory.com/197#:~:text=,cannot%20be%20a%20REST%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://bepoz-study-diary.tistory.com/197#:~:text=,cannot%20be%20a%20REST%20API" target="_self">[Spring] HATEOAS에 대해 — 파즈의 공부 일기</a>). 그만큼 HATEOAS는 장기적인 확장성과 유지보수성을 고려한 설계 원칙입니다.
이런 이유들로 HATEOAS는 REST API를 가장 성숙한 형태(Level 3)로 발전시키는 요소로 꼽힙니다 (Richardson Maturity Model의 3단계). 이제 간단한 예시를 통해 HATEOAS 응답이 어떻게 생겼는지 살펴보겠습니다.<br>HATEOAS가 적용된 JSON 형태의 REST API 응답은 일반적인 JSON 데이터에 _links 혹은 links 항목이 추가된 구조를 띱니다. 이 _links 객체(또는 배열)는 해당 리소스와 관련된 다른 API 경로들을 URI 링크로 담고 있으며, 각 링크는 보통 rel(relation, 링크 관계 명)과 href(하이퍼링크 URL)로 구성됩니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@cyseok123/Spring-RESTful-API-HATEOAS#:~:text=,list%22%2C%20%22href%22%3A%20%22http%3A%2F%2Flocalhost%3A8080%2Fmembers%2Fabcdefghifkey%20%7D" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@cyseok123/Spring-RESTful-API-HATEOAS#:~:text=,list%22%2C%20%22href%22%3A%20%22http%3A%2F%2Flocalhost%3A8080%2Fmembers%2Fabcdefghifkey%20%7D" target="_self">[Spring] RESTful API 구현하기-(2) (HATEOAS 에 대해 + Spring 적용)</a>) (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=,perform%20the%20action%20described%20in%C2%A0rel" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=,perform%20the%20action%20described%20in%C2%A0rel" target="_self">HATEOAS REST Services With Spring</a>). 예를 들어, 당근마켓의 게시글 조회 API 응답을 가상의 예시로 만들어보면 다음과 같을 것입니다:{ "id": 1, "title": "사용한 자전거 판매합니다", "price": 50000, "location": "서울시 동작구", "status": "available", "_links": { "self": { "href": "http://localhost:8080/api/posts/1" }, "seller": { "href": "http://localhost:8080/api/users/42" }, "posts": { "href": "http://localhost:8080/api/posts" } }
}
위 JSON에서 각 필드는 게시글 리소스의 속성을 나타내고, _links 객체 안에 관련 자원의 링크들이 포함되어 있습니다. 예를 들어 self 링크는 해당 게시글 자체를 가리키는 URI이고, seller 링크는 이 게시글을 올린 판매자의 프로필 정보를 조회할 수 있는 URI입니다. 또한 posts 링크는 전체 게시글 목록(API의 컬렉션 리소스)으로 이동할 수 있는 URI를 가리킵니다. <br>실제 Spring HATEOAS를 사용하면 기본적으로 HAL(Hypertext Application Language) 형식의 JSON이 만들어지며, 위처럼 _links 아래에 href가 포함된 구조로 표현됩니다. 간단한 Spring 예제를 보면 "content"라는 데이터와 함께 _links에 self 링크가 포함된 출력 결과를 확인할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://spring.io/guides/gs/rest-hateoas#:~:text=%7B%20,%7D%20%7D" rel="noopener nofollow" class="external-link is-unresolved" href="https://spring.io/guides/gs/rest-hateoas#:~:text=%7B%20,%7D%20%7D" target="_self">Getting Started | Building a Hypermedia-Driven RESTful Web Service</a>):{ "content": "Hello, World!", "_links": { "self": { "href": "http://localhost:8080/greeting?name=World" } }
}
<br>이처럼 JSON 응답 내부에 링크 정보를 포함함으로써, 클라이언트는 이 응답만 가지고도 다음에 수행할 수 있는 동작이나 관련 자원에 쉽게 접근할 수 있게 됩니다 (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>).이제 Spring 프레임워크에서 HATEOAS를 구현하기 위한 환경을 준비해보겠습니다. 다행히 Spring Boot에서는 HATEOAS 지원을 비교적 손쉽게 활성화할 수 있도록 전용 스타터를 제공합니다. <br>1) 의존성 추가: Spring Boot 프로젝트의 빌드 설정에 Spring HATEOAS 라이브러리를 추가해야 합니다. Gradle을 사용한다면 build.gradle에 다음과 같은 의존성을 포함하고, Maven을 사용한다면 pom.xml에 대응되는 &lt;dependency&gt;를 추가하면 됩니다 (<a data-tooltip-position="top" aria-label="https://bepoz-study-diary.tistory.com/197#:~:text=%60implementation%20%27org.springframework.boot%3Aspring,%EC%A0%84%EC%B2%B4%EC%9D%98%20%EC%BD%94%EB%93%9C%EB%A5%BC%20%EA%B0%80%EC%A7%80%EA%B3%A0%20%EC%84%A4%EB%AA%85%ED%95%98%EC%9E%90%EB%A9%B4" rel="noopener nofollow" class="external-link is-unresolved" href="https://bepoz-study-diary.tistory.com/197#:~:text=%60implementation%20%27org.springframework.boot%3Aspring,%EC%A0%84%EC%B2%B4%EC%9D%98%20%EC%BD%94%EB%93%9C%EB%A5%BC%20%EA%B0%80%EC%A7%80%EA%B3%A0%20%EC%84%A4%EB%AA%85%ED%95%98%EC%9E%90%EB%A9%B4" target="_self">[Spring] HATEOAS에 대해 — 파즈의 공부 일기</a>):
Gradle 예: implementation 'org.springframework.boot:spring-boot-starter-hateoas' Maven 예: &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-hateoas&lt;/artifactId&gt; &lt;version&gt;(사용중인 Spring Boot 버전에 맞는 최신 버전)&lt;/version&gt;
&lt;/dependency&gt; 의존성만 추가하면 스프링 부트가 자동 구성(auto-configuration)을 통해 필요한 빈(bean)을 등록하고 HATEOAS 설정을 활성화합니다 Spring Boot. 별도의 설정 클래스를 만들거나 @EnableHypermediaSupport 등을 선언할 필요 없이, 기본 JSON 응답을 HAL 포맷(application/hal+json 콘텐츠 타입)으로 처리해주므로 바로 사용할 수 있습니다. 2) 기타 설정: 기본 동작으로 클라이언트가 Accept: application/json로 요청하면 HAL 형식의 JSON을 돌려주는데, 필요에 따라 이 동작을 비활성화하거나 커스터마이징할 수도 있습니다. 하지만 초심자 단계에서는 기본 설정대로 사용해도 무방합니다. 이제 실제 코드를 작성하여 HATEOAS를 적용해보겠습니다.이 절에서는 간단한 도메인 모델을 정의하고, 그것을 조회하는 REST API에 HATEOAS를 적용해보겠습니다. 당근마켓의 "중고 거래 게시글"을 예제로, 게시글 조회(GET) API 응답에 관련 링크들을 담도록 만들어볼 것입니다.우선 예제를 위한 기본 도메인 클래스를 정의해봅시다. 게시글(Post) 엔티티와 사용자(User) 엔티티가 있다고 가정하고, 게시글에는 ID, 제목, 내용, 가격, 판매자 정보 등이 포함됩니다. (실제로는 JPA 엔티티 등이겠지만, 예제에서는 간단히 POJO로 가정합니다.)@Data // Lombok 어노테이션으로 getter/setter 생성 가정
public class Post /* extends RepresentationModel&lt;Post&gt; // (옵션) */ { private Long id; private String title; private String content; private int price; private String location; private String status; private Long sellerId; // 연관된 User의 ID // ... 생성자 등 생략
} Note: 위 Post 클래스는 Spring HATEOAS의 RepresentationModel를 상속받을 수도 있습니다. 그렇게 하면 Post 자체가 링크를 담는 컨테이너 역할을 할 수 있어 편리하지만, 여기서는 이해를 돕기 위해 별도로 링크 추가 객체를 사용해보겠습니다.
<br>만약 Post 클래스가 RepresentationModel를 상속한다면, Spring HATEOAS에서 제공하는 add(Link link) 메서드를 통해 도메인 객체 자체에 링크를 추가할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://spring.io/guides/gs/rest-hateoas#:~:text=Greeting%20greeting%20%3D%20new%20Greeting%28String,withSelfRel" rel="noopener nofollow" class="external-link is-unresolved" href="https://spring.io/guides/gs/rest-hateoas#:~:text=Greeting%20greeting%20%3D%20new%20Greeting%28String,withSelfRel" target="_self">Getting Started | Building a Hypermedia-Driven RESTful Web Service</a>). 그러나 이번 예제에서는 Spring HATEOAS의 EntityModel을 사용하여 도메인 객체를 감싸고 링크를 추가하는 방법을 사용하겠습니다.이제 Spring MVC의 컨트롤러를 작성하여 게시글 조회 API를 구현하고, HATEOAS 링크를 응답에 포함시켜보겠습니다. Spring HATEOAS에서는 EntityModel&lt;T&gt; 및 WebMvcLinkBuilder 등을 이용해 비교적 쉽게 링크를 추가할 수 있습니다.@RestController
@RequestMapping("/api/posts")
public class PostController { // 예제용 데이터 저장소 (실제로는 Service나 Repository를 통해 가져옴) private final Map&lt;Long, Post&gt; fakePostRepository = new HashMap&lt;&gt;(); public PostController() { // 샘플 데이터 초기화 Post sample = new Post(1L, "사용한 자전거 판매합니다", "구매 후 1년 사용", 50000, "서울시 동작구", "available", 42L); fakePostRepository.put(1L, sample); } // 게시글 단건 조회 API - HATEOAS 적용 @GetMapping("/{id}") public EntityModel&lt;Post&gt; getPostById(@PathVariable Long id) { Post post = fakePostRepository.get(id); if (post == null) { throw new ResponseStatusException(HttpStatus.NOT_FOUND); } // EntityModel로 Post 객체를 감싸고 링크 추가 EntityModel&lt;Post&gt; postResource = EntityModel.of(post); // self 링크 추가 (자신에 대한 링크) postResource.add( WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(PostController.class).getPostById(id)) .withSelfRel() ); // '모든 게시글 목록'에 대한 링크 추가 postResource.add( WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(PostController.class).getAllPosts()) .withRel("posts") ); // 게시글의 seller(사용자) 정보에 대한 링크 추가 postResource.add( WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class).getUserById(post.getSellerId())) .withRel("seller") ); return postResource; } // (선택) 게시글 목록 조회 API - 컬렉션에 HATEOAS 적용 @GetMapping public CollectionModel&lt;EntityModel&lt;Post&gt;&gt; getAllPosts() { List&lt;EntityModel&lt;Post&gt;&gt; postResources = fakePostRepository.values().stream() .map(post -&gt; EntityModel.of(post).add( WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(PostController.class).getPostById(post.getId())) .withRel("post-detail") ) ).collect(Collectors.toList()); return CollectionModel.of(postResources, WebMvcLinkBuilder.linkTo(PostController.class).withSelfRel()); }
}
위 코드에서 눈여겨볼 부분들을 짚어보겠습니다: EntityModel과 CollectionModel: EntityModel&lt;Post&gt;는 하나의 Post 객체를 감싸고 _links 등을 포함할 수 있는 컨테이너 객체입니다. 마찬가지로 CollectionModel&lt;EntityModel&lt;Post&gt;&gt;는 여러개의 EntityModel 목록에 추가로 링크를 덧붙일 수 있는 컬렉션용 모델입니다. Spring HATEOAS에서는 이러한 모델들을 활용해 데이터와 링크를 함께 묶어 전송합니다. <br>
링크 추가: WebMvcLinkBuilder.linkTo(...)와 methodOn(...)을 사용하여 현재 컨트롤러의 메서드에 대한 링크를 생성하고, withSelfRel() 또는 withRel("rel이름")으로 링크의 관계명을 지정했습니다. 예를 들어 withSelfRel()은 _links.self에 해당하는 링크로, 해당 리소스 자체를 가리킵니다. 다른 링크들은 withRel("posts"), withRel("seller")처럼 명시한 관계 이름으로 _links에 들어갑니다 (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=,perform%20the%20action%20described%20in%C2%A0rel" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=,perform%20the%20action%20described%20in%C2%A0rel" target="_self">HATEOAS REST Services With Spring</a>). (링크 관계명은 가능한 한 해당 액션이나 자원의 의미를 직관적으로 드러내도록 짓는 것이 좋습니다.) 모든 게시글 목록 링크: 개별 게시글 응답에 모든 게시글 목록을 가리키는 posts 링크를 넣어준 이유는, 사용자가 현재 게시글 말고도 다른 게시글들을 탐색할 수 있도록 하기 위함입니다. 이러한 상위/컬렉션 리소스에 대한 링크 제공도 REST API의 탐색성을 높이는 전략입니다. <br>
연관 자원 링크: seller 링크는 게시글의 작성자인 사용자 정보를 얻을 수 있는 엔드포인트를 가리킵니다. 이처럼 한 리소스에서 관련된 다른 리소스로 이동할 수 있는 링크를 제공하면, 클라이언트는 필요한 추가 정보를 얻기 위해 별도의 규칙을 암기할 필요 없이 응답에 주어진 URI를 따라가면 됩니다 (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" target="_self">HATEOAS REST Services With Spring</a>). <br>이 컨트롤러를 통해 /api/posts/1에 GET 요청을 보내면 앞서 예시로 보여준 JSON과 유사한 구조의 응답이 반환됩니다. Spring이 EntityModel&lt;Post&gt;를 HAL 표준에 맞게 JSON으로 변환하면서 _links 섹션을 자동으로 만들어주기 때문입니다. 만약 여러 게시글의 컬렉션을 요청했다면 CollectionModel을 사용하여 각 게시글마다 post-detail 링크(개별 조회 링크)를 달아주고, 전체 리스트 자체에 대한 self 링크를 포함한 JSON 배열 응답이 만들어질 것입니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@cyseok123/Spring-RESTful-API-HATEOAS#:~:text=%22links%22%3A%20%5B%20%7B%20%22rel%22%3A%20%22post,%7D" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@cyseok123/Spring-RESTful-API-HATEOAS#:~:text=%22links%22%3A%20%5B%20%7B%20%22rel%22%3A%20%22post,%7D" target="_self">[Spring] RESTful API 구현하기-(2) (HATEOAS 에 대해 + Spring 적용)</a>) (<a data-tooltip-position="top" aria-label="https://velog.io/@cyseok123/Spring-RESTful-API-HATEOAS#:~:text=" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@cyseok123/Spring-RESTful-API-HATEOAS#:~:text=" target="_self">[Spring] RESTful API 구현하기-(2) (HATEOAS 에 대해 + Spring 적용)</a>). <br>이제 이렇게 HATEOAS가 적용된 응답을 받은 클라이언트 입장에서, 해당 링크들을 어떻게 활용할 수 있는지 생각해보겠습니다. 핵심은 클라이언트가 추가적인 엔드포인트를 미리 알고 있지 않아도, 응답에 포함된 링크를 따라가면서 필요한 액션을 수행할 수 있다는 점입니다 (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" target="_self">HATEOAS REST Services With Spring</a>).예를 들어, 클라이언트(당근마켓 앱 또는 웹)가 /api/posts/1을 조회하여 아래와 같은 응답을 받았다고 가정해 봅시다.{ "id": 1, "title": "사용한 자전거 판매합니다", ... 생략 ... "_links": { "self": { "href": "http://localhost:8080/api/posts/1" }, "seller": { "href": "http://localhost:8080/api/users/42" }, "posts": { "href": "http://localhost:8080/api/posts" } }
}
클라이언트 애플리케이션은 이 응답을 파싱하여 _links 부분을 확인할 수 있습니다. 그리고 다음과 같이 동작합니다: 현재 게시글 재조회 또는 새로고침: _links.self.href (/api/posts/1)를 사용하면 현재 보고 있는 게시글을 다시 가져오거나 최신 상태를 확인할 수 있습니다. (self 링크는 주로 리소스의 최신 상태 확인에 사용됩니다.) <br>
판매자 정보 조회: 사용자 프로필 페이지가 필요하다면 _links.seller.href (/api/users/42)를 호출하여 판매자(User 42번)의 상세 정보를 얻어올 수 있습니다. 클라이언트는 애초에 사용자 정보 API의 경로를 몰랐더라도, 이 링크를 통해 바로 해당 자원에 접근할 수 있게 됩니다 (<a data-tooltip-position="top" aria-label="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://dzone.com/articles/hypermedia-driven-rest-services-with-spring-hateoa#:~:text=Hypermedia%20as%20the%20Engine%20of,further%20interactions%20with%20the%20API" target="_self">HATEOAS REST Services With Spring</a>). 다른 게시글 목록 이동: _links.posts.href (/api/posts)를 따라 호출하면 전체 중고거래 게시글 목록을 받아올 수 있습니다. 이를 통해 사용자는 현재 게시글에서 다시 목록 화면으로 자연스럽게 이동하거나, 다른 아이템들을 탐색할 수 있습니다. <br>요컨대, 클라이언트는 링크를 "클릭"하듯 따라가기만 하면 됩니다. 마치 웹 브라우저에서 하이퍼링크를 클릭하여 다음 페이지로 이동하듯이, REST API 클라이언트도 이전 응답의 하이퍼미디어 정보를 활용해 API를 탐색합니다 (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>). 이때 클라이언트 쪽에서는 URI 경로를 하드코딩하거나 별도의 규칙을 적용할 필요 없이, 서버가 제시한 길을 그대로 따라감으로써 상호작용이 이루어집니다 (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>).<br>실제로 HATEOAS를 잘 활용하면 클라이언트 코드가 단순해지는 효과를 얻습니다. 예를 들어 잔액에 따라 가능한 링크가 바뀌는 은행 계좌 API나, 상태에 따라 조작 가능한 링크가 달라지는 주문 API 등을 생각해보세요. 클라이언트는 "잔액이 음수이면 입금만 가능" 같은 비즈니스 로직을 미리 알 필요 없이, 응답에 'deposit' 링크만 오기 때문에 입금 액션만 노출하면 됩니다 (<a data-tooltip-position="top" aria-label="https://medium.com/spring-framework/hateoas-design-principle-giving-power-to-your-application-backend-cb1eb5ef2976#:~:text=So%20here%20now%20the%20total,money%20in%20the%20bank%20account" rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/spring-framework/hateoas-design-principle-giving-power-to-your-application-backend-cb1eb5ef2976#:~:text=So%20here%20now%20the%20total,money%20in%20the%20bank%20account" target="_self">HATEOAS Design Principle. Giving Power To Your Application Backend!!! | by Abhijeet Chopra | Developer’s World | Medium</a>) (<a data-tooltip-position="top" aria-label="https://medium.com/spring-framework/hateoas-design-principle-giving-power-to-your-application-backend-cb1eb5ef2976#:~:text=if%20the%20amount%20is%20negative,the%20other%20options%20except%20deposit" rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/spring-framework/hateoas-design-principle-giving-power-to-your-application-backend-cb1eb5ef2976#:~:text=if%20the%20amount%20is%20negative,the%20other%20options%20except%20deposit" target="_self">HATEOAS Design Principle. Giving Power To Your Application Backend!!! | by Abhijeet Chopra | Developer’s World | Medium</a>). 나머지 행동들은 링크가 없으므로 선택지에서 자연스럽게 제외되죠. 결국 애플리케이션의 상태 전이는 하이퍼미디어에 의해 좌우되고 (이것이 HATEOAS의 이름 뜻이기도 합니다), 클라이언트는 그때그때 주어진 링크를 통해 다음 행동을 결정하면 됩니다.<br> (<a data-tooltip-position="top" aria-label="" rel="noopener nofollow" class="external-link is-unresolved" href="" target="_self">image</a>) 클라이언트가 HATEOAS 링크를 따라가는 요청-응답 흐름. 첫 번째 요청으로 게시글을 조회하면 응답에 자신의 self 링크와 연관 자원 링크(seller, posts 등)가 포함된다. 클라이언트는 제공된 URI를 사용해 추가 요청을 보내며, 각 응답에서 새로운 링크를 얻어 다음 단계로 나아간다.위 다이어그램은 클라이언트가 HATEOAS 응답을 이용해 서버와 상호작용을 이어가는 흐름을 나타낸 것입니다. 처음에 GET /api/posts/1 요청에 대한 응답으로 게시글 정보와 함께 여러 링크가 반환되고(파란색 화살표로 응답 표시), 클라이언트는 그 중 필요한 링크(예: seller 정보를 위한 /api/users/42)를 선택하여 다음 요청을 보내고 있습니다. 이처럼 응답이 곧 다음 행동의 안내서가 되어, 클라이언트와 서버가 동적으로 대화할 수 있게 됩니다.이번 글에서는 HATEOAS의 개념과 Spring에서의 구현 방법을 살펴보았습니다. 정리하자면 다음과 같습니다:
<br>
HATEOAS는 REST API 응답 내에 하이퍼미디어 링크를 포함시켜, 클라이언트가 해당 링크들을 따라가면서 애플리케이션 상태를 전이하도록 하는 원칙입니다. 이를 통해 서비스의 자체 발견성이 높아지고, 클라이언트-서버 간 결합도가 낮아져 변화에 유연해집니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/HATEOAS#:~:text=By%20contrast%2C%20clients%20and%20servers,IDL" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/HATEOAS#:~:text=By%20contrast%2C%20clients%20and%20servers,IDL" target="_self">HATEOAS - Wikipedia</a>). Spring Boot에서는 spring-boot-starter-hateoas 의존성 추가만으로 HATEOAS를 사용할 수 있고, EntityModel, Link, WebMvcLinkBuilder 등을 활용하여 링크가 포함된 응답을 쉽게 구성할 수 있습니다. <br>
예제로 구현한 중고거래 게시글 API에서는 개별 게시글 응답에 self, 연관 사용자, 전체 목록에 대한 링크를 포함하였고, 클라이언트는 이를 통해 별도 문서 없이도 다음 액션으로 자연스럽게 이동할 수 있음을 확인했습니다 (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>). HATEOAS를 적용한 API는 초기 진입점 외에는 클라이언트가 알고 있는 고정 URL이 거의 없이 동작하므로, REST API의 이상적인 특성에 부합합니다 (사실 Roy Fielding의 REST 논문에서도 HATEOAS는 REST의 필수 요소로 언급됩니다). REST API에 HATEOAS를 도입하면 초반에는 구현과 응답구조가 조금 복잡해질 수 있지만, API의 확장성, 유지보수성, 클라이언트 개발 편의성 측면에서 많은 이점을 제공합니다. 작은 서비스부터 적용하기보다는, API 클라이언트가 여러 종류로 다양하거나 장기적으로 확장될 여지가 있는 서비스라면 HATEOAS 설계를 도입해보는 것을 권장합니다.
<br>Roy Fielding의 블로그: REST APIs must be hypertext-driven – REST 창시자인 Roy Fielding이 2008년에 쓴 글로, 왜 하이퍼미디어가 REST의 필수 요건인지 설명합니다 (<a data-tooltip-position="top" aria-label="https://bepoz-study-diary.tistory.com/197#:~:text=,cannot%20be%20a%20REST%20API" rel="noopener nofollow" class="external-link is-unresolved" href="https://bepoz-study-diary.tistory.com/197#:~:text=,cannot%20be%20a%20REST%20API" target="_self">[Spring] HATEOAS에 대해 — 파즈의 공부 일기</a>). <br>Spring 공식 가이드: Building a Hypermedia-Driven RESTful Web Service – Spring에서 HATEOAS를 적용하는 방법을 다룬 가이드로, 간단한 예제를 통해 RepresentationModel 사용, 링크 추가 등을 소개합니다 (<a data-tooltip-position="top" aria-label="https://spring.io/guides/gs/rest-hateoas#:~:text=%40RequestMapping%28,String%20name%29" rel="noopener nofollow" class="external-link is-unresolved" href="https://spring.io/guides/gs/rest-hateoas#:~:text=%40RequestMapping%28,String%20name%29" target="_self">Getting Started | Building a Hypermedia-Driven RESTful Web Service</a>) (<a data-tooltip-position="top" aria-label="https://spring.io/guides/gs/rest-hateoas#:~:text=Greeting%20greeting%20%3D%20new%20Greeting%28String,withSelfRel" rel="noopener nofollow" class="external-link is-unresolved" href="https://spring.io/guides/gs/rest-hateoas#:~:text=Greeting%20greeting%20%3D%20new%20Greeting%28String,withSelfRel" target="_self">Getting Started | Building a Hypermedia-Driven RESTful Web Service</a>). <br>Wikipedia: HATEOAS (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/HATEOAS#:~:text=With%20HATEOAS%2C%20a%20client%20interacts,a%20generic%20understanding%20of%20hypermedia" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/HATEOAS#:~:text=With%20HATEOAS%2C%20a%20client%20interacts,a%20generic%20understanding%20of%20hypermedia" target="_self">HATEOAS - Wikipedia</a>) – HATEOAS의 개념과 예시, 원칙에 대해 정리된 백과사전 항목입니다. <br>3ap Engineering Blog: Using HATEOAS with REST APIs – HATEOAS의 장단점과 실제 사례(API 응답 예시 등)를 자세히 다룬 블로그 포스트 (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=The%20,service%20is%20driven%20by%20hypertext" target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>) (<a data-tooltip-position="top" aria-label="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=%7B%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://engineering.3ap.ch/post/using-hateoas-with-rest/#:~:text=%7B%20," target="_self">Using HATEOAS with REST APIs - 3ap Engineering Blog</a>). Spring Docs: Spring HATEOAS Reference – Spring HATEOAS에 대한 공식 레퍼런스로, 다양한 활용법과 고급 설정에 대한 정보를 얻을 수 있습니다. (Spring Boot 자동 구성, HAL 포맷 등 언급) Spring Boot Spring Boot.
]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/hateoas.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/Hateoas.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Jun 2025 08:58:59 GMT</pubDate></item><item><title><![CDATA[Implementing CQRS with Spring Boot and Java: A Real-World Approach]]></title><description><![CDATA[Command Query Responsibility Segregation (CQRS) is a powerful pattern in software architecture that separates read (query) and write (command) operations into distinct models. This pattern improves…]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/implementing-cqrs-with-spring-boot-and-java-a-real-world-approach.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/Implementing CQRS with Spring Boot and Java A Real-World Approach.md</guid><dc:creator><![CDATA[[[Anil Goyal]]]]></dc:creator><pubDate>Wed, 18 Jun 2025 08:58:20 GMT</pubDate><enclosure url="https://miro.medium.com/v2/resize:fit:640/format:webp/1*l2EnJHWzITvj9KNAuzA8yw.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*l2EnJHWzITvj9KNAuzA8yw.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-04-23]]></title><description><![CDATA[A: Jim was pretty psyched about his job interview.
B: He was prepared to the max. I wonder how it went.
A: His gut feeling is that 정말 잘했다!
B: I hope so. He’s been job hunting for ages.
A: 짐이 취업면접에 대해 들떠있던데.
B: 최대한으로 준비했잖아. 어떻게 됐는지 궁금한걸.
A: 짐은 it's two-thumbs-up라는 직감이 든다는데.
B: 그랬으면 좋겠어. 얼마나 오랫동안 일자리를 구했는데.
[Additional expressions]
Jim was pretty psyched about
– Jim was very excited over / Jim was feeling super pumped up regarding
his job interview
– the interview he had to get a new job / the interview he had lined up to find work
He was prepared to the max.
– He was extremely well prepared. / His preparation was very intense.
I wonder how it went.
– I’m curious about the result. / I wish I knew if it went well or not.
His gut feeling is that
– He has no solid proof, but his instincts are that / He has a sense that
it’s two-thumbs-up
– it went well / he was successful / he will get the job
I hope so.
– That would be great. / For his sake, I hope that’s the case.
He’s been job hunting for ages.
– He’s been on the trail of a good job for quite a long time.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-23.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-23.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 08 May 2025 08:36:08 GMT</pubDate></item><item><title><![CDATA[2025-04-21 정말 제대로 공을 세웠네]]></title><description><![CDATA[A: The police made a significant arrest of some local baddies.
B: I read that online. 정말 제대로 공을 세웠네.
A: It was all part of an ongoing sting operation.
B: It’s nice to see our tax money at work.
A: 경찰이 그 지역 악당들을 대거 체포했대.
B: 나도 그 기사 인터넷에서 읽었어. It’s a real feather in their cap.
A: 아직 진행중인 함정수사 작전의 일부였대.
B: 우리가 낸 세금이 제대로 쓰여지고 있는 걸 보니 기분이 좋은걸.
[Additional expressions]
The police made a significant arrest of
– Legal authorities were able to lock up / The cops busted
some local baddies
– a few neighborhood bad guys / some ruffians from this area
I read that online.
– I saw that on the Internet. / I was reading up on that through the Net.
It’s a real feather in their cap.
– The police can be proud of that. / That’s something they can be proud of.
It was all part of an ongoing sting operation.
– It was the result of an extended secret investigation.
It’s nice to see
– I’m happy to see / It’s a good sign of / I feel better when I hear about
*our tax money at work
– the government doing good work / authorities doing something beneficial]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-21-정말-제대로-공을-세웠네.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-21 정말 제대로 공을 세웠네.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 08 May 2025 08:30:56 GMT</pubDate></item><item><title><![CDATA[Spring Cloud route to webscoket service causes "ResponseFacade cannot be cast to class HttpServerResponse"]]></title><description><![CDATA[I have this section in application.yml cloud: gateway: routes: - id: websocket uri: ws://localhost:53110 predicates: - Path=/ws/** - id:]]></description><link>https://64etuor.github.io/600_tech-stack/javascript/spring-cloud-route-to-websocket-service-causes-responsefacade-cannot-be-cast-to-class-httpserverresponse.html</link><guid isPermaLink="false">600_Tech Stack/Javascript/Spring Cloud route to websocket service causes ResponseFacade cannot be cast to class HttpServerResponse.md</guid><dc:creator><![CDATA[[[Stack Overflow]]]]></dc:creator><pubDate>Mon, 05 May 2025 06:18:24 GMT</pubDate></item><item><title><![CDATA[Vue Skeleton List UX 개선 1번 시도]]></title><description><![CDATA[&lt;script setup&gt; import ProductList from "@/features/product/components/ProductList.vue"; import {onMounted, reactive, ref} from "vue"; import {getProducts} from "@/features/product/api.js"; import SkeletonList from "@/components/common/SkeletonList.vue"; import PagingBar from "@/components/common/PagingBar.vue"; import SearchBar from "@/components/common/SearchBar.vue"; const products = ref([]); const pagination = reactive({ currentPage : 1, totalPages : 1, totalItems : 0 }); const searchParams = reactive({ categoryCode : null, productName : '' }); const isLoading = ref(true); const showSkeleton = ref(false); // 스켈레톤 리스트 show state Boolean값 추가 const fetchProducts = async (page = 1) =&gt; { isLoading.value = true; showSkeleton.value = false; const loadingTimer = setTimeout(()=&gt; { showSkeleton.value = true; }, 200); try { // api 호출 (axios lib) const { data : wrapper } = await getProducts({ page, categoryCode : searchParams.categoryCode, productName : searchParams.productName }); const respData = wrapper.data; products.value = respData.products || []; // Object.assign(target, ...sources) : source의 속성을 모두 꺼내 target에 덮어쓰기 Object.assign(pagination, respData.pagination ?? {}); } catch(e) { console.log('상품 목록 로드 실패', e); } finally { clearTimeout(loadingTimer); isLoading.value = false; showSkeleton.value = false; } } // 검색 이벤트 발생 시 수행할 함수 const onSearch = params =&gt; { Object.assign(searchParams, params); pagination.currentPage = 1; fetchProducts(); } onMounted(() =&gt; fetchProducts()); &lt;/script&gt; &lt;template&gt; &lt;SearchBar @search="onSearch"/&gt; &lt;!-- ProductList가 조회 되지 않았을 때 보여줄 뼈대 컴포넌트 --&gt; &lt;SkeletonList v-if="isLoading &amp;&amp; showSkeleton"/&gt; &lt;!-- ProdctList가 조회 되었을 때 보여줄 컴포넌트 --&gt; &lt;ProductList v-else :products="products"/&gt; &lt;PagingBar v-bind="pagination" @page-changed="fetchProducts" /&gt; &lt;/template&gt; &lt;style scoped&gt; &lt;/style&gt;
&lt;script setup&gt; import {onMounted, ref} from "vue"; import ProductDetail from "@/features/product/components/ProductDetail.vue"; import {deleteProduct, getProduct} from "@/features/product/api.js"; import {useRoute, useRouter} from "vue-router"; const route = useRoute(); const router = useRouter(); const isLoading = ref(true); const error = ref(null); const productId = ref(route.params.id) const product = ref(null); const confirmVisible = ref(false); const fetchProduct = async () =&gt; { isLoading.value = true; error.value = null; try { const resp = await getProduct(productId.value) product.value = resp.data.data.product; isLoading.value = false; } catch (e) { console.log('상품 상세 조회 실패', e); error.value = '상품 정보를 불러오지 못했습니다'; } } // 상품 수정 페이지로 이동 const goToEditPage = () =&gt; { router.push(`/products/${productId.value}/edit`) } // 삭제 확인 컨펌 =&gt; 모달 띄우기 const confirmDelete = () =&gt; confirmVisible.value = true; const cancelDelete = () =&gt; confirmVisible.value = false; const handleDelete = async () =&gt; { try { await deleteProduct(productId.value); console.log('상품이 삭제되었습니다.'); // 삭제 완료 후 상품 목록으로 라우팅 (뒤로가기 x) await router.replace(`/products`); } catch(e) { console.log('상품 삭제 실패', e); } } onMounted(fetchProduct); &lt;/script&gt; &lt;template&gt; &lt;div class="container mt-4"&gt; &lt;div class="d-flex justify-content-end mb-3"&gt; &lt;button @click="goToEditPage" class="btn btn-warning me-2" :disabled="isLoading"&gt; 상품 수정 &lt;/button&gt; &lt;button @click="confirmDelete" class="btn btn-danger" :disabled="isLoading"&gt; 상품 삭제 &lt;/button&gt; &lt;/div&gt; &lt;div v-if="error" class="alert alert-danger"&gt;{{ error }}&lt;/div&gt; &lt;div v-else-if="isLoading"&gt; &lt;p&gt;Loading...&lt;/p&gt; &lt;/div&gt; &lt;ProductDetail v-else :product="product" /&gt; &lt;div v-if="confirmVisible" class="modal-backdrop" @click="cancelDelete"&gt; &lt;div class="modal-dialog" @click.stop&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;h5 class="modal-title"&gt;삭제 확인&lt;/h5&gt; &lt;/div&gt; &lt;div class="modal-body"&gt; 이 상품을 정말 삭제하시겠습니까? &lt;/div&gt; &lt;div class="modal-footer"&gt; &lt;button @click="cancelDelete" class="btn btn-secondary"&gt;취소&lt;/button&gt; &lt;button @click="handleDelete" class="btn btn-danger"&gt;삭제&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;style scoped&gt; .modal-backdrop { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 1050; } .modal-dialog { max-width: 400px; width: 90%; margin: 0 1rem; } .modal-content { background: #fff; border-radius: 0.5rem; overflow: hidden; box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); } .modal-header, .modal-body, .modal-footer { padding: 1rem; } .modal-header { border-bottom: 1px solid #dee2e6; } .modal-footer { border-top: 1px solid #dee2e6; display: flex; justify-content: flex-end; gap: 0.5rem; } &lt;/style&gt;
]]></description><link>https://64etuor.github.io/600_tech-stack/vue3/vue-skeleton-list-ux-개선-1번-시도.html</link><guid isPermaLink="false">600_Tech Stack/Vue3/Vue Skeleton List UX 개선 1번 시도.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 29 Apr 2025 03:23:28 GMT</pubDate></item><item><title><![CDATA[Vue 렌더링 최적화]]></title><description><![CDATA[
Vue를 쓰다 보면 예상치 못하게 페이지가 깜빡이거나 부드럽지 않은 UX를 경험할 때가 있습니다.
이 글에서는 그런 문제를 일으키는 주요 원인과, 각각의 해결 방법을 구체적인 코드 예제와 함께 정리합니다. 문제의 원인
해결 방법 2-1. v-if 대신 v-show 사용
2-2. 리스트에 고유한 key 부여
2-3. keep-alive로 컴포넌트 상태 유지
2-4. transition으로 부드러운 전환 효과 추가 마무리 Vue는 Virtual DOM을 이용해 효율적으로 렌더링을 합니다.
하지만 v-if 남발, key 누락, 컴포넌트 재마운트, transition 부재 같은 문제가 있으면 DOM을 삭제했다가 다시 그리거나
데이터를 리셋하거나
깜빡임이 발생합니다. v-if는 조건이 false일 때 아예 DOM을 삭제합니다. 반면,
v-show는 DOM은 유지하고 display: none만 토글합니다.
자주 보였다가 숨겨지는 요소는 v-show를 쓰는 것이 좋습니다.
&lt;!-- 나쁜 예시 --&gt;
&lt;button @click="show = !show"&gt;Toggle&lt;/button&gt;
&lt;div v-if="show"&gt;Hello World&lt;/div&gt;
&lt;!-- 좋은 예시 --&gt;
&lt;button @click="show = !show"&gt;Toggle&lt;/button&gt;
&lt;div v-show="show"&gt;Hello World&lt;/div&gt; v-if는 토글할 때마다 DOM을 새로 생성 ➔ 렌더링 부하, 깜빡임
v-show는 DOM을 유지 ➔ 빠른 토글, 부드러운 UX
Vue는 리스트 렌더링 시 key를 이용해 기존 DOM을 재사용합니다.
key가 없으면 리스트를 통째로 다시 렌더링해서 깜빡이거나 성능이 떨어집니다.&lt;!-- 나쁜 예시 --&gt;
&lt;ul&gt; &lt;li v-for="item in items"&gt;{{ item.name }}&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 좋은 예시 --&gt;
&lt;ul&gt; &lt;li v-for="item in items" :key="item.id"&gt;{{ item.name }}&lt;/li&gt;
&lt;/ul&gt; key는 각 항목을 고유하게 식별할 수 있는 값이어야 합니다.
인덱스(index)를 key로 쓰는 것은 가급적 피하는 게 좋습니다.
페이지 이동할 때마다 컴포넌트가 언마운트→마운트되면서 상태(state)가 리셋된다면,
&lt;keep-alive&gt;를 사용해서 메모리에 컴포넌트를 유지할 수 있습니다.&lt;template&gt; &lt;keep-alive&gt; &lt;router-view /&gt; &lt;/keep-alive&gt;
&lt;/template&gt; keep-alive는 내부 컴포넌트를 캐싱하여, 재방문 시 로딩이 빠르고 상태가 유지됩니다.
특히 탭, 페이지 전환처럼 자주 오가는 화면에서 유용합니다.
렌더링이 즉각 일어날 때, 애니메이션을 추가하면 훨씬 자연스럽고 부드럽게 느껴집니다.&lt;template&gt; &lt;transition name="fade"&gt; &lt;div v-if="show"&gt;Hello with Fade&lt;/div&gt; &lt;/transition&gt; &lt;button @click="show = !show"&gt;Toggle&lt;/button&gt;
&lt;/template&gt; &lt;script setup&gt;
import { ref } from 'vue' const show = ref(true)
&lt;/script&gt; &lt;style&gt;
.fade-enter-active, .fade-leave-active { transition: opacity 0.5s;
}
.fade-enter-from, .fade-leave-to { opacity: 0;
}
&lt;/style&gt; transition 컴포넌트를 통해 입장(enter), 퇴장(leave) 시점에 CSS 애니메이션을 적용합니다.
사용자 경험이 한층 부드러워집니다. TIP:
Vue는 기본적으로 렌더링 최적화가 잘 되어 있지만, 상황에 따라 위와 같은 세심한 관리가 필요합니다.
작은 차이가 부드럽고 프로페셔널한 사용자 경험을 만듭니다.
]]></description><link>https://64etuor.github.io/600_tech-stack/vue3/vue-렌더링-최적화.html</link><guid isPermaLink="false">600_Tech Stack/Vue3/Vue 렌더링 최적화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 28 Apr 2025 03:49:55 GMT</pubDate></item><item><title><![CDATA[Lambda]]></title><description><![CDATA[Java 8부터 도입된 람다 표현식(lambda expression)은 자바에 함수형 프로그래밍의 개념을 가져온 기능으로, 이후 최신 LTS 버전인 Java 17에서도 표준처럼 활용되고 있습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 람다 표현식을 사용하면 코드 블록 자체를 데이터처럼 취급하여 다른 메서드의 인자로 넘길 수 있고, 익명 함수 형태로 간결하게 로직을 작성할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=lambda%20expressions%20are%20added%20in,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=lambda%20expressions%20are%20added%20in,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 이번 가이드에서는 Java 17 기준으로 람다 표현식의 개념과 문법, 전통적인 익명 클래스 방식과의 비교, 실제 사용 예제 (정렬, 필터링 등), 자주 쓰이는 함수형 인터페이스 (Function, Consumer, Supplier, Predicate 등), 그리고 Stream API와의 연계 활용법**을 초심자도 이해할 수 있도록 설명합니다. 각 섹션 마지막에는 주요 내용을 정리한 표를 제공하니 참고하세요.<br>람다 표현식은 한마디로 “이름 없는 함수”를 표현하는 문법입니다. 자바에서는 클래스 내에 메서드를 정의하는 것이 일반적이지만, 람다를 사용하면 메서드(함수)를 하나의 식으로 간략히 나타내어 변수에 담거나 인자로 전달할 수 있습니다. 자바의 람다는 사실 함수형 인터페이스의 인스턴스를 만드는 문법적 설탕(syntax sugar)입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 함수형 인터페이스란 추상 메서드를 딱 하나만 가지고 있는 인터페이스를 말하며(default 메서드나 static 메서드는 있을 수 있습니다) (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=The%20,in%20the%20following%20method%20invocation" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=The%20,in%20the%20following%20method%20invocation" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>), 람다 표현식은 그 단일 추상 메서드(SAM)의 구현체를 직접 표현하는 방법입니다. 다시 말해, 람다식은 해당 함수형 인터페이스를 구현하는 익명 객체를 생성하지만, 개발자는 복잡한 익명 클래스 선언 코드를 작성할 필요 없이 함수 본문만 쓰면 되는 것이죠.<br>자바에 람다식이 도입된 이유는 메서드 자체를 인자로 전달하거나, 간단한 콜백 함수를 만들거나, 컬렉션을 처리하는 코드를 더 간결하게 작성하기 위함입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=lambda%20expressions%20are%20added%20in,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=lambda%20expressions%20are%20added%20in,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 람다를 활용하면 코드를 마치 데이터처럼 다룰 수 있어서, 자바8 이전에 비해 코드량이 줄고 가독성이 높아지는 장점이 있습니다. 예를 들어 기존에는 Runnable 인터페이스를 구현하는 익명 클래스를 만들어 스레드를 실행했다면, 이제는 람다로 바로 Runnable 구현을 전달하여 스레드를 만들 수 있습니다 (예시는 다음 섹션에서 다룹니다).람다 표현식의 기본 문법 구조는 다음과 같습니다:(매개변수 목록) -&gt; { 실행할 코드 블록 } 매개변수 목록: 함수형 인터페이스의 추상 메서드가 받는 매개변수들을 괄호 () 안에 나열합니다. 필요하면 타입을 명시할 수 있지만, 대부분 생략합니다. 컴파일러가 문맥을 보고 타입을 추론할 수 있기 때문입니다.
-&gt; (화살표 연산자): 매개변수 목록과 함수 본체를 구분하는 구분자입니다. 읽을 때는 “이어서 ~을 실행한다” 정도로 이해하면 됩니다.
{ 실행 코드 }: 람다식이 실행할 코드 블록입니다. 한 줄로 반환값을 계산한다면 {} 중괄호를 생략하고 바로 표현식을 쓸 수도 있습니다. 이때 해당 표현식의 평가 결과가 반환값이 됩니다. 반환 타입 역시 문맥상 유추되므로 코드는 더욱 단순해집니다.
람다 표현식에 관한 몇 가지 문법 규칙과 특징을 정리하면 다음과 같습니다:
<br>매개변수가 하나인 경우 괄호 ()를 생략할 수 있습니다. 예: (x) -&gt; x + 1은 x -&gt; x + 1로 축약 가능 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=Note%3A%20You%20can%20omit%20the,lambda%20expression%20is%20also%20valid" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=Note%3A%20You%20can%20omit%20the,lambda%20expression%20is%20also%20valid" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>).
매개변수가 없을 경우 반드시 빈 괄호 ()를 작성해야 합니다. 예: () -&gt; System.out.println("Hi") – Runnable 구현 등에 사용.
매개변수 타입은 생략 가능: 컴파일러가 대상 함수형 인터페이스의 메서드 시그니처를 보고 타입을 추론합니다. 필요하다면 명시적으로 쓸 수도 있지만, 추론되는 경우 대부분 쓰지 않습니다.
<br>함수 본체가 한 줄인 경우 중괄호 {}를 생략할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=,example%20uses%20the%20following%20expression" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=,example%20uses%20the%20following%20expression" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a><br>). 이 때 암시적 반환이 일어나서, 표현식의 결과값이 자동으로 반환됩니다. (반환 타입이 void인 경우는 그냥 그 한 줄을 실행하고 끝납니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=A%20return%20statement%20is%20not,is%20a%20valid%20lambda%20expression" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=A%20return%20statement%20is%20not,is%20a%20valid%20lambda%20expression" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>).)
<br>함수 본체가 여러 줄인 경우 { }로 감싸서 명시해야 하고, 명시적인 return문을 사용하여 값을 반환해야 합니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=If%20you%20specify%20a%20single,can%20use%20a%20return%20statement" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=If%20you%20specify%20a%20single,can%20use%20a%20return%20statement" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>).
<br>함수형 인터페이스의 추상 메서드 이름은 람다 표현식에서 드러나지 않습니다. 람다식 자체가 그 메서드의 구현이기 때문입니다. (즉, 람다는 일종의 익명 메서드라고 볼 수 있습니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=email%20" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=email%20" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>).)
<br>람다의 변수 캡처: 람다 표현식은 외부 지역 변수를 사용할 수 있지만, 해당 변수는 final이거나 사실상 final(effectively final)인 경우에만 가능합니다. 이 규칙은 익명 클래스와 동일하며, 람다 내부에서는 새로운 스코프를 만들지 않기 때문에 변수가 쉐도잉(shadowing)되는 일은 없습니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=Like%20local%20and%20anonymous%20classes%2C,following%20example%2C%20LambdaScopeTest%2C%20demonstrates%20this" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=Like%20local%20and%20anonymous%20classes%2C,following%20example%2C%20LambdaScopeTest%2C%20demonstrates%20this" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>).
@FunctionalInterface: 함수형 인터페이스임을 나타내는 표준 어노테이션입니다. 인터페이스 선언부에 붙이면 컴파일러가 해당 인터페이스가 추상 메서드 하나만 갖고 있는지 검증해주므로, 실수로 두 개 이상의 추상 메서드를 선언하는 일을 방지해줍니다. (이 어노테이션은 선택 사항이지만 관례적으로 붙입니다.)
<br>또한 Java 11부터는 람다의 매개변수 타입을 추론하는 과정에서, var 키워드를 사용할 수 있게 되었습니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/en/java/javase/11/language/local-variable-type-inference.html#:~:text=3%20Local%20Variable%20Type%20Inference,a%20%2B%20b" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/en/java/javase/11/language/local-variable-type-inference.html#:~:text=3%20Local%20Variable%20Type%20Inference,a%20%2B%20b" target="_self">3 Local Variable Type Inference - Oracle Help Center</a>). 예를 들어 매개변수 두 개를 받는 람다에서 (var x, var y) -&gt; x + y처럼 쓸 수 있습니다. 다만 var를 사용할 때는 두 매개변수 모두에 var를 써야 하며, 하나만 var를 쓰고 다른 하나는 타입을 생략하는 식으로 혼용할 수 없습니다 (<a data-tooltip-position="top" aria-label="https://skyoo2003.github.io/post/2016/11/09/java8-lambda-expression/#:~:text=20%28final%20int%20x%29%20,mix%20inferred%20and%20declared%20types" rel="noopener nofollow" class="external-link is-unresolved" href="https://skyoo2003.github.io/post/2016/11/09/java8-lambda-expression/#:~:text=20%28final%20int%20x%29%20,mix%20inferred%20and%20declared%20types" target="_self">Java 8 람다 표현식 자세히 살펴보기 | Devlog in the SKY</a>). 초심자 단계에서는 매개변수 타입을 완전히 생략하는 방법을 주로 사용하시면 됩니다.이제 람다 표현식의 핵심 개념과 문법을 이해했으니, 주요 특징을 표로 한눈에 정리해보겠습니다. Learning the Java Language &gt; Classes and Objects)
<br>](<a rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=The%20,in%20the%20following%20method%20invocation" target="_self">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=The%20,in%20the%20following%20method%20invocation</a>)). 해당 인터페이스의 추상 메서드 시그니처가 람다의 매개변수와 반환 타입을 결정. |<br>
| 기본 문법 구조 | (매개변수 목록) -&gt; { 실행 코드 } – 매개변수 목록을 -&gt; 오른쪽의 코드 블록에 매핑하여 실행 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=%2A%20A%20comma,class" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=%2A%20A%20comma,class" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a><br>) (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=%2A%20The%20arrow%20token%2C%20%60" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=%2A%20The%20arrow%20token%2C%20%60" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>). |
| 매개변수 타입 추론 | 매개변수의 타입을 코드 문맥에서 추론하므로 명시적 타입 선언은 대부분 불필요. 예: (String s) -&gt; s.length()와 s -&gt; s.length()는 동일하게 동작 (타입 추론). |<br>
| 매개변수 괄호 생략 | 매개변수가 하나이면 괄호 () 생략 가능 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=Note%3A%20You%20can%20omit%20the,lambda%20expression%20is%20also%20valid" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=Note%3A%20You%20can%20omit%20the,lambda%20expression%20is%20also%20valid" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>). 예: x -&gt; x * 2 (하나의 매개변수 x에 2배 하는 람다). |<br>
| 중괄호 및 return 생략 | 람다 본체가 단일 표현식이면 {}와 return 생략 가능 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=If%20you%20specify%20a%20single,can%20use%20a%20return%20statement" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=If%20you%20specify%20a%20single,can%20use%20a%20return%20statement" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>). 예: (a, b) -&gt; a - b는 두 수의 차를 반환. 단, 여러 문장인 경우 { } 내에 return 작성. |
| 변수 캡처 규칙 | 람다 내부에서 외부 지역변수를 사용하면 해당 변수는 final 또는 사실상 final이어야 함. 이는 익명 클래스와 동일한 제약. |<br>
| 함수형 인터페이스 예시 | Runnable, Comparator, ActionListener 등 기존 인터페이스 중 하나의 메서드만 가진 것들이 함수형 인터페이스로 사용됨 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=A%20functional%20interface%20in%20Java,instance%20of%20a%20functional%20interface" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=A%20functional%20interface%20in%20Java,instance%20of%20a%20functional%20interface" target="_self">Java Functional Interfaces | GeeksforGeeks</a>). 사용자 정의 인터페이스에도 @FunctionalInterface 사용 가능. |<br>람다 표현식이 나오기 전에는, 인터페이스나 추상 클래스를 구현하면서 일회용으로 사용할 때 익명 내부 클래스(anonymous inner class)를 많이 사용했습니다. 익명 클래스는 이름 없이 클래스를 정의하여 즉석에서 객체를 생성하는 방법으로, 주로 이벤트 처리나 쓰레드 실행, 콜백 등의 상황에서 활용되었습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 그러나 익명 클래스를 사용하면 코드가 장황해지는 단점이 있었습니다. 람다 표현식은 이러한 익명 클래스 사용 패턴 중 추상 메서드가 하나만 있는 경우에 한하여, 문법을 극도로 단순화한 것입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>) (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Anonymous%20Inner%20Class%20Lambda%20Expression,contains%20a%20single%20abstract%20method" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Anonymous%20Inner%20Class%20Lambda%20Expression,contains%20a%20single%20abstract%20method" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 두 접근법의 차이를 코드 예시와 함께 살펴보겠습니다.예를 들어, 새로운 쓰레드를 시작하기 위해 Runnable 인터페이스를 구현하는 간단한 작업을 생각해봅시다. Runnable은 추상 메서드로 void run() 하나만 갖는 함수형 인터페이스입니다. 자바8 이전에는 다음과 같이 익명 클래스를 사용했습니다:// 익명 내부 클래스로 Runnable 구현
new Thread(new Runnable() { @Override public void run() { System.out.println("익명 클래스 방식으로 스레드 실행"); }
}).start();
코드를 보면 new Runnable() { ... } 형태로 인터페이스를 구현하면서 객체를 바로 생성하고 있습니다. run() 메서드를 오버라이드하여 실행 코드를 넣었죠. 이제 람다 표현식으로 동일한 기능을 구현하면 훨씬 코드가 간결해집니다:// 람다 표현식으로 Runnable 구현
new Thread(() -&gt; System.out.println("람다 방식으로 스레드 실행")).start();
<br>보시는 것처럼, 람다 표현식을 쓰면 new Runnable(){ ... } 블록과 public void run() 선언을 모두 생략하고, 오직 run() 메서드의 본체에 해당하는 코드만 적어주면 됩니다. 자바 컴파일러가 ()-&gt; ... 람다식을 만나면 해당 타입 (Runnable)의 추상 메서드 구현으로 자동 변환해주기 때문입니다 (<a data-tooltip-position="top" aria-label="https://skyoo2003.github.io/post/2016/11/09/java8-lambda-expression/#:~:text=,%28%ED%83%80%EC%9E%85%20%EC%B6%94%EB%A1%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://skyoo2003.github.io/post/2016/11/09/java8-lambda-expression/#:~:text=,%28%ED%83%80%EC%9E%85%20%EC%B6%94%EB%A1%A0" target="_self">Java 8 람다 표현식 자세히 살펴보기 | Devlog in the SKY</a>). 결과적으로 람다 표현식 방식은 익명 클래스에 비해 코드가 훨씬 짧고 직관적입니다.물론 익명 클래스와 람다 표현식에는 문법 차이 이외에도 몇 가지 차이점이 있습니다:
<br>사용 대상: 익명 클래스는 추상 클래스나 인터페이스 어느 쪽이든 구현할 수 있지만, 람다 표현식은 반드시 하나의 추상 메서드만 가진 인터페이스(함수형 인터페이스)에 대해서만 사용할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Anonymous%20Inner%20Class%20Lambda%20Expression,contains%20a%20single%20abstract%20method" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Anonymous%20Inner%20Class%20Lambda%20Expression,contains%20a%20single%20abstract%20method" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). (추상 클래스나 메서드 여러 개인 인터페이스는 람다로 구현 불가)
<br>코드 구조: 익명 클래스는 클래스를 정의하는 것이므로 내부에 필드나 여러 메서드를 선언할 수도 있습니다. 반면 람다 표현식은 순수하게 함수 구현만을 담고 있어 별도의 멤버를 가질 수 없습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Inside%20this%20we%20can%20declare,Inside%20Lambda%20Expression%2C%20%E2%80%9Cthis%E2%80%9D%20always" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Inside%20this%20we%20can%20declare,Inside%20Lambda%20Expression%2C%20%E2%80%9Cthis%E2%80%9D%20always" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 람다는 상태 없는 함수 구현을 표현한다고 생각하면 됩니다.
<br>this 키워드: 익명 내부 클래스 안에서 this를 사용하면 그 익명 클래스 자기 자신을 가리키지만, 람다 표현식 안에서 this를 사용하면 람다가 쓰인 주변 클래스의 this, 즉 람다가 속한 외부 객체를 가리킵니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Anonymous%20inner%20class%20can%20be,that%20is%2C%20enclosing%20class%20object" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Anonymous%20inner%20class%20can%20be,that%20is%2C%20enclosing%20class%20object" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). (람다는 별도 객체 없이 주변 문맥에 녹아드는 느낌입니다.)
<br>컴파일 및 실행: 익명 클래스를 사용하면 컴파일러가 해당 클래스를 위한 별도의 .class 파일을 생성하고, JVM은 클래스로 로딩합니다. 람다 표현식은 이런 익명 클래스 생성 없이, 바이트코드 상에서 더 경량 방식으로 처리됩니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=It%20is%20the%20best%20choice,into%20private%20method%20outer%20class" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=It%20is%20the%20best%20choice,into%20private%20method%20outer%20class" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). (실제로는 invokedynamic이라는 바이트코드 수준 기법으로 구현되고, 결과적으로 람다식은 익명 클래스보다 메모리 부하가 적습니다.)
<br>여러 메서드 구현: 익명 클래스는 인터페이스의 여러 메서드를 구현해야 하는 경우나, 추상 클래스(여러 추상 메서드 포함 가능)를 상속해야 하는 경우에 유일한 방법입니다. 람다는 오로지 하나의 메서드 구현용이므로, 두 개 이상의 추상 메서드를 처리해야 하면 익명 클래스를 써야 합니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=It%20can%20extend%20abstract%20and,contains%20a%20single%20abstract%20method" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=It%20can%20extend%20abstract%20and,contains%20a%20single%20abstract%20method" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>).
두 방법의 주요 차이를 표로 요약하면 다음과 같습니다:요약하면, 람다 표현식은 “불필요한 부분을 싹 빼고 핵심 로직만 적는 익명 클래스”라고 볼 수 있습니다. 특히 콜렉션 정렬, 필터링, 각 원소에 대한 처리 등 간단하지만 보일러플레이트가 많았던 코드들이 람다 도입 이후 크게 단축되었습니다. 다음 섹션에서 이러한 실사용 예제들을 직접 확인해보겠습니다.이제 람다 표현식이 실제 코드에서 어떻게 활용되는지 몇 가지 예제를 통해 알아보겠습니다. 예제마다 람다를 사용하지 않은 전통적인 코드와 람다를 사용한 코드를 비교해 볼 테니, 차이를 눈여겨보세요.정렬에는 java.util.Comparator 인터페이스를 많이 사용하는데요, 이 인터페이스는 함수형 인터페이스로 추상 메서드 compare(T o1, T o2) 딱 하나만 가지고 있습니다. 자바8 이전에는 Comparator를 구현하려면 보통 익명 클래스를 작성했습니다. 가령 문자열 리스트를 길이에 따라 정렬하는 코드를 비교해 보겠습니다. 익명 클래스 방식 (정렬 기준 Comparator 구현):
List&lt;String&gt; fruits = new ArrayList&lt;&gt;(List.of("Orange", "Apple", "Banana", "Kiwi"));
Collections.sort(fruits, new Comparator&lt;String&gt;() { @Override public int compare(String s1, String s2) { return s1.length() - s2.length(); // 길이 비교 }
});
System.out.println(fruits); 위 코드는 Collections.sort 메서드에 두 문자열을 비교하는 Comparator 익명 클래스를 전달했습니다. compare 메서드 안에서 문자열 길이 차이를 반환하여 정렬 순서를 결정합니다. <br>
람다 표현식 방식:
List&lt;String&gt; fruits = new ArrayList&lt;&gt;(List.of("Orange", "Apple", "Banana", "Kiwi"));
Collections.sort(fruits, (s1, s2) -&gt; s1.length() - s2.length());
System.out.println(fruits); 동일한 동작을 람다로 구현하면 코드가 한 줄로 줄어듭니다. (s1, s2) -&gt; s1.length() - s2.length() 부분이 바로 Comparator의 compare 구현에 해당합니다 (<a data-tooltip-position="top" aria-label="https://www.tutorjoes.in/Java_example_programs/sort_the_strings_based_on_their_lengths_in_ascending_order_using_lambda_expression_in_java#:~:text=%2A%20Collections.sort%28strings%2C%20%28s1%2C%20s2%29%20,compare%20the%20lengths%20of%20the" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.tutorjoes.in/Java_example_programs/sort_the_strings_based_on_their_lengths_in_ascending_order_using_lambda_expression_in_java#:~:text=%2A%20Collections.sort%28strings%2C%20%28s1%2C%20s2%29%20,compare%20the%20lengths%20of%20the" target="_self">write a Java program using Lambda Expression to sort the strings based on their lengths in ascending order</a>). 즉, s1과 s2 두 인자를 받아 s1.length() - s2.length() (길이 비교값)을 반환하는 람다 표현식을 전달한 것입니다. 람다식 덕분에 코드가 훨씬 간결해졌고, 의도도 한눈에 들어옵니다. 실행 결과를 보면 두 코드 모두 문자열을 길이순으로 정렬하여 출력할 것입니다. (예: [Kiwi, Apple, Orange, Banana] – 가장 짧은 "Kiwi"(4자)부터 긴 "Banana"(6자) 순서.)이 예제에서 Collections.sort 메서드는 두 번째 인자로 Comparator&lt;String&gt;을 요구하고, 우리가 람다로 그 요구를 충족시킨 것입니다. 람다 (s1, s2) -&gt; s1.length() - s2.length()는 Comparator의 추상 메서드에 맞는 시그니처((String, String) -&gt; int)이므로 유효합니다. 타입 추론 덕분에 s1과 s2의 타입을 굳이 명시하지 않아도 되는 점도 눈여겨보세요.리스트에서 특정 조건을 만족하는 요소만 뽑아 새로운 리스트를 만드는 작업을 생각해보겠습니다. 자바8 도입 전에는 직접 루프를 돌며 조건문으로 걸러내는 식으로 작성했는데, 이제는 Stream API의 filter 메서드와 람다를 사용하여 쉽게 구현할 수 있습니다.예제 시나리오: 정수 리스트에서 짝수(even number)만 필터링하기. 기존 방식 (명시적 반복문과 조건 검사):
List&lt;Integer&gt; numbers = List.of(3, 7, 4, 9, 12, 5);
List&lt;Integer&gt; evens = new ArrayList&lt;&gt;();
for (Integer n : numbers) { if (n % 2 == 0) { // 짝수 조건 검사 evens.add(n); }
}
System.out.println(evens); 이 코드는 numbers 리스트를 돌면서 % 2 == 0 조건에 맞는 값만 evens 리스트에 모읍니다. 결과는 [4, 12]가 되겠죠. <br>
람다 + Stream 방식:
List&lt;Integer&gt; numbers = List.of(3, 7, 4, 9, 12, 5);
List&lt;Integer&gt; evens = numbers.stream() .filter(n -&gt; n % 2 == 0) .collect(Collectors.toList());
System.out.println(evens); 위에서는 numbers.stream()으로 스트림을 얻은 뒤, .filter(n -&gt; n % 2 == 0)를 호출했습니다. filter 메서드는 Predicate를 인자로 받아 스트림의 요소를 걸러내는 기능을 합니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/stream-filter-java-examples/#:~:text=Stream%20filter,that%20match%20the%20given%20predicate" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/stream-filter-java-examples/#:~:text=Stream%20filter,that%20match%20the%20given%20predicate" target="_self">Stream filter() in Java with examples - GeeksforGeeks</a>). 여기서 n -&gt; n % 2 == 0 람다식은 입력 n이 짝수인지 검사하여 boolean을 반환하므로 Predicate에 부합합니다. filter를 거친 스트림은 짝수만 남게 되고, 마지막에 .collect(Collectors.toList())를 통해 리스트로 다시 모았습니다. 결과 역시 [4, 12]로 앞선 코드와 동일하지만, 코드량이 크게 감소하고 가독성이 좋아졌습니다. 한 줄의 람다가 if 조건과 add를 모두 대체한 것이죠. <br>람다 표현식의 진가는 메서드의 동작 부분을 호출 시에 주입할 수 있다는 점입니다. 간단한 예로, 리스트의 각 요소를 콘솔에 출력하는 동작을 람다로 전달해보겠습니다. List 인터페이스의 forEach 메서드는 Consumer를 인자로 받아 리스트의 모든 요소에 대해 어떤 동작을 수행하도록 합니다. Consumer&lt;T&gt;는 T를 받아서 소비(사용)하고 반환값은 없는 함수형 인터페이스입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Consumer" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Consumer" target="_self">Java Functional Interfaces | GeeksforGeeks</a>). 예제: 리스트 요소 출력
List&lt;String&gt; names = List.of("홍길동", "김Java", "람다식");
names.forEach(name -&gt; System.out.println("안녕, " + name + "!")); 여기서 forEach에 넘긴 람다 name -&gt; System.out.println("안녕, " + name + "!")는 Consumer&lt;String&gt;로서 작동합니다. 각 요소 name을 받아 System.out.println으로 출력하는 동작이므로 반환이 필요 없고, 정의도 매우 간단합니다. 실행하면 리스트의 각 이름 앞에 "안녕, "이라는 인사말을 붙여 한 줄씩 출력하게 됩니다. <br>위 예시들의 공통점은 람다 표현식이 코드의 간결함과 유연함을 크게 높여준다는 것입니다. 정렬 예제에서는 Comparator 구현 클래스를 별도로 만들 필요 없이 비교 로직만 적었고 (<a data-tooltip-position="top" aria-label="https://www.tutorjoes.in/Java_example_programs/sort_the_strings_based_on_their_lengths_in_ascending_order_using_lambda_expression_in_java#:~:text=%2A%20Collections.sort%28strings%2C%20%28s1%2C%20s2%29%20,compare%20the%20lengths%20of%20the" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.tutorjoes.in/Java_example_programs/sort_the_strings_based_on_their_lengths_in_ascending_order_using_lambda_expression_in_java#:~:text=%2A%20Collections.sort%28strings%2C%20%28s1%2C%20s2%29%20,compare%20the%20lengths%20of%20the" target="_self">write a Java program using Lambda Expression to sort the strings based on their lengths in ascending order</a>), 필터링 예제에서는 반복문과 조건 검사를 한 줄의 조건 람다로 대체했고, forEach 예제에서는 출력 동작을 람다로 넘겨 코드 중복 없이 처리했습니다. 이는 람다가 함수형 인터페이스의 인스턴스로 동작하면서, 필요한 시점에 실행할 코드 블록을 값으로 전달할 수 있기 때문에 가능합니다.아래 표에 이번 섹션에서 다룬 예제들과 그 효과를 정리합니다:이처럼 람다 표현식을 사용하면 많은 경우에 코드가 단순명료해집니다. 다음으로는, 자바에서 람다와 함께 자주 활용되는 함수형 인터페이스들에 대해 조금 더 자세히 알아보겠습니다.<br>앞서 언급했듯이 자바의 람다 표현식은 함수형 인터페이스의 구현체를 만드는 문법입니다. 자바 표준 라이브러리에는 이미 여러 유용한 함수형 인터페이스들이 정의되어 있으며, 특히 Java 8에서는 java.util.function 패키지를 통해 다양한 표준 함수형 인터페이스를 제공하고 있습니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=This%20is%20a%20very%20simple,java.util.function" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=This%20is%20a%20very%20simple,java.util.function" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>). 이 섹션에서는 그 중에서도 가장 자주 쓰이는 네 가지 인터페이스인 Consumer, Predicate, Function, Supplier를 소개하고 간단한 사용 예를 보여드리겠습니다. 이 인터페이스들은 제네릭(generic)을 활용하여 다양한 타입에 대해 재사용될 수 있도록 설계되어 있습니다.<br>Consumer는 입력을 하나 받아서 사용하고(consume), 아무 값도 반환하지 않는 연산을 정의한 인터페이스입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Consumer" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Consumer" target="_self">Java Functional Interfaces | GeeksforGeeks</a>). 추상 메서드로 void accept(T t) 하나를 갖습니다. 대표적인 활용 예는 입력 값을 출력하거나, 외부 변수에 적용하는 등의 경우입니다. forEach 문법에서 봤듯이, 리스트의 모든 요소를 출력하는 동작을 Consumer로 표현할 수 있습니다. 예시: 문자열을 받아 콘솔에 출력하는 Consumer
Consumer&lt;String&gt; printConsumer = s -&gt; System.out.println(s);
printConsumer.accept("Hello, World!"); // 출력: Hello, World! 여기서 s -&gt; System.out.println(s)라는 람다는 입력 문자열 s를 받아 출력하고 반환값이 없으므로 Consumer 조건에 부합합니다. printConsumer.accept("Hello, World!")를 호출하면 람다 본체가 실행되어 문자열이 출력됩니다.
실제로 Consumer는 UI 이벤트 처리 (예: 버튼 클릭 시 실행할 코드)나 로그 출력, 각 원소 처리 (forEach에서 사용) 등에 폭넓게 사용됩니다. <br>Predicate는 입력을 하나 받아 논리값(boolean)을 반환하는 함수를 표현하는 인터페이스입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Predicate" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Predicate" target="_self">Java Functional Interfaces | GeeksforGeeks</a>). 추상 메서드는 boolean test(T t)이며, 이름 그대로 어떤 조건을 검사하는 역할을 합니다. 일반적으로 필터링 용도로 많이 사용됩니다 – 컬렉션에서 조건에 맞는 요소를 선별하거나, 스트림 연산에서 필터 조건을 지정할 때 Predicate을 람다로 전달하곤 합니다.
<br>
예시: 정수를 받아 짝수인지 여부를 판단하는 Predicate
Predicate&lt;Integer&gt; isEven = x -&gt; x % 2 == 0;
System.out.println(isEven.test(4)); // 출력: true
System.out.println(isEven.test(7)); // 출력: false 위 코드에서 x -&gt; x % 2 == 0 람다는 입력 정수 x에 대해 x % 2 == 0이라는 조건식을 평가하여 true/false를 반환합니다. isEven.test(4)는 4가 짝수이므로 true, isEven.test(7)은 false를 반환하겠죠. 이처럼 Predicate은 어떤 조건(boolean식)을 캡슐화하여 사용할 수 있게 해줍니다. 스트림의 filter 메서드는 내부적으로 Predicate를 요구하며, 우리가 filter에 전달하는 람다가 바로 Predicate의 구현이라고 할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=In%20general%2C%20any%20,method%2C%20and%20a%20given%20predicate" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=In%20general%2C%20any%20,method%2C%20and%20a%20given%20predicate" target="_self">Java - Filter a Stream with Lambda Expressions</a>). <br>Function은 하나의 입력을 받아 다른 타입의 출력을 반환하는 일반적인 함수를 나타내는 인터페이스입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Function" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Function" target="_self">Java Functional Interfaces | GeeksforGeeks</a>). 제네릭으로 입력 타입 &lt;T&gt;와 출력 타입 &lt;R&gt;을 지정하며, 추상 메서드는 R apply(T t)입니다. 매핑/변환 함수를 표현할 때 주로 사용됩니다. 예를 들어 문자열을 정수로 변환한다거나, 객체를 다른 형태로 맵핑하는 작업 등이 Function에 해당합니다. 예시: 문자열을 받아 그 길이를 반환하는 Function
Function&lt;String, Integer&gt; lengthFunc = s -&gt; s.length();
System.out.println(lengthFunc.apply("Java")); // 출력: 4
System.out.println(lengthFunc.apply("Lambda")); // 출력: 6 s -&gt; s.length() 람다는 입력 문자열 s의 길이(int)를 반환하므로 Function&lt;String, Integer&gt;에 부합합니다. lengthFunc.apply("Java")는 "Java"의 길이 4를 반환합니다. 이런 식으로 Function을 사용하면, 리스트의 요소를 변환할 때 map 연산과 함께 활용할 수 있습니다. 예를 들어 someList.stream().map(s -&gt; s.length())처럼 쓰면 각 요소를 길이로 매핑하겠죠. (참고로, 자바에는 Function의 특별한 형태로 입력과 출력 타입이 같은 UnaryOperator&lt;T&gt;도 있습니다.) <br>Supplier는 이름에서 알 수 있듯이 어떤 값을 공급(제공)하는 역할을 하는 함수형 인터페이스입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Supplier" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/functional-interfaces-java/#:~:text=Supplier" target="_self">Java Functional Interfaces | GeeksforGeeks</a>). 추상 메서드는 T get()로, 입력은 없고 출력만 있는 특징이 있습니다. 보통 새로운 객체를 만들거나, lazy evaluation(지연된 연산)으로 값 제공이 필요할 때 사용됩니다. 예시: 호출할 때마다 랜덤 숫자를 하나 공급하는 Supplier
Supplier&lt;Double&gt; randomSupplier = () -&gt; Math.random();
System.out.println(randomSupplier.get()); // 출력: 0.7323... (매 호출마다 다른 난수) () -&gt; Math.random() 람다는 입력 파라미터 없이 실행되며 Math.random() 호출 결과 (0과 1 사이의 double 난수)를 반환하므로 Supplier에 적합합니다. randomSupplier.get()을 호출할 때마다 새로운 난수가 생성되어 반환됩니다. 이처럼 Supplier는 호출 시점에 필요한 값을 제공하는 용도로 쓰입니다. 예를 들어, Stream.generate(supplier) 메서드는 주어진 Supplier를 반복 호출하여 무한 스트림을 생성하는데 사용할 수 있습니다. <br>이외에도 자바에는 BiConsumer, BiPredicate, BiFunction처럼 입력을 두 개 받는 변형 인터페이스나, Operator처럼 Function의 특수형(입출력 타입 동일) 인터페이스 등이 있습니다. 그러나 기본 원리는 앞서 설명한 네 가지와 유사합니다. 표준 라이브러리의 이러한 함수형 인터페이스를 잘 활용하면 별도로 인터페이스를 정의하지 않고도 원하는 형태의 람다식을 사용할 수 있어 편리합니다 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=This%20is%20a%20very%20simple,java.util.function" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#:~:text=This%20is%20a%20very%20simple,java.util.function" target="_self">Lambda Expressions (The Java™ Tutorials &gt;
Learning the Java Language &gt; Classes and Objects)
</a>). 아래 표에 자주 쓰이는 함수형 인터페이스 네 가지를 정리합니다:<br>이들 인터페이스는 모두 @FunctionalInterface로 지정되어 있으며, Lambda 표현식의 타입으로 쓰이게 됩니다. 예를 들어 (x -&gt; x * 2)라는 람다 단독으로는 타입이 없지만, 이를 Function&lt;Integer,Integer&gt;으로 받겠다고 하면 비로소 그 람다의 타입이 Function&lt;Integer,Integer&gt;로 정해지고 apply 구현으로 활용되는 식입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/difference-between-anonymous-inner-class-and-lambda-expression/#:~:text=Lambda%20expressions%20%20basically%20express,8%20and%20provide%20below%20functionalities" target="_self">Difference between Anonymous Inner Class and Lambda Expression | GeeksforGeeks</a>). 따라서 람다를 사용할 때는 그 람다가 대응하는 함수형 인터페이스 타입을 문맥에서 명확히 해주어야 합니다. 다행히 메서드 파라미터나 변수 타입이 지정되는 경우가 많아 크게 신경 쓸 일은 없습니다.<br>람다 표현식의 강력함은 Stream API와 결합될 때 더욱 두드러집니다. Stream API는 Java 8에서 도입된 기능으로 컬렉션을 함수형 프로그래밍 방식으로 처리할 수 있도록 해줍니다 (<a data-tooltip-position="top" aria-label="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=Java%20Streams%20have%20been%20introduced,liners" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=Java%20Streams%20have%20been%20introduced,liners" target="_self">Java - Filter a Stream with Lambda Expressions</a>). 스트림을 사용하면 데이터를 필터링, 변환, 집계 등의 작업을 파이프라인으로 연결하여 직관적인 코드로 작성할 수 있는데, 이때 각각의 단계에서 람다 표현식을 통해 필요한 동작을 간단히 지정하게 됩니다. 즉, 스트림의 여러 연산들은 함수형 인터페이스를 인자로 받고, 우리는 거기에 람다를 전달하는 것이죠.Stream API의 대표적인 메서드들과 람다 사용 예를 살펴보겠습니다:
<br>filter(Predicate): 앞서 본 것처럼 스트림의 요소들을 걸러내는 연산입니다. Predicate&lt;T&gt;를 받아서 true인 요소만 다음 단계로 통과시킵니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/stream-filter-java-examples/#:~:text=Stream%20filter,that%20match%20the%20given%20predicate" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/stream-filter-java-examples/#:~:text=Stream%20filter,that%20match%20the%20given%20predicate" target="_self">Stream filter() in Java with examples - GeeksforGeeks</a>). 람다 예: .filter(x -&gt; 조건식) <br>map(Function): 스트림의 각 요소를 변환(mapping)하는 연산입니다. Function&lt;T,R&gt;를 인자로 받아, T 타입 요소들을 R 타입으로 변환한 스트림을 반환합니다. 람다 예: .map(s -&gt; s.length()) (문자열을 정수로 변환) (<a data-tooltip-position="top" aria-label="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=When%20filtering%2C%20a%20really%20useful,call" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=When%20filtering%2C%20a%20really%20useful,call" target="_self">Java - Filter a Stream with Lambda Expressions</a>).
forEach(Consumer): 최종 연산으로 스트림의 각 요소를 소비하면서 실행하는 연산입니다. Consumer&lt;T&gt;를 인자로 받아 요소마다 수행합니다. 람다 예: .forEach(elem -&gt; System.out.println(elem)) (각 요소 출력).
sorted(Comparator): 스트림의 요소를 정렬합니다. 인자로 Comparator&lt;T&gt;를 취하는 오버로드가 있으며, 여기에도 람다로 Comparator 구현을 넘길 수 있습니다. 예: .sorted((a,b) -&gt; a.compareTo(b)) (기본 정렬이랑 동일한 예).
그 밖에 anyMatch, allMatch 등은 Predicate, reduce는 BinaryOperator (BiFunction 일종), generate는 Supplier 등을 받습니다. 이러한 메서드들도 람다와 찰떡궁합으로 동작합니다.
실제로 스트림과 람다를 함께 사용하는 예제 코드를 보겠습니다. 문자열 리스트에서 특정 조건으로 필터링하고, 변환(map) 후 출력까지 한 번에 처리하는 파이프라인을 만들어보죠:List&lt;String&gt; names = List.of("Apple", "banana", "Cat", "dog", "elephant");
names.stream() .filter(s -&gt; s.length() &gt;= 3) // 길이가 3 이상인 문자열만 통과 (Predicate 람다) .map(s -&gt; s.toUpperCase()) // 문자열을 대문자로 변환 (Function 람다) .sorted((a, b) -&gt; a.compareTo(b)) // 문자열을 사전순 정렬 (Comparator 람다) .forEach(x -&gt; System.out.println(x)); // 결과 출력 (Consumer 람다)
위 코드를 해석해보면, filter(s -&gt; s.length() &gt;= 3): 각 문자열 s의 길이가 3 이상인지 검사하여, 조건을 만족하는 문자열만 스트림에 남깁니다. (Predicate&lt;String&gt; 사용)
map(s -&gt; s.toUpperCase()): 남은 문자열들을 모두 대문자로 변환합니다. 예: "banana" -&gt; "BANANA". (Function&lt;String,String&gt; 사용)
sorted((a, b) -&gt; a.compareTo(b)): 문자열을 정렬합니다. 사실 String은 Comparable을 구현하므로 기본 정렬이 있지만, 예시를 위해 람다로 Comparator를 직접 넘겨주었습니다. (Comparator&lt;String&gt; 사용)
forEach(x -&gt; System.out.println(x)): 최종 결과인 스트림의 모든 요소를 출력합니다. (Consumer&lt;String&gt; 사용)
이 파이프라인을 거치고 나면 원래 리스트에서 길이 3 미만인 "Cat" (3 이상이니까 포함), "dog" (3 이상 포함), "elephant" (8 포함), "Apple"(5 포함), "banana"(6 포함) 중, 모두 포함되네요. 모두 대문자로 바뀌고 정렬되면 [APPLE, BANANA, CAT, DOG, ELEPHANT] 순서로 출력될 것입니다.<br>스트림과 람다를 함께 사용하면 이처럼 데이터 처리 로직을 선언적이고 간결하게 표현할 수 있습니다. 특히, filter-map 같이 조합된 연산들을 메서드 체인으로 표현하기 때문에 코드의 흐름이 일목요연합니다 (<a data-tooltip-position="top" aria-label="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=Java%20Streams%20have%20been%20introduced,liners" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackabuse.com/java-stream-filter-with-lambda-expression/#:~:text=Java%20Streams%20have%20been%20introduced,liners" target="_self">Java - Filter a Stream with Lambda Expressions</a>). 람다 없이는 이런 처리를 하려면 중첩된 반복문이나 조건문을 사용해야 했을 텐데, 훨씬 편리해진 것이죠.마지막으로, Stream 연산과 해당 연산에 기대되는 함수형 인터페이스를 표로 정리해보겠습니다. 어떤 스트림 메서드가 어떤 함수형 인터페이스를 사용하며, 람다를 통해 무엇을 구현하는지 한눈에 확인해보세요:위 표에서 보듯, Stream API는 내부적으로 함수형 인터페이스를 많이 활용하도록 설계되어 있습니다. 우리는 이러한 메서드 호출 시 람다 표현식을 넘김으로써, 필요한 동작을 간략히 전달하게 됩니다. Java의 설계 철학상 “동작 파라미터화(behavior parameterization)”를 쉽게 하는 것이 람다와 스트림의 목적이기 때문에, 둘은 함께 쓰일 때 시너지가 극대화됩니다.지금까지 Java 17 기준으로 람다 표현식의 개념부터 문법, 전통적인 익명 클래스와의 비교, 다양한 예제, 주요 함수형 인터페이스, 그리고 Stream API와의 연계 사용까지 폭넓게 살펴보았습니다. 람다 표현식을 처음 접하는 초심자라면 문법 구조가 다소 낯설 수 있지만, 익명 클래스를 떠올리며 “불필요한 선언을 모두 생략한 익명 함수”라고 이해하면 감을 잡는 데 도움이 됩니다. 람다 표현식을 잘 활용하면 코드의 길이를 줄이고 가독성을 높일 수 있을 뿐 아니라, 컬렉션 처리 로직을 선언적으로 표현하여 유지보수에도 유리합니다. 특히 자바의 스트림과 결합하면 복잡한 데이터 처리도 깔끔하게 한눈에 들어오는 코드로 구현할 수 있습니다. 마지막으로, 람다 표현식을 학습할 때는 직접 코드를 여러 번 작성해보고 익혀보는 것이 좋습니다. 간단한 예제로 시작해서 점차 복잡한 상황에 적용해 보세요. 예를 들어, 리스트를 정렬해보고, 필터링도 해보고, 맵리듀스도 흉내 내보면서 감을 잡을 수 있습니다. ]]></description><link>https://64etuor.github.io/600_tech-stack/java/lambda.html</link><guid isPermaLink="false">600_Tech Stack/Java/Lambda.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 19 Apr 2025 02:30:27 GMT</pubDate></item><item><title><![CDATA[2025-04-16 비용을 다 대주세요]]></title><description><![CDATA[A: Have you ever changed your residence for work?
B: I’ve relocated to a new city to get a job. Like that?
A: No. My company is moving. They want me to follow suit.
B: If they 비용을 다 대주세요. do it.
A: 직장 때문에 이사 해본 적 있니?
B: 일자리를 구하려고 다른 도시로 이사한 적은 있는데, 그런 거?
A: 아니, 우리 회사가 이사를 해서 말이야. 나보고도 하래는데.
B: If they pay for the whole caboodle. 그렇게 해.
[Additional expressions]
Have you ever changed your residence
– Do you have the experience of moving house
for work
– because of work / in order to comply with the demands of your job
I’ve relocated to a new city
– I’ve moved to a city that I had never been to before
to get a job
– so that I could try to find a job / in an effort to search for work
Like that?
– Is that what you mean? / Are you referring to that? / Is that what you’re asking me?
My company is moving.
– The company I already work for is changing office locations.
They want me to follow suit.
– They’ve asked me to move, too. / They requested that I do the same.
If they pay for the whole caboodle
– If they are willing to cover the cost of the whole adventure
*do it
– go for it / jump on that bandwagon / make the move]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-16-비용을-다-대주세요.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-16 비용을 다 대주세요.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 16 Apr 2025 01:19:03 GMT</pubDate></item><item><title><![CDATA[2025-04-14 뭐 때문에 그렇게 흥분했니]]></title><description><![CDATA[A: You’re all peppy. 뭐 때문에 그렇게 흥분했니?
B: I’ve got the best news, ever! I won two plane tickets!
A: That’s unbelievable! What’s the destination?
B: I can choose from a list of ten different countries.
A: 너 완전 업됐는데? What’s got you so geared up?
B: 최고의 소식을 갖고 왔지! 비행기표 두 장을 상으로 받았어!
A: 믿을 수 없는걸! 목적지가 어디야?
B: 10개국 중에 하나를 선택할 수 있어.
[Additional expressions]
You’re all peppy.
– You’re full of excitement. / You seem to be overflowing with energy.
What’s got you so geared up?
– How come you’re this excited? / What’s your reason for being pumped up?
I’ve got the best news, ever!
– I have received some of the greatest news I have ever had in my life!
I won two plane tickets!
– I’m the winner of two airline tickets! / I won a contest for airfare for two!
That’s unbelievable!
– I’m shocked! / That’s truly unimaginably great! / I can’t believe it!
What’s the destination?
– Where are they sending you? / Where will you go?
*I can choose from a list of ten different countries.
– There’s a list of ten countries I can choose from.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-14-뭐-때문에-그렇게-흥분했니.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-14 뭐 때문에 그렇게 흥분했니.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 16 Apr 2025 00:29:08 GMT</pubDate></item><item><title><![CDATA[2025-04-09 난 그들을 이해할 수 있어]]></title><description><![CDATA[A: You’re a big hit with kids. That’s remarkable.
B: I’m just a big kid, at heart. 난 그들을 이해할 수 있어.
A: They say, “You’re as young as you think you are.”
B: That’s true, until your bones start aching.
A: 넌 아이들한테 인기가 정말 좋구나. 놀라워.
B: 마음속으로는 나도 큰 아이라서 그래. I can relate to them.
A: “당신은 당신이 젊다고 생각하는 만큼 젊다”라고들 하지.
B: 사실이야, 뼈가 쑤시고 아프기 시작하기 전까지는.
[Additional expressions]
You’re a big hit with kids.
– The kids really like you. / Kids are crazy about you.
That’s remarkable.
– That’s amazing. / I’m very impressed. / That’s pretty impressive.
I’m just a big kid, at heart.
– In my heart, I’m a kid, too. / I’m not much more than a kid, inside.
I can relate to them.
– I understand them. / I know where they’re coming from. / I know them well.
They say,
– People always say, / There’s an old saying that goes, / According to an old saying,
“You’re as young as you think you are.”
– “If you think young, you are young.”
That’s true
– I believe that / I think that’s a fact / I totally agree with that
until your bones start aching
– up to the time when your body begins to feel aches and pains from age]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-09-난-그들을-이해할-수-있어.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-09 난 그들을 이해할 수 있어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 16 Apr 2025 00:15:17 GMT</pubDate></item><item><title><![CDATA[N+1 문제 | Incheol's TECH BLOG]]></title><description><![CDATA[JPA N+1 문제에 대해 알아보자]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/n+1-문제-incheol's-tech-blog.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/N+1 문제  Incheol's TECH BLOG.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 10 Apr 2025 01:39:33 GMT</pubDate><enclosure url="https://incheol-jung.gitbook.io/~gitbook/image?url=https%3A%2F%2F2649832514-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-legacy-files%2Fo%2Fassets%252F-M5HOStxvx-Jr0fqZhyW%252F-MHbE3fyWzzIDb0cbdYi%252F-MHbK8hnMYicQVLkf0aE%252Fjpa-nplus1%2520%25E2%2580%2593%2520Cat.java%2520%255Bjpa-nplus1.main%255D%25202020-09-20%252002-05-29.png%3Falt%3Dmedia%26token%3D6a872279-3968-4e95-a71b-e2ca9333ab42&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=ff15e839&amp;sv=2" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://incheol-jung.gitbook.io/~gitbook/image?url=https%3A%2F%2F2649832514-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-legacy-files%2Fo%2Fassets%252F-M5HOStxvx-Jr0fqZhyW%252F-MHbE3fyWzzIDb0cbdYi%252F-MHbK8hnMYicQVLkf0aE%252Fjpa-nplus1%2520%25E2%2580%2593%2520Cat.java%2520%255Bjpa-nplus1.main%255D%25202020-09-20%252002-05-29.png%3Falt%3Dmedia%26token%3D6a872279-3968-4e95-a71b-e2ca9333ab42&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=ff15e839&amp;sv=2"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-31우리 기분 좀 내볼까]]></title><description><![CDATA[A: I’m bored silly. 우리 기분 좀 내볼까?
B: Every time you say that, out comes the wallet. ‘
A: That’s laying it on a bit thick. I’m not loaded.
B: That’s the point. It sure would help if you were!
A: 나 너무 심심해 미치겠다. Let’s kick it up a notch.
B: 네가 그런 말을 할 때마다, 지갑을 열어야하지.
A: 그건 너무 오버하는 거야. 난 돈 없다구.
B: 그게 포인트야. 네가 부자면 도움이 되겠는데 말이야!
[Additional expressions]
I’m bored silly.
– I’m bored out of my mind. / I’m very bored. / I’m having no fun at all.
Let’s kick it up a notch.
– Let’s turn up the energy. / Let’s do something very exciting.
Every time you say that
– Whenever you say something like that / Each time you utter those words
out comes the wallet
– it costs a lot of money / you end up spending a fortune / you go through a lot of cash
That’s laying it on a bit thick.
– That’s a big exaggeration. / That’s stretching the truth a bit.
I’m not loaded.
– I’m not rich. / I don’t have a lot of money. / I don’t have a ton of cash to spend.
That’s the point.
– That’s exactly what I’m trying to say. / That’s precisely what I mean.
It sure would help if you were!
– If you had a lot of money, that would be fantastic!]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-31우리-기분-좀-내볼까.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-31우리 기분 좀 내볼까.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:52:29 GMT</pubDate></item><item><title><![CDATA[2025-04-07 넌 너무 예민해]]></title><description><![CDATA[A: I’m totally steamed at one of my colleagues.
B: What happened to get you this worked up?
A: I gave my opinion and he looked at me funny.
B: 넌 너무 예민해. Take a chill pill.
A: 동료 한 명 때문에 정말 열 받았어.
B: 뭐 때문에 그렇게 속상했어?
A: 내 의견을 말했는데 날 이상하게 쳐다보잖아.
B: You’re way too thin-skinned. 진정하라구.
[Additional expressions]
*I’m totally steamed at
– I’m very angry at / I’m feeling really ticked off at / I’m so peeved at*one of my colleagues
– someone I work with / one of the people I’m working with*What happened to get you this worked up?
– How come you’re this upset? / What’s got you so angry?*I gave my opinion
– I mentioned how I think about something / I spoke up about an opinion I have*He looked at me funny.
– He smirked at me. / He gave me a patronizing look.*You’re way too thin-skinned.
– You’re being too sensitive. / You’re acting pretty touchy.*Take a chill pill.
– Relax. / Calm down. / Forget about it. / Don’t let it bother you.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-07-넌-너무-예민해.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-07 넌 너무 예민해.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:51:04 GMT</pubDate></item><item><title><![CDATA[2025-04-02 왜 다시 빚을 지려고 해]]></title><description><![CDATA[A: I’m mulling over the idea of trading up on my car.
B: You just paid it off! 왜 다시 빚을 지려고 해?
A: I’m single and don’t own a house. What else should I do?
B: That’s the worst proposal I’ve ever heard, by far.
A: 새 차로 바꿀까 생각 중이야.
B: 할부금 이제야 다 갚았잖아! Why go in the hole again?
A: 난 결혼도 안 했고 내 집도 없는데, 그럼 뭘 하겠어?
B: 지금까지 들어본 생각 중에 최악이다.
[Additional expressions]
I’m mulling over the idea of
– I’m seriously considering / I’m giving a lot of thought to
trading up on my car
– getting rid of my old car and getting a new one / buying a new ride
You just paid it off!
– You very recently finished making the monthly payments on the car you have!
Why go in the hole again?
– Why go into debt again? / What reason do you have for being in debt again?
I’m single and don’t own a house.
– I’m not married and I am not a home owner.
What else should I do?
– Is there something else I can do with my money? / What should I spend money on?
That’s the worst proposal I’ve ever heard
– I’ve never heard a worse way to make a proposal
by far
– without a doubt / by a long way / without a doubt]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-04-02-왜-다시-빚을-지려고-해.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-04-02 왜 다시 빚을 지려고 해.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:51:01 GMT</pubDate></item><item><title><![CDATA[2025-03-26 통증은 내 취향이 아니야]]></title><description><![CDATA[A: Let’s hit the gym. I need a workout partner.
B: I’ll spectate. 통증은 내 취향이 아니야.
A: Chicken. You don’t have to go all out. Start small.
B: My idea of “exercise” is following you to the gym, period.
A: 헬스클럽/짐에 가자. 운동 파트너가 필요해.
B: 난 가서 구경만 할게. Pain is not my cup of tea.
A: 겁쟁이. 무리하게 운동할 필요 없어. 조금씩 시작하면 된다구.
B: 내가 “운동”이라고 하면 너를 따라서 헬스클럽까지 가는 정도지, 그걸로 끝이라구!
[Additional expressions]
Let’s hit the gym.
– Let’s go to the health club. / Let’s go together to exercise. / Join me at the gym.
I need a work out partner.
– I need someone to exercise with. / I’d appreciate having an exercise partner.
I’ll spectate.
– I’ll watch. / I can cheer you on. / I’d be good at being your audience.
Pain is not my cup of tea.
– I don’t like pain. / Pain is not for me. / I’m not a fan of pain.
Chicken.
– Baby. / Scaredy-cat. / Coward. / Wimp. / You’re afraid.
You don’t have to go all out.
– You don’t have to work hard. / It’s not necessary to go extreme.
Start small.
– Begin with small weights. / Start with easy and light things. / Go easy at the start.
My idea of “exercise” is
– When I think of exercise, I imagine / To me, “exercise” is
following you to the gym
– walking to the gym with you / making my way to the health club
Period.
– That’s it. / That’s the end. / There’s nothing more to it than that.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-26-통증은-내-취향이-아니야.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-26 통증은 내 취향이 아니야.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:51:00 GMT</pubDate></item><item><title><![CDATA[2025-03-24 나 자극 받았어]]></title><description><![CDATA[A: I’m giving blood today. Come hold my hand.
B: Is there a special reason you’re being so civic-minded?
A: 나 자극 받았어. by a radio public service announcement.
B: I didn’t know you had it in you. I’m proud of you.
A: 오늘 수혈을 해. 와서 내 손 좀 잡아줘.
B: 어쩌다가 그렇게 공공심이 발동한거니?
A: 한 라디오 공공서비스 안내방송을 듣고 I got stirred.
B: 너한테 그런 면이 있는 지 몰랐는걸. 자랑스럽다.
[Additional expressions]
I’m giving blood today.
– Today, I will donate blood. / I’m planning to give a blood donation today.
Come hold my hand.
– Come with me for moral support. / Come and be by my side for courage.
Is there a special reason
– What’s the reason / How come / What’s the purpose that
you’re being so civic-minded
– you’re caring so much about such a socially important issue
I got stirred by a radio public service announcement.
– I heard an ad on the radio and it moved me.
I didn’t know you had it in you.
– I’m surprised to see you like this. / I wasn’t aware that you cared so much.
*I’m proud of you.
– Well done. / I respect you for this. / Your decision deserves respect.
The marketing team is trying to __ the company’s online presence by using social media advertising.
해석: 마케팅 팀은 소셜 미디어 광고를 활용하여 회사의 온라인 입지를 강화하려고 노력하고 있다.
해설: 온라인 입지를 "강화하다"라는 의미에서 "boost"(증가시키다, 향상시키다)가 가장 적절한 선택입니다.
오답 분석: (B) enhance (향상시키다) → "boost"와 유사한 의미이지만, "enhance"는 일반적으로 품질이나 기능을 향상할 때 사용되며, 온라인 입지 증가와는 약간의 의미 차이가 있음
(C) reinforce (강화하다) → 주로 물리적이거나 개념적인 "강화"를 의미하며, 온라인 입지를 증가시키는 문맥에는 부적절
(D) enlarge (확대하다) → 크기를 물리적으로 키우는 의미가 강하므로 문맥상 적절하지 않음]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-24-나-자극-받았어.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-24 나 자극 받았어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:58 GMT</pubDate></item><item><title><![CDATA[2025-03-19 보석 같은 존재네요]]></title><description><![CDATA[A: My daughter’s teacher is a natural. I’m so pleased.
B: Not every teacher has the knack. You’re lucky.
A: She has a way of motivating the kids to love class.
B: 보석 같은 존재같네요. Show your appreciation.
A: 저희 딸 담임선생님은 타고난 선생님이에요. 정말 만족해요.
B: 선생님들이 다 그런 재주가 있지는 않은데, 운이 좋으시네요.
A: 그 선생님은 아이들이 수업을 좋아하게 동기를 부여하는 재능이 있으세요.
B: She sounds like a gem. 감사의 표시를 하세요.
[Additional expressions]
My daughter’s teacher is a natural.
– The teacher of my daughter was born to do her job.
I’m so pleased.
– I couldn’t be happier. / I’m very happy with her. / I’m really satisfied with her.
Not every teacher has the knack.
– Not all teachers have good teaching ability. / Some teachers are not good.
You’re lucky.
– You’re very fortunate. / It’s quite lucky that your daughter’s teacher is very good.
She has a way of
– She’s very good at / She knows all about / She has a talent for
motivating the kids to love class
– inspiring the students to enjoy being in class
She sounds like a gem.
– It seems that she is wonderful. / She appears to be a very important teacher.
Show your appreciation.
– Show her that you appreciate her. / Let her know how thankful you are.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-19-보석-같은-존재네요.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-19 보석 같은 존재네요.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:56 GMT</pubDate></item><item><title><![CDATA[2025-03-17 사람들은 쥐꼬리만한 돈으로 대가족을 먹여살렸지]]></title><description><![CDATA[A: So many kids grow up being an only child.
B: The stats show, that’s the family trend.
A: With costs the way they are, I get it.
B: Way back when, 사람들은 쥐꼬리만한 돈으로 대가족을 먹여살렸었지.
A: 요즘 아이들은 외동으로 많이 자라.
B: 그런 게 요즘 가족제도 트렌드라는 통계가 나왔더라.
A: 아이들 키우는 데 필요한 비용을 생각하면, 이해가 돼.
B: 오래 전엔, People raised big families on peanuts.
[Additional expressions]
So many kids grow up
– Quite a few children are raised / A large number of kids go through childhood
being an only child
– without any brothers or sisters / not having a brother or a sister
The stats show
– The statistics indicate / According to the statistics / We can see by the stats
That’s the family trend.
– That’s how families are trending. / That’s the current trend for families.
With costs the way they are
– See how expensive things are / Since the cost of living is so high
I get it.
– I totally understand the situation. / It’s not hard to comprehend what’s up.
Way back when
– Long ago / In the old days / Many years ago / In past generations
People raised big families on peanuts.
– Large families got by without having much money.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-17-사람들은-쥐꼬리만한-돈으로-대가족을-먹여살렸지.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-17 사람들은 쥐꼬리만한 돈으로 대가족을 먹여살렸지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:53 GMT</pubDate></item><item><title><![CDATA[2025-03-12 무슨 일이야]]></title><description><![CDATA[A: I’ve been through the grinder today.
B: You look a bit frazzled. 무슨 일이야?
A: Trouble with this, that and the other.
B: Let’s get dinner. That will perk you up.
A: 오늘은 정말 고된 하루였어.
B: 너 많이 지쳐보인다. What gives?
A: 이런 저런 문제가 많네.
B: 저녁 같이 먹자. 그럼 기분이 한결 좋아질거야.
[Additional expressions]
I’ve been through the grinder today.
– It’s been a very hard day for me. / Today was a really tough day.
You look a bit frazzled.
– You seem to be worn out. / It looks like you’ve had a rough experience.
What gives?
– What’s up? / What happened? / What went wrong? / What’s the problem?
Trouble with this, that and the other.
– A long list of various problems. / A good number of things went wrong.
Let’s get dinner.
– Let’s have something to eat for dinner. / Come with me and we’ll have dinner.
That will perk you up.
– That will make you happier. / Eating will lift your spirits.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-12-무슨-일이야.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-12 무슨 일이야.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:49 GMT</pubDate></item><item><title><![CDATA[2025-03-10 그 사람이 갑이네]]></title><description><![CDATA[A: Bill can do no wrong in the eyes of most.
B: I get the impression he’s somewhat of a local hero.
A: He’s a good conversationalist and never confrontational.
B: 그 사람이 갑이네. to me.
A: 빌은 대부분 사람들 보기에 잘못된 일을 절대 하지 않아.
B: 빌은 이 지역 영웅쯤 되는 것 같아.
A: 대화에도 능하고, 절대 사람들과 부딪히지도 않지.
B: He sounds like a winner.
[Additional expressions]
Bill can do no wrong
– Bill is never wrong / It’s impossible for Bill to make any mistakes
in the eyes of most
– according to most people / in the minds of so many people
I get the impression
– It seems to me like / To me, it feels like / I have a sense that
He’s somewhat of a local hero.
– He’s a very popular guy around here. / In these parts, he’s well liked.
He’s a good conversationalist
– He’s very good at making conversation / He’s good in any discussion
never confrontational
– doesn’t attack or offend anyone / isn’t likely to upset people
*He sounds like a winner to me.
– I get the feeling that he’s a super guy. / He seems like a champ.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-10-그-사람이-갑이네.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-10 그 사람이 갑이네.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:48 GMT</pubDate></item><item><title><![CDATA[2025-03-05 옛 연인이 전화했어]]></title><description><![CDATA[A: 옛 연인이 전화했어 out of the blue.
B: Did that make your heart go pitter-patter?
A: Nope. Our day in the sun is long gone.
B: I never relish connecting with past romances.
A: An old flame rang me up 뜬금없이 전화했어.
B: 그래서 심장이 두근두근했니?
A: 아니. 우리의 좋았던 때는 이미 오래 전에 끝났는걸.
B: 난 지난 옛 연인과 연락하는 건 정말 좋아하지 않아.
[Additional expressions]
An old flame
– A long ago romantic connection / Someone I was involved with a long time ago
rang me up
– called me / gave me a call / phone me up / made a phone call to me
out of the blue
– totally unexpectedly / very surprisingly / while I wasn’t expecting it at all
Did that make your heart go pitter-patter?
– Did you have feelings of love again because of that?
Our day in the sun is long gone.
– Our relationship is very much over. / We were finished long ago.
I never relish
– I never long for / It never happens that I wish for / I don’t ever have hopes for
*connecting with past romances
– rekindling old relationships / getting back together with old lovers]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-03-05-옛-연인이-전화했어.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-03-05 옛 연인이 전화했어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:46 GMT</pubDate></item><item><title><![CDATA[2025-02-26 줄 서세요]]></title><description><![CDATA[A: Which careers lead to upper crust wealth?
B: Doctors come to mind, but they earn what they get.
A: I’d like to to be a top-drawer exec for a major company.
B: 줄 서세요. You need connections and heaps of luck.
A: 어떤 직업을 가져야 상류층에 들 수 있을까?
B: 먼저 의사가 떠오르긴 하는데, 의사들은 일한만큼 버는 거지.
A: 난 주요 대기업의 최고간부가 되고 싶어.
B: Get in line. 연줄이랑 운이 필요하니까.
[Additional expressions]
Which careers
– What kinds of jobs / What fields in the labor market / What career choices
lead to upper crust wealth
– can eventually bring about big income / will make me rich
Doctors come to mind
– The medical profession is one / Being a physician might do that
They earn what they get.
– They work hard for their money. / Their income is hard earned.
I’d like to be
– I want to work as / I hope that I could get work being
a top-drawer exec
– a high level executive / a powerfully ranked manager
for a major company
– for a very large conglomerate / at a giant company
Get in line.
– You and everybody else. / A lot of people want that. / Wait your turn.
You need connections
– You’ve got to have somebody on the inside / You have to be connected
heaps of luck
– lots of good fortune / massive amounts of lucky breaks]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-26-줄-서세요.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-26 줄 서세요.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:44 GMT</pubDate></item><item><title><![CDATA[2025-02-24 생긴대로 살아]]></title><description><![CDATA[A: I’m giving some thought to getting eyelid surgery.
B: What’s wrong with the ones you’ve got?
A: My eyes look puffy. I want to have a sleeker look.
B: I like your eyes the way they are. 생긴대로 살아.
A: 쌍꺼풀 수술을 할까 생각 중이야.
B: 네 눈이 어때서?
A: 눈이 부어보여. 좀 더 샤프한 외모를 갖고 싶어.
B: 지금 네 눈이 난 더 좋은데.&nbsp;Stick with what nature gave you. [Additional expressions]
*I’m giving some thought to
– I’m really thinking about / I’m seriously considering / I’m contemplating
*getting eyelid surgery
– going in for an eyelid operation / having eyelid surgery done
*What’s wrong with the ones you’ve got?
– Do you have a problem with the ones you already have?
*My eyes look puffy.
– My eyes have a “fatty” look. / Now my eyes have got a swollen appearance.
*I want to have a sleeker look.
– I’d like them to look thinner and sharper.
*I like your eyes the way they are.
– Your eyes look great to me right now. / I think your eyes look fine, now.
*Stick with what nature gave you.
– Don’t get rid of what nature has given you. / Stay natural looking.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-24-생긴대로-살아.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-24 생긴대로 살아.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:39 GMT</pubDate></item><item><title><![CDATA[2025-02-19 사람들은 쉽게 짜증내.]]></title><description><![CDATA[A: Internet news providers are in a rage over politics.
B: When are they not? 사람들은 쉽게 짜증내. over that stuff.
A: It’s a sensitive issue, for sure. They just fan the flames.
B: I can’t blame them. It’s worth knowing about.
A: 인터넷 뉴스 보니까 사람들이 정치에 대해 열받은 것 같던데.
B: 언제는 안 그랬니? People get riled easily. 별 거 아닌 걸로
A: 분명 민감한 문제인 건 맞는데, 그런걸 선동하는 것 같아.
B: 그렇다고 탓할 수만은 없어. 정치 문제에 대해 알아야 할 필요도 있구.
[Additional expressions]
Internet news providers
– Providers of news on the Net / Those who put news up on the Internet
are in a rage over politics
– are all upset and ranting about politics / are up in arms regarding political stuff
When are they not?
– They always are that way. / Aren’t they always like that?
People get riled easily over that stuff.
– It’s very easy for people to get angry concerning that.
It’s a sensitive issue
– That kind of issue is very touchy / That’s a hypersensitive topic
for sure
– no doubt / no question about it / to be certain / undeniably
They just fan the flames.
– They just make everyone excited. / They cause people to get more upset.
I can’t blame them.
– I totally understand. / I don’t fault them. / I can’t say that they’re wrong.
*It’s worth knowing about.
– It’s good to know that kind of information. / That’s valuable knowledge.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-19-사람들은-쉽게-짜증내..html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-19 사람들은 쉽게 짜증내..md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:33 GMT</pubDate></item><item><title><![CDATA[2025-02-17 근사한데]]></title><description><![CDATA[A: I feel like a drive out from under the city lights.
B: 근사한데. but it’d take an hour to get anywhere else.
A: Don’t be like that. Dig deep and find the romanticist in you.
B: Yes Dearist. I shall follow wherever you lead.
A: 도시의 불빛 아래서 벗어나 교외로 드라이브 나가고 싶어.
B:&nbsp;Sounds peachy.&nbsp;하지만 어딜 가든 한 시간은 걸릴텐데.
A: 그렇게 초치지 마. 네 자신 깊숙이서 로맨티스트를 찾아보라구.
B: 네, 그러죠. 어디든 따라가죠.
[Additional expressions]
I feel like a drive
– I’m up for a ride / I’m in the mood to go for a drive / I’d like to go driving
out from under the city lights
– away from the city / out into the countryside
Sounds peachy
– Sounds great / That seems like a cool idea / I like the sound of that
It’d take an hour to get anywhere else.
– To go somewhere else would take about an hour.
Don’t be like that.
– Don’t be so negative. / Try not to think that way.
Dig deep
– Search hard / Try with all your power / Give it your best effort
Find the romanticist in you.
– Look for that romantic part of your soul. / Discover romance.
Yes Dearist.
– OK, my love. / Your wish is my command, my loving soul mate.
*I shall follow wherever you lead.
– You point me in the right directions and I shall go there.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-17-근사한데.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-17 근사한데.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:31 GMT</pubDate></item><item><title><![CDATA[2025-02-12 압권인데]]></title><description><![CDATA[A: My hotel room got burglarized! I’m in deep water!
B: That totally reeks! What did management have to say?
A: They said I would have been wise to leave valuables with the desk.
B: So they accept no responsibility? 압권인데!
A:내 호텔방에 도둑이 들었어! 큰일났어!
B:어머, 끔찍하다! 호텔에선 뭐래?
A:귀중품을 데스크에 맡겨둬야 했었다고 하더라.
B:그럼 자기네들 책임이 없다는 거야? That takes the cake!
[Additional expressions]
My hotel room got burglarized!
– Things were stolen from my room at the hotel!
I’m in deep water!
– I’ve got a huge problem now! / Now I’m really in a bad situation!
That totally reeks!
– That’s a terrible problem! / Oh my god! / That’s absolutely horrible!
What did management have to say?
– What did the hotel manager say to you about it?
They said I would have been wise to
– Their comment was that it would have been a better decision to
leave valuables with the desk
– put anything of value in the hotel safe / let them hold my valuables
So they accept no responsibility?
– I guess that means they have no intention of compensating you?
That takes the cake!
– That’s the worst deal ever! / They win the prize for being the worst people ever!]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-12-압권인데.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-12 압권인데.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:26 GMT</pubDate></item><item><title><![CDATA[2025-02-05 엄마가 지겹게 잔소리 하신다]]></title><description><![CDATA[A: My mom wants to hear wedding bells. 엄마가 지겹게 잔소리 하신다.
B: We’ve gone over this. We’ll get there at our own pace.
A: We’re on the same page. I’m just saying.
B: When our financial goals are reached, let’s dive in.
A: 우리 엄마가 웨딩마치 좀 듣고 싶으시대네. She’s harping on me.
B: 그 얘기는 이미 끝났잖아. 결혼식은 우리 속도대로 하자구.
A: 우린 서로 그 문제에 대해서는 동의하고 있잖아. 그냥 말해본 거야.
B: 우리 경제적인 문제가 해결되면/경제적인 목표를 이루면, 그 때 하자구.
[Additional expressions]
My mom wants to hear wedding bells.
– My mother is looking forward to when we get married.
She’s harping on me.
– She’s been nagging me about it. / She’s all over me concerning that.
We’ve gone over this.
– We’ve already talked about this in detail. / We’ve hashed this out already.
We’ll get there at our own pace.
– We can do that when we’re ready. / When the time is right, we’ll do it.
We’re on the same page.
– We have the same opinion about that. / We’re in total agreement.
I’m just saying.
– I’m simply telling you. / I just want to let you know.
When our financial goals are reached
– When we have enough money set aside / When the cash is ready
let’s dive in
– let’s go for it / let’s make the big move / nothing will hold us backToday’s ExpressionSunny: Steve is out sick today, and I don’t know how I am going to call all of the customers on this list.James: Why don’t I pitch in and make some calls for you?Pitch in
(작업, 아이디어, 자금 등을 지원하며) 협력하다/돕다 Why don’t I pitch in and make some calls for you?
제가 전화를 돌려서 좀 도와드릴게요. Can you pitch in so we can solve this problem?
이 문제를 해결할 수 있도록 도와주실래요? Application Practice 응용연습 Easy: Jane에게 도와 달라고 부탁할 수 있나요?
Can you ask Jane to pitch in? Intermediate: 모두가 힘을 합하면 작업을 오늘까지 끝낼 수 있습니다. (하루가 끝날 때까지 by the end of the day)
If everybody pitches in, we can finish the work by the end of the day. Hard: 저희 부서에서 누군가 도울 수 있는지 보겠습니다.
Let me see if anyone in my department can pitch in. ]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-05-엄마가-지겹게-잔소리-하신다.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-05 엄마가 지겹게 잔소리 하신다.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:23 GMT</pubDate></item><item><title><![CDATA[2025-02-03 누구한테 안 좋은 소문을 들었어.]]></title><description><![CDATA[A: 누구한테 안 좋은 소문을 들었어. about Bill. Rumors are flying!
B: Believe only half of what you hear and some of what you see.
A: I know. I take such things with a grain of salt.
B: Good idea. He deserves a chance to speak up for himself.
A: Someone put a bug in my ear. 빌에 관한 , 소문 한 번 빠르더라!
B: 네가 듣는 얘기 반만 믿고, 보는 것 조금만 믿어.
A: 알아. 그런 얘기는 알아서 가감해서 들어.
B: 좋은 생각이야. 빌도 자신을 대변할 기회를 가져야지.
[Additional expressions]
Someone put a bug in my ear about Bill.
– Somebody told me something about Bill and I can’t forget it.
Rumors are flying!
– People are really doing a lot of talking! / There are so many rumors going around.
Believe only half of what you hear
– Don’t believe everything you hear / Trust just a portion of what you hear
some of what you see
– a small percentage of what you catch with your own eyes
I know.
– I’m aware of that. / I completely understand that. / I get that.
I take such things with a grain of salt.
– I don’t place a lot of importance or value in such things.
Good idea.
– That’s smart. / You’re wise for that. / That’s the right idea. / That’s the way to go.
He deserves a chance to speak up for himself.
– It’s only right that he can defend himself.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-03-누구한테-안-좋은-소문을-들었어..html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-03 누구한테 안 좋은 소문을 들었어..md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:21 GMT</pubDate></item><item><title><![CDATA[2025-01-22 세상 돌아가는 걸 알게 해주거든]]></title><description><![CDATA[A: You seem to be a regular “newsie”. Do you read the whole paper?
B: From front to back, sure. 세상 돌아가는 걸 알게 해주거든.
A: Some say that the news media is often very biased.
B: That’s why I get my information from several sources.
A: 넌 신문을 매일 읽는 것 같은데, 신문 전체를 다 읽니?
B: 처음부터 끝까지, 물론이지. It keeps me up on things.
A: 뉴스 매체가 종종 한쪽에 편향된다고들 하던데.
B: 그래서 여러 군데에서 정보를 취합해서 얻지.
[Additional expressions]
You seem to be a regular “newsie”.
– It seems like you pay a lot of attention to current news.
Do you read the whole paper?
– Do you read every article in the newspaper? / Do you go over the entire paper?
From front to back, sure.
– Every page, of course. / I don’t skip one page, certainly.
It keeps me up on things.
– It helps me to know what the current events are. / I stay current, like that.
Some say that
– According to some people / The opinion of many people is that
The news media is often very biased.
– News media print and broadcast their own slanted views.
That’s why
– That’s the reason / For that reason / Because of that
I get my information from several sources.
– I find out the news by confirming with a variety of providers.]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-01-22-세상-돌아가는-걸-알게-해주거든.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-01-22 세상 돌아가는 걸 알게 해주거든.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 02:50:19 GMT</pubDate></item><item><title><![CDATA[TypedQuery, Type Token]]></title><description><![CDATA[JPA에서는 JPQL(Java Persistence Query Language)을 사용해 데이터베이스 쿼리를 작성합니다.
EntityManager#createQuery(String jpql, Class&lt;T&gt; resultClass) 메서드를 사용하면 반환 타입을 제네릭으로 지정할 수 있어,
컴파일 타임의 타입 안전성과 런타임의 매핑 검증을 모두 보장할 수 있습니다.
컴파일 타임 체크:
반환 타입을 미리 지정함으로써, 잘못된 타입 사용을 컴파일 단계에서 잡을 수 있습니다.
형변환 제거:
명시적인 형변환이 필요 없어 코드가 깔끔해지며, 런타임 오류 가능성이 줄어듭니다. 제네릭:
제네릭은 클래스나 메서드가 다양한 타입에 대해 동작할 수 있게 하여, 재사용성과 타입 안전성을 보장합니다.
타입 토큰:
String.class와 같이 클래스 객체를 전달하면, 제네릭 타입 정보가 런타임에 보존됩니다.
이는 자바의 제네릭 타입 소거(Type Erasure) 문제를 보완하는 역할을 합니다.
// JPQL 쿼리 문자열
String jpql = "SELECT e.name FROM Employee e WHERE e.department = :dept"; // 반환 타입을 String으로 지정하여 TypedQuery 생성
TypedQuery&lt;String&gt; query = entityManager.createQuery(jpql, String.class);
query.setParameter("dept", "Sales"); // 쿼리 실행 및 결과 받기
List&lt;String&gt; employeeNames = query.getResultList();
for (String name : employeeNames) { System.out.println("Employee Name: " + name);
} 설명:
위 코드에서 createQuery 메서드의 두 번째 인자로 String.class를 전달하면, 쿼리 결과가 String 타입임을 명시합니다.
따라서 TypedQuery&lt;String&gt;로 선언되어, getResultList() 호출 시 자동으로 List&lt;String&gt; 타입으로 결과를 받을 수 있습니다.
// JPQL 쿼리 문자열 (Employee 엔티티 대상)
String jpql = "SELECT e FROM Employee e WHERE e.salary &gt; :minSalary"; // 반환 타입을 Employee로 지정하여 TypedQuery 생성
TypedQuery&lt;Employee&gt; query = entityManager.createQuery(jpql, Employee.class);
query.setParameter("minSalary", 50000); // 쿼리 실행 및 결과 받기
List&lt;Employee&gt; highEarners = query.getResultList();
for (Employee emp : highEarners) { System.out.println("Employee: " + emp.getName() + ", Salary: " + emp.getSalary());
} 설명:
이 예제에서는 Employee 엔티티를 대상으로 하는 쿼리를 작성했습니다.
반환 타입을 Employee.class로 지정하여, 쿼리 결과가 Employee 객체임을 보장합니다.
다음은 EntityManager#createQuery 메서드가 내부에서 어떻게 동작하는지 단계별로 정리한 다이어그램입니다.+-------------------------+
| JPQL 쿼리 문자열 |
| "SELECT e.name FROM ..." |
+-----------+-------------+ | v
+-------------------------+
| createQuery(jpql, | 전달된 타입 토큰
| String.class) | --------------------&gt;
+-----------+-------------+ | v
+-------------------------+
| TypedQuery&lt;String&gt; | 내부적으로 생성
| 객체 생성 |
+-----------+-------------+ | v
+-------------------------+
| 쿼리 실행 및 결과 | 결과 매핑 시,
| getResultList() | String 타입 검증
+-------------------------+ 설명: JPQL 쿼리 문자열을 전달합니다. createQuery 메서드에 String.class를 전달하여 타입 토큰으로 사용합니다. 내부적으로 TypedQuery&lt;String&gt; 객체가 생성되고, 쿼리 실행 시 결과를 String 타입으로 매핑합니다. [ JPQL 쿼리 ] | v
[ JPQL 파서: 쿼리 분석 및 SQL 변환 ] | v
[ SQL 실행 ] | v
[ 결과셋 획득 ] | v
[ 결과 매핑 (타입 토큰 활용) ] | v
[ 최종 결과: List&lt;String&gt; ] 설명: JPQL 파서:
JPQL 쿼리를 분석해 실제 데이터베이스에 맞는 SQL로 변환합니다.
결과 매핑:
SQL 실행 후 반환된 결과를, 전달된 String.class 타입 토큰에 따라 매핑합니다.
이때 타입 불일치가 있으면 예외가 발생합니다. 컴파일 타임 타입 안전성:
잘못된 타입 사용을 미리 잡아내어 런타임 오류를 방지할 수 있습니다.
형변환 생략:
반환 타입을 명시함으로써, 별도의 캐스팅 없이 바로 사용할 수 있습니다.
코드 가독성:
반환 타입이 명확하게 표현되어 코드의 의도가 드러납니다.
IDE 지원 강화:
제네릭 타입 정보를 통해 코드 자동완성과 정적 분석이 개선됩니다.
EntityManager#createQuery(String jpql, Class&lt;T&gt; resultClass) 메서드는 제네릭과 타입 토큰을 활용하여
컴파일 시점과 런타임 모두에서 타입 안정성을 보장합니다.
이 방식은 코드를 보다 명확하고 안전하게 작성할 수 있도록 도와주며,
특히 대규모 프로젝트나 유지보수가 필요한 시스템에서 유용합니다.이 자료를 통해 반환 타입을 클래스 형태로 받는 방법의 원리와 장점을 보다 명확히 이해할 수 있기를 바랍니다.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/typedquery,-type-token.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/TypedQuery, Type Token.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 31 Mar 2025 01:46:16 GMT</pubDate></item><item><title><![CDATA[JPA Association Mapping]]></title><description><![CDATA[좋아요. JPA의 모든 association(연관관계) 매핑에 대해 초급자 관점에서 개념 설명과 실습 자료, 시각 자료(필요시 Mermaid 다이어그램 포함)를 포함한 공식 문서 및 블로그 자료를 조사해드릴게요. 한국어로 된 자료를 우선으로 할게요. 완료되면 바로 알려드릴게요!JPA(Java Persistence API)에서 연관관계 매핑이란 객체 사이의 참조 관계를 데이터베이스의 외래 키(FK)로 연결하는 것을 의미합니다 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%20%EB%A7%A4%ED%95%91%EC%9D%B4%EB%9E%80%20%EA%B0%9D%EC%B2%B4%EC%9D%98%20%EC%B0%B8%EC%A1%B0%EC%99%80%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98,%EC%99%B8%EB%9E%98%20%ED%82%A4%EB%A5%BC%20%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%84%20%EC%9D%98%EB%AF%B8%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%20%EB%A7%A4%ED%95%91%EC%9D%B4%EB%9E%80%20%EA%B0%9D%EC%B2%B4%EC%9D%98%20%EC%B0%B8%EC%A1%B0%EC%99%80%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98,%EC%99%B8%EB%9E%98%20%ED%82%A4%EB%A5%BC%20%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%84%20%EC%9D%98%EB%AF%B8%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>). 즉, 한 엔티티의 필드로 다른 엔티티 객체를 직접 참조하고, JPA가 이를 테이블의 FK와 매핑해주는 것입니다 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%20%EB%A7%A4%ED%95%91%EC%9D%B4%EB%9E%80%20%EA%B0%9D%EC%B2%B4%EC%9D%98%20%EC%B0%B8%EC%A1%B0%EC%99%80%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98,%EC%99%B8%EB%9E%98%20%ED%82%A4%EB%A5%BC%20%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%84%20%EC%9D%98%EB%AF%B8%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%20%EB%A7%A4%ED%95%91%EC%9D%B4%EB%9E%80%20%EA%B0%9D%EC%B2%B4%EC%9D%98%20%EC%B0%B8%EC%A1%B0%EC%99%80%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98,%EC%99%B8%EB%9E%98%20%ED%82%A4%EB%A5%BC%20%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%84%20%EC%9D%98%EB%AF%B8%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>). 관계형 데이터베이스에서는 두 테이블을 FK로 연결하면 자동으로 서로 참조가 가능한 양방향 관계가 되지만, 객체 지향에서는 한쪽에만 참조 필드가 있으면 단방향 관계, 양쪽 엔티티 모두가 서로를 참조하면 양방향 관계가 됩니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%80%20%EC%99%B8%EB%9E%98%20%ED%82%A4%20%ED%95%98%EB%82%98%EB%A1%9C%20%EC%84%9C%EB%A1%9C,%EC%96%91%EC%AA%BD%EC%9D%B4%20%EC%84%9C%EB%A1%9C%20%EC%B0%B8%EC%A1%B0%ED%95%98%EB%A9%B4%20%EC%96%91%EB%B0%A9%ED%96%A5%EC%9D%B4%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%80%20%EC%99%B8%EB%9E%98%20%ED%82%A4%20%ED%95%98%EB%82%98%EB%A1%9C%20%EC%84%9C%EB%A1%9C,%EC%96%91%EC%AA%BD%EC%9D%B4%20%EC%84%9C%EB%A1%9C%20%EC%B0%B8%EC%A1%B0%ED%95%98%EB%A9%B4%20%EC%96%91%EB%B0%A9%ED%96%A5%EC%9D%B4%20%EB%90%9C%EB%8B%A4" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 양방향 매핑 시에는 연관관계의 주인(Owner)을 정해 한쪽만 FK를 관리하고, 반대쪽은 읽기 전용으로만 활용됩니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EA%B0%9D%EC%B2%B4%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EA%B4%80%EA%B3%84%EB%8A%94%20A,%EC%93%B0%EA%B8%B0%2C%20%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%2C%20%EC%82%AD%EC%A0%9C%EA%B0%80%20%EC%95%88%EB%90%9C%EB%8B%A4%EB%8A%94%20%EB%9C%BB%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EA%B0%9D%EC%B2%B4%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EA%B4%80%EA%B3%84%EB%8A%94%20A,%EC%93%B0%EA%B8%B0%2C%20%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%2C%20%EC%82%AD%EC%A0%9C%EA%B0%80%20%EC%95%88%EB%90%9C%EB%8B%A4%EB%8A%94%20%EB%9C%BB%EC%9D%B4%EB%8B%A4" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>) (즉, 외래 키를 가진 쪽이 주인이고, 주인만이 FK 등록/수정/삭제를 수행 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=3," rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=3," target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>)).<br>JPA에서 설정할 수 있는 연관관계 유형과 다중성(multiplicity)은 크게 네 가지입니다 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EA%B4%80%EA%B3%84%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%91%90%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%8A%94%20%EB%8B%A4%EC%9D%8C,%EC%A4%91%20%ED%95%98%EB%82%98%EC%9D%98%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EA%B0%96%EC%8A%B5%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EA%B4%80%EA%B3%84%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%91%90%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%8A%94%20%EB%8B%A4%EC%9D%8C,%EC%A4%91%20%ED%95%98%EB%82%98%EC%9D%98%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EA%B0%96%EC%8A%B5%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>):
다대일 (Many-to-One, N:1) 일대다 (One-to-Many, 1:N)
일대일 (One-to-One, 1:1)
다대다 (Many-to-Many, N:N)
각 연관관계마다 단방향/양방향 매핑 방식이 있으며, 초급자가 알아야 할 개념과 사용 방법을 아래에 정리합니다. 필요에 따라 예제 코드, 실습 자료 링크와 다이어그램도 함께 소개합니다.각 연관관계 유형의 특징을 표로 정리하면 다음과 같습니다:각 연관관계 별로 개념과 예제를 자세히 살펴보겠습니다.<br> (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) 그림: Member와 Team 간의 다대일 단방향 관계 – 한 팀(Team)에는 여러 회원(Member)이 소속될 수 있는 관계로, 객체 상으로 Member가 Team을 참조하고 있고, 테이블에서도 회원 테이블(Member)에 팀 ID FK가 존재합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=,N%29%EC%9D%B4%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8%20%ED%98%95%ED%83%9C%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=,N%29%EC%9D%B4%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8%20%ED%98%95%ED%83%9C%EC%9D%B4%EB%8B%A4" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>). <br>다대일(N:1)은 가장 기본적이고 많이 쓰이는 연관관계입니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%A0%9C%EC%9D%BC%20%EB%A8%BC%EC%A0%80%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%A0%9C%EC%9D%BC%20%EB%A8%BC%EC%A0%80%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 예를 들어 “게시판(Board) - 게시글(Post)” 관계를 생각하면, 하나의 게시판에는 여러 게시글이 달릴 수 있고, 각 게시글은 오직 하나의 게시판에만 속합니다. 이는 게시글 : 게시판 = N : 1 관계이며, 외래 키(FK)를 게시글 쪽에서 관리하는 형태입니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=,N%29%EC%9D%B4%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8%20%ED%98%95%ED%83%9C%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=,N%29%EC%9D%B4%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8%20%ED%98%95%ED%83%9C%EC%9D%B4%EB%8B%A4" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>). <br>
단방향 다대일: 다쪽(N) 엔티티에만 참조 필드를 두고 @ManyToOne으로 매핑합니다. 예를 들어 Post 엔티티 내부에 Board board 필드를 두고 @ManyToOne @JoinColumn(name="BOARD_ID")를 설정하면, Post 테이블에 BOARD_ID FK 컬럼을 통해 Board와 연결됩니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>) (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%EC%97%90%EC%84%9C%EB%8A%94%20%EB%8B%A4%20%EC%AA%BD%EC%9D%B8%20Post%EC%97%90%EC%84%9C,%EB%A7%8C%20%EC%B6%94%EA%B0%80%ED%95%B4%EC%A4%AC%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%EC%97%90%EC%84%9C%EB%8A%94%20%EB%8B%A4%20%EC%AA%BD%EC%9D%B8%20Post%EC%97%90%EC%84%9C,%EB%A7%8C%20%EC%B6%94%EA%B0%80%ED%95%B4%EC%A4%AC%EB%8B%A4" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>). 단방향 관계에서는 오직 Post에서 Board를 참조하며, Board 입장에서는 자신에게 속한 Posts를 알 수 없습니다 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EB%8B%A8%EB%B0%A9%ED%96%A5%EC%9D%80%20%ED%95%9C%20%EC%AA%BD%EC%9D%98%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EC%83%81%EB%8C%80,%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC%20%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B3%A0%20%EC%9E%88%EB%8A%94%20%EC%83%81%ED%83%9C%EC%9E%85%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EB%8B%A8%EB%B0%A9%ED%96%A5%EC%9D%80%20%ED%95%9C%20%EC%AA%BD%EC%9D%98%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EC%83%81%EB%8C%80,%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC%20%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B3%A0%20%EC%9E%88%EB%8A%94%20%EC%83%81%ED%83%9C%EC%9E%85%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>). 참고로 JPA에서는 @ManyToOne 필드 쪽이 자동으로 연관관계의 주인이 되며, 별도 mappedBy 설정이 없습니다. <br>
양방향 다대일: 양쪽 엔티티가 서로를 참조하도록 설정합니다. Post 엔티티는 위와 동일하게 @ManyToOne Board board를 갖고, 반대로 Board 엔티티에는 @OneToMany(mappedBy="board") List&lt;Post&gt; posts 컬렉션을 추가합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=public%20class%20Board%20,GeneratedValue%20private%20Long%20id" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=public%20class%20Board%20,GeneratedValue%20private%20Long%20id" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>). 이렇게 하면 Board 통해서도 관련된 Post 목록을 가져올 수 있어 객체 그래프 탐색이 자유로워집니다. 연관관계의 주인은 여전히 FK를 가진 Post(ManyToOne)이며, Board.posts 측은 mappedBy로 지정된 읽기 전용 거울 객체입니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 코드 상으로는 Board에 컬렉션 필드만 추가하면 되며, mappedBy="board"로 Post의 필드를 가리켜 양방향 연관관계를 완성합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 주인이 아닌 쪽(Board)은 데이터를 읽기만 할 수 있고 여기서 객체를 추가/삭제한다고 해서 FK가 변경되지 않으므로, 양방향 관계에서는 주인 쪽(Post)에서 관계를 관리하는 코드(편의 메서드 등)를 작성하는 것이 일반적입니다. <br>다대일 관계는 실무에서 가장 많이 사용되며, 항상 ManyToOne 쪽에 FK가 존재하므로 이쪽이 연관관계 주인이 됩니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 학습 자료로는 슬기로운 개발생활 블로그의 연관관계 매핑 글이 개념 설명과 코드 예제를 잘 보여줍니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%A0%9C%EC%9D%BC%20%EB%A8%BC%EC%A0%80%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%A0%9C%EC%9D%BC%20%EB%A8%BC%EC%A0%80%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%40Entity%20public%20class%20Member%20,private%20Long%20id" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%40Entity%20public%20class%20Member%20,private%20Long%20id" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 해당 글은 Member-Team 예제를 통해 다대일 단방향/양방향 설정과 동작을 설명하며, 객체 다이어그램과 테이블 다이어그램을 함께 제시해 이해를 돕습니다 (예: Member가 Team을 참조하고 MEMBER 테이블에 TEAM_ID FK가 연결됨) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%8A%94%20%EA%B0%80%EC%9E%A5%EB%A7%8E%EC%9D%B4%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%B4%EA%B3%A0,%EA%B7%B8%EB%9E%98%EC%84%9C%20%EC%A0%9C%EC%9D%BC%20%EC%A4%91%EC%9A%94%ED%95%9C%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%8A%94%20%EA%B0%80%EC%9E%A5%EB%A7%8E%EC%9D%B4%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%B4%EA%B3%A0,%EA%B7%B8%EB%9E%98%EC%84%9C%20%EC%A0%9C%EC%9D%BC%20%EC%A4%91%EC%9A%94%ED%95%9C%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%B4%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). <br>또 다른 자료로 Velog(Hocaron)의 게시판-게시글 예제도 있습니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EA%B2%8C%EC%8B%9C%ED%8C%90%28Board%29%EA%B3%BC%20%EA%B2%8C%EC%8B%9C%EA%B8%80%28Post%29%EC%9D%B4%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EA%B2%8C%EC%8B%9C%ED%8C%90%28Board%29%EA%B3%BC%20%EA%B2%8C%EC%8B%9C%EA%B8%80%28Post%29%EC%9D%B4%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>). 이 글에서는 Post와 Board 예제 코드로 @ManyToOne 사용 방법과 옵션을 설명하며, 단방향 vs 양방향 설정에 따른 차이를 서술합니다. 실습을 위해 코드와 함께 설명을 제공하니 초급자가 따라해보기 좋습니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>) (<a data-tooltip-position="top" aria-label="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%EC%97%90%EC%84%9C%EB%8A%94%20%EB%8B%A4%20%EC%AA%BD%EC%9D%B8%20Post%EC%97%90%EC%84%9C,%EB%A7%8C%20%EC%B6%94%EA%B0%80%ED%95%B4%EC%A4%AC%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@haron/JPA-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EC%9D%BC%EB%8C%80%EB%8B%A4#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%EC%97%90%EC%84%9C%EB%8A%94%20%EB%8B%A4%20%EC%AA%BD%EC%9D%B8%20Post%EC%97%90%EC%84%9C,%EB%A7%8C%20%EC%B6%94%EA%B0%80%ED%95%B4%EC%A4%AC%EB%8B%A4" target="_self">[JPA] 다양한 연관관계 매핑 - 다대일, 일대다</a>).<br>일대다(1:N) 관계는 다대일의 반대 방향, 즉 한 엔티티가 여러 개의 다른 엔티티를 갖는 관계입니다. 예를 들어 한 Team에 여러 Member가 속한다면 Team ↣ Member는 1:N 관계입니다 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EA%B4%80%EA%B3%84%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%91%90%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%8A%94%20%EB%8B%A4%EC%9D%8C,%EC%A4%91%20%ED%95%98%EB%82%98%EC%9D%98%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EA%B0%96%EC%8A%B5%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EA%B4%80%EA%B3%84%EC%97%90%20%EC%9E%88%EB%8A%94%20%EB%91%90%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%8A%94%20%EB%8B%A4%EC%9D%8C,%EC%A4%91%20%ED%95%98%EB%82%98%EC%9D%98%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EA%B0%96%EC%8A%B5%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>) (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4%20%ED%95%98%EB%82%98%EC%9D%98%20Team%EC%9D%80%20%EC%97%AC%EB%9F%AC%20Member%EB%A5%BC,Team%20%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C%EB%8A%94%20Member%EC%99%80%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EC%9D%B4%EB%A9%B0" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4%20%ED%95%98%EB%82%98%EC%9D%98%20Team%EC%9D%80%20%EC%97%AC%EB%9F%AC%20Member%EB%A5%BC,Team%20%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C%EB%8A%94%20Member%EC%99%80%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EC%9D%B4%EB%A9%B0" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>). JPA에서 일대다를 표현하는 기본 방식은 다대일의 양방향 관계를 이용하는 것입니다. 일반적으로 1:N 단독으로 매핑하는 것은 권장되지 않으며, 대신 N쪽에 @ManyToOne을 두고 1쪽에 @OneToMany(mappedBy)를 두는 양방향 패턴을 주로 사용합니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20," target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). <br>
양방향 1:N (실제 구현): 앞서 다대일 양방향과 마찬가지로, N쪽(Member)에 @ManyToOne FK 필드를 두고 1쪽(Team)에 @OneToMany(mappedBy) 컬렉션을 추가하는 형태가 일반적입니다. 이렇게 하면 결국 데이터베이스 상으로는 MEMBER 테이블에 있는 FK로 관계를 관리하게 되어, 다대일 양방향과 동일한 구조입니다. 사실상 별도의 "일대다" 테이블 관계란 없고, 다대일의 반대편을 정의하는 개념으로 이해하면 됩니다 (<a data-tooltip-position="top" aria-label="https://dev-coco.tistory.com/106#:~:text=%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4%20%ED%95%98%EB%82%98%EC%9D%98%20Team%EC%9D%80%20%EC%97%AC%EB%9F%AC%20Member%EB%A5%BC,Team%20%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C%EB%8A%94%20Member%EC%99%80%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EC%9D%B4%EB%A9%B0" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev-coco.tistory.com/106#:~:text=%EC%98%88%EB%A5%BC%EB%93%A4%EC%96%B4%20%ED%95%98%EB%82%98%EC%9D%98%20Team%EC%9D%80%20%EC%97%AC%EB%9F%AC%20Member%EB%A5%BC,Team%20%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C%EB%8A%94%20Member%EC%99%80%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EC%9D%B4%EB%A9%B0" target="_self">[JPA] 연관관계 매핑 알아보기 (@ManyToOne, @OneToMany, @OneToOne, @ManyToMany)</a>). 실무에서도 1:N 관계가 필요하면 거의 이 방법으로 해결합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94,%ED%86%B5%ED%95%B4%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84%20%EB%8B%A4%EB%A3%A8%EB%8A%94%EA%B1%B0%20%EC%9E%90%EC%B2%B4%EA%B0%80%20%EC%89%BD%EC%A7%80%EC%95%8A%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94,%ED%86%B5%ED%95%B4%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84%20%EB%8B%A4%EB%A3%A8%EB%8A%94%EA%B1%B0%20%EC%9E%90%EC%B2%B4%EA%B0%80%20%EC%89%BD%EC%A7%80%EC%95%8A%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). <br>
단방향 1:N (비권장): OneToMany를 단독으로 사용하는 것도 가능하긴 하나, JPA 입장에서 특수한 경우입니다. 1쪽(예: Team) 엔티티에 @OneToMany List&lt;Member&gt; 컬렉션을 두고 직접 외래 키를 관리하도록 설정할 수 있습니다. 이때 중요한 점은 반드시 @JoinColumn을 사용해서 JPA에게 "Member 테이블의 TEAM_ID FK를 이용하라"고 알려주어야 합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%A6%89%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%EB%8A%94%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4,%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%ED%8A%B9%EC%9D%B4%ED%95%9C%20%EA%B5%AC%EC%A1%B0%EB%A5%BC%20%EA%B0%96%EA%B2%8C%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%A6%89%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%EB%8A%94%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4,%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%ED%8A%B9%EC%9D%B4%ED%95%9C%20%EA%B5%AC%EC%A1%B0%EB%A5%BC%20%EA%B0%96%EA%B2%8C%20%EB%90%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). @JoinColumn을 지정하지 않으면 JPA는 중간 조인 테이블을 생성하여 1:N을 표현하려 하기 때문입니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%A6%89%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%EB%8A%94%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4,%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%ED%8A%B9%EC%9D%B4%ED%95%9C%20%EA%B5%AC%EC%A1%B0%EB%A5%BC%20%EA%B0%96%EA%B2%8C%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%A6%89%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%EB%8A%94%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4,%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94%20%ED%8A%B9%EC%9D%B4%ED%95%9C%20%EA%B5%AC%EC%A1%B0%EB%A5%BC%20%EA%B0%96%EA%B2%8C%20%EB%90%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 조인 테이블 방식은 별도의 연결 테이블을 만들고 관리해야 하므로 거의 원하지 않는 상황입니다. @JoinColumn을 주면 기존 MEMBER 테이블의 FK를 그대로 써서 연결합니다. 단방향 1:N의 예제 코드로는 다음과 같은 형태입니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=Image" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=Image" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>) (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%2F%2F%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%20%40OneToMany%20%40JoinColumn,Member%3E%20members%20%3D%20new%20ArrayList" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%2F%2F%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%20%40OneToMany%20%40JoinColumn,Member%3E%20members%20%3D%20new%20ArrayList" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>):
@Entity
public class Team { @Id @GeneratedValue private Long id; private String name; @OneToMany @JoinColumn(name = "TEAM_ID") // MEMBER 테이블의 FK 컬럼을 사용 private List&lt;Member&gt; members = new ArrayList&lt;&gt;();
} 위처럼 Team 엔티티에 @OneToMany를 설정하면 Team이 Member를 직접 관리하는 구조가 됩니다. 그러나 문제점으로, Team 엔티티가 관리하는 FK가 실제로는 Member 테이블에 있기 때문에 JPA가 내부적으로 추가적인 UPDATE SQL을 실행하는 등 일관성이 떨어집니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=,MEMBER%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98%20%EC%99%B8%EB%9E%98%20%ED%82%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=,MEMBER%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98%20%EC%99%B8%EB%9E%98%20%ED%82%A4" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 즉, team.getMembers().add(member) 같은 연산을 하면 TEAM이 아닌 MEMBER 테이블에 업데이트 쿼리가 나가므로 코드만 봐서는 동작을 예측하기 어려워집니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94,%ED%86%B5%ED%95%B4%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84%20%EB%8B%A4%EB%A3%A8%EB%8A%94%EA%B1%B0%20%EC%9E%90%EC%B2%B4%EA%B0%80%20%EC%89%BD%EC%A7%80%EC%95%8A%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94,%ED%86%B5%ED%95%B4%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84%20%EB%8B%A4%EB%A3%A8%EB%8A%94%EA%B1%B0%20%EC%9E%90%EC%B2%B4%EA%B0%80%20%EC%89%BD%EC%A7%80%EC%95%8A%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 이러한 복잡성 때문에 일대다 단방향은 거의 사용하지 않고, 가능하면 다대일 양방향으로 설계하여 N쪽에서 관계를 관리하도록 만드는 것이 바람직합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94,%ED%86%B5%ED%95%B4%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84%20%EB%8B%A4%EB%A3%A8%EB%8A%94%EA%B1%B0%20%EC%9E%90%EC%B2%B4%EA%B0%80%20%EC%89%BD%EC%A7%80%EC%95%8A%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%80%20%EC%97%94%ED%8B%B0%ED%8B%B0%EA%B0%80%20%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94,%ED%86%B5%ED%95%B4%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84%20%EB%8B%A4%EB%A3%A8%EB%8A%94%EA%B1%B0%20%EC%9E%90%EC%B2%B4%EA%B0%80%20%EC%89%BD%EC%A7%80%EC%95%8A%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=,MEMBER%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98%20%EC%99%B8%EB%9E%98%20%ED%82%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=,MEMBER%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%98%20%EC%99%B8%EB%9E%98%20%ED%82%A4" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). JPA 공식 스펙에서도 일대다 단방향은 조인 테이블 전략이 기본이므로 특별한 경우가 아니면 추천되지 않습니다. <br>요약하면, 일대다 관계는 사실상 다대일의 뒷면이며, 초급 단계에서는 "다대일(@ManyToOne)을 설정하고 필요시 반대쪽에 @OneToMany(mappedBy)를 추가하여 양방향으로 사용한다"라고 이해하는 것이 좋습니다. 관련 학습 자료로는 앞서 소개한 블로그들에서 다대일 양방향 예제에 일대다 관계의 동작이 함께 설명되어 있습니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EC%AA%BD%EC%9D%B4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%EB%AF%80%EB%A1%9C,Member%EA%B0%80%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A3%BC%EC%9D%B8%EC%9D%B4%20%EB%90%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20," target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 특히 IT 개발자들의 울타리 블로그의 정리글에서는 "일대다 단방향보다는 다대일 양방향을 사용하는 것을 권장"한다고 강조하며, 단방향 1:N 사용 시 발생하는 이슈들을 표로 잘 정리해 두었습니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EB%8B%A4%20," target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>).<br> (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) 그림: Member와 Locker 간의 일대일 관계 – 회원당 하나의 사물함을 가지는 시나리오로, 객체 관계에서는 Member가 Locker를 1:1로 참조하고 있습니다. 데이터베이스에서는 한쪽 테이블(MEMBER)에만 FK를 두고 UNIQUE 제약으로 1:1을 보장하는 형태를 보입니다 (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>) (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=%EA%B2%BD%EC%9A%B0%20FK%20%EC%9C%84%EC%B9%98%20%EC%A3%BC%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90,%EC%84%A4%EA%B3%84%20%EB%B3%80%EA%B2%BD%20%EC%9C%A0%EC%9A%A9%20DBA%20%EC%84%A0%ED%98%B8" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=%EA%B2%BD%EC%9A%B0%20FK%20%EC%9C%84%EC%B9%98%20%EC%A3%BC%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90,%EC%84%A4%EA%B3%84%20%EB%B3%80%EA%B2%BD%20%EC%9C%A0%EC%9A%A9%20DBA%20%EC%84%A0%ED%98%B8" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>).<br>일대일(1:1)은 양쪽 모두 오직 하나의 상대만 갖는 관계입니다 (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=1%3A1%20%EA%B4%80%EA%B3%84%EB%8A%94%20%EC%96%91%EC%AA%BD%EC%9D%B4%20%EC%84%9C%EB%A1%9C%20%ED%95%98%EB%82%98%EC%9D%98,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%20%EC%9E%88%EB%8D%98%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EC%A1%B0%ED%9A%8C%EA%B0%80%20%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=1%3A1%20%EA%B4%80%EA%B3%84%EB%8A%94%20%EC%96%91%EC%AA%BD%EC%9D%B4%20%EC%84%9C%EB%A1%9C%20%ED%95%98%EB%82%98%EC%9D%98,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%20%EC%9E%88%EB%8D%98%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EC%A1%B0%ED%9A%8C%EA%B0%80%20%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>). 예를 들어 “회원(Member) - 사물함(Locker)” 관계에서, 한 회원은 최대 하나의 사물함만 배정받고 한 사물함도 하나의 회원에게만 할당될 수 있다면 1:1 관계입니다. 테이블 설계 상으로는 외래 키를 어느 테이블에 둘지 선택 가능합니다 (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C%EB%8A%94%20FK,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%20%EC%9E%88%EB%8D%98%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EC%A1%B0%ED%9A%8C%EA%B0%80%20%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C%EB%8A%94%20FK,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%20%EC%9E%88%EB%8D%98%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EC%A1%B0%ED%9A%8C%EA%B0%80%20%EA%B0%80%EB%8A%A5%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>). 즉, MEMBER 테이블에 LOCKER_ID FK 컬럼을 둘 수도 있고, 반대로 LOCKER 테이블에 MEMBER_ID FK를 둘 수도 있습니다. 두 경우 모두 DB에서는 1:1을 표현할 수 있지만 각각 장단점이 있습니다 (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>). JPA에서는 외래 키가 존재하는 쪽을 연관관계의 주인으로 삼아 매핑하게 됩니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20," target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>).
<br>
주 테이블(FK 소유) 단방향: 외래 키를 주 객체 쪽에 둔 경우입니다. 일반적으로 개발자들이 선호하는 방식으로, 예제의 MEMBER 테이블에 LOCKER_ID FK를 둔다고 가정하면, Member 엔티티에 @OneToOne @JoinColumn(name="LOCKER_ID") private Locker locker; 필드를 두면 됩니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=public%20class%20Member%20,private%20Long%20id" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=public%20class%20Member%20,private%20Long%20id" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 이렇게 하면 회원 조회 시 바로 Locker의 존재 여부를 확인할 수 있고 JPA 매핑도 편리합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=2,%EC%97%86%EC%9C%BC%EB%A9%B4%20%EC%99%B8%EB%9E%98%ED%82%A4%EC%97%90%20null%EA%B0%92%EC%9D%84%20%ED%97%88%EC%9A%A9%ED%95%B4%EC%95%BC%20%ED%95%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=2,%EC%97%86%EC%9C%BC%EB%A9%B4%20%EC%99%B8%EB%9E%98%ED%82%A4%EC%97%90%20null%EA%B0%92%EC%9D%84%20%ED%97%88%EC%9A%A9%ED%95%B4%EC%95%BC%20%ED%95%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 단방향 매핑에서는 Member가 Locker를 참조하지만, Locker는 Member를 모르는 상태입니다. <br>
주 테이블(FK 소유) 양방향: 위 경우에 Locker에서도 역으로 Member를 알고 싶다면, Locker 엔티티에 @OneToOne(mappedBy="locker") private Member member;를 추가하여 양방향으로 만듭니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%40OneToOne%20%40JoinColumn%28name%20%3D%20,Locker%20locker" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%40OneToOne%20%40JoinColumn%28name%20%3D%20,Locker%20locker" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%40Id%20%40GeneratedValue%20%40Column%28name%20%3D%20,private%20Long%20id" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%40Id%20%40GeneratedValue%20%40Column%28name%20%3D%20,private%20Long%20id" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 이때 연관관계의 주인은 FK를 가진 Member 쪽이고, Locker.member 필드는 mappedBy로 지정된 읽기 전용입니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20," target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 1:1 양방향 자체는 다대일 양방향과 설정 방법이 거의 같고, 차이점은 unique 제약과 데이터 1:1 대응 뿐입니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%B3%B4%EB%8B%A4%EC%8B%9C%ED%94%BC%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0,%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0%20%EC%9C%A0%EC%82%AC%ED%95%98%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%B3%B4%EB%8B%A4%EC%8B%9C%ED%94%BC%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0,%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0%20%EC%9C%A0%EC%82%AC%ED%95%98%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). <br>
대상 테이블(FK 소유) 양방향: 외래 키를 반대편인 대상 객체 쪽(예: LOCKER 테이블)에 두는 경우입니다. 이 때는 반드시 양방향으로만 매핑이 가능하며, FK를 가진 Locker 쪽이 주인이 되고 Member 쪽은 mappedBy로 설정해야 합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%A7%80%EA%B8%88%EA%B9%8C%EC%A7%80%EB%8A%94%20%EC%9D%BC%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%A4%91%EC%97%90%EC%84%9C%EB%8F%84%20%EC%A3%BC%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90,%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EA%B2%BD%EC%9A%B0%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%95%98%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%A7%80%EA%B8%88%EA%B9%8C%EC%A7%80%EB%8A%94%20%EC%9D%BC%EB%8C%80%EC%9D%BC%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%A4%91%EC%97%90%EC%84%9C%EB%8F%84%20%EC%A3%BC%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90,%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80%20%EC%9E%88%EB%8A%94%20%EA%B2%BD%EC%9A%B0%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%95%98%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%A8%BC%EC%A0%80%20%EB%8C%80%EC%83%81%20%ED%85%8C%EC%9D%B4%EB%B8%94,%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%84%20%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95%EC%9D%80%20%EC%97%86%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%A8%BC%EC%A0%80%20%EB%8C%80%EC%83%81%20%ED%85%8C%EC%9D%B4%EB%B8%94,%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EC%9D%84%20%ED%95%98%EB%8A%94%20%EB%B0%A9%EB%B2%95%EC%9D%80%20%EC%97%86%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 예를 들어 Locker 엔티티에 @OneToOne @JoinColumn(name="MEMBER_ID") private Member member;를 두고, Member에는 @OneToOne(mappedBy="member") private Locker locker;로 매핑하는 식입니다. 이렇게 하면 DB 설계 변경(1:1 -&gt; 1:N 변형)이 용이하다는 장점이 있지만 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%20%EB%8C%80%EC%83%81%C2%A0%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%20%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80,%EC%9E%88%EB%8A%94%EA%B2%BD%EC%9A%B0%20%EB%8B%A4%EC%9D%8C%EA%B3%BC%20%EA%B0%99%EC%9D%80%20%ED%8A%B9%EC%A7%95%EC%9D%B4%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20%EA%B4%80%EA%B3%84%EC%97%90%EC%84%9C%20%EB%8C%80%EC%83%81%C2%A0%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%20%EC%99%B8%EB%9E%98%ED%82%A4%EA%B0%80,%EC%9E%88%EB%8A%94%EA%B2%BD%EC%9A%B0%20%EB%8B%A4%EC%9D%8C%EA%B3%BC%20%EA%B0%99%EC%9D%80%20%ED%8A%B9%EC%A7%95%EC%9D%B4%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>), JPA에서는 프록시를 활용한 지연로딩이 제한되는 단점도 있습니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=1,%ED%95%9C%EA%B3%84%EB%A1%9C%20%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9%EC%9C%BC%EB%A1%9C%20%EC%84%A4%EC%A0%95%ED%95%B4%EC%A4%98%EB%8F%84%20%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%20%EB%B6%88%EA%B0%80%ED%94%BC%ED%95%98%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=1,%ED%95%9C%EA%B3%84%EB%A1%9C%20%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9%EC%9C%BC%EB%A1%9C%20%EC%84%A4%EC%A0%95%ED%95%B4%EC%A4%98%EB%8F%84%20%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9%EC%9D%B4%20%EB%B6%88%EA%B0%80%ED%94%BC%ED%95%98%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 초급 단계에서는 주 테이블에 FK를 두는 일반적인 방법을 먼저 익히는 것이 좋습니다. <br>정리하면, 일대일 매핑은 다대일과 유사하게 구현됩니다. 한쪽에 @OneToOne @JoinColumn을 두면 사실상 다대일(@ManyToOne)과 동일하게 동작하며, 반대편에 @OneToOne(mappedBy)를 두면 양방향이 됩니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%B3%B4%EB%8B%A4%EC%8B%9C%ED%94%BC%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0,%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0%20%EC%9C%A0%EC%82%AC%ED%95%98%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%B3%B4%EB%8B%A4%EC%8B%9C%ED%94%BC%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0,%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EC%96%91%EB%B0%A9%ED%96%A5%20%EB%A7%A4%ED%95%91%EA%B3%BC%20%EB%A7%A4%EC%9A%B0%20%EC%9C%A0%EC%82%AC%ED%95%98%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 외래 키는 어느 쪽에나 둘 수 있지만 FK가 있는 쪽만 단방향 설정이 가능하고, 그쪽이 주인으로 관리됩니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20," rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=%EC%9D%BC%EB%8C%80%EC%9D%BC%20," target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>) (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 학습 자료로 컨닝페이퍼(steady-hello) 블로그의 글을 추천합니다 (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>) (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>). 이 글에서는 Member-Locker 예제를 통해 FK를 어디에 두는 두 가지 경우를 비교 설명하고, 경우에 따른 JPA 설정 코드와 다이어그램을 제공하고 있습니다. 특히 표로 FK를 주테이블에 둘 때와 대상테이블에 둘 때의 차이를 정리하여 이해를 도와주므로 초보자에게 유용합니다 (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=MEMBER,%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B8%20%EA%B2%BD%EC%9A%B0%EC%97%90%201%3A1%20%EA%B4%80%EA%B3%84%EB%A5%BC%20%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%A3%A0" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>). JPA 공식 Reference에서도 @OneToOne 사용 시 대상 테이블에 FK를 둘 경우 단방향 지원이 안 된다는 점 등을 명시하고 있으니 함께 참고하면 좋습니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>).<br>다대다(N:N) 관계는 여러 엔티티 인스턴스가 서로 여러 개씩 연관되는 관계입니다. 예를 들어 “학생 - 과목” 관계에서 한 학생이 여러 과목을 듣고, 한 과목에도 여러 학생이 듣는다면 학생 : 과목 = N:N입니다. 관계형 DB에서는 두 테이블만으로 N:N를 표현할 수 없어서 연결 테이블을 사용합니다 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=,%EC%95%8A%EA%B3%A0%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC%20%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%B4%20%EC%A2%8B%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=,%EC%95%8A%EA%B3%A0%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC%20%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%B4%20%EC%A2%8B%EB%8B%A4" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 학생-과목 예시에서는 보통 ENROLLMENT 같은 연결 테이블을 두고, 학생ID와 과목ID를 함께 PK/FK로 갖도록 설계합니다. JPA는 편의를 위해 직접적인 다대다 매핑(@ManyToMany)을 지원하지만, 초급자라면 주의가 필요합니다.
<br>
직접 다대다 매핑: JPA에서 두 엔티티를 다대다로 연결하려면, 한쪽 엔티티에 @ManyToMany 필드를 두고 @JoinTable로 중간 테이블을 지정하는 방식입니다. 예를 들어 Student 엔티티에 @ManyToMany @JoinTable(name="ENROLLMENT", joinColumns=@JoinColumn(name="STUDENT_ID"), inverseJoinColumns=@JoinColumn(name="COURSE_ID")) List&lt;Course&gt; courses; 식으로 사용하고, Course 엔티티에는 @ManyToMany(mappedBy="courses") List&lt;Student&gt; students;로 역방향을 둘 수 있습니다. 이렇게 하면 JPA가 ENROLLMENT 연결 테이블을 생성/사용하여 양쪽을 연결합니다. 단점은 연결 테이블에 추가 컬럼(예: 수강신청 날짜) 등을 넣을 수 없다는 것입니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 즉, @ManyToMany로 묶으면 중간 테이블을 JPA가 관리하지만 우리가 엔티티로 다룰 수 없으므로 부가 정보를 저장하기 어렵습니다. 또한 복잡한 비즈니스 상황에서 중간 테이블을 엔티티로 취급하지 못하면 제약이 생기므로, 실무에서는 잘 쓰지 않습니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). <br>
연결 엔티티 활용 (우회 방법): 다대다 관계를 일대다 + 다대일로 풀어서 관리하는 것을 권장합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=,%EC%95%8A%EA%B3%A0%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC%20%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%B4%20%EC%A2%8B%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=,%EC%95%8A%EA%B3%A0%20%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC%20%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%B4%20%EC%A2%8B%EB%8B%A4" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>). 예시로, “회원-상품” 다대다 관계가 있을 때 중간에 MemberProduct 같은 연결 전용 엔티티를 만들고, 회원과 MemberProduct는 1:N, 상품과 MemberProduct도 1:N으로 매핑합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%94%B0%EB%9D%BC%EC%84%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%8A%94%20%EC%97%B0%EA%B2%B0%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9A%A9,%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EB%A1%9C%20%ED%92%80%EC%96%B4%EC%84%9C%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B2%8C%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%94%B0%EB%9D%BC%EC%84%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%8A%94%20%EC%97%B0%EA%B2%B0%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9A%A9,%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EB%A1%9C%20%ED%92%80%EC%96%B4%EC%84%9C%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B2%8C%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B4%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). MemberProduct 엔티티는 MEMBER_ID, PRODUCT_ID를 FK로 갖는 테이블에 대응하며, 여기에 주문일시나 수량 같은 추가 정보도 컬럼으로 넣을 수 있어 유연합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%98%88%EB%A5%BC%20%EB%93%A4%EC%96%B4%20%EA%B3%A0%EA%B0%9D,%EC%B6%94%EA%B0%80%ED%95%98%EC%97%AC%20%EA%B0%81%EA%B0%81%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%A7%A4%ED%95%91%EC%9D%84%ED%95%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%98%88%EB%A5%BC%20%EB%93%A4%EC%96%B4%20%EA%B3%A0%EA%B0%9D,%EC%B6%94%EA%B0%80%ED%95%98%EC%97%AC%20%EA%B0%81%EA%B0%81%20%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%A7%A4%ED%95%91%EC%9D%84%ED%95%9C%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%40ManyToOne%20%40JoinColumn%28name%20%3D%20,Member%20member" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%40ManyToOne%20%40JoinColumn%28name%20%3D%20,Member%20member" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 아래 그림은 이런 구조를 나타냅니다: (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) 그림: 다대다 관계를 연결 엔티티(MemberProduct)로 풀어서 매핑 – Member와 Product가 N:N 관계인 경우, 중간에 MemberProduct 엔티티를 두어 각각 1:N으로 연결한 모습입니다. 하단은 데이터베이스 테이블 구조로, 연결 엔티티에 해당하는 ORDER 테이블이 MEMBER_ID와 PRODUCT_ID를 FK로 가지고 추가 속성(orderAmount, orderDate 등)도 저장합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%94%B0%EB%9D%BC%EC%84%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%8A%94%20%EC%97%B0%EA%B2%B0%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9A%A9,%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EB%A1%9C%20%ED%92%80%EC%96%B4%EC%84%9C%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B2%8C%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%94%B0%EB%9D%BC%EC%84%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%8A%94%20%EC%97%B0%EA%B2%B0%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9A%A9,%EC%9D%BC%EB%8C%80%EB%8B%A4%20%EA%B4%80%EA%B3%84%EB%A1%9C%20%ED%92%80%EC%96%B4%EC%84%9C%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94%EA%B2%8C%20%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B4%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=public%20class%20MemberProduct%20,GeneratedValue%20private%20Long%20id" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=public%20class%20MemberProduct%20,GeneratedValue%20private%20Long%20id" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 이런 방식이 가장 많이 사용하는 우회 전략이며, JPA에서는 @ManyToMany를 사용하지 않고 각각 @OneToMany(mappedBy)와 @ManyToOne으로 풀어내어 구현합니다. <br>요약하면 다대다 직접 매핑은 초급 단계에서는 사용을 지양하고, 연결 엔티티를 만들어 다대일/일대다로 풀어내는 방법을 이해하는 것이 중요합니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 많은 JPA 자료에서 다대다는 언급만 하고 “웬만하면 쓰지 마라”라고 조언하는데, 그 이유가 위와 같습니다. 공식적인 @ManyToMany 매핑 자체는 단순한 경우에 쓸 수는 있으나, 엔티티 관계에 새로운 속성이 필요해지는 순간 한계에 부딪힙니다. 실습을 위해 직접 @ManyToMany를 사용해보고 동작을 확인한 후, 연결 엔티티를 이용한 방식으로 리팩터링해보는 것도 좋은 공부가 됩니다.<br>학습 자료로는 앞서 소개한 블로그 버러범의 개발이야기 글에 다대다 매핑에 대한 설명이 잘 나와 있습니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 해당 글에서는 ManyToMany를 사용하면 다른 속성을 넣을 수 없는 문제로 인해 실무 사용을 권장하지 않는다고 명시하고, 대신 예제 코드로 Member-Product 사이에 MemberProduct 엔티티를 두는 방법을 보여줍니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=JPA%EC%97%90%EC%84%9C%20%40ManyToMany%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%9C%20%EB%8B%A4%EB%8C%80%EB%8B%A4%20%EB%A7%A4%ED%95%91%EC%9D%84,%EC%B6%94%EA%B0%80%ED%95%A0%20%EC%88%98%20%EC%97%86%EB%8A%94%20%EB%AC%B8%EC%A0%9C%EA%B0%80%20%EC%9E%88%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=public%20class%20MemberProduct%20,GeneratedValue%20private%20Long%20id" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=public%20class%20MemberProduct%20,GeneratedValue%20private%20Long%20id" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). 이 글과 함께 JPA 책 &lt;자바 ORM 표준 JPA 프로그래밍&gt;의 내용을 참고하면, 다대다 관계를 어떻게 처리해야 하는지 깊이 있게 이해할 수 있습니다 (블로그 글 마지막에 해당 서적 및 인프런 강의 참고 링크도 제공) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%B0%B8%EA%B3%A0%3A%20%EC%9E%90%EB%B0%94%20ORM%20%ED%91%9C%EC%A4%80%20JPA,Basic" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%B0%B8%EA%B3%A0%3A%20%EC%9E%90%EB%B0%94%20ORM%20%ED%91%9C%EC%A4%80%20JPA,Basic" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>).
<br>
공식 문서: 각 연관관계 어노테이션에 대한 JPA 공식 자바독(JavaDoc)이나 Hibernate 공식 문서를 참고하면 정확한 사용법을 확인할 수 있습니다 (예: @OneToMany의 mappedBy는 반대쪽 필드명을 가리키며, 컬렉션이 제네릭스일 경우 targetEntity 속성을 생략 가능 (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javaee/7/api/javax/persistence/OneToMany.html#:~:text=Specifies%20a%20many,many%20multiplicity" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javaee/7/api/javax/persistence/OneToMany.html#:~:text=Specifies%20a%20many,many%20multiplicity" target="_self">OneToMany (Java(TM) EE 7 Specification APIs)</a>) (<a data-tooltip-position="top" aria-label="https://docs.oracle.com/javaee/7/api/javax/persistence/OneToMany.html#:~:text=Example%201%3A%20One,generics" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.oracle.com/javaee/7/api/javax/persistence/OneToMany.html#:~:text=Example%201%3A%20One,generics" target="_self">OneToMany (Java(TM) EE 7 Specification APIs)</a>) 등). 초급자에게는 공식 스펙 문서는 다소 딱딱하지만, 나중에 상세 옵션을 확인할 때 유용한 레퍼런스로 활용하세요. <br>
블로그/강좌: 본 답변에서 소개한 자료 이외에도 국내 개발자 블로그와 유튜브 강좌에 JPA 연관관계를 설명한 콘텐츠가 많습니다. 특히 김영한님의 인프런 JPA 강좌는 연관관계 매핑을 체계적으로 다루며, 많은 블로그들이 이 내용을 요약해두었으므로 함께 보면 이해에 큰 도움이 됩니다. 예를 들어 앞서 언급한 컨닝페이퍼 블로그나 버러범의 개발이야기 블로그 글들도 해당 강좌와 책의 내용을 정리한 것입니다 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EC%B0%B8%EA%B3%A0%3A%20%EC%9E%90%EB%B0%94%20ORM%20%ED%91%9C%EC%A4%80%20JPA,Basic" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EC%B0%B8%EA%B3%A0%3A%20%EC%9E%90%EB%B0%94%20ORM%20%ED%91%9C%EC%A4%80%20JPA,Basic" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>). <br>
다이어그램 활용: 시각화 자료는 연관관계 학습에 큰 도움이 됩니다. 소개된 블로그들 중 버러범의 개발이야기 (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%A5%BC%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8%EC%9C%BC%EB%A1%9C%20%ED%91%9C%ED%98%84%ED%95%98%EB%A9%B4,%EB%8B%A4%EC%9D%8C%EA%B3%BC%20%EA%B0%99%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=%EB%8B%A4%EB%8C%80%EC%9D%BC%20%EB%8B%A8%EB%B0%A9%ED%96%A5%20%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EB%A5%BC%20%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8%EC%9C%BC%EB%A1%9C%20%ED%91%9C%ED%98%84%ED%95%98%EB%A9%B4,%EB%8B%A4%EC%9D%8C%EA%B3%BC%20%EA%B0%99%EB%8B%A4" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>) (<a data-tooltip-position="top" aria-label="https://sbl133.tistory.com/66#:~:text=Image" rel="noopener nofollow" class="external-link is-unresolved" href="https://sbl133.tistory.com/66#:~:text=Image" target="_self">[JPA] 연관관계 매핑 (다대일, 일대다, 일대일, 다대다) :: 버러범의 개발이야기</a>), 컨닝페이퍼(steady-hello) (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=%EA%B2%BD%EC%9A%B0%20FK%20%EC%9C%84%EC%B9%98%20%EC%A3%BC%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90,%EC%84%A4%EA%B3%84%20%EB%B3%80%EA%B2%BD%20%EC%9C%A0%EC%9A%A9%20DBA%20%EC%84%A0%ED%98%B8" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=%EA%B2%BD%EC%9A%B0%20FK%20%EC%9C%84%EC%B9%98%20%EC%A3%BC%20%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90,%EC%84%A4%EA%B3%84%20%EB%B3%80%EA%B2%BD%20%EC%9C%A0%EC%9A%A9%20DBA%20%EC%84%A0%ED%98%B8" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>) (<a data-tooltip-position="top" aria-label="https://steady-hello.tistory.com/104#:~:text=Image" rel="noopener nofollow" class="external-link is-unresolved" href="https://steady-hello.tistory.com/104#:~:text=Image" target="_self">[JPA] 연관관계 매핑 - 1:1(일대일), N:N(다대다)</a>), 울타리(jddng) 블로그 (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=ImageImage" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=ImageImage" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>) (<a data-tooltip-position="top" aria-label="https://jddng.tistory.com/314#:~:text=ImageImage" rel="noopener nofollow" class="external-link is-unresolved" href="https://jddng.tistory.com/314#:~:text=ImageImage" target="_self">JPA - 다양한 연관관계 매핑(다대일, 일대다, 일대일, 다대다) :: IT 개발자들의 울타리</a>) 등이 관계를 그림으로 표현하고 있습니다. 일부는 Mermaid 등으로 UML 관계 다이어그램을 그려두었으며, 객체 관계와 테이블 관계를 함께 보여줘 개념을 명확히 파악할 수 있습니다. 초급자는 이러한 도식을 참고하여 객체 모델과 테이블 설계의 대응을 이해하면 좋습니다. 각 연관관계에 대한 개념과 구현 방법을 충분히 숙지한 후에는, 작은 예제 프로젝트를 만들어 직접 엔티티를 정의하고 매핑을 해보세요. 예제 코드를 따라 타이핑하고, H2 같은 메모리 DB를 활용해 엔티티를 persist/load하면서 연관관계가 맺어지는 모습을 콘솔 SQL 로그 등으로 확인해보면 학습 효과가 큽니다. 위 언급된 자료의 예제들을 기반으로 실습해보길 권장합니다. 연관관계를 제대로 이해하는 것은 JPA 활용의 핵심이므로, 천천히 개념을 내 것으로 만들고 나면 보다 복잡한 JPA 응용도 수월해질 것입니다. ]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/jpa-association-mapping.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/JPA Association Mapping.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 28 Mar 2025 05:06:40 GMT</pubDate></item><item><title><![CDATA[Spring AOP]]></title><description><![CDATA[좋아요! 자바 스프링의 AOP에 대한 학습 자료를 준비하겠습니다. 이 자료에는 핵심 개념(JoinPoint, Advice, Pointcut, Aspect 등)과 함께 실행 가능한 예제 코드(Java 코드와 어노테이션 기반 설정), 그리고 활용 사례가 포함될 것입니다.또한, 개념 이해를 돕기 위해 머메이드 다이어그램을 비롯한 다양한 시각 자료도 포함하여 보다 직관적으로 학습할 수 있도록 구성하겠습니다. 자료가 준비되면 알려드리겠습니다!관점 지향 프로그래밍(AOP, Aspect-Oriented Programming)은 객체 지향 프로그래밍(OOP)을 보완하여 횡단 관심사(cross-cutting concerns)를 모듈화하는 패러다임입니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/#:~:text=Aspect,code%20if%20not%20handled%20properly" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/#:~:text=Aspect,code%20if%20not%20handled%20properly" target="_self">Aspect Oriented Programming and AOP in Spring Framework - GeeksforGeeks</a>). 횡단 관심사란 애플리케이션의 여러 부분에 공통적으로 영향을 미치는 기능을 말하며, 대표적으로 로깅(logging), 트랜잭션 관리(transaction management), 보안(security) 등이 있습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/#:~:text=Aspect,code%20if%20not%20handled%20properly" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/#:~:text=Aspect,code%20if%20not%20handled%20properly" target="_self">Aspect Oriented Programming and AOP in Spring Framework - GeeksforGeeks</a>). OOP에서는 이러한 공통 기능이 여러 클래스에 산재(scattering)되어 코드 중복과 얽힘(tangling)을 야기하기 쉽습니다. 예를 들어, 은행 계좌 이체 기능을 구현할 때 기본 비즈니스 로직 외에 사용 권한 체크, 트랜잭션 처리, 로그 기록 등이 추가되면서 코드가 복잡하게 얽힐 수 있습니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Aspect-oriented_programming#:~:text=In%20this%20example%2C%20other%20interests,cutting%20concerns" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Aspect-oriented_programming#:~:text=In%20this%20example%2C%20other%20interests,cutting%20concerns" target="_self">Aspect-oriented programming - Wikipedia</a>). <br>AOP는 이 문제를 해결하기 위해 공통 기능을 별도의 모듈(Aspect, 애스펙트/관점)로 분리합니다. 핵심 로직에는 영향을 주지 않고, 정의한 규칙에 따라 특정 시점에 공통 기능을 자동으로 적용함으로써 관심사를 분리합니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Aspect-oriented_programming#:~:text=AOP%20tries%20to%20solve%20this,good%20pointcut%20can%20anticipate%20later" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Aspect-oriented_programming#:~:text=AOP%20tries%20to%20solve%20this,good%20pointcut%20can%20anticipate%20later" target="_self">Aspect-oriented programming - Wikipedia</a>). 스프링 프레임워크는 이러한 AOP 개념을 지원하여, 개발자가 핵심 비즈니스 로직에만 집중하고 부가 기능은 Aspect로 분리할 수 있게 해줍니다. 결과적으로 코드의 모듈성(modularity)이 향상되고 유지보수가 쉬워집니다.<br>스프링 AOP를 이해하려면 몇 가지 핵심 용어를 알아야 합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%EB%AA%87%20%EA%B0%80%EC%A7%80%20AOP%20%ED%95%B5%EC%8B%AC%20%EA%B0%9C%EB%85%90%EA%B3%BC,%EC%9D%B4%20%EC%9A%A9%EC%96%B4%EB%8A%94%20Spring%EC%97%90%EB%A7%8C%20%EA%B5%AD%ED%95%9C%EB%90%98%EC%A7%80%20%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%EB%AA%87%20%EA%B0%80%EC%A7%80%20AOP%20%ED%95%B5%EC%8B%AC%20%EA%B0%9C%EB%85%90%EA%B3%BC,%EC%9D%B4%20%EC%9A%A9%EC%96%B4%EB%8A%94%20Spring%EC%97%90%EB%A7%8C%20%EA%B5%AD%ED%95%9C%EB%90%98%EC%A7%80%20%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). 아래에서는 Aspect(관점), Advice(어드바이스), Pointcut(포인트컷), JoinPoint(조인 포인트) 네 가지 개념을 중심으로 설명합니다 (※ 기타 용어: Target Object, Proxy, Weaving 등은 뒤에서 언급). 각 개념은 AOP에서 어떤 역할을 하는지 일상 비유와 함께 쉽게 풀어보겠습니다.<br>Aspect는 애플리케이션 여러 부분에 공통으로 적용되는 관심사를 모듈화한 것입니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=,%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC%20%EC%97%B0%EA%B4%80%EB%90%98%EB%A9%B0%20pointcut%EA%B3%BC%20%EC%9D%BC%EC%B9%98%ED%95%98%EB%8A%94%20%EB%AA%A8%EB%93%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=,%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC%20%EC%97%B0%EA%B4%80%EB%90%98%EB%A9%B0%20pointcut%EA%B3%BC%20%EC%9D%BC%EC%B9%98%ED%95%98%EB%8A%94%20%EB%AA%A8%EB%93%A0" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). 로깅이나 보안, 트랜잭션과 같이 여러 클래스에 걸쳐 나타나는 부가 기능을 한 곳에 모아 정의한 모듈이 Aspect입니다. 스프링 AOP에서 Aspect는 일반 클래스에 @Aspect 애노테이션을 붙여 정의하거나, XML 설정으로도 구성할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=,%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC%20%EC%97%B0%EA%B4%80%EB%90%98%EB%A9%B0%20pointcut%EA%B3%BC%20%EC%9D%BC%EC%B9%98%ED%95%98%EB%8A%94%20%EB%AA%A8%EB%93%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=,%ED%91%9C%ED%98%84%EC%8B%9D%EA%B3%BC%20%EC%97%B0%EA%B4%80%EB%90%98%EB%A9%B0%20pointcut%EA%B3%BC%20%EC%9D%BC%EC%B9%98%ED%95%98%EB%8A%94%20%EB%AA%A8%EB%93%A0" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). Aspect 안에는 특정 시점에 실행될 공통 기능인 Advice와, 그 기능이 적용될 대상(Pointcut)이 포함됩니다. 예를 들어, “로그를 남기는 기능”을 Aspect로 만들면 애플리케이션 전역의 여러 모듈에서 로그를 남겨야 할 때, 각 모듈이 직접 로그 코드를 갖지 않아도 Aspect가 알아서 로그를 처리해줍니다. 이처럼 Aspect는 공통 관심사의 집합체이며, 코드 중복 없이 횡단 관심사를 관리하는 핵심 단위입니다.<br>Advice는 Aspect가 언제 그리고 무엇을 실행할지를 정의한 구체적인 동작입니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>) (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%EC%8B%A4%ED%96%89%EC%9D%84%20%EB%82%98%ED%83%80%EB%83%85%EB%8B%88%EB%8B%A4.%20,%ED%8F%AC%EC%9D%B8%ED%8A%B8%20%EC%A3%BC%EB%B3%80%EC%97%90%20%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0%20%EC%B2%B4%EC%9D%B8%EC%9D%84%20%EC%9C%A0%EC%A7%80%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%EC%8B%A4%ED%96%89%EC%9D%84%20%EB%82%98%ED%83%80%EB%83%85%EB%8B%88%EB%8B%A4.%20,%ED%8F%AC%EC%9D%B8%ED%8A%B8%20%EC%A3%BC%EB%B3%80%EC%97%90%20%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0%20%EC%B2%B4%EC%9D%B8%EC%9D%84%20%EC%9C%A0%EC%A7%80%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). 다시 말해, “특정 조인 포인트에서 수행되는 코드”가 Advice입니다. 스프링 AOP에서 제공하는 Advice 유형에는 아래와 같은 것들이 있습니다:
Before Advice – 타겟 메소드 호출 전에 실행되는 부가 코드 After (Finally) Advice – 타겟 메소드 종료 후 (정상/예외 상관없이) 실행되는 부가 코드 AfterReturning Advice – 타겟 메소드가 정상 종료한 후 실행되는 부가 코드 AfterThrowing Advice – 타겟 메소드 예외 발생 시 실행되는 부가 코드 Around Advice – 타겟 메소드 호출을 감싸서 전후에 실행되며, 필요에 따라 원본 호출 자체를 대체할 수도 있는 부가 코드 <br>각 Advice는 적용될 pointcut과 연관되어 있으며, pointcut 조건에 매칭되는 join point에서만 실행됩니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>). 스프링을 비롯한 많은 AOP 프레임워크는 Advice를 메소드 인터셉터(chain of interceptors) 형태로 구현하여, 마치 메소드 호출을 가로채는 필터들처럼 동작하게 합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%EC%8B%A4%ED%96%89%EC%9D%84%20%EB%82%98%ED%83%80%EB%83%85%EB%8B%88%EB%8B%A4.%20,%ED%8F%AC%EC%9D%B8%ED%8A%B8%20%EC%A3%BC%EB%B3%80%EC%97%90%20%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0%20%EC%B2%B4%EC%9D%B8%EC%9D%84%20%EC%9C%A0%EC%A7%80%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%EC%8B%A4%ED%96%89%EC%9D%84%20%EB%82%98%ED%83%80%EB%83%85%EB%8B%88%EB%8B%A4.%20,%ED%8F%AC%EC%9D%B8%ED%8A%B8%20%EC%A3%BC%EB%B3%80%EC%97%90%20%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0%20%EC%B2%B4%EC%9D%B8%EC%9D%84%20%EC%9C%A0%EC%A7%80%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). 개발자는 Aspect 클래스 내부에 Advice에 해당하는 메소드를 작성하고, 해당 메소드에 @Before, @After, @Around 등의 애노테이션으로 실행 시점을 표시합니다. 그러면 스프링이 런타임에 적절한 시점에 이 코드를 자동으로 실행해 줍니다.
Advice 종류 비교: 아래 표는 다양한 Advice 타입과 그 실행 시점을 정리한 것입니다.
예를 들어 Around Advice를 사용하면 메소드 실행 전후에 걸쳐 실행 시간을 재는 로직을 넣거나, 메소드 호출 자체를 조건에 따라 건너뛰는 등의 제어도 가능합니다. (후술할 예제 코드에서 Around Advice 사용 예를 볼 것입니다.)<br>Pointcut은 Advice가 실행될 지점(join point)을 선별하는 조건 또는 표현식입니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>) (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=,AspectJ%20pointcut%20%ED%91%9C%ED%98%84%EC%8B%9D%20%EC%96%B8%EC%96%B4%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=,AspectJ%20pointcut%20%ED%91%9C%ED%98%84%EC%8B%9D%20%EC%96%B8%EC%96%B4%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). 스프링 AOP에서는 AspectJ의 풍부한 포인트컷 표현식 언어를 사용하여 실행 시점 조건을 지정합니다. 예를 들어 “execution(* com.example.service..*(..))” 와 같은 표현식은 com.example.service 패키지 아래의 모든 클래스의 모든 메소드 실행을 의미하는 포인트컷입니다. 이 포인트컷을 Advice와 연결하면, 해당 패키지의 메소드들이 실행될 때마다 Advice가 발동하게 됩니다.Pointcut은 크게 표현식(Expession)으로 지정하는 방법과, 재사용을 위해 Aspect 내에 명명된 메소드(Pointcut 시그니처)로 정의하는 방법이 있습니다. 둘 다 최종적으로는 특정 join point에 매칭 여부를 판단하는 역할은 동일합니다. Pointcut 설정에 따라 Advice의 적용 범위를 세밀하게 조정할 수 있기 때문에, “어느 클래스의 어떤 메소드에 Aspect를 적용할 것인가”를 결정하는 필터 역할이라고 볼 수 있습니다. <br>스프링 AOP에서 자주 사용하는 포인트컷 표현식 패턴으로는 execution (메소드 실행 매칭), within (타입 혹은 패키지 매칭), @annotation (특정 애노테이션이 붙은 메소드 매칭) 등이 있습니다. Pointcut을 잘 설계하면 이후 새로운 메소드가 추가되더라도 해당 조건에 맞는 한 자동으로 Advice가 적용되어, 관심사의 분리가 지속적으로 유지됩니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Aspect-oriented_programming#:~:text=security%20module%20can%20include%20advice,good%20pointcut%20can%20anticipate%20later" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Aspect-oriented_programming#:~:text=security%20module%20can%20include%20advice,good%20pointcut%20can%20anticipate%20later" target="_self">Aspect-oriented programming - Wikipedia</a>).<br>JoinPoint는 Aspect가 끼어들 수 있는 프로그램 실행상의 특정 순간을 의미합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=annotation%20%28the%20%40AspectJ%20style%29.%20,Advice%20is%20associated%20with%20a" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=annotation%20%28the%20%40AspectJ%20style%29.%20,Advice%20is%20associated%20with%20a" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>) (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%ED%81%B4%EB%9E%98%EC%8A%A4%28%40AspectJ%20%EC%8A%A4%ED%83%80%EC%9D%BC%29%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC%20%EA%B5%AC%ED%98%84%EB%90%A9%EB%8B%88%EB%8B%A4.%20,AspectJ%20pointcut%20%ED%91%9C%ED%98%84%EC%8B%9D%20%EC%96%B8%EC%96%B4%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%ED%81%B4%EB%9E%98%EC%8A%A4%28%40AspectJ%20%EC%8A%A4%ED%83%80%EC%9D%BC%29%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC%20%EA%B5%AC%ED%98%84%EB%90%A9%EB%8B%88%EB%8B%A4.%20,AspectJ%20pointcut%20%ED%91%9C%ED%98%84%EC%8B%9D%20%EC%96%B8%EC%96%B4%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). 예를 들어 메소드 호출, 예외 발생, 필드 값 변경 등이 모두 JoinPoint의 예가 될 수 있습니다. AOP 구현마다 JoinPoint로 간주되는 범위는 다를 수 있는데, 스프링 AOP에서는 오로지 메소드 실행만을 조인 포인트로 지원합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%ED%81%B4%EB%9E%98%EC%8A%A4%28%40AspectJ%20%EC%8A%A4%ED%83%80%EC%9D%BC%29%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC%20%EA%B5%AC%ED%98%84%EB%90%A9%EB%8B%88%EB%8B%A4.%20,AspectJ%20pointcut%20%ED%91%9C%ED%98%84%EC%8B%9D%20%EC%96%B8%EC%96%B4%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@orijoon98/Spring-Framework-Documentation3-Aspect-Oriented-Programming#:~:text=%ED%81%B4%EB%9E%98%EC%8A%A4%28%40AspectJ%20%EC%8A%A4%ED%83%80%EC%9D%BC%29%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC%20%EA%B5%AC%ED%98%84%EB%90%A9%EB%8B%88%EB%8B%A4.%20,AspectJ%20pointcut%20%ED%91%9C%ED%98%84%EC%8B%9D%20%EC%96%B8%EC%96%B4%EB%A5%BC%20%EC%82%AC%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4" target="_self">[번역] Spring 공식문서 - Aspect Oriented Programming</a>). (스프링 AOP는 프록시 기반이므로 메소드 외의 join point는 다루지 않으며, 더 복잡한 join point가 필요한 경우 AspectJ 같은 풀스펙 AOP를 사용해야 합니다.)Pointcut은 결국 많은 잠재적 JoinPoint 중에서 어느 시점에 Advice를 적용할지 선별하는 것이고, Advice는 그렇게 선택된 JoinPoint에서 실행되는 처리입니다. JoinPoint 객체를 통해서는 실행 시점의 메소드 이름, 인수, 타겟 객체 등 정보를 얻을 수도 있어 (스프링에서는 org.aspectj.lang.JoinPoint로 제공), Advice 내부에서 활용할 수 있습니다. 요약하면, 여러 실행 지점(JoinPoint) 중에서 조건(Pointcut)에 맞는 곳에 부가 기능(Advice)을 삽입하도록 한 단위가 Aspect입니다. 아래 mermaid 다이어그램은 Aspect, Advice, Pointcut, JoinPoint 관계를 그림으로 나타낸 것입니다.<br> (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/" target="_self">Aspect Oriented Programming and AOP in Spring Framework - GeeksforGeeks</a>)
Aspect는 부가 기능(Advice)과 적용 조건(Pointcut)을 가지고 있으며, Pointcut에 매칭되는 JoinPoint에서 Advice가 실행된다.AOP 개념을 음식 준비 과정에 비유해 보겠습니다. 셰프들은 각자 요리를 만듭니다. 어떤 요리는 마지막에 파슬리 가루를 뿌리거나 소스를 장식하는 고명 얹기 과정이 필요하다고 해봅시다. OOP 방식이라면 셰프들은 각 요리 레시피마다 일일이 고명을 얹는 코드를 써넣어야 합니다. 하지만 AOP를 적용하면, “모든 요리가 완성될 때 자동으로 고명을 얹는다”는 규칙을 중앙에서 정해둘 수 있습니다. 이때:
Aspect – “고명 담당 관점”: 공통 규칙인 고명 얹기 기능을 모듈화한 것 Advice – 실제로 고명을 뿌리는 구체적 동작 (예: 파슬리 가루를 뿌림) Pointcut – 고명을 얹을 시점 조건: “요리가 완성되는 순간” JoinPoint – 실제 각 요리가 완성되는 개별 순간들 이 Aspect를 도입하면 셰프들은 요리 자체에만 집중하고, 고명 얹기는 알아서 공통 규칙에 따라 수행됩니다. 이처럼 AOP를 통해 여러 작업에 공통으로 수행해야 하는 부가 작업을 일괄 관리할 수 있습니다. 실제 애플리케이션의 로깅, 트랜잭션 처리 등이 바로 이런 고명 얹기에 해당합니다. 개발자는 일일이 로그 찍는 코드를 모든 메소드에 넣는 대신, AOP로 한 번만 정의해두면 되는 것입니다.<br>스프링에서 AOP는 주로 프록시(proxy) 객체를 통해 동작합니다. 런타임에 대상 객체를 감싸는 프록시를 생성하고, 메소드 호출을 가로챈 뒤 연결된 Aspect의 Advice를 실행합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=community.%29%20,in%20order%20to%20implement%20the" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=community.%29%20,in%20order%20to%20implement%20the" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>). 이 과정은 위빙(weaving)이라고 불리며, 스프링은 실행 시점(Runtime)에 프록시를 이용한 위빙을 수행합니다. AspectJ처럼 바이트코드를 조작하는 컴파일 타임/로드 타임 위빙과 달리, 스프링 AOP는 경량 프록시 방식이므로 오직 메소드 단위로 동작하지만 설정이 간단하고 스프링과 통합이 용이합니다.간단히, 스프링 AOP 동작 흐름을 정리하면 다음과 같습니다:
스프링 컨테이너가 초기화될 때, @Aspect로 정의된 빈(bean)이나 XML에 명시된 Aspect를 찾아 설정된 Pointcut을 분석합니다. <br>각 Aspect가 적용될 대상 빈(타겟 객체)이 있으면, 해당 빈을 프록시로 감싸는 AOP 프록시 객체를 생성합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=community.%29%20,in%20order%20to%20implement%20the" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=community.%29%20,in%20order%20to%20implement%20the" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>). 이 프록시는 원본 빈과 동일한 인터페이스를 구현하거나 상속 구조를 따라 대리자 역할을 합니다. 클라이언트가 대상 빈의 메소드를 호출하면, 실제로는 프록시가 호출을 가로채서 Advice 체인을 실행합니다. 설정된 여러 Advice(예: Before, Around, After)가 차례로 실행된 후, 최종적으로 실제 타겟 메소드가 호출됩니다. 타겟 메소드 실행이 끝나면 (정상 혹은 예외 발생에 따라 AfterReturning/AfterThrowing 등이 실행됨) 프록시는 호출 결과를 클라이언트에게 반환합니다. 아래 시퀀스 다이어그램은 스프링 AOP 프록시를 통한 메소드 호출 과정을 나타낸 것입니다:위 다이어그램에서 Client가 서비스 메소드를 호출하면, 프록시가 가로채서 Before Advice를 실행한 뒤 실제 메소드를 호출하고, 종료 후 After 계열 Advice를 실행하는 흐름을 보여줍니다. 스프링 AOP의 이러한 프록시 메커니즘으로 인해 자기 자신의 내부 메소드 호출(self-invocation)에는 Advice가 적용되지 않는다는 점에 유의해야 합니다 (프록시를 거치지 않기 때문에). 대체로 이러한 제약은 큰 문제가 되지 않으며, 필요하다면 AspectJ 같은 방식을 고려할 수 있습니다.이제 간단한 예제를 통해 AOP 적용 방법을 단계별로 살펴보겠습니다. 예제 시나리오는 서비스 메소드 실행 시 로그를 남기는 기능을 AOP로 구현하는 것입니다. 가령 MyService 클래스의 주요 메소드가 실행될 때마다 시작과 끝을 로그로 출력하고자 할 때, AOP 없이 구현한다면 모든 메소드마다 로그 코드를 삽입해야 할 것입니다. 하지만 AOP를 사용하면 로그 기능을 별도의 Aspect로 만들어 공통 처리할 수 있습니다.먼저 간단한 서비스 클래스를 만들어보겠습니다. 이 클래스 MyService는 핵심 비즈니스 로직을 수행하는 doSomething() 메소드를 가지고 있습니다. (실제로는 DB 연동이나 복잡한 작업이 있겠지만 여기서는 간단히 출력으로 대체합니다.)package com.example.service; import org.springframework.stereotype.Component; @Component // 스프링 빈으로 등록
public class MyService { public void doSomething() { System.out.println("MyService: 중요한 작업 수행 중..."); // (실제 비즈니스 로직 처리) }
}
위 MyService 클래스는 @Component로 스프링 컨테이너에 빈으로 등록됩니다. 현재는 로그 등 부가 기능 없이 본연의 작업만 수행합니다.이제 로그 기능을 담당할 Aspect를 작성해보겠습니다. 스프링의 애노테이션 기반 AOP를 사용하여 Aspect를 구현하려면, 클래스에 @Aspect를 붙이고 스프링 빈으로 등록하면 됩니다. Aspect 안에 로그를 출력하는 Advice 메소드를 정의하고, 적용할 대상(Pointcut)을 설정하겠습니다.package com.example.aspect; import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component; @Aspect // 이 클래스를 Aspect로 선언
@Component // 스프링 빈 등록
public class LoggingAspect { // 포인트컷 정의: service 패키지의 모든 메소드에 적용 @Pointcut("execution(* com.example.service..*(..))") private void allServiceMethods() {} // Pointcut을 재사용하기 위해 메소드로 정의 (본문은 비워둠) // Before Advice: 메소드 시작 전에 로그 출력 @Before("allServiceMethods()") public void logBefore(JoinPoint joinPoint) { String methodName = joinPoint.getSignature().getName(); System.out.println("[로그] " + methodName + " 메소드 시작"); } // After Advice: 메소드 종료 후 (성공/실패 불문) 로그 출력 @After("allServiceMethods()") public void logAfter(JoinPoint joinPoint) { String methodName = joinPoint.getSignature().getName(); System.out.println("[로그] " + methodName + " 메소드 종료"); } // Around Advice: 메소드 실행 전체를 감싸 실행 시간 측정 (예시) @Around("allServiceMethods()") public Object logExecutionTime(ProceedingJoinPoint pjp) throws Throwable { long start = System.currentTimeMillis(); try { // 실제 대상 메소드 실행 return pjp.proceed(); } finally { long end = System.currentTimeMillis(); String methodName = pjp.getSignature().getName(); System.out.println("[로그] " + methodName + " 실행 시간: " + (end - start) + "ms"); } }
}
위 LoggingAspect 클래스는 세 가지 Advice를 가지고 있습니다:
logBefore – 대상 메소드 실행 전에 실행되어 메소드 이름과 함께 "시작" 로그 출력 (@Before Advice) logAfter – 대상 메소드 실행 후 (정상 종료 또는 예외 상관없이) 실행되어 "종료" 로그 출력 (@After Advice) logExecutionTime – 대상 메소드를 감싸서 실행 시간 측정 (@Around Advice). ProceedingJoinPoint.proceed()를 호출하여 실제 메소드를 수행하고, finally 블록에서 실행 시간을 계산합니다.
포인트컷 allServiceMethods()는 com.example.service 패키지 이하의 모든 메소드 실행을 가리키도록 정의했습니다. 각 Advice에는 이 포인트컷을 적용하여, 서비스 패키지의 메소드들이 실행될 때 위 Advice들이 자동으로 수행되도록 설정했습니다. 이렇게 Aspect를 정의하면, 아직 이를 활성화해야 합니다.스프링에서 애노테이션 기반 Aspect를 사용하려면 AspectJ 자동 프록시를 활성화해야 합니다. 자바 설정(Java Config)을 사용하는 경우 설정 클래스에 @EnableAspectJAutoProxy를 붙이면 되고, XML 설정을 사용하는 경우 &lt;aop:aspectj-autoproxy/&gt; 태그를 추가합니다. 이번 예제는 자바 기반으로 설정해보겠습니다.package com.example; import org.springframework.context.annotation.*;
import com.example.service.MyService; @Configuration
@EnableAspectJAutoProxy // AOP 프록시 활성화
@ComponentScan(basePackages = "com.example")
public class AppConfig { // 컴포넌트 스캔으로 MyService와 LoggingAspect를 자동 등록
} public class MainApp { public static void main(String[] args) { AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class); MyService service = ctx.getBean(MyService.class); service.doSomething(); // 메소드 호출 (AOP 적용 대상) ctx.close(); }
}
@EnableAspectJAutoProxy로 인해 스프링은 LoggingAspect를 감지하고, MyService 빈에 대한 프록시를 생성하여 Advice가 적용되도록 설정합니다. 이제 MainApp에서 service.doSomething()을 호출하면 LoggingAspect의 Advice들이 관여하게 됩니다. 실제 출력 결과는 아래와 유사합니다.[로그] doSomething 메소드 시작
MyService: 중요한 작업 수행 중...
[로그] doSomething 실행 시간: 5ms
[로그] doSomething 메소드 종료
보시는 것처럼, MyService 코드에는 로그 관련 처리가 전혀 없지만, Aspect에 정의한 대로 메소드 실행 전후로 로그가 출력되고 실행 시간도 측정되고 있습니다. 이로써 핵심 로직과 공통 부가 기능이 분리되어 각각 모듈화된 것을 확인할 수 있습니다.스프링은 XML로도 AOP 설정을 할 수 있습니다. 최신 개발에서는 주로 애노테이션 방식을 사용하지만, 이해를 돕기 위해 동일한 로그 Aspect를 XML로 설정하는 방법을 간략히 살펴보겠습니다. 우선 LoggingAspect 클래스를 애노테이션 없이 평범한 클래스로 작성하고, XML에서 포인트컷과 Advice를 선언해보겠습니다.// 애노테이션을 사용하지 않는 LoggingAspect (일반 클래스)
package com.example.aspect; public class LoggingAspect { public void logBefore() { System.out.println("[로그] 메소드 시작"); } public void logAfter() { System.out.println("[로그] 메소드 종료"); }
}
&lt;!-- 스프링 AOP XML 설정 예 (applicationContext.xml 등) --&gt;
&lt;beans xmlns:aop="http://www.springframework.org/schema/aop" ...&gt; &lt;!-- 1. AspectJ 자동 프록시 활성화 --&gt; &lt;aop:aspectj-autoproxy /&gt; &lt;!-- 2. 대상 빈 및 Aspect 빈 등록 --&gt; &lt;bean id="myService" class="com.example.service.MyService" /&gt; &lt;bean id="loggingAspect" class="com.example.aspect.LoggingAspect" /&gt; &lt;!-- 3. Aspect 설정: 포인트컷과 어드바이스 연결 --&gt; &lt;aop:config&gt; &lt;aop:aspect ref="loggingAspect"&gt; &lt;!-- Pointcut: service 패키지의 모든 메소드 --&gt; &lt;aop:pointcut id="serviceMethods" expression="execution(* com.example.service..*(..))"/&gt; &lt;!-- Before Advice: logBefore 메소드를 pointcut에 연결 --&gt; &lt;aop:before pointcut-ref="serviceMethods" method="logBefore"/&gt; &lt;!-- After (finally) Advice: logAfter 메소드를 pointcut에 연결 --&gt; &lt;aop:after pointcut-ref="serviceMethods" method="logAfter"/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt;
&lt;/beans&gt;
위 XML 설정에서는 &lt;aop:aspect&gt; 블럭 안에 &lt;aop:pointcut&gt;과 &lt;aop:before&gt;, &lt;aop:after&gt;를 선언함으로써, loggingAspect 빈의 logBefore() 메소드를 Before Advice로, logAfter() 메소드를 After Advice로 동작하도록 지정했습니다. &lt;aop:pointcut&gt;에 정의된 표현식은 애노테이션 예제의 @Pointcut과 동일하게 서비스 패키지의 메소드들을 가리킵니다. XML 설정을 적용하고 나면, 동작 결과는 앞선 애노테이션 기반 결과와 동일하게 로그가 출력될 것입니다.XML을 이용하면 애노테이션 없이도 AOP를 설정할 수 있지만, 장황하고 컴파일타임 타입 체크가 어려운 단점이 있어 현재는 거의 사용되지 않습니다. 역사적으로 Spring 2.x 시절에 주로 쓰였고, Spring 3부터는 @Aspect 애노테이션 기반 설정이 일반적입니다.<br>AOP는 공통 기능의 재사용과 관심사 분리가 필요한 다양한 시나리오에서 유용하게 활용됩니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,complementing%20their%20use%20of%20OOP" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,complementing%20their%20use%20of%20OOP" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>). 앞서 든 예제 외에도 많이 쓰이는 활용 사례들을 소개합니다:<br>로그 작성은 전형적인 횡단 관심사 예시입니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/23700540/cross-cutting-concern-example#:~:text=An%20example%20of%20crosscutting%20concerns,debugging%20by%20tracing%20method%20calls" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/23700540/cross-cutting-concern-example#:~:text=An%20example%20of%20crosscutting%20concerns,debugging%20by%20tracing%20method%20calls" target="_self">Cross cutting concern example - Stack Overflow</a>). 애플리케이션의 여러 모듈에서 동작 추적이나 디버깅을 위해 로그를 남겨야 할 때, AOP를 사용하면 효과적입니다. 예를 들어 요청 요청자 정보와 파라미터를 로깅하거나, 메소드 진입/종료 시점마다 로그를 자동 출력하는 기능을 Aspect로 구현할 수 있습니다. 위에서 작성한 LoggingAspect는 바로 이러한 용도의 예입니다. 이 방법을 사용하면 모든 서비스 메소드에 로그 코드를 흩뿌릴 필요 없이 한 곳에서 관리할 수 있고, 로그 포맷 변경 등 유지보수도 용이합니다.<br>트랜잭션은 데이터 일관성을 위해 여러 연산을 하나의 원자적 작업으로 묶는 것인데, 비즈니스 로직마다 트랜잭션을 시작/커밋/롤백하는 코드를 넣는 것은 중복을 초래합니다. 스프링은 @Transactional 애노테이션을 통해 선언적 트랜잭션 관리를 제공하는데, 그 내부 구현이 사실 AOP를 사용한 것입니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,complementing%20their%20use%20of%20OOP" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,complementing%20their%20use%20of%20OOP" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>). @Transactional이 붙은 메소드를 가진 빈은 스프링이 자동으로 프록시로 감싸서, 메소드 호출 시점에 트랜잭션을 시작하고 정상 종료하면 커밋, 예외 발생 시 롤백하도록 Around Advice 형태로 처리합니다. 이렇게 함으로써 개발자는 트랜잭션 시작/종료에 관한 반복 코드를 작성하지 않고도 데이터 일관성을 보장할 수 있습니다.메소드 실행 전에 접근 권한을 확인하거나, 실행 후 감사 기록을 남기는 등의 보안 관련 기능도 AOP로 구현하기 좋습니다. 예를 들어 Role 기반 권한체크를 위해, 특정 애노테이션(@Secured 등)이 붙은 메소드에 대해 실행 전에 현재 사용자 권한을 검사하고 권한이 없으면 예외를 던지는 Aspect를 만들 수 있습니다. 실제로 Spring Security는 메소드 시큐리티(@PreAuthorize 등)나 HTTP 필터 등 여러 곳에서 AOP 또는 프록시 개념을 활용하여 권한 부여 로직을 적용합니다. 이 방식 역시 각 비즈니스 메소드에 개별적으로 권한 체크 로직을 넣는 것이 아니라, 중앙의 Aspect에서 일괄 관리하므로 보안 로직의 변경이 한 곳에서 이루어지고 실수로 빠뜨릴 확률도 줄어듭니다.<br>애플리케이션의 성능을 모니터링하기 위해 특정 메소드들의 실행 시간을 측정하거나 호출 빈도를 수집하는 것도 AOP의 활용 사례입니다. AOP를 사용하면 관심 대상 메소드의 실행 전후 시간을 재거나, 호출 매개변수 및 리턴값을 기록하여 성능 로그를 남길 수 있습니다 (<a data-tooltip-position="top" aria-label="https://medium.com/@alxkm/spring-aop-explained-how-to-implement-aspect-oriented-programming-in-your-spring-application-17cee1da12e8#:~:text=Performance%20Monitoring,identify%20bottlenecks%20in%20the%20application" rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/@alxkm/spring-aop-explained-how-to-implement-aspect-oriented-programming-in-your-spring-application-17cee1da12e8#:~:text=Performance%20Monitoring,identify%20bottlenecks%20in%20the%20application" target="_self">Spring AOP Explained: How to Implement Aspect-Oriented ... - Medium</a>). 예를 들어 위 LoggingAspect의 logExecutionTime 메소드는 Around Advice를 활용한 간단한 성능 모니터링 예입니다. 이 Aspect를 적용하면 별도의 수정 없이도 지정된 범위의 메소드들에 대해 실행 시간이 자동으로 측정되어 로그로 출력됩니다. 더 발전시켜, 측정된 성능 정보를 누적하여 대시보드에 출력하거나 임계치를 넘을 경우 알림을 보내는 것도 가능합니다. 이러한 모니터링 Aspect는 운영 단계에서 시스템 병목을 찾는 데 도움을 줍니다 (<a data-tooltip-position="top" aria-label="https://medium.com/@alxkm/spring-aop-explained-how-to-implement-aspect-oriented-programming-in-your-spring-application-17cee1da12e8#:~:text=Performance%20Monitoring,identify%20bottlenecks%20in%20the%20application" rel="noopener nofollow" class="external-link is-unresolved" href="https://medium.com/@alxkm/spring-aop-explained-how-to-implement-aspect-oriented-programming-in-your-spring-application-17cee1da12e8#:~:text=Performance%20Monitoring,identify%20bottlenecks%20in%20the%20application" target="_self">Spring AOP Explained: How to Implement Aspect-Oriented ... - Medium</a>).
기타 활용 분야: 이 밖에도 캐싱(caching) Aspect를 만들어 동일한 인풋에 대한 메소드 결과를 저장하고 재활용하거나, 감사/추적(auditing) Aspect를 만들어 중요한 작업에 대한 감사 로그를 남기는 등 다양한 공통 기능을 AOP로 구현할 수 있습니다. 아이디어에 따라서는 애플리케이션에 횡단하는 거의 모든 관심사를 Aspect로 뽑아낼 수 있지만, 남용은 금물입니다. AOP는 보이지 않는 곳에서 동작하기 때문에 과도하게 사용하면 오히려 코드를 추적하기 어려워질 수 있습니다. 일반적으로는 로깅, 보안, 트랜잭션처럼 관심사 분리가 명확한 경우에 선택적으로 적용하는 것이 바람직합니다.
스프링 AOP는 애플리케이션 개발에서 반복적으로 등장하는 부가 기능들을 깔끔하게 모듈화할 수 있는 강력한 도구입니다. 관점(Aspect)을 통해 횡단 관심사를 한 곳에서 관리함으로써, 핵심 로직 코드의 가독성과 유지보수성이 높아집니다. 본 자료에서는 AOP의 개념부터 스프링에서의 구현 방법(애노테이션 및 XML 설정), 그리고 대표적인 활용 사례까지 살펴보았습니다. 처음에는 AOP의 동작이 마치 프로그램에 마법을 부린 것처럼 느껴질 수 있지만, 개념을 이해하고 나면 설계상의 많은 중복과 지저분한 코드를 제거해주는 훌륭한 수단임을 알 수 있습니다.마지막으로, 학습자를 위한 팁으로 직접 실습을 권장합니다. 간단한 Spring 프로젝트를 만들어 이번 예제의 Aspect와 대상 클래스를 구현해 보세요. 그리고 여러 가지 Pointcut 표현식을 바꿔 가며 다른 클래스나 메소드에 적용해보고, Advice 종류도 Before/After 외에 Around나 AfterThrowing 등을 시도해 보십시오. 실습을 통해 AOP의 위력을 체감하고 나면, 앞으로 코드 작성 시 "이건 AOP로 뺄 수 있겠다"는 판단이 설득력 있게 다가올 것입니다. AOP를 적재적소에 활용하여 더욱 깔끔하고 유지보수하기 좋은 코드를 작성해 보시기 바랍니다!<br>참고 자료: Spring 공식 문서의 AOP 챕터 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,Different" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,Different" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>) (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/aop.html#:~:text=,pointcut%20expression%20language%20by%20default" target="_self">8.&nbsp;Aspect Oriented Programming with Spring</a>), Baeldung의 Introduction to Spring AOP 튜토리얼, 그리고 각종 블로그의 예제 코드를 참고하면 AOP에 대한 이해를 심화하는 데 도움이 됩니다. 이번 자료에서 다룬 코드와 개념을 토대로 더 다양한 상황에 AOP를 적용해보면서 경험을 쌓아보세요.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/spring-aop.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/Spring AOP.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 20 Mar 2025 11:22:59 GMT</pubDate></item><item><title><![CDATA[DI Annotation 비교]]></title><description><![CDATA[@Autowired, @Inject, @Resource는 모두 Spring에서 의존성을 주입(Dependency Injection, DI)할 때 사용되는 애노테이션입니다. 하지만 제공하는 API, 동작 방식, 주입 방식의 차이가 있습니다. 여기서는 유사점과 차이점을 코드 예제와 함께 심층 분석하겠습니다.
모두 Spring IoC 컨테이너에서 빈(Bean)을 찾아 자동으로 주입할 수 있음.
필드, 세터, 생성자에 사용할 수 있음 (단, @Resource는 생성자 주입 불가).
Spring이 자동으로 의존성을 해결해 줌 (Spring 컨테이너에서 관리되는 빈을 찾아서 주입).
Spring Boot에서는 모두 기본적으로 활성화되어 있으며, 특별한 설정 없이도 동작.
주입할 빈이 없는 경우 예외 발생 가능 (예외 처리 방법 다름 → 아래 차이점에서 설명).
🚀 정리: @Autowired와 @Inject는 타입 기반 검색을 사용하지만, @Resource는 기본적으로 이름 기반 검색을 수행한다.
@Autowired와 @Inject는 동작이 거의 동일하지만, @Resource는 우선순위가 다름(이름 → 타입 순).
빈이 여러 개일 경우 @Autowired와 @Inject는 @Qualifier 또는 @Primary로 해결하고, @Resource는 name 속성을 이용해 명확한 지정이 필요함.
🚀 정리: @Autowired와 @Inject는 모든 주입 방식(필드, 세터, 생성자)을 지원하지만, @Resource는 생성자 주입을 지원하지 않음.
🚀 정리: @Autowired는 required = false 설정을 통해 주입할 빈이 없어도 예외를 발생시키지 않을 수 있음.
@Inject와 @Resource는 무조건 빈이 존재해야 함 (@Autowired(required = false) 같은 옵션이 없음).
빈이 선택적으로 필요할 경우 @Autowired(required = false)를 사용하는 것이 좋다. @Autowired, @Inject, @Resource 비교
@Component
public class MyService { // @Autowired 사용 (Spring 제공) @Autowired private UserRepository userRepository; // @Inject 사용 (JSR-330 표준) @Inject private OrderRepository orderRepository; // @Resource 사용 (JSR-250 표준, name 속성 사용 가능) @Resource(name = "customerRepository") private CustomerRepository customerRepository; public void doSomething() { userRepository.findAll(); orderRepository.processOrder(); customerRepository.getCustomers(); }
}
✅ 설명: @Autowired와 @Inject는 타입 기반 주입(같은 타입의 빈을 자동 검색).
@Resource(name="customerRepository")는 이름 기반 검색 (이름이 customerRepository인 빈을 찾음). @Autowired와 @Inject는 지원하지만, @Resource는 생성자 주입을 지원하지 않음!
@Component
public class MyService { private final UserRepository userRepository; private final OrderRepository orderRepository; // @Autowired 생성자 주입 (Spring 제공) @Autowired public MyService(UserRepository userRepository, OrderRepository orderRepository) { this.userRepository = userRepository; this.orderRepository = orderRepository; } // @Inject 생성자 주입 (JSR-330 표준) @Inject public MyService(UserRepository userRepository, OrderRepository orderRepository) { this.userRepository = userRepository; this.orderRepository = orderRepository; }
}
❌ @Resource는 생성자 주입을 지원하지 않음!
만약 @Resource를 생성자에 붙이면 예외 발생.
@Autowired, @Inject, @Resource 모두 주입할 빈이 여러 개라면 특정 빈을 지정해야 함.
@Component
public class MyService { @Autowired @Qualifier("primaryUserRepository") private UserRepository userRepository; @Inject @Named("primaryOrderRepository") // JSR-330 표준 방식 private OrderRepository orderRepository;
}
@Component
public class MyService { @Resource(name = "customerRepository") private CustomerRepository customerRepository;
} Spring 전용 개발에서는 @Autowired를 기본적으로 사용하는 것이 가장 좋음. (required=false 지원, 기능이 가장 많음)
Java 표준(Jakarta EE) 프로젝트에서는 @Inject 사용 가능 (@Autowired와 거의 동일).
이름 기반으로 특정 빈을 주입하려면 @Resource 사용 (단, 생성자 주입은 불가능).
특정 빈을 강제로 지정해야 한다면 @Qualifier(Spring) 또는 @Named(JSR-330)를 추가.
주입할 빈이 선택 사항이라면 @Autowired(required=false)를 활용.
✅ Spring Boot에서는 @Autowired가 가장 일반적으로 쓰이며, 다른 애노테이션은 특별한 경우에만 사용됨.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/di-annotation-비교.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/DI Annotation 비교.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Mar 2025 06:17:52 GMT</pubDate></item><item><title><![CDATA[Dependency Injection DeepResearch]]></title><description><![CDATA[의존성 주입(Dependency Injection, DI)이란 객체가 필요한 의존 객체를 스스로 생성하거나 찾는 대신, 외부로부터 제공(주입)받는 설계 패턴을 말합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%B4%EC%B2%98%EB%9F%BC%2C%20DI%EB%8A%94%20%EC%96%B4%EB%96%A4%20%EA%B0%9D%EC%B2%B4%EA%B0%80%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94,%EB%8C%80%EC%8B%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EB%8A%94%20%EA%B2%83%20%EC%9D%84%20%EB%A7%90%ED%95%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%B4%EC%B2%98%EB%9F%BC%2C%20DI%EB%8A%94%20%EC%96%B4%EB%96%A4%20%EA%B0%9D%EC%B2%B4%EA%B0%80%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94,%EB%8C%80%EC%8B%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EB%8A%94%20%EA%B2%83%20%EC%9D%84%20%EB%A7%90%ED%95%9C%EB%8B%A4" target="_self">DI와 IOC는?</a>). 즉, 어떤 객체 A가 작업을 수행하기 위해 객체 B에 의존한다면, A 자신이 B를 new로 생성하는 것이 아니라 외부에서 B를 전달받아 사용합니다. 이러한 방식은 객체들의 생성과 사용의 책임을 분리하여, 구성(Configuration)과 사용(Use)을 분리하는 효과를 줍니다 (<a data-tooltip-position="top" aria-label="https://martinfowler.com/articles/injection.html#:~:text=In%20the%20Java%20community%20there%27s,than%20the%20principle%20of%20separating" rel="noopener nofollow" class="external-link is-unresolved" href="https://martinfowler.com/articles/injection.html#:~:text=In%20the%20Java%20community%20there%27s,than%20the%20principle%20of%20separating" target="_self">Inversion of Control Containers and the Dependency Injection
pattern</a>).<br>DI의 핵심 역할은 클래스 간 결합도를 낮추고 코드의 유연성과 재사용성을 높이는 것입니다. 객체는 구체적인 구현 대신 인터페이스(추상)에 의존하므로, 실제 사용할 구현체는 주입 시점에 결정될 수 있습니다. 그 결과 하나의 객체가 다양한 구현을 활용할 수 있어 다형성이 극대화되고, 변경에 유연해집니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%98%EC%A1%B4%EB%8F%84%EA%B0%80%20%EB%96%A8%EC%96%B4%EC%A7%84%EB%8B%A4%20%3D%3D%20%ED%95%9C%20%EA%B0%9D%EC%B2%B4%EA%B0%80,%EB%8B%A4%EC%96%91%ED%95%9C%20%EA%B0%9D%EC%B2%B4%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%A0%20%EC%88%98%20%EC%9E%88%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%98%EC%A1%B4%EB%8F%84%EA%B0%80%20%EB%96%A8%EC%96%B4%EC%A7%84%EB%8B%A4%20%3D%3D%20%ED%95%9C%20%EA%B0%9D%EC%B2%B4%EA%B0%80,%EB%8B%A4%EC%96%91%ED%95%9C%20%EA%B0%9D%EC%B2%B4%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%A0%20%EC%88%98%20%EC%9E%88%EB%8B%A4" target="_self">DI와 IOC는?</a>). 예를 들어, DB 접근 기능을 추상화한 Repository 인터페이스를 사용하고 MySQL 구현체를 주입받다가 Oracle 구현체로 바꾸고 싶다면, 코드 변경 없이 설정만 변경하여 구현체를 교체할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%95%8C%EC%95%84%EB%B3%B8%20%EB%B0%94%EC%97%90%20%EC%9D%98%ED%95%98%EB%A9%B4%2C%20DI%EB%8A%94%20%EC%9D%98%EC%A1%B4,%EC%86%8C%EC%8A%A4%20%ED%95%9C%EC%A4%84%20%EC%95%88%EB%B0%94%EA%BF%94%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%95%8C%EC%95%84%EB%B3%B8%20%EB%B0%94%EC%97%90%20%EC%9D%98%ED%95%98%EB%A9%B4%2C%20DI%EB%8A%94%20%EC%9D%98%EC%A1%B4,%EC%86%8C%EC%8A%A4%20%ED%95%9C%EC%A4%84%20%EC%95%88%EB%B0%94%EA%BF%94%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>). 이러한 구조 덕분에 느슨한 결합(Loose Coupling)이 이루어지며, 시스템이 변경에는 폐쇄적이고 확장에는 개방적인 개방-폐쇄 원칙(OCP)을 준수하게 됩니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EC%9D%98%20%ED%9A%A8%EA%B3%BC%EB%A5%BC%20%EC%A0%95%EB%A6%AC%ED%95%98%EC%9E%90%EB%A9%B4%2C%20%EB%8A%90%EC%8A%A8%ED%95%9C%20%EA%B2%B0%ED%95%A9%EC%9D%B4,OCP%EC%9B%90%EC%B9%99%EC%9D%84%20%EB%81%8C%EC%96%B4%EB%82%BC%20%EC%88%98%20%EC%9E%88%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EC%9D%98%20%ED%9A%A8%EA%B3%BC%EB%A5%BC%20%EC%A0%95%EB%A6%AC%ED%95%98%EC%9E%90%EB%A9%B4%2C%20%EB%8A%90%EC%8A%A8%ED%95%9C%20%EA%B2%B0%ED%95%A9%EC%9D%B4,OCP%EC%9B%90%EC%B9%99%EC%9D%84%20%EB%81%8C%EC%96%B4%EB%82%BC%20%EC%88%98%20%EC%9E%88%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>).<br>또한 DI는 객체 생성과 초기화의 제어권을 외부로 넘김으로써 애플리케이션 구성 방식을 유연하게 합니다. 예컨대 Spring 프레임워크에서는 IoC 컨테이너(뒤에서 설명)라는 조립기(Container)가 애플리케이션 객체들을 생성하고 서로 주입하여 객체 간 관계를 설정해줍니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%B4%EC%B2%98%EB%9F%BC%2C%20DI%EB%8A%94%20%EC%96%B4%EB%96%A4%20%EA%B0%9D%EC%B2%B4%EA%B0%80%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94,%EB%8C%80%EC%8B%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EB%8A%94%20%EA%B2%83%20%EC%9D%84%20%EB%A7%90%ED%95%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%B4%EC%B2%98%EB%9F%BC%2C%20DI%EB%8A%94%20%EC%96%B4%EB%96%A4%20%EA%B0%9D%EC%B2%B4%EA%B0%80%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94,%EB%8C%80%EC%8B%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EB%8A%94%20%EA%B2%83%20%EC%9D%84%20%EB%A7%90%ED%95%9C%EB%8B%A4" target="_self">DI와 IOC는?</a>). 개발자는 객체 사용에 집중할 수 있고, 의존성 관리는 프레임워크가 맡음으로써 개발 효율과 코드 품질을 높일 수 있습니다.<br>IoC(Inversion of Control, 제어의 역전)는 프로그램의 제어 흐름을 개발자가 아닌 프레임워크 또는 컨테이너가 담당하는 원리를 말합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%BD%94%EB%93%9C%EC%9D%98%20%ED%9D%90%EB%A6%84%EC%9D%84%20%EC%A0%9C%EC%96%B4%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%B4%20%EB%AC%B4%EC%97%87%EC%9D%B8%EB%8D%B0%3F" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%BD%94%EB%93%9C%EC%9D%98%20%ED%9D%90%EB%A6%84%EC%9D%84%20%EC%A0%9C%EC%96%B4%ED%95%98%EB%8A%94%20%EA%B2%83%EC%9D%B4%20%EB%AC%B4%EC%97%87%EC%9D%B8%EB%8D%B0%3F" target="_self">DI와 IOC는?</a>). 전통적인 프로그래밍에서는 객체 생성, 초기화, 메서드 호출 등의 흐름을 애플리케이션 코드가 직접 제어하지만, IoC를 적용하면 이러한 제어 권한이 제3자(예: 프레임워크)에게 위임됩니다. 흔히 “Hollywood Principle(헐리우드 원칙)”: “Don’t call us, we’ll call you”라는 문장으로 IoC 개념을 요약하는데 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Inversion_of_control#:~:text=Inversion%20of%20control%20,how%20frameworks%20dictate%20execution%20flow" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Inversion_of_control#:~:text=Inversion%20of%20control%20,how%20frameworks%20dictate%20execution%20flow" target="_self">Inversion of control - Wikipedia</a>), 이는 객체가 직접 다른 객체를 호출하거나 찾지 않고 필요한 시점에 프레임워크가 알아서 호출해준다는 의미입니다.<br>DI는 IoC 원리를 구현하는 구체적인 방법 중 하나입니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EB%8A%94%20IOC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%AA%A8%EB%8D%B8%EC%9D%84%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94,%EB%8D%94%20IOC%EB%B3%B4%EB%8B%A4%20%EA%B5%AC%EC%B2%B5%EC%A0%81%EC%9D%B8%20%EC%9D%98%EB%AF%B8%20%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EB%8A%94%20IOC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%AA%A8%EB%8D%B8%EC%9D%84%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94,%EB%8D%94%20IOC%EB%B3%B4%EB%8B%A4%20%EA%B5%AC%EC%B2%B5%EC%A0%81%EC%9D%B8%20%EC%9D%98%EB%AF%B8%20%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>). IoC가 광범위한 개념이라면, DI는 그 중에서도 객체 간의 의존 관계를 외부에서 설정해주는 방식을 가리킵니다. 다시 말해, 객체 생성과 연결을 IoC 컨테이너가 대신 수행하여 의존성을 주입함으로써 IoC를 실현하는 패턴이 DI입니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EB%8A%94%20IOC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%AA%A8%EB%8D%B8%EC%9D%84%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94,%EB%8D%94%20IOC%EB%B3%B4%EB%8B%A4%20%EA%B5%AC%EC%B2%B5%EC%A0%81%EC%9D%B8%20%EC%9D%98%EB%AF%B8%20%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EB%8A%94%20IOC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%AA%A8%EB%8D%B8%EC%9D%84%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94,%EB%8D%94%20IOC%EB%B3%B4%EB%8B%A4%20%EA%B5%AC%EC%B2%B5%EC%A0%81%EC%9D%B8%20%EC%9D%98%EB%AF%B8%20%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>). 예를 들어 Spring 프레임워크에서는 IoC 컨테이너가 애플리케이션 시작 시 필요한 객체들을 만들고, 설정 파일이나 애노테이션에 정의된 대로 의존 객체들을 주입하여 각 객체를 초기화합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" target="_self">4.&nbsp;The IoC container</a>). 개발 코드는 어떤 객체를 사용할지만 명시하고 어떻게 생성되고 연결되는지는 컨테이너에 맡기기 때문에, 제어의 흐름이 역전된 것입니다.<br>정리하면, IoC는 제어권을 역전시키는 원칙이고, DI는 이를 달성하는 구체적 기법입니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EB%8A%94%20IOC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%AA%A8%EB%8D%B8%EC%9D%84%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94,%EB%8D%94%20IOC%EB%B3%B4%EB%8B%A4%20%EA%B5%AC%EC%B2%B5%EC%A0%81%EC%9D%B8%20%EC%9D%98%EB%AF%B8%20%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EB%8A%94%20IOC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EB%AA%A8%EB%8D%B8%EC%9D%84%20%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94,%EB%8D%94%20IOC%EB%B3%B4%EB%8B%A4%20%EA%B5%AC%EC%B2%B5%EC%A0%81%EC%9D%B8%20%EC%9D%98%EB%AF%B8%20%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>). Spring을 비롯한 많은 프레임워크는 DI 컨테이너를 통해 IoC를 구현하며, 이를 통해 객체 생성과 구성의 책임을 프레임워크가 지고 애플리케이션 코드는 핵심 로직에 집중할 수 있게 됩니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" target="_self">4.&nbsp;The IoC container</a>).<br>DI에는 생성자 주입, 세터 주입, 필드 주입 세 가지 주요 방식이 있습니다 (<a data-tooltip-position="top" aria-label="https://martinfowler.com/articles/injection.html#:~:text=There%20are%20three%20main%20styles,the%20names%20I%20have%20here" rel="noopener nofollow" class="external-link is-unresolved" href="https://martinfowler.com/articles/injection.html#:~:text=There%20are%20three%20main%20styles,the%20names%20I%20have%20here" target="_self">Inversion of Control Containers and the Dependency Injection
pattern</a>). 각 방식은 의존성을 주입하는 시점과 방법에 차이가 있으며, Spring에서는 세 가지를 모두 지원하지만 상황에 따라 권장되는 방식이 있습니다. 아래에서는 각 주입 방식의 개념과 특징을 실습 코드와 함께 살펴봅니다.<br>생성자 주입은 객체의 생성자를 통해 의존성을 주입하는 방식입니다 (<a data-tooltip-position="top" aria-label="https://martinfowler.com/articles/injection.html#:~:text=PicoContainer%20uses%20a%20constructor%20to,includes%20everything%20it%20needs%20injected" rel="noopener nofollow" class="external-link is-unresolved" href="https://martinfowler.com/articles/injection.html#:~:text=PicoContainer%20uses%20a%20constructor%20to,includes%20everything%20it%20needs%20injected" target="_self">Inversion of Control Containers and the Dependency Injection
pattern</a>). 객체가 만들어질 때 필요한 의존 객체들을 인자로 받아 필드에 할당하므로, 객체 생성과 동시에 모든 필수 의존성이 주입됩니다. 이러한 방식은 의존성이 불변(final)으로 설정될 수 있어 객체를 불변(immutable)으로 만들고, 필수 의존성이 누락되는 일을 컴파일 시점에 방지할 수 있다는 장점이 있습니다 Spring Framework.다음은 생성자 주입의 예시 코드입니다. OrderService 클래스가 PaymentProcessor와 InventoryService라는 두 가지 의존 객체를 필요로 하는 경우, 생성자에서 이들을 인자로 받아 필드에 할당하고 있습니다:// 의존 대상 인터페이스
public interface PaymentProcessor { void processPayment(Order order);
} // 의존 대상 구현체
public class CreditCardProcessor implements PaymentProcessor { public void processPayment(Order order) { /* ... */ }
} // 의존성을 주입받는 클래스
public class OrderService { private final PaymentProcessor paymentProcessor; private final InventoryService inventoryService; // 생성자를 통한 의존성 주입 public OrderService(PaymentProcessor paymentProcessor, InventoryService inventoryService) { this.paymentProcessor = paymentProcessor; this.inventoryService = inventoryService; } public void placeOrder(Order order) { // 주입된 의존 객체들을 사용 paymentProcessor.processPayment(order); inventoryService.reserveInventory(order); }
}
위 코드에서 OrderService는 구체적인 CreditCardProcessor 클래스에 의존하지 않고, PaymentProcessor 인터페이스에 의존합니다. 실제 어떤 구현체가 들어올지는 OrderService를 생성할 때 결정되며, 이는 DI 컨테이너나 외부 조립기가 담당합니다. 생성자 주입을 사용하면 OrderService는 필수 의존성인 결제 처리기와 재고 서비스를 항상 갖춘 상태로 생성되므로, 이후 로직에서 paymentProcessor나 inventoryService가 null일 걱정 없이 사용할 수 있습니다.Spring 컨테이너를 활용한 생성자 주입 설정은 XML이나 Java 설정에서 &lt;constructor-arg&gt;를 사용하여 구성할 수 있습니다. 예를 들어 XML 기반 설정에서는 아래와 같이 &lt;bean&gt; 정의에서 생성자 인자로 다른 빈을 참조(ref)하여 주입합니다:&lt;beans&gt; &lt;bean id="paymentProcessor" class="com.example.CreditCardProcessor"/&gt; &lt;bean id="inventoryService" class="com.example.WarehouseInventoryService"/&gt; &lt;bean id="orderService" class="com.example.OrderService"&gt; &lt;constructor-arg ref="paymentProcessor"/&gt; &lt;constructor-arg ref="inventoryService"/&gt; &lt;/bean&gt;
&lt;/beans&gt;
위 XML 조각은 OrderService 빈을 생성할 때 paymentProcessor와 inventoryService 빈을 생성자 주입하도록 설정한 것입니다 Spring Framework. Spring IoC 컨테이너는 이를 참고하여 OrderService 객체를 만들 때 자동으로 CreditCardProcessor와 WarehouseInventoryService 객체를 주입합니다.세터 주입은 객체의 setter 메서드를 통해 의존성을 주입하는 방식입니다. 기본 생성자로 객체를 생성한 뒤, setter 메서드를 호출하여 필요한 의존 객체를 주입합니다 Spring Framework. 이 방법은 의존성을 선택적으로 설정할 때 유용하며, 특히 옵션(optional) 의존성을 다룰 때 자주 사용됩니다. 예를 들어 의존 객체가 없어도 동작은 가능하지만 있으면 기능이 향상되는 경우, 세터 주입을 통해 선택적으로 주입할 수 있습니다.다음은 세터 주입의 예시 코드입니다. NotificationService가 EmailSender 의존성을 가질 수 있지만 필수는 아닌 상황을 가정해보겠습니다:public class NotificationService { private EmailSender emailSender; // 의존 객체 (선택 사항) public NotificationService() { // 기본 생성자 } // 세터를 통한 의존성 주입 public void setEmailSender(EmailSender emailSender) { this.emailSender = emailSender; } public void notify(User user, String message) { // emailSender가 주입된 경우 이메일 알림 전송 if (emailSender != null) { emailSender.sendEmail(user.getEmail(), message); } // 주입되지 않았으면 이메일 없이 기본 알림만 처리 // ... }
}
<br>NotificationService는 기본 생성자로 생성된 후, 필요에 따라 setEmailSender() 메서드를 통해 EmailSender 구현체가 주입될 수 있습니다. 주입이 이루어지면 이메일 알림을 보내고, 그렇지 않으면 이메일 없이 동작합니다. 이처럼 세터 주입은 의존 객체를 나중에 설정하거나 교체할 수도 있으므로 유연성이 있습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,requires%20developers%20to%20understand%20its" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,requires%20developers%20to%20understand%20its" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>) (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=slight%20impact%20on%20the%20application,in%20large%20codebases%20with%20complex" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=slight%20impact%20on%20the%20application,in%20large%20codebases%20with%20complex" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). Spring에서 세터 주입을 적용하려면 XML 설정에서 &lt;property&gt; 태그를 사용하여 주입할 bean을 지정합니다. 예를 들어:&lt;bean id="emailSender" class="com.example.SmtpEmailSender"/&gt;
&lt;bean id="notificationService" class="com.example.NotificationService"&gt; &lt;property name="emailSender" ref="emailSender"/&gt;
&lt;/bean&gt;
위 설정은 NotificationService 생성 후 setEmailSender(...)를 호출하여 emailSender 빈을 주입하라는 의미입니다. 마찬가지로 Java Config나 애노테이션 환경에서도 setter 메서드에 @Autowired를 붙여 세터 주입을 사용할 수 있습니다.세터 주입은 선택적 의존성이나 순환 참조를 깨기 위해 활용됩니다. 다만 남용할 경우 객체가 완전히 생성된 후에야 의존성이 설정되는 특성 때문에 불변성이 깨지고, 주입 누락 시 런타임 오류를 초래할 수 있습니다. 따라서 필수적인 의존성은 가급적 생성자로 주입하고, 세터 주입은 설정 변경이나 옵션 사항에 한정하는 것이 바람직합니다 Spring Framework Spring Framework.필드 주입은 클래스의 멤버 필드에 직접 의존성을 주입하는 방식입니다. 주로 DI 프레임워크가 리플렉션을 사용하여 private 필드에 접근함으로써 의존 객체를 설정합니다. Spring에서는 @Autowired와 같은 애노테이션을 필드에 붙여서 필드 주입을 구현합니다. 예를 들어:@Component
public class UserService { @Autowired private UserRepository userRepository; // 필드 주입된 의존성 public List&lt;User&gt; listUsers() { return userRepository.findAll(); }
}
위 코드에서 UserService의 userRepository 필드는 @Autowired에 의해 주입됩니다. 필드 주입은 코드가 가장 간결하다는 장점이 있어 Spring Boot 예제 등에서 쉽게 볼 수 있지만, 권장되는 방법은 아닙니다. 필드 주입은 해당 필드에 대한 의존성을 클래스 내부에서 숨겨버리므로, 외부에서 주입 과정을 확인하거나 객체를 수동 생성할 때 누락을 알아채기 어렵고, 테스트 시에도 리플렉션을 사용하거나 Spring 컨테이너에 의존해야 하는 단점이 있습니다. Spring 팀 역시 필드 주입보다는 생성자 주입을 통한 명시적인 설계를 권장합니다 Spring Framework. 그럼에도 불구하고, 필드 주입은 간편함 때문에 간단한 애플리케이션이나 테스트 코드 등에서 가볍게 활용되는 경우가 있습니다. 중요한 컴포넌트의 경우 필드 주입은 지양하고, 필수 의존성은 생성자 주입, 선택 의존성은 세터 주입하는 방식으로 명확하게 의존성을 드러내는 것이 유지보수에 유리합니다 Spring Framework Spring Framework.
[참고] 생성자 vs 세터 vs 필드 주입: Spring에서는 “필수 의존성은 생성자로, 선택 의존성은 세터로” 주입하는 것을 기본 원칙으로 삼습니다 Spring Framework. 생성자 주입을 사용하면 모든 필요한 의존성이 객체 생성 시 제공되어 불변객체로 만들 수 있고, null 방지가 가능합니다 Spring Framework. 세터 주입은 변경 가능성이 있거나 선택적인 경우에 사용하고, 필드 주입은 테스트 및 유지보수상의 이유로 추천되지 않습니다. 이러한 가이드라인을 따르면 DI를 통해 얻는 결합도 감소와 테스트 용이성의 이점을 최대화할 수 있습니다.
<br>Spring 프레임워크는 DI를 실현하기 위해 IoC 컨테이너를 제공합니다. Spring IoC 컨테이너는 애플리케이션 시작 시 설정 메타데이터(구성 정보)를 해석하여 객체(빈)를 생성하고, 서로의 의존성을 주입하여 전체 객체 그래프를 구성합니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Spring%20IoC%20is%20a%20design,IoC%20container%20is%20responsible%20for" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Spring%20IoC%20is%20a%20design,IoC%20container%20is%20responsible%20for" target="_self">Spring - IoC Container - GeeksforGeeks</a>). 설정 메타데이터는 세 가지 방식으로 제공될 수 있는데, XML 설정, Java 코드 설정, 애노테이션 설정이 그것입니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=metadata,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=metadata,rich%20interdependencies%20between%20such%20objects" target="_self">4.&nbsp;The IoC container</a>). Spring은 이러한 모든 방식을 지원하며, 프로젝트 성격이나 선호에 따라 혼용도 가능합니다. 아래에서는 Spring에서 DI를 설정하는 세 가지 접근 방법을 설명합니다.<br> (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=,the%20container%20are%20called%20beans" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=,the%20container%20are%20called%20beans" target="_self">Spring - IoC Container - GeeksforGeeks</a>) (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/" target="_self">Spring - IoC Container - GeeksforGeeks</a>)
그림: Spring IoC 컨테이너는 설정 메타데이터(XML, Java Config, Annotation)와 애플리케이션 클래스들을 조합하여 필요한 객체들을 만들고 주입함으로써, 최종적으로 완전히 설정된 애플리케이션을 구성한다.Spring이 초창기부터 사용해온 DI 설정 방식은 XML 파일에 빈과 의존성을 명시적으로 선언하는 것입니다. applicationContext.xml 또는 beans.xml과 같은 설정 파일에 &lt;bean&gt; 태그들을 이용해 스프링 빈들의 클래스와 의존 관계를 정의합니다. XML 설정에서는 앞서 본 것처럼 &lt;constructor-arg&gt;로 생성자 주입을, &lt;property&gt;로 세터 주입을 구성합니다. 예를 들어, 회원 서비스와 이메일 알림 서비스를 XML로 설정한다면:&lt;beans&gt; &lt;!-- 의존 대상 빈 정의 --&gt; &lt;bean id="emailService" class="com.example.EmailService"/&gt; &lt;!-- 의존성을 주입받는 빈 정의 --&gt; &lt;bean id="userService" class="com.example.UserService"&gt; &lt;!-- 생성자 주입 --&gt; &lt;constructor-arg ref="emailService"/&gt; &lt;/bean&gt;
&lt;/beans&gt;
위 XML에서는 userService 빈을 생성할 때 emailService 빈을 생성자 인자로 주입하도록 정의하고 있습니다. Spring 컨테이너는 이 메타데이터를 읽고 UserService 객체를 만들 때 미리 생성된 EmailService 객체를 넣어줍니다. 만약 세터 주입을 사용하고 싶다면 &lt;property name="..."&gt;를 사용하면 됩니다.<br>XML 기반 DI 설정의 장점은 명시성이 높고 모든 빈 구성이 한눈에 보인다는 것입니다. 설정 파일만 보면 어떤 객체들이 어떤 의존성을 가지는지 파악하기 쉬워, 구성 관리가 명확합니다. 또한 코드와 설정이 분리되어 있어 어플리케이션 코드를 수정하지 않고도 빈 연결을 변경할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%95%8C%EC%95%84%EB%B3%B8%20%EB%B0%94%EC%97%90%20%EC%9D%98%ED%95%98%EB%A9%B4%2C%20DI%EB%8A%94%20%EC%9D%98%EC%A1%B4,%EC%86%8C%EC%8A%A4%20%ED%95%9C%EC%A4%84%20%EC%95%88%EB%B0%94%EA%BF%94%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%95%8C%EC%95%84%EB%B3%B8%20%EB%B0%94%EC%97%90%20%EC%9D%98%ED%95%98%EB%A9%B4%2C%20DI%EB%8A%94%20%EC%9D%98%EC%A1%B4,%EC%86%8C%EC%8A%A4%20%ED%95%9C%EC%A4%84%20%EC%95%88%EB%B0%94%EA%BF%94%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>). 하지만 단점으로는 설정이 장황해질 수 있고, 컴파일타임 타입 체크가 안 되므로 오타나 잘못된 설정은 런타임에 발견된다는 점이 있습니다. XML 설정은 프로젝트 규모가 커질수록 빈의 수가 많아져 관리 부담이 증가하기도 합니다.현재 Spring 개발에서는 XML 설정보다는 자바 기반 설정이나 애노테이션 기반 설정이 더 선호되지만, XML 설정은 여전히 XML을 활용한 외부 시스템 연동이나 레거시 지원 등을 위해 제공되고 있습니다. 필요한 경우 Java 설정과 혼용하여 사용할 수도 있습니다.Java Config는 XML 대신 순수 Java 코드로 스프링 빈 구성 정보를 작성하는 방식입니다. Spring 3부터 도입된 이 방식은 @Configuration 클래스와 @Bean 메서드를 활용하여 빈을 정의합니다. 자바 코드로 설정함으로써 컴파일 시 타입 안전성이 보장되고, IDE의 자동 완성 등의 이점을 누릴 수 있습니다. 또한 코드 형태이므로 리팩토링이 용이하고, 조건부 구성 등 프로그램적인 논리 적용도 가능합니다.Java Config를 사용한 DI 설정의 간단한 예를 보겠습니다. XML로 작성했던 설정을 Java Config로 변환하면 다음과 같습니다:@Configuration
public class AppConfig { // 의존 대상 빈 정의 (@Bean 메서드는 기본적으로 싱글톤 빈 반환) @Bean public EmailService emailService() { return new EmailService(); } // 의존성을 주입받는 빈 정의, 메서드 파라미터로 다른 빈을 주입 @Bean public UserService userService(EmailService emailService) { // 생성자 주입 사용 return new UserService(emailService); }
}
위 AppConfig 클래스는 설정 클래스이며, 두 개의 빈을 정의합니다. emailService() 메서드는 EmailService 객체를 생성하여 반환하고, userService(EmailService emailService) 메서드는 UserService를 생성하는데 메서드 파라미터로 EmailService 빈을 받아 사용하고 있습니다. Spring은 AppConfig을 처리하면서 @Bean 메서드들을 호출하여 빈을 생성하는데, 이때 userService를 생성할 때는 emailService()가 반환한 객체를 인자로 전달해 줍니다. 이러한 방식으로 Java Config에서는 메서드 인자 주입이나 내부에서 @Bean 메서드 호출로 의존성을 연결합니다.Java Config의 장점은 타입 안전성과 강력한 IDE 지원입니다. bean 이름 대신 메서드로 접근하므로 오타 가능성이 낮고, 리팩토링 시 함께 변경됩니다. 또한 Java 언어의 제어 구조를 사용할 수 있어, 예를 들어 프로파일(profile)에 따라 빈을 달리 등록하거나, 조건에 따라 빈을 구성하는 논리를 넣는 등 유연한 설정이 가능합니다.Spring Boot 등 현대 Spring 프로젝트에서는 Java Config가 널리 사용되며, XML 설정은 거의 등장하지 않습니다. Java Config 역시 XML처럼 어플리케이션 코드와 구성 로직을 분리한다는 점에서 DI 철학을 유지하면서, 언어적 편의성과 안정성을 더한 방법이라 할 수 있습니다.애노테이션 기반 DI는 클래스와 필드/메서드에 특정 애노테이션을 표시하여 스프링이 자동으로 빈을 등록하고 주입하도록 하는 방식입니다. Spring 2.5부터 지원되기 시작했고, Spring Boot에서는 기본적인 설정 스타일로 자리잡았습니다. 주요 애노테이션으로는 다음이 있습니다:
컴포넌트 등록 관련: @Component – 일반 구성 요소, @Service – 서비스 계층, @Repository – DAO/저장소 계층, @Controller – 웹 MVC 컨트롤러 등. (@Component의 특수화된 형태) 의존성 주입 관련: @Autowired (Spring 제공), @Inject (JSR-330 표준), @Resource (JSR-250 표준) 등.
<br>애노테이션 기반 설정을 사용하면, 스프링이 클래스패스를 스캔하면서 @Component가 붙은 클래스들을 자동으로 빈으로 등록하고(이를 컴포넌트 스캔이라고 합니다), 각 클래스의 필드나 생성자, 세터에 붙은 @Autowired나 @Inject를 찾아 타입에 맞는 빈을 주입합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=4" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=4" target="_self">4.&nbsp;The IoC container</a>) (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=You%20can%20apply%20,constructors%20and%20fields" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=You%20can%20apply%20,constructors%20and%20fields" target="_self">4.&nbsp;The IoC container</a>). 개발자는 별도의 설정 파일을 작성하지 않고, 필요한 곳에 애노테이션만 선언하면 되므로 설정이 간소화됩니다.다음은 애노테이션을 활용한 DI 구성 예시입니다:@Component // 빈으로 등록될 클래스
public class EmailService { public void sendEmail(String to, String message) { /* ... */ }
} @Component
public class UserService { private final EmailService emailService; // 생성자에 @Autowired를 붙여 생성자 주입 (Spring 4.3+에서는 생성자가 하나이면 @Autowired 생략 가능) @Autowired public UserService(EmailService emailService) { this.emailService = emailService; } // 혹은 필드 주입도 가능 (권장되지는 않지만 예시) // @Autowired private EmailService emailService; public void registerUser(User user) { // 회원 가입 로직 ... emailService.sendEmail(user.getEmail(), "Welcome!"); }
}
위 코드에서 EmailService와 UserService 모두 @Component가 붙어 있으므로, Spring이 애플리케이션 시작 시 이들을 빈으로 등록합니다. 그리고 UserService의 생성자에 @Autowired가 붙어있어, UserService를 생성할 때 컨테이너는 EmailService 빈을 찾아 생성자 인자로 주입합니다. 그 결과 XML이나 Java Config에 따로 정의하지 않아도 두 클래스 간의 의존관계가 설정됩니다.<br>@Autowired 외에 JSR-330 표준 DI 애노테이션인 @Inject를 사용할 수도 있습니다. Spring은 @Inject를 @Autowired와 동일하게 처리하므로 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=match%20at%20L3630%20JSR%20330%E2%80%99s,See%20here%20for%20more%20details" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=match%20at%20L3630%20JSR%20330%E2%80%99s,See%20here%20for%20more%20details" target="_self">4.&nbsp;The IoC container</a>), 둘 중 편한 것을 쓰면 됩니다. (@Autowired는 required 여부를 조정하는 등 Spring 고유 기능이 조금 있습니다.) 또한 @Resource 애노테이션을 사용하면 빈 이름으로 주입을 할 수도 있습니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=4" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=4" target="_self">4.&nbsp;The IoC container</a>). 예를 들어 @Resource(name="emailService")를 필드에 붙이면 해당 이름의 빈을 찾아 주입합니다.애노테이션 기반 DI 설정의 장점은 설정의 편의성과 응집도 향상입니다. 구성 정보가 코드와 함께 있으므로 클래스의 의존성을 코드를 보면서 바로 파악할 수 있고, 외부 XML을 편집할 필요 없이 코드만으로 모든 설정이 완료됩니다. Spring Boot에서는 별도의 설정 클래스 없이도 @SpringBootApplication이 자동으로 컴포넌트 스캔을 활성화하여, 프로젝트 내의 @Component 빈들을 모두 등록해주므로 DI 설정에 대한 부담이 거의 없습니다.한편, 컴포넌트 스캔 범위를 적절히 설정하지 않으면 원치 않는 빈이 등록되거나, 패키지 구조 변경 시 스캔 누락 등의 이슈가 있을 수 있습니다. 규모가 큰 프로젝트에서는 명시적인 Java Config와 병행하여 중요 빈들은 @Bean으로 등록하고, 부수적인 부분을 컴포넌트 스캔에 맡기는 식으로 운용하기도 합니다. 또한 애노테이션 남용 시 코드와 설정이 섞여 혼란을 줄 수 있으므로, 일관된 구조로 사용하는 것이 중요합니다.(각 섹션에서 이미 관련 코드를 다룬 관계로, 여기서는 주요 개념별 코드 사용 방법을 요약합니다.)
생성자 주입 예시: 객체 생성 시 생성자를 통해 필수 의존 객체를 주입. (예: OrderService(PaymentProcessor, InventoryService) – 생성자에서 인터페이스 타입을 받아 필드에 할당)
세터 주입 예시: 기본 생성자로 생성 후 필요한 의존이 있을 경우 setter 메서드로 주입. (예: NotificationService.setEmailSender(EmailSender) – 선택적 의존성 주입)
필드 주입 예시: DI 프레임워크의 도움으로 필드에 직접 주입. (예: @Autowired private UserRepository userRepository; – Spring 컨테이너가 userRepository 빈을 주입)
XML 설정 예시: &lt;bean&gt; 태그 내부에 &lt;constructor-arg&gt;나 &lt;property&gt;를 사용하여 빈 간 의존성 연결. (예: &lt;constructor-arg ref="otherBean"/&gt;)
Java Config 예시: @Configuration 클래스의 @Bean 메서드 간의 호출이나 인자로 다른 빈을 주입. (예: public UserService userService(EmailService emailService) { return new UserService(emailService); })
애노테이션 설정 예시: @Component로 빈 등록, @Autowired(또는 @Inject)로 의존성 자동 주입. (예: @Autowired private EmailService emailService;)
위의 예제들처럼 DI를 적용하면 클래스는 구체적인 구현 대신 인터페이스에 의존하고, 객체 연결은 설정 파일이나 컨테이너에 의해 수행됩니다. 이를 통해 코드에서는 각 객체의 역할과 사용만 드러나고, 구현체 교체나 연결 변경은 외부 설정으로 가능해집니다.Dependency Injection의 장점과 단점을 살펴보면 다음과 같습니다.
<br>느슨한 결합 (Loose Coupling): DI를 통해 객체는 구체 클래스 대신 추상에 의존하므로, 구현체 교체가 용이하고 모듈들이 서로 강하게 묶여있지 않습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,the%20behavior%20of%20the%20real" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,the%20behavior%20of%20the%20real" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>) (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=A%20basic%20benefit%20of%20dependency,18" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=A%20basic%20benefit%20of%20dependency,18" target="_self">Dependency injection - Wikipedia</a>). 그 결과 시스템이 변경에 유연해지고, 코드를 수정하지 않고도 동작 변경이나 확장이 가능합니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EC%9D%98%20%ED%9A%A8%EA%B3%BC%EB%A5%BC%20%EC%A0%95%EB%A6%AC%ED%95%98%EC%9E%90%EB%A9%B4%2C%20%EB%8A%90%EC%8A%A8%ED%95%9C%20%EA%B2%B0%ED%95%A9%EC%9D%B4,OCP%EC%9B%90%EC%B9%99%EC%9D%84%20%EB%81%8C%EC%96%B4%EB%82%BC%20%EC%88%98%20%EC%9E%88%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=DI%EC%9D%98%20%ED%9A%A8%EA%B3%BC%EB%A5%BC%20%EC%A0%95%EB%A6%AC%ED%95%98%EC%9E%90%EB%A9%B4%2C%20%EB%8A%90%EC%8A%A8%ED%95%9C%20%EA%B2%B0%ED%95%A9%EC%9D%B4,OCP%EC%9B%90%EC%B9%99%EC%9D%84%20%EB%81%8C%EC%96%B4%EB%82%BC%20%EC%88%98%20%EC%9E%88%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>).
<br>용이한 테스트 (Testability): 의존성을 주입함으로써 단위 테스트 시 Mock 객체로 대체하기 쉽습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=dependent%20object.%20,This%20makes%20it%20easier%20to" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=dependent%20object.%20,This%20makes%20it%20easier%20to" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). 객체 내부에서 new로 생성하는 구조였다면 테스트가 어려웠겠지만, DI를 사용하면 테스트 코드에서 가짜 구현을 주입하여 외부 영향 없이 해당 클래스만 검증할 수 있습니다. 이는 TDD(테스트 주도 개발)와 유닛테스트 작성에 큰 도움을 줍니다.
<br>유연성과 확장성 (Flexibility &amp; Extensibility): 새로운 기능이 필요할 때 기존 코드를 거의 수정하지 않고도 구현을 추가할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=dependencies%2C%20which%20can%20then%20be,This" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=dependencies%2C%20which%20can%20then%20be,This" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). 인터페이스를 구현한 새 클래스를 작성하고 DI 설정만 바꿔주면 클라이언트 코드는 변경 없이 새로운 동작을 받아들입니다. (예: 이전 섹션의 결제 수단 교체나 데이터베이스 교체 사례)
<br>모듈성 및 재사용성 (Modularity &amp; Reusability): DI는 애플리케이션을 여러 독립 모듈로 나누도록 도와줍니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,concerns%2C%20and%20overall%20codebase%20flexibility" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,concerns%2C%20and%20overall%20codebase%20flexibility" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). 각 구성요소는 자신의 의존성이 주입될 것으로 가정하고 작성되므로, 다른 환경에서도 재사용이 가능합니다. 예컨대 특정 구현에 묶여있지 않은 서비스 클래스는 다른 프로젝트에서도 같은 인터페이스를 구현한 새 객체를 주입하여 활용할 수 있습니다.
<br>구현 세부사항 은닉: 객체는 자신이 어떤 구체 클래스와 협력하는지 몰라도 되므로, 구현 세부사항을 몰라도 동작할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=" target="_self">Dependency injection - Wikipedia</a>) (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=A%20basic%20benefit%20of%20dependency,18" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=A%20basic%20benefit%20of%20dependency,18" target="_self">Dependency injection - Wikipedia</a>). 이는 변경에 대한 영향 범위를 줄이고, 코드의 책임 분리(Separation of Concerns)를 명확히 합니다. <br>초기 설정 복잡도: DI를 도입하려면 컨테이너 설정 또는 코드 구조 변화가 필요하여 학습곡선이 존재합니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=frameworks%20and%20toolkits%20are%20optimized,These%20errors%20can%20sometimes" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=frameworks%20and%20toolkits%20are%20optimized,These%20errors%20can%20sometimes" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). 작은 규모에서는 오히려 일반적인 방법보다 복잡해 보일 수 있고, 설정을 잘못하면 원인을 찾기 어려운 문제가 발생할 수 있습니다 (예: 의존성을 주입하지 못해 NullPointerException이 발생하는 등).
<br>런타임 의존성 오류: DI는 설정에 의해 객체 연결이 이루어지는데, 설정 오류는 애플리케이션 구동 시점에 드러납니다. 컴파일 시 안전성이 떨어지며, 특히 XML 설정이나 리플렉션 주입을 남용하면 문제가 숨겨진 채 배포되었다가 런타임에야 발견되는 위험이 있습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=slight%20impact%20on%20the%20application,in%20large%20codebases%20with%20complex" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=slight%20impact%20on%20the%20application,in%20large%20codebases%20with%20complex" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). 예를 들어, 주입할 빈 이름을 잘못 적으면 애플리케이션 시작 시 NoSuchBeanDefinitionException과 같은 오류가 발생합니다.
디버깅 어려움: DI를 사용하면 코드 상에서 객체가 어떻게 생성되는지 직접 추적하기 어려워집니다. 제어 흐름이 분산되어 있어, IDE로 타고 들어가도 빈 팩토리나 프록시에서 끊기는 경우가 있습니다. 따라서 DI 동작을 제대로 이해하지 못하면 코드 추적과 디버깅이 혼란스러울 수 있습니다. (하지만 숙련된 개발자는 컨테이너 로그나 디버그 모드를 통해 문제를 해결할 수 있고, 이러한 단점은 도구의 지원으로 많이 완화되었습니다.)
<br>성능 오버헤드(미미함): DI 컨테이너가 동적으로 의존성을 해석하고 주입하므로 약간의 런타임 오버헤드가 있습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,impact%20on%20the%20application%20performance" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,impact%20on%20the%20application%20performance" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>). 그러나 Spring 등의 현대 DI 프레임워크는 충분히 최적화되어 있어 일반적인 웹/엔터프라이즈 애플리케이션에서 성능 영향은 무시할 수준입니다. 그럼에도, 극한의 성능이 필요한 환경에서는 DI 컨테이너의 초기 로딩 시간, 프록시 생성 등에 주의가 필요합니다.
과도한 추상화 남용 가능성: DI를 지나치게 적용하다 보면 모든 것을 인터페이스화하고 작은 빈들로 쪼개어 오히려 코드를 이해하기 어렵게 만들 위험도 있습니다. 따라서 적절한 수준에서 설계를 단순화하는 감각이 필요합니다. 또한, 개발자가 DI 원리를 정확히 인지하지 못한 채 어노테이션만 남발하면 문법적인 DI에 그치고 설계 개선으로 이어지지 않을 수 있습니다.
<br>요약하면, DI는 올바르게 활용하면 소프트웨어의 유연성, 유지보수성, 테스트 용이성을 크게 향상시키지만, 잘못 적용하거나 이해가 부족하면 복잡도만 높아질 수 있습니다 (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=Drawbacks%20%C2%B7%20Increased%20complexity%3A%20Implementing,%C2%B7%20Performance%20overhead%3A" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=Drawbacks%20%C2%B7%20Increased%20complexity%3A%20Implementing,%C2%B7%20Performance%20overhead%3A" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>) (<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=Disadvantages%20%C2%B7%20Creates%20clients%20that,code%20difficult%20to%20trace" rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Dependency_injection#:~:text=Disadvantages%20%C2%B7%20Creates%20clients%20that,code%20difficult%20to%20trace" target="_self">Dependency injection - Wikipedia</a>). Spring 등의 프레임워크가 이러한 복잡성을 많이 감춰주고 있으므로, 장점을 극대화하면서 단점을 최소화하도록 프레임워크 사용 방법을 익히고 규약을 지켜서 적용하는 것이 중요합니다.DI는 오늘날 대규모 애플리케이션의 필수 아키텍처 패턴으로 자리잡았습니다. 실무에서 DI를 활용하는 대표적인 사례와 그 이점을 몇 가지 살펴보겠습니다.
<br>
레이어드 아키텍처에서의 DI: 웹 애플리케이션을 예로 들면, Controller – Service – Repository 계층 구조에서 각 계층 간 의존성을 DI로 관리합니다. Controller는 Service 인터페이스에 의존하고, Service는 Repository 인터페이스에 의존하며, 실제 구현체들은 주입으로 연결됩니다. 이를 통해 각 계층은 구현과 무관하게 역할에 집중할 수 있고, 새로운 구현이 생겨도 갈아끼우기 쉽습니다. 가령, OrderService가 PaymentProcessor 인터페이스를 통해 결제 모듈을 사용하면, 현금 결제(CashProcessor)에서 카드 결제(CardProcessor)로 변경하더라도 OrderService 코드는 수정할 필요 없이 DI 설정만 변경하면 됩니다. DI 컨테이너가 각 계층 컴포넌트를 연결해주기 때문에 결합도가 낮아지고 변경에 유연해지는 것입니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/12798812/does-dependency-injection-help-us-achieve-loose-coupling#:~:text=0" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/12798812/does-dependency-injection-help-us-achieve-loose-coupling#:~:text=0" target="_self">java - Does Dependency Injection help us achieve Loose-Coupling? - Stack Overflow</a>). 인터페이스 기반 개발과 DIP: DI는 SOLID 원칙 중 의존성 역전 원칙(DIP)을 따르는 설계를 촉진합니다. DIP 원칙은 “고수준 모듈은 저수준 모듈에 의존하면 안 되며, 모두 추상에 의존해야 한다”는 내용으로, DI를 사용하면 구현 대신 인터페이스에 의존하게 되어 자연스럽게 이 원칙을 구현하게 됩니다. 실무에서는 인터페이스를 먼저 정의하고, 여러 구현체를 만든 뒤, DI 컨테이너 설정으로 어느 구현체를 사용할지 결정하는 패턴을 흔히 씁니다. 예를 들어 로그 처리 기능에 대해 Logger 인터페이스를 두고, 파일로거, 콘솔로거, 원격로거 등의 구현을 각각 만들고 DI로 주입하면, 설정만 바꾸어 로그 출력 방식을 전환할 수 있습니다. 이처럼 DI는 객체 지향 설계의 유연함을 실질적으로 지원하여 변화하는 요구사항에 대응하기 쉽도록 합니다. 테스트 시 모의 객체 주입: 앞서 언급했듯 DI의 큰 장점은 테스트 용이성입니다. 실무에서 단위 테스트를 작성할 때 DI컨테이너 없이도 수동으로 주입을 활용하는 경우가 많습니다. 예를 들어 UserService가 EmailService에 의존한다면, 테스트에서는 EmailService의 구현체 대신 테스트용 목(Mock) 객체를 만들어 UserService 생성자에 넣어줍니다. 그렇게 하면 UserService의 비즈니스 로직을 테스트하면서도 이메일 발송 로직은 실행되지 않게 제어할 수 있습니다. 이것이 가능한 이유는 UserService 코드가 특정 구현이 아니라 인터페이스에만 의존하고, 생성자를 통해 주입받도록 설계되었기 때문입니다. DI를 도입한 설계는 곧 테스트하기 좋은 설계이므로, 대기업들의 대형 프로젝트나 TDD를 실천하는 팀에서는 DI 컨테이너와 무관하게도 이러한 패턴을 활용하고 있습니다. <br>
구성 변경의 유연함: 운영 환경에서 구성 변경이 필요할 때 DI의 진가가 발휘됩니다. 예를 들어 애플리케이션을 배포한 후, 데이터베이스를 교체하거나 외부 서비스 API 클라이언트를 교체해야 하는 상황이 생길 수 있습니다. DI를 잘 활용한 시스템이라면, 새로운 구현체를 작성하고 설정만 바꾸어주면 재배포나 큰 코드 수정 없이 변경을 적용할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%95%8C%EC%95%84%EB%B3%B8%20%EB%B0%94%EC%97%90%20%EC%9D%98%ED%95%98%EB%A9%B4%2C%20DI%EB%8A%94%20%EC%9D%98%EC%A1%B4,%EC%86%8C%EC%8A%A4%20%ED%95%9C%EC%A4%84%20%EC%95%88%EB%B0%94%EA%BF%94%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%95%8C%EC%95%84%EB%B3%B8%20%EB%B0%94%EC%97%90%20%EC%9D%98%ED%95%98%EB%A9%B4%2C%20DI%EB%8A%94%20%EC%9D%98%EC%A1%B4,%EC%86%8C%EC%8A%A4%20%ED%95%9C%EC%A4%84%20%EC%95%88%EB%B0%94%EA%BF%94%EB%8F%84%20%EB%90%9C%EB%8B%A4%EB%8A%94%20%EA%B2%83%EC%9D%B4%EB%8B%A4" target="_self">DI와 IOC는?</a>). 앞서 든 예처럼 Oracle에서 MySQL로 DB를 바꾸는 작업도, DataSource 빈의 설정만 교체하면 Repository나 Service 코드는 손댈 필요가 없습니다. 서비스 중단 시간 최소화와 변경 비용 감소 측면에서 DI는 실무 운영상의 큰 이점을 제공합니다. 플러그인 아키텍처 및 확장 기능: Eclipse나 IntelliJ 같은 IDE의 플러그인 시스템이나, Spring Framework의 ApplicationContextInitializer처럼 모듈 단위로 끼워넣는 설계에서도 DI 아이디어가 쓰입니다. 핵심 시스템은 추상화된 확장 지점만 노출하고, 구체 구현은 외부에서 주입하는 식입니다. 이는 새로운 기능을 추가할 때 기존 코드를 수정하는 대신 DI 컨테이너에 새로운 빈을 추가하거나 설정으로 등록하는 방식으로 플러그인을 개발하게 합니다. 결과적으로 핵심 시스템은 변경 없이 기능 확장이 가능해집니다 (OCP 원칙 준수). Spring에서도 XML의 &lt;import&gt;나 자바 설정의 @Import 등을 통해 설정을 모듈화하고, 필요한 빈들을 주입하여 확장하는 방식을 권장합니다. 이 외에도 의존성 주입은 거의 모든 현대 자바/스프링 프로젝트에서 기본적으로 사용되고 있습니다. Spring MVC/WebFlux의 컨트롤러에서 서비스 주입, 서비스에서 리포지토리 주입, Spring Security 설정에서 커스텀 필터 주입 등 수많은 사례가 있으며, DI 없이는 복잡해질 코드들이 DI 컨테이너 덕분에 간결하고 명확하게 유지됩니다. 중요한 것은 DI를 도입할 때 설계 단계에서부터 어떤 부분을 추상화하고 주입할지를 신중하게 고민하는 것입니다. 무조건 분리하기보다는 변경 가능성이 높거나 테스트 필요성이 큰 부분을 인터페이스화하고, 나머지는 과도하게 분리하지 않는 균형 잡힌 접근이 좋습니다. 그렇게 할 때 DI의 이점(유지보수성, 확장성)을 최대한 실무에서 누릴 수 있을 것입니다.의존성 주입(Dependency Injection)은 Java와 Spring 개발에서 빠질 수 없는 핵심 개념으로, 객체 지향 설계를 한층 유연하고 견고하게 만들어줍니다. DI는 IoC 원칙을 토대로 객체 간 관계 설정을 프레임워크가 담당하게 함으로써, 코드의 모듈화, 테스트 용이성, 변경 대응력을 높여줍니다. Spring 프레임워크는 XML, Java Config, 애노테이션 등 다양한 방식으로 DI를 지원하여 개발자가 편리하게 이 개념을 적용할 수 있게 해주며, 스프링 컨테이너는 애플리케이션 전반의 객체 생명주기를 관리하고 필요한 곳에 의존성을 공급해주는 중추적인 역할을 수행합니다.DI를 효과적으로 활용하려면 “느슨한 결합, 강한 응집”이라는 소프트웨어 설계 원칙을 항상 염두에 두고, 필요한 부분에 적절히 추상화를 도입하는 것이 중요합니다. Spring에서는 보통 인터페이스와 구현체를 정의하고, @Autowired 등을 통해 연결하는 간결한 방식으로 이를 달성할 수 있습니다. 또한 최신 권장사항에 따라 생성자 주입을 기본으로 활용하고, 설계의 명시성과 안전성을 확보하는 것이 바람직합니다.마지막으로 DI는 그 자체가 목적이 아니라 수단임을 기억해야 합니다. 궁극적으로는 DI를 통해 얻는 이익—더 나은 구조화, 쉬운 변경, 품질 향상—이 목표입니다. 적절한 수준에서 DI를 도입하고 설계상의 균형을 유지한다면, 대규모 프로젝트에서도 변경에 유연하고 견고한 아키텍처를 구축할 수 있을 것입니다. Spring의 풍부한 DI 기능과 모범 사례를 참고하여, 실무 개발에서 DI를 통한 생산성 향상과 유지보수 이점을 만끽하시기 바랍니다.참고 자료:
<br>Spring Framework Reference Documentation - IoC Containers and Dependency Injection (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" target="_self">4.&nbsp;The IoC container</a>) (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" target="_self">4.&nbsp;The IoC container</a>)
<br>Martin Fowler, Inversion of Control Containers and the Dependency Injection pattern (<a data-tooltip-position="top" aria-label="https://martinfowler.com/articles/injection.html#:~:text=In%20the%20Java%20community%20there%27s,than%20the%20principle%20of%20separating" rel="noopener nofollow" class="external-link is-unresolved" href="https://martinfowler.com/articles/injection.html#:~:text=In%20the%20Java%20community%20there%27s,than%20the%20principle%20of%20separating" target="_self">Inversion of Control Containers and the Dependency Injection
pattern</a><br>) (<a data-tooltip-position="top" aria-label="https://martinfowler.com/articles/injection.html#:~:text=The%20basic%20idea%20of%20the,the%20lines%20of%20Figure%202" rel="noopener nofollow" class="external-link is-unresolved" href="https://martinfowler.com/articles/injection.html#:~:text=The%20basic%20idea%20of%20the,the%20lines%20of%20Figure%202" target="_self">Inversion of Control Containers and the Dependency Injection
pattern</a>)
<br>JetBrains Guide, Benefits &amp; Drawbacks of Dependency Injection (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,the%20behavior%20of%20the%20real" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,the%20behavior%20of%20the%20real" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>) (<a data-tooltip-position="top" aria-label="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,requires%20developers%20to%20understand%20its" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.jetbrains.com/guide/go/tutorials/dependency_injection_part_one/benefits/#:~:text=,requires%20developers%20to%20understand%20its" target="_self">Benefits &amp; Drawbacks of Dependency Injection - JetBrains Guide</a>)
<br>Stack Overflow Q&amp;A - Does Dependency Injection help achieve loose coupling? (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/12798812/does-dependency-injection-help-us-achieve-loose-coupling#:~:text=0" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/12798812/does-dependency-injection-help-us-achieve-loose-coupling#:~:text=0" target="_self">java - Does Dependency Injection help us achieve Loose-Coupling? - Stack Overflow</a>)
<br>Velog 블로그 - DI와 IoC는? (의존성 주입 개념과 효과 설명) (<a data-tooltip-position="top" aria-label="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%B4%EC%B2%98%EB%9F%BC%2C%20DI%EB%8A%94%20%EC%96%B4%EB%96%A4%20%EA%B0%9D%EC%B2%B4%EA%B0%80%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94,%EB%8C%80%EC%8B%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EB%8A%94%20%EA%B2%83%20%EC%9D%84%20%EB%A7%90%ED%95%9C%EB%8B%A4" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@sweet_sumin/DI%EC%99%80-IOC%EB%8A%94#:~:text=%EC%9D%B4%EC%B2%98%EB%9F%BC%2C%20DI%EB%8A%94%20%EC%96%B4%EB%96%A4%20%EA%B0%9D%EC%B2%B4%EA%B0%80%20%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94,%EB%8C%80%EC%8B%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EB%8A%94%20%EA%B2%83%20%EC%9D%84%20%EB%A7%90%ED%95%9C%EB%8B%A4" target="_self">DI와 IOC는?</a>)
]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/dependency-injection-deepresearch.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/Dependency Injection DeepResearch.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Mar 2025 05:49:56 GMT</pubDate></item><item><title><![CDATA[IoC Container DeepResearch]]></title><description><![CDATA[Inversion of Control(제어의 역전, IoC)는 객체의 생성 및 의존성 관리를 개발자가 아닌 프레임워크나 컨테이너가 맡는 설계 원칙입니다. Spring에서 IoC 컨테이너는 이 원칙을 구현하여 객체 생명주기 관리와 의존성 주입(DI)을 담당합니다. IoC에서는 객체가 협력 객체를 직접 생성하거나 찾지 않고, 필요한 의존성을 생성자 파라미터나 팩토리 메서드 인자, 또는 프로퍼티 설정 등을 통해 선언만 합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" target="_self">5.&nbsp;The IoC container</a>). 그러면 Spring IoC 컨테이너가 객체(빈, Bean)를 만들 때 이러한 의존성을 주입(inject)해줍니다. 즉, 객체 스스로 필요한 것을 생성하는 대신 컨테이너가 대신 만들어 공급하는 것으로, 제어 흐름이 뒤바뀐 것이라 할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=objects%20they%20work%20with%2C%20only,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=objects%20they%20work%20with%2C%20only,its%20dependencies%20by%20using%20direct" target="_self">5.&nbsp;The IoC container</a>).<br>Spring에서 IoC 컨테이너를 대표하는 인터페이스는 ApplicationContext입니다. ApplicationContext는 Spring IoC 컨테이너를 나타내며, 애플리케이션을 구성하는 객체들(빈)을 생성, 구성, 조립하는 책임을 집니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" target="_self">5.&nbsp;The IoC container</a>). IoC 컨테이너는 애플리케이션이 어떤 객체들을 필요로 하고 서로 어떻게 의존하는지에 대한 설정 메타데이터(configuration metadata)를 읽어 이 작업을 수행합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" target="_self">5.&nbsp;The IoC container</a>). 설정 메타데이터는 XML, 애노테이션, 자바 코드 등 다양한 형태로 제공될 수 있으며, 이를 통해 애플리케이션 객체들과 그들 간의 풍부한 관계를 선언적으로 표현합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=assembling%20the%20aforementioned%20beans,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=assembling%20the%20aforementioned%20beans,rich%20interdependencies%20between%20such%20objects" target="_self">5.&nbsp;The IoC container</a>). <br>Spring IoC 컨테이너의 핵심 역할을 정리하면 다음과 같습니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Spring%20IoC%20is%20a%20design,IoC%20container%20is%20responsible%20for" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Spring%20IoC%20is%20a%20design,IoC%20container%20is%20responsible%20for" target="_self">Spring - IoC Container - GeeksforGeeks</a>):
빈 생성: 애플리케이션을 구성하는 객체(빈)를 생성한다. 의존성 주입: 생성된 빈에 필요한 의존 객체를 주입하여 연결한다. 빈 초기화 및 설정: 빈의 설정값을 적용하고 초기화 콜백 등을 수행한다. 빈 생명주기 관리: 빈의 생성부터 소멸까지의 전체 생명주기를 관리하며, 컨테이너가 종료될 때 빈의 종료 처리까지 책임진다. 설정 메타데이터 처리: XML, Java Config, 애노테이션 등으로 제공되는 설정 정보를 읽어 빈 구성 정보를 해석한다.
이러한 IoC 컨테이너 덕분에 애플리케이션 코드는 구체적인 객체 생성이나 의존 관계 연결 코드를 줄이고, 컨테이너가 제공하는 DI 메커니즘에 집중할 수 있습니다. 결과적으로 컴포넌트 간 결합도가 낮아지고, 설정을 변경하여 구현체를 교체하거나 테스트용 목 객체를 주입하는 등이 용이해집니다.다음은 IoC 컨테이너가 없는 경우와 있는 경우를 비교한 간단한 예시입니다. 서비스와 컨트롤러 객체가 서로 의존하는 상황에서, 전자는 직접 객체를 생성하고 후자는 IoC 컨테이너를 통해 주입받는 모습입니다:// IoC 컨테이너를 사용하지 않은 전통적인 객체 생성
public class ProductController { private ProductService service; public ProductController() { // 직접 의존 객체를 생성 (강한 결합) this.service = new ProductService(); } // ...
} // IoC 컨테이너를 사용하는 경우 (생성자 주입 방식)
@Service
public class ProductService { /* ... */ } @Controller
public class ProductController { private final ProductService service; // IoC 컨테이너가 ProductService 빈을 주입 (의존성 주입, 낮은 결합) public ProductController(ProductService service) { this.service = service; } // ...
} // 설정 클래스 혹은 컴포넌트 스캔을 통해 컨테이너가 빈을 생성/주입
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
ProductController ctrl = context.getBean(ProductController.class);
위 코드에서 알 수 있듯이, IoC 컨테이너를 사용하면 ProductController가 ProductService를 직접 생성하지 않고, 대신 Spring이 둘 다 빈으로 관리하면서 ProductController 생성 시 ProductService를 주입합니다. 이렇게 함으로써 ProductController는 ProductService 구현체에 덜 의존하게 되어(제어의 역전), 유지보수성과 테스트 용이성이 높아집니다.<br>빈(Bean)이란 Spring IoC 컨테이너가 생성하고 관리하는 객체를 뜻합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20Spring%2C%20the%20objects%20that,metadata%20used%20by%20a%20container" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20Spring%2C%20the%20objects%20that,metadata%20used%20by%20a%20container" target="_self">5.&nbsp;The IoC container</a>). 컨테이너에 등록된 빈들은 자신의 lifecycle 전반을 컨테이너에 위임하며, 컨테이너는 빈의 생명주기 단계마다 적절한 작업을 수행합니다. Spring의 빈 생명주기 주요 단계를 살펴보면 다음과 같습니다:
빈 인스턴스화: 설정 메타데이터를 바탕으로 컨테이너가 빈 객체를 인스턴스화합니다 (보통 무상태 싱글톤으로 기본 생성). 이 때 필요한 의존 객체들도 컨테이너가 먼저 생성합니다. <br>의존성 설정: 생성된 빈의 프로퍼티에 setter를 호출하거나 생성자 인자를 통해 다른 빈들을 주입합니다. 이 단계에서 빈 간의 의존 관계가 연결됩니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=It%20is%20a%20process%20whereby,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=It%20is%20a%20process%20whereby,its%20dependencies%20by%20using%20direct" target="_self">5.&nbsp;The IoC container</a>) (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=constructed%20or%20returned%20from%20a,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=constructed%20or%20returned%20from%20a,its%20dependencies%20by%20using%20direct" target="_self">5.&nbsp;The IoC container</a>). Aware 인터페이스 처리: 빈 클래스가 BeanNameAware, BeanFactoryAware, ApplicationContextAware 등의 인터페이스를 구현했다면 컨테이너가 해당 빈에 자신의 빈 이름이나 컨테이너 참조 등을 전달합니다. 초기화 콜백: 빈 생성 및 의존성 주입이 완료되면, 빈이 초기화 작업을 수행할 수 있도록 콜백 메서드들이 호출됩니다. Spring에서는 여러 방식의 초기화 콜백을 지원하는데, 대표적으로 JSR-250의 @PostConstruct 애노테이션, Spring 전용 인터페이스인 InitializingBean의 afterPropertiesSet() 메서드, 또는 XML/자바 설정에서 지정한 init-method 등이 있습니다 Spring Framework Spring Framework. 일반적으로 Spring에서는 표준인 @PostConstruct를 사용하는 것을 권장하며, 이를 사용하면 빈 클래스가 Spring에 종속되지 않고도 초기화 로직을 가질 수 있습니다 Spring Framework. 빈 사용: 빈이 초기화된 후에는 애플리케이션의 요청에 따라 빈이 사용됩니다. 싱글톤 빈의 경우 애플리케이션 전역에서 공유되어 쓰이고, 프로토타입 빈의 경우 요청 시마다 새로운 객체가 생성됩니다. 소멸 콜백: 애플리케이션 종료나 컨테이너 종료 시점에 빈을 정리할 기회를 줍니다. 빈 클래스에 @PreDestroy 애노테이션이 붙은 메서드나 DisposableBean의 destroy() 메서드, 또는 설정된 destroy-method가 있다면 컨테이너가 해당 메서드를 호출합니다 Spring Framework Spring Framework. 이를 통해 빈이 파일이나 네트워크 연결을 닫는 등 필요한 정리 작업을 수행할 수 있습니다.
Spring 컨테이너는 이러한 단계들을 내부적으로 BeanPostProcessor 등의 확장점으로 관리합니다. 예를 들어, 컨테이너는 @PostConstruct나 @PreDestroy가 붙은 메서드를 호출하기 위해 CommonAnnotationBeanPostProcessor를 사용하고, @Autowired 처리를 위해 AutowiredAnnotationBeanPostProcessor를 사용합니다. 개발자가 특별한 요구로 기본 제공 이상의 동작을 원할 경우, 직접 커스텀 BeanPostProcessor를 구현하여 빈 초기화 전후에 추가 로직을 넣을 수도 있습니다 Spring Framework.아래 코드는 빈 생명주기의 초기화와 소멸 단계에 훅을 거는 방법을 보여줍니다. @PostConstruct와 @PreDestroy 애노테이션을 사용하여 빈이 생성되고 소멸될 때 로그를 출력하는 예제입니다:import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import org.springframework.stereotype.Component; @Component
public class MyBean { public MyBean() { System.out.println("1. MyBean 생성자 호출"); } @PostConstruct public void init() { System.out.println("2. MyBean @PostConstruct 호출 (초기화)"); } @PreDestroy public void destroy() { System.out.println("3. MyBean @PreDestroy 호출 (소멸 직전)"); }
} // 메인 애플리케이션 컨텍스트 실행 예시 (예: Spring Boot 또는 수동 컨텍스트)
ConfigurableApplicationContext ctx = SpringApplication.run(App.class, args);
// ... 애플리케이션 동작 ...
ctx.close(); // 컨텍스트를 종료하면 @PreDestroy 메서드 호출
위 예제에서 MyBean은 컴포넌트로 등록되어 IoC 컨테이너가 관리하는 빈입니다. 컨테이너가 MyBean을 생성(instantiation)할 때 생성자가 호출되고, 이후 초기화 단계에서 @PostConstruct 메서드인 init()이 자동으로 실행되어 초기화 작업을 수행합니다. 애플리케이션이 종료되어 컨테이너가 내려갈 때는 소멸 단계에서 @PreDestroy 메서드 destroy()가 호출되어 리소스 정리 등의 종료 작업을 수행합니다. 개발자는 이처럼 라이프사이클 훅을 활용하여 빈의 생명주기 전반에 걸쳐 필요한 로직을 구현할 수 있습니다.<br>Spring IoC 컨테이너를 구현한 주요 인터페이스로 BeanFactory와 ApplicationContext가 있습니다. 둘 다 빈을 관리하고 의존성 주입을 처리하지만, 제공하는 기능 범위와 동작 방식에 차이가 있습니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20,for%20use%20in%20web%20applications" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20,for%20use%20in%20web%20applications" target="_self">5.&nbsp;The IoC container</a>) (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20short%2C%20the%20,15%2C%20%E2%80%9CThe%20BeanFactory%E2%80%9D" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20short%2C%20the%20,15%2C%20%E2%80%9CThe%20BeanFactory%E2%80%9D" target="_self">5.&nbsp;The IoC container</a>). 요약하면 ApplicationContext는 BeanFactory의 확장판으로, 실무에서는 일반적으로 ApplicationContext를 사용합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20short%2C%20the%20,15%2C%20%E2%80%9CThe%20BeanFactory%E2%80%9D" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20short%2C%20the%20,15%2C%20%E2%80%9CThe%20BeanFactory%E2%80%9D" target="_self">5.&nbsp;The IoC container</a>).
<br>
BeanFactory: Spring IoC 컨테이너의 가장 기본적인 인터페이스로, 빈을 지연 로딩(lazy loading) 방식으로 필요한 시점에 생성합니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=,on%20top%20of%20the%20BeanFactory" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=,on%20top%20of%20the%20BeanFactory" target="_self">Spring - IoC Container - GeeksforGeeks</a>) (<a data-tooltip-position="top" aria-label="https://springframework.guru/spring-beanfactory-vs-applicationcontext/#:~:text=,whereas" rel="noopener nofollow" class="external-link is-unresolved" href="https://springframework.guru/spring-beanfactory-vs-applicationcontext/#:~:text=,whereas" target="_self">Spring BeanFactory vs ApplicationContext - Spring Framework Guru</a>). BeanFactory는 객체 설정 및 DI 기능을 제공하지만, 그 외의 부가 기능은 최소화되어 있습니다. 예를 들어, 메시지 소스를 통한 국제화(i18n) 지원이나 애플리케이션 이벤트 발행, 애노테이션 기반 빈 자동등록(@ComponentScan) 등의 편의 기능은 직접 코딩으로 처리해야 합니다. BeanFactory 구현체의 예로는 옛 버전 Spring에서 사용된 XmlBeanFactory 등이 있습니다. <br>
ApplicationContext: BeanFactory를 상속(extends)한 인터페이스로, 엔터프라이즈 개발에 유용한 추가 기능들을 제공합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=,for%20use%20in%20web%20applications" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=,for%20use%20in%20web%20applications" target="_self">5.&nbsp;The IoC container</a>). ApplicationContext는 컨테이너가 시작될 때 모든 싱글톤 빈을 미리 생성(eager loading)하여 준비해두며 (<a data-tooltip-position="top" aria-label="https://springframework.guru/spring-beanfactory-vs-applicationcontext/#:~:text=,whereas" rel="noopener nofollow" class="external-link is-unresolved" href="https://springframework.guru/spring-beanfactory-vs-applicationcontext/#:~:text=,whereas" target="_self">Spring BeanFactory vs ApplicationContext - Spring Framework Guru</a>), 다음과 같은 부가기능을 지원합니다: 국제화 (MessageSource): 다국어 메시지 관리용 인터페이스 제공 (예: getMessage).
이벤트 발행(ApplicationEvent): 애플리케이션 레벨 이벤트를 발행하고 리스너를 등록할 수 있음.
AOP 통합: Spring AOP와의 용이한 통합을 지원 (예: 자동 프록시 생성).
환경(Profile) 지원: 서로 다른 설정 세트를 환경이나 프로파일에 따라 선택적으로 적용.
<br>기타: 웹 애플리케이션 지원을 위한 WebApplicationContext, 빈 후처리기(BeanPostProcessor)와 빈 팩토리 후처리기(BeanFactoryPostProcessor)의 자동 등록 등 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Automatic%20BeanPostProcessor%20Registration" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Automatic%20BeanPostProcessor%20Registration" target="_self">Spring - IoC Container - GeeksforGeeks</a>) (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Loading%20Mechanism" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Loading%20Mechanism" target="_self">Spring - IoC Container - GeeksforGeeks</a>). <br>요컨대, ApplicationContext는 BeanFactory의 모든 기능을 포함하면서 추가적인 편의성과 기능을 제공하는 superset 관계입니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20short%2C%20the%20,15%2C%20%E2%80%9CThe%20BeanFactory%E2%80%9D" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=In%20short%2C%20the%20,15%2C%20%E2%80%9CThe%20BeanFactory%E2%80%9D" target="_self">5.&nbsp;The IoC container</a>). 실무에서는 특별한 경우가 아니라면 ApplicationContext를 주로 사용하며, Spring 자체도 거의 모든 예제와 기능을 ApplicationContext를 기준으로 제공합니다. 과거에 메모리 제약이 큰 환경에서는 경량 컨테이너인 BeanFactory를 쓰는 경우도 있었으나, 현재는 Spring Boot 등에서 기본적으로 ApplicationContext를 사용하므로 두 인터페이스를 크게 구분할 일은 드뭅니다.두 컨테이너의 동작 차이를 간단히 코드로 확인해보겠습니다. 예를 들어, 빈 설정 파일 beans.xml에 다음과 같이 빈 한 개를 정의하고, 이 빈의 클래스 생성자에서 메시지를 출력하도록 합니다:beans.xml: (예시 XML 설정)&lt;beans&gt; &lt;bean id="exampleBean" class="com.example.ExampleBean" /&gt;
&lt;/beans&gt;
ExampleBean.java:public class ExampleBean { public ExampleBean() { System.out.println("ExampleBean 생성자 호출!"); }
}
이제 BeanFactory와 ApplicationContext를 각각 사용해 이 설정을 로드해보면:// BeanFactory 사용 (XML 설정 기반)
Resource resource = new ClassPathResource("beans.xml");
BeanFactory factory = new XmlBeanFactory(resource);
// 아직 ExampleBean 생성자 호출 메시지가 출력되지 않음 (지연 로딩) // getBean을 호출하는 시점에 빈 생성
ExampleBean bean1 = factory.getBean("exampleBean", ExampleBean.class);
// -&gt; 이 때 "ExampleBean 생성자 호출!" 출력 // ApplicationContext 사용 (XML 설정 기반)
ApplicationContext ctx = new ClassPathXmlApplicationContext("beans.xml");
// 컨텍스트 초기화 시 이미 모든 빈 생성 완료 -&gt; "ExampleBean 생성자 호출!" 출력 ExampleBean bean2 = ctx.getBean("exampleBean", ExampleBean.class);
// 이미 생성된 빈을 반환하므로 추가 생성자 호출 없음
<br>위 코드에서 BeanFactory (XmlBeanFactory)를 사용한 경우에는 getBean을 호출하기 전까지는 빈의 생성자가 실행되지 않습니다. 반면 ApplicationContext (ClassPathXmlApplicationContext)를 사용하면 컨테이너를 만들고 초기화하는 순간 exampleBean 빈이 즉시 생성되어 생성자 메시지가 출력됩니다. 이처럼 BeanFactory는 지연 초기화 전략을 기본으로 하여 필요한 순간까지 빈 생성을 미루지만, ApplicationContext는 적극 초기화를 통해 미리 빈을 만들어 둡니다 (<a data-tooltip-position="top" aria-label="https://springframework.guru/spring-beanfactory-vs-applicationcontext/#:~:text=,whereas" rel="noopener nofollow" class="external-link is-unresolved" href="https://springframework.guru/spring-beanfactory-vs-applicationcontext/#:~:text=,whereas" target="_self">Spring BeanFactory vs ApplicationContext - Spring Framework Guru</a>). 또한 ApplicationContext는 별도 코드 없이도 애플리케이션 이벤트나 메세지 소스 등을 활용할 수 있기 때문에, 일반적인 애플리케이션에서는 ApplicationContext를 이용하는 것이 편리합니다.<br>Spring IoC 컨테이너는 다양한 형태의 설정 메타데이터를 지원하여 빈과 의존관계를 정의합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=assembling%20the%20aforementioned%20beans,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=assembling%20the%20aforementioned%20beans,rich%20interdependencies%20between%20such%20objects" target="_self">5.&nbsp;The IoC container</a>). 주요 설정 방식으로는 XML 기반 설정, Java Config 설정, 애노테이션 기반 설정이 있으며, 각각 역사적으로 또는 용도에 따라 쓰입니다. 실무에서는 점차 XML 설정이 줄고 Java 클래스와 애노테이션을 활용한 설정이 일반화되었으나, 이해를 돕기 위해 세 가지 방식을 모두 소개합니다.초창기부터 Spring에서는 XML 파일로 빈 구성을 정의해왔습니다. XML 설정에서는 &lt;bean&gt; 엘리먼트를 사용하여 빈의 클래스, id, 의존성 등을 선언합니다. XML 설정의 장점은 코드와 설정의 분리가 뚜렷하다는 점이었으나, 타입 안전성이 부족하고 장황해질 수 있다는 단점이 있습니다.예를 들어, 두 개의 클래스 UserService와 UserController가 있고 UserController가 UserService를 필요로 한다고 가정해보겠습니다. XML 설정은 다음과 같이 작성할 수 있습니다:applicationContext.xml:&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;!-- UserService 빈 정의 --&gt; &lt;bean id="userService" class="com.example.service.UserService" /&gt; &lt;!-- UserController 빈 정의 및 userService 주입 --&gt; &lt;bean id="userController" class="com.example.web.UserController"&gt; &lt;property name="userService" ref="userService" /&gt; &lt;/bean&gt; &lt;/beans&gt;
위 XML에서 &lt;bean&gt; 요소는 각각 빈 하나를 나타내며, id로 빈 이름을, class로 인스턴스화할 클래스의 FQCN을 지정합니다. userController 빈 안에는 &lt;property&gt;를 통해 userService 빈을 주입하고 있습니다 (UserController 클래스에 setUserService(UserService) setter가 있다고 가정). 이처럼 XML 설정을 사용하면 코드 수정 없이 XML만 고쳐서 DI 구성을 변경할 수 있지만, 설정이 분산되고 컴파일타임 검증이 어렵다는 점에서 최근엔 잘 쓰지 않습니다.XML 설정을 이용하는 경우, 애플리케이션에서 IoC 컨테이너를 초기화할 때 해당 XML 파일을 읽도록 해야 합니다. 다음은 ClassPathXmlApplicationContext를 이용해 위의 XML 설정을 로딩하고 빈을 사용하는 예입니다:ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml"); // XML에 정의된 빈들을 컨테이너로부터 가져오기
UserController controller = context.getBean("userController", UserController.class);
controller.doSomething();
<br>ClassPathXmlApplicationContext는 클래스패스에서 XML 파일을 찾아 ApplicationContext를 구성합니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=Several%20implementations%20of%20the%20,for%20these%20additional%20metadata%20formats" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=Several%20implementations%20of%20the%20,for%20these%20additional%20metadata%20formats" target="_self">5.&nbsp;The IoC container</a>). 이 방식은 스프링 부트 이전의 전통적인 Spring 프레임워크 애플리케이션에서 주로 사용되었습니다.<br>Java Config는 자바 클래스로 스프링 설정을 정의하는 방식입니다. Spring 3.x 이후부터 공식적으로 지원되어 XML을 대체하는 주요 설정 수단이 되었으며, 타입 안정성과 IDE 지원의 이점을 가집니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=%2A%20Java,annotations" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=%2A%20Java,annotations" target="_self">5.&nbsp;The IoC container</a>). Java Config를 사용하려면 보통 설정을 담은 클래스에 @Configuration 애노테이션을 붙이고, 각 빈 생성을 담당하는 메소드에 @Bean 애노테이션을 붙입니다.예를 들어 위와 동일한 UserService와 UserController 관계를 Java Config로 표현하면 다음과 같습니다:import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration; @Configuration
public class AppConfig { @Bean // IoC 컨테이너에 등록될 빈 정의 public UserService userService() { return new UserService(); } @Bean public UserController userController(UserService userService) { // 주입 대상 UserService를 메서드 파라미터로 받아 사용 return new UserController(userService); }
}
위 AppConfig 클래스는 설정 클래스이며, @Bean이 붙은 메서드 두 개가 각각 userService 빈과 userController 빈을 정의합니다. 두 번째 메서드 userController()는 파라미터로 UserService userService를 받는데, Spring이 동일 AppConfig 내에서 userService()로 정의된 빈을 파라미터로 주입해줍니다. 이렇게 함으로써 UserController 빈을 생성하면서 필요한 UserService 빈을 자연스럽게 사용할 수 있습니다 (Spring은 @Configuration 클래스의 경우 CGLIB 프록시를 통해 동일 빈은 싱글톤으로 한 번만 생성되도록 보장합니다).Java Config를 사용한 컨테이너 초기화는 AnnotationConfigApplicationContext 등을 통해 설정 클래스 자체를 넘겨주면 됩니다:ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
UserController controller = context.getBean(UserController.class);
controller.doSomething();
자바 기반 설정은 XML을 대체하면서 현재 Spring 설정의 주류가 되었습니다. 장점으로는 컴파일 시 오류를 잡아낼 수 있고 리팩토링이 용이하다는 점, 그리고 일반적인 Java 코드를 사용하므로 익숙하다는 점이 있습니다. 또한 Lombok 등과도 결합하면 설정 코드를 더욱 간결하게 만들 수 있습니다. 다만 설정 클래스 자체가 Spring에 종속된 어노테이션(@Configuration, @Bean)을 가지므로 순수 POJO는 아니며, 아주 복잡한 설정의 경우는 코드가 다소 장황해질 수 있습니다.애노테이션 기반 설정은 클래스에 특별한 애노테이션을 부여하여 빈으로 등록하는 방식입니다. 보통 컴포넌트 스캔(Component Scanning)을 통해 특정 패키지 이하의 클래스들에 대해 @Component 또는 그 특화 애노테이션(@Controller, @Service, @Repository)이 붙은 것을 자동으로 찾아 컨테이너에 등록합니다 Spring Boot Spring Boot. 의존성 주입은 @Autowired나 @Inject 등을 통해 필드나 생성자에서 수행합니다.컴포넌트 스캔을 사용하면 별도의 설정 클래스나 XML에 일일이 빈 정의를 나열하지 않아도 되어 편리합니다. Spring Boot를 비롯한 현대적인 Spring 애플리케이션은 기본적으로 이 방식을 사용합니다. 예를 들어, 컴포넌트 스캔 기반으로 UserService와 UserController를 빈으로 등록하고 싶다면 클래스에 애노테이션을 붙입니다:@Service
public class UserService { // 비즈니스 로직
} @Controller
public class UserController { // @Autowired를 통한 필드 주입 (권장되진 않지만 예시) @Autowired private UserService userService; // 요청을 처리하는 메서드 등이 있다고 가정
}
위와 같이 애노테이션을 달아두면, Spring이 해당 클래스를 빈으로 인식하여 IoC 컨테이너에 등록합니다. 컴포넌트 스캔을 활성화하는 방법은 XML이나 Java Config에서 설정할 수 있는데, XML의 경우 &lt;context:component-scan base-package="com.example"/&gt;과 같이 설정하고, Java Config의 경우 @ComponentScan("com.example") 애노테이션을 설정 클래스에 붙입니다. Spring Boot에서는 @SpringBootApplication 애노테이션이 내부적으로 @ComponentScan을 포함하고 있어서, 기본 패키지(애플리케이션 클래스가 속한 패키지) 이하를 자동 스캔합니다 Spring Boot.컴포넌트 스캔으로 빈들이 등록되면, 의존성은 @Autowired를 통해 자동 주입됩니다. @Autowired는 타입을 기준으로 매칭되는 빈을 찾아 주입하며, 여러 구현체가 있을 경우 @Qualifier나 @Primary 등으로 주입 대상을 지정할 수 있습니다. 예를 들어 UserController에서 UserService 필드에 @Autowired를 붙이면, 컨테이너는 UserService 타입의 빈을 찾아 userService 필드에 할당해 줍니다.<br>요약하면, Spring IoC 컨테이너는 XML, Java, 애노테이션 기반 설정 메타데이터를 모두 지원하며 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=%2A%20Annotation,based%20configuration%20metadata" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=%2A%20Annotation,based%20configuration%20metadata" target="_self">5.&nbsp;The IoC container</a>), 이들을 혼용하는 것도 가능합니다. 예를 들어 XML로 기본 설정을 하면서 일부 모듈만 Java Config를 import해서 쓰거나, Java Config 안에서 @ComponentScan을 사용하여 애노테이션 빈 등록을 병행할 수 있습니다. Spring Boot 등장 이후로는 XML 설정은 거의 사용되지 않고, @SpringBootApplication(내부적으로 @EnableAutoConfiguration, @ComponentScan 포함)과 각종 @Configuration으로 이루어진 자바 기반 설정이 표준이 되었습니다. 공식 Spring 문서에서도 XML 예시보다는 Java/애노테이션 예시를 주로 볼 수 있습니다.<br>Spring Boot는 IoC 컨테이너를 보다 편리하게 활용할 수 있도록 부트스트래핑과 자동구성(auto-configuration)을 제공하는 프레임워크입니다. Spring Boot에서 IoC 컨테이너의 사용은 개발자에게 거의 투명하게 이루어지는데, Boot를 실행하면 내부적으로 SpringApplication.run()이 호출되어 ApplicationContext를 생성 및 초기화하고 애플리케이션에 필요한 빈들을 모두 등록합니다 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/how-spring-boot-application-works-internally/#:~:text=Spring%20Boot%20Application%20starts%20using,known%20as%20the%20IOC%20Container" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/how-spring-boot-application-works-internally/#:~:text=Spring%20Boot%20Application%20starts%20using,known%20as%20the%20IOC%20Container" target="_self">How Spring Boot Application Works Internally? - GeeksforGeeks</a>). Boot는 앞서 설명한 컴포넌트 스캔과 Java Config 방식을 적극 활용하여, 별도의 XML 없이도 대부분의 빈을 등록합니다.Spring Boot의 진입점은 보통 @SpringBootApplication이 붙은 메인 클래스입니다. 이 애노테이션은 Spring의 핵심 설정을 자동으로 활성화하는데, 구체적으로 @EnableAutoConfiguration, @ComponentScan, @SpringBootConfiguration 세 애노테이션을 조합한 메타 애노테이션입니다 Spring Boot. 그 효과는 다음과 같습니다:
컴포넌트 스캔 활성화: 메인 클래스 패키지를 기준으로 하위 패키지의 모든 @Component(@Controller, @Service 등 포함)를 스캔하여 빈으로 등록합니다 Spring Boot.
자동 구성 활성화: 클래스패스의 의존 라이브러리들을 감지하여 (예: Spring Web, Thymeleaf, JPA 등) 해당 라이브러리에 맞는 AutoConfiguration 클래스를 실행합니다. AutoConfiguration 클래스들은 관련 빈들을 조건에 따라 자동으로 설정합니다. 예를 들어 H2 데이터베이스 라이브러리가 있다면 메모리 DB DataSource 빈을 설정하고, Thymeleaf가 있다면 ThymeleafViewResolver 빈을 등록하는 식입니다.
추가 구성 클래스 등록: @SpringBootConfiguration은 결국 @Configuration과 동일하게 동작하여, 개발자가 정의한 추가 빈 (@Bean 메서드 등)을 적용할 수 있게 합니다. 이로써 필요 시 Boot의 자동 설정 외에 커스텀 설정을 보강할 수 있습니다.
Spring Boot에서 IoC 컨테이너를 사용하는 코드는 일반적으로 눈에 띄지 않습니다. 개발자는 필요한 곳에 애노테이션을 붙이는 것으로 IoC 컨테이너에 참여하고, Boot가 애플리케이션 시작 시점에 모든 것을 조율해 줍니다. 다음은 간단한 Spring Boot 애플리케이션의 예시 코드입니다:@SpringBootApplication // (내부적으로 @EnableAutoConfiguration, @ComponentScan 등 포함)
public class DemoApplication { public static void main(String[] args) { // IoC 컨테이너(ApplicationContext) 초기화 및 실행 ConfigurableApplicationContext ctx = SpringApplication.run(DemoApplication.class, args); // 컨테이너에서 빈을 가져와 사용 (일반적으로는 필요 없지만 예시) MyService myService = ctx.getBean(MyService.class); System.out.println(myService.getMessage()); }
} @Service
class MyService { public String getMessage() { return "Hello, IoC Container!"; }
}
위 코드에서 SpringApplication.run(...)이 반환하는 것은 ApplicationContext 구현체로서, Boot에 의해 초기화된 IoC 컨테이너입니다. @SpringBootApplication 아래 패키지의 MyService 클래스에 @Service를 붙였기 때문에, 컴포넌트 스캔에 의해 이 클래스의 인스턴스가 빈으로 등록되었습니다. 따라서 ctx.getBean(MyService.class)를 통해 해당 빈을 얻을 수 있고, getMessage() 메서드를 호출하면 정상적으로 동작합니다. 실제로 Spring Boot에서는 이렇게 getBean으로 빈을 가져와 쓸 일은 드물고, 보통 컨트롤러나 다른 빈에서 @Autowired로 필요한 빈을 주입받아 사용합니다. Boot는 내장 톰캣 등의 서버를 구동하면서 웹 컨텍스트(ApplicationContext의 하위 구현)를 자동으로 생성해주고, 개발자는 Boot가 마련한 IoC 컨테이너 환경에서 필요한 빈만 작성하면 됩니다. 결과적으로 Spring Boot 덕분에 IoC 컨테이너의 존재는 더욱 자연스럽게 어플리케이션에 녹아들게 되었으며, 복잡한 설정 없이도 DI의 이점을 누릴 수 있게 되었습니다.IoC 컨테이너를 사용하는 주요 장점과 단점을 정리하면 다음과 같습니다.
<br>느슨한 결합도 (Low Coupling): 객체를 인터페이스 또는 추상 타입에 의존하도록 유도하고, 구현체 선택은 설정으로 옮기므로 컴포넌트 사이의 결합도가 낮아집니다. 그 결과 시스템이 더 모듈화되고 변경에 유연해집니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=Using%20a%20IOC%20container%20will,using%2Fnot%20using%20a%20IOC%20container" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=Using%20a%20IOC%20container%20will,using%2Fnot%20using%20a%20IOC%20container" target="_self">inversion of control - What are the pros and cons for using a IOC container? - Stack Overflow</a>). 예를 들어, 서비스 계층에서 저장소 구현을 교체할 때 코드 수정 없이 설정이나 프로파일 변경만으로 가능해집니다.
재사용성과 유지보수성: 설정을 분리하고 의존관계를 중앙 관리함으로써, 공통 컴포넌트의 재사용이 쉬워지고 어플리케이션 전반의 구성 일관성이 높아집니다. 빈 설정을 통해 다양한 구성을 시도해볼 수 있어 확장성에도 유리합니다.
<br>단위 테스트 용이: IoC 컨테이너를 사용하면 모의 객체(mock) 주입이나 대체 구현 주입이 수월해져 테스트가 쉬워집니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=Using%20a%20IOC%20container%20will,using%2Fnot%20using%20a%20IOC%20container" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=Using%20a%20IOC%20container%20will,using%2Fnot%20using%20a%20IOC%20container" target="_self">inversion of control - What are the pros and cons for using a IOC container? - Stack Overflow</a>). 예를 들어, 개발 코드는 인터페이스에 의존하고 실제 빈 등록만 테스트 환경에서 교체하면 되므로, 테스트 시 별도의 stub 작성이나 교체 논리 없이 DI로 주입할 수 있습니다.
라이프사이클 관리 및 리소스 해제: 컨테이너가 빈의 생명주기를 관리하므로, 리소스 할당/해제나 공통 초기화 로직 등을 한 곳에서 처리할 수 있습니다. @PostConstruct와 @PreDestroy를 통해 중요한 초기화/종료 코드를 체계적으로 실행할 수 있어 안정성이 향상됩니다.
부가 기능 통합: Spring IoC 컨테이너는 AOP와 연계하여 트랜잭션 관리, 보안, 로깅 같은 횡단 관심사(cross-cutting concern)를 투명하게 적용할 수 있습니다. 또한 이벤트, 국제화 등의 인프라 서비스를 쉽게 활용하도록 해줍니다.
대규모 생태계 지원: Spring의 IoC 컨테이너를 중심으로 방대한 생태계(Spring Boot, Spring Data, Spring Security 등)가 구축되어 있어, 다양한 기술 스택을 일관된 방식으로 통합하여 사용할 수 있습니다. <br>초기 성능 부담: IoC 컨테이너는 어플리케이션 시작 시 리플렉션(reflection) 등을 사용하여 빈을 생성/조립하므로 초기 구동 비용이 있습니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=12" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=12" target="_self">inversion of control - What are the pros and cons for using a IOC container? - Stack Overflow</a>). 특히 빈 개수가 매우 많거나 클래스패스 스캔 범위가 넓으면 부하로 작용할 수 있습니다. 하지만 일반적으로 이는 애플리케이션 시작 시 한 번 발생하며, 런타임 성능에 큰 영향은 없습니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=If%20you%27re%20using%20an%20IOC,create%20new%20instances%20each%20time" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=If%20you%27re%20using%20an%20IOC,create%20new%20instances%20each%20time" target="_self">inversion of control - What are the pros and cons for using a IOC container? - Stack Overflow</a>).
<br>학습 곡선: IoC/DI 개념에 익숙하지 않은 개발자에게는 처음에 코드 흐름이 보이지 않아 혼란을 줄 수 있습니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=Well%20I%20suppose%20a%20con,against%20something%2C%20not%20at%20all" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=Well%20I%20suppose%20a%20con,against%20something%2C%20not%20at%20all" target="_self">inversion of control - What are the pros and cons for using a IOC container? - Stack Overflow</a>). 설정 파일이나 애노테이션을 따라야 하므로, 작은 규모의 프로젝트에서는 오히려 이해를 복잡하게 만든다는 지적도 있습니다. IoC 컨테이너를 언제, 왜 써야 하는지 감이 안 잡히는 경우도 있는데, 이는 규모가 작을 때는 문제점이 드러나지 않기 때문입니다.
<br>디버깅의 어려움: 런타임에 빈이 주입되고 관계가 맺어지기 때문에, 코드만 봐서는 어떤 구현체가 주입되는지 바로 알기 어렵습니다. 예를 들어, service.save()를 호출하는 코드에서 실제로 어떤 클래스의 save가 실행되는지 추적하려면 설정이나 구성 클래스를 찾아봐야 합니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=1" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/514948/what-are-the-pros-and-cons-for-using-a-ioc-container#:~:text=1" target="_self">inversion of control - What are the pros and cons for using a IOC container? - Stack Overflow</a>). modern IDE에서는 DI 그래프를 보여주기도 하지만, 여전히 실행 흐름 추적이 직관적이지 않을 수 있습니다.
오류 발견 시점 지연: 컴파일 타임에 DI 구성의 이상을 잡아내기 어렵고, 애플리케이션 구동 시에야 잘못된 설정으로 인한 예외(예: NoSuchBeanDefinitionException 등)를 발견할 수 있습니다. 스프링은 부트 시 철저한 검증을 통해 대부분 오류를 초기에 잡아내지만, 구성 오류는 런타임 이전에는 놓칠 수 있다는 점을 유념해야 합니다.
약간의 오버헤드 및 메모리 사용: 컨테이너는 빈 정의 정보를 보관하고 관리하기 때문에 약간의 메모리 오버헤드가 있으며, 싱글톤 빈을 미리 로드하므로 사용하지 않는 빈도 메모리에 상주할 수 있습니다. 또한 컨테이너 기능(프록시 생성 등)을 위해 바이트코드 조작이나 리플렉션을 사용하므로 극한의 성능이 요구되는 부분에서는 부담이 될 수 있습니다. 하지만 일반적인 비즈니스 애플리케이션 수준에서는 이 오버헤드는 대개 문제가 되지 않습니다.
정리하면, IoC 컨테이너는 개발 생산성과 유지보수성 측면에서 얻는 이익이 매우 크기 때문에, 초기 복잡성이나 약간의 성능 비용을 감수할 가치가 있습니다. Spring이 엔터프라이즈 자바 개발에서 표준에 가깝게 자리잡은 이유도 IoC/DI가 가져다주는 구조적 이점 덕분이라고 할 수 있습니다.스프링의 IoC 컨테이너는 오늘날 거의 모든 Spring 기반 프로젝트에서 핵심적으로 활용됩니다. 몇 가지 대표적인 실무 활용 사례를 들어보겠습니다: 레이어드 아키텍처의 구성: 전형적인 웹 애플리케이션은 표현 계층(Controller), 서비스 계층(Service), 영속 계층(Repository) 등으로 나누어지는데, 이 각 계층의 구성 요소들을 전부 IoC 컨테이너가 관리합니다. 예를 들어 Spring MVC에서는 서블릿 컨테이너(Tomcat)가 구동되면 DispatcherServlet이 생성되고, 이 서블릿이 자체적으로 WebApplicationContext (IoC 컨테이너의 일종)를 초기화하여 모든 @Controller 빈을 등록합니다. 동시에 서비스나 리포지토리 빈은 Root ApplicationContext에 등록되어 @Autowired로 주입되고, 결과적으로 각 계층 간 결합 없이도 컨트롤러 -&gt; 서비스 -&gt; 리포지토리 호출이 가능해집니다. 이러한 구조 덕분에 비즈니스 로직이나 데이터 접근 로직을 독립적으로 개발하고 테스트할 수 있으며, 계층 간 인터페이스만 합의하면 구현을 몰라도 개발이 진행될 수 있습니다. 환경별 빈 구성 (Profiles): 실무에서는 종종 개발 환경과 운영 환경에서 사용하는 구성요소가 달라집니다. IoC 컨테이너는 프로파일(@Profile) 기능을 통해 환경별로 서로 다른 빈을 등록하고 선택적으로 활성화할 수 있게 해줍니다. 예를 들어, 데이터소스 빈을 개발용 내장 DB(H2)와 운영용 상용 DB로 각각 정의해 두고, Spring Boot 실행 시 spring.profiles.active 설정만 바꾸면 해당 프로파일의 빈이 적용됩니다. 이렇게 하면 한 코드베이스에서 손쉽게 여러 환경을 지원할 수 있고, 빌드 아티팩트도 공통으로 유지할 수 있습니다. 다형성 및 구현 교체: 인터페이스 기반 개발을 할 때 IoC 컨테이너는 특정 인터페이스의 구현체 선택을 중앙에서 제어합니다. 예를 들어 결제 서비스를 추상화한 PaymentService 인터페이스가 있고 구현체로 CardPaymentService, CashPaymentService가 있다면, 빈 설정에서 어느 구현을 쓸지 지정하거나 @Primary 등을 통해 기본 구현을 정해둘 수 있습니다. 나아가 조건에 따라 둘 다 빈으로 등록해 두고, 코드에서 @Qualifier로 선택적으로 주입받을 수도 있습니다. 실무에서는 이러한 방식을 응용하여 기능 플러그인화를 하기도 합니다. (예: 특정 조건에 새로운 구현체 빈을 활성화해 기능을 확장). <br>
모듈화와 컨텍스트 계층화: 대규모 프로젝트에서는 하나의 IoC 컨테이너에 모든 빈을 넣지 않고, 컨텍스트를 계층화(parent-child)하거나 여러 모듈로 분리하기도 합니다. 예를 들어, Spring MVC의 웹 계층 컨텍스트는 비즈니스 로직이 있는 루트 컨텍스트를 부모로 참조하여 자신이 가진 컨트롤러 빈에서 서비스 빈을 사용할 수 있게 합니다. 마찬가지로 Microservices 아키텍처에서는 각각의 서비스 애플리케이션이 독립된 IoC 컨테이너를 가지며, 필요에 따라 컨텍스트를 분리하여 메모리 사용이나 기동 시간을 조절합니다. 이러한 유연성은 IoC 컨테이너 덕분에 가능하며, 여러 컨테이너 간에도 빈을 공유하지 않고 격리함으로써 안전한 멀티텐시나 플러그인 시스템을 구현할 수 있습니다 (<a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/29862681/java-spring-multiple-applicationcontext#:~:text=body,to%20one%20central%20container" rel="noopener nofollow" class="external-link is-unresolved" href="https://stackoverflow.com/questions/29862681/java-spring-multiple-applicationcontext#:~:text=body,to%20one%20central%20container" target="_self">Java Spring multiple ApplicationContext - Stack Overflow</a>). 테스트: IoC 컨테이너는 통합 테스트(@SpringBootTest 등)에서 실제로 구동되어 테스트 환경에 필요한 빈들을 제공하기도 하고, @TestConfiguration이나 MockBean 등을 활용하여 특정 빈을 교체한 상태로 애플리케이션 컨텍스트를 띄우는 등 유용하게 쓰입니다. 예를 들어 DAO 빈 대신 가짜 구현으로 대체된 컨텍스트를 올려 서비스 레이어만 테스트하거나, 외부 시스템 연동 빈을 모킹하여 빠른 테스트를 진행할 수 있습니다. Spring의 테스트 지원은 IoC 컨테이너와 긴밀히 결합되어 있어 테스트 시에도 DI의 이점을 그대로 누릴 수 있습니다. <br>결론적으로, Spring IoC 컨테이너는 애플리케이션의 접착제 역할을 하며, 객체들이 사전에 정의된 방식으로 생성되고 연결되어 동작할 수 있도록 해주는 인프라입니다. 작은 규모부터 대규모 시스템까지, IoC 컨테이너의 존재는 Spring을 사용하는 한 당연하고 자연스러운 전제이며, 이를 적극 활용하는 것이 Spring 프레임워크의 철학이자 강점입니다 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=These%20bean%20definitions%20correspond%20to,inject%20domain%20objects%20with" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=These%20bean%20definitions%20correspond%20to,inject%20domain%20objects%20with" target="_self">5.&nbsp;The IoC container</a>). 실제 현업에서는 IoC 컨테이너 덕분에 개발자가 비즈니스 로직에 집중하고, 공통 패턴이나 반복 코드는 프레임워크에 맡기는 관심사의 분리(Separation of Concerns)가 구현되고 있습니다.마지막으로, 실무에서 흔히 볼 수 있는 IoC 컨테이너 활용의 코드 예시를 하나 들어봅니다. 아래는 프로파일을 활용한 빈 구성과 Qualifier를 활용한 다중 구현체 주입의 간단한 예입니다:public interface NotificationService { void send(String message);
} @Service
@Profile("email") // 'email' 프로파일에서 활성화
@Primary // 기본 구현으로 지정
public class EmailNotificationService implements NotificationService { public void send(String message) { System.out.println("[이메일 발송] " + message); }
} @Service
@Profile("sms") // 'sms' 프로파일에서 활성화
public class SmsNotificationService implements NotificationService { public void send(String message) { System.out.println("[문자메시지 발송] " + message); }
} @Service
public class AlertService { // 기본적으로 Primary인 EmailNotificationService가 주입됨 private final NotificationService notificationService; public AlertService(NotificationService notificationService) { this.notificationService = notificationService; } // 특정 구현체 강제 주입을 원하면 @Qualifier 사용 @Autowired @Qualifier("smsNotificationService") private NotificationService secondaryService; public void sendAlert(String msg) { notificationService.send(msg); }
}
위 코드에서 NotificationService의 두 가지 구현체가 서로 다른 프로파일로 등록되어 있습니다. 만약 현재 활성 프로파일(active profile)이 "email"이라면 EmailNotificationService 빈만 생성되고 SmsNotificationService는 생성되지 않습니다. 그리고 AlertService는 생성자 주입으로 NotificationService를 받는데, Primary로 지정된 이메일 서비스 구현이 주입되어 사용됩니다. 반면, secondaryService 필드는 @Qualifier("smsNotificationService")가 붙어 있으므로, 해당 이름의 빈(SMS 구현)을 별도로 주입받습니다. 이러한 구성을 통해 하나의 인터페이스에 대해 상황 별로 다른 구현체를 사용하거나 동시에 여러 구현체에 접근하는 것이 가능합니다. IoC 컨테이너는 설정(프로파일, Qualifier 등)에 따라 적절한 빈을 주입해주므로, AlertService 코드는 구체 구현 클래스에 의존하지 않고도 다양한 시나리오에 대응할 수 있습니다.다음은 Spring IoC 컨테이너가 빈을 생성하고 관리하는 과정을 간략히 나타낸 순서도 다이어그램입니다. 이 다이어그램은 컨테이너 초기화부터 빈 사용, 컨테이너 종료까지의 흐름을 시각화한 것입니다:위 다이어그램에서 보듯이, 애플리케이션이 시작되면 IoC 컨테이너(ApplicationContext)가 생성되고, 곧바로 설정 정보를 읽어 어떤 빈들을 만들어야 할지 파악합니다. 그 다음 단계에서는 빈들이 의존 관계에 따라 인스턴스화되고 주입되며, 초기화 메서드(@PostConstruct) 등이 호출되어 사용 준비를 마칩니다. 애플리케이션이 동작하는 동안 컨테이너는 생성된 빈들을 제공하고 관리하며, 종료 시점이 오면 각 빈의 소멸 메서드(@PreDestroy)를 호출한 뒤 컨테이너를 종료합니다. 이러한 일련의 과정은 Spring 프레임워크 내부에서 자동으로 처리되므로, 개발자는 필요한 빈과 의존성을 선언하기만 하면 IoC 컨테이너가 적절한 시점에 필요한 작업을 모두 수행해줍니다.<br>참고 자료: Spring 공식 레퍼런스 (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=This%20chapter%20covers%20the%20Spring,its%20dependencies%20by%20using%20direct" target="_self">5.&nbsp;The IoC container</a>) (<a data-tooltip-position="top" aria-label="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#:~:text=The%20interface%20,rich%20interdependencies%20between%20such%20objects" target="_self">5.&nbsp;The IoC container</a>), GeeksforGeeks 튜토리얼 (<a data-tooltip-position="top" aria-label="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Spring%20IoC%20is%20a%20design,IoC%20container%20is%20responsible%20for" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.geeksforgeeks.org/spring-ioc-container/#:~:text=Spring%20IoC%20is%20a%20design,IoC%20container%20is%20responsible%20for" target="_self">Spring - IoC Container - GeeksforGeeks</a>) 등. 또한 Spring Framework Guru, Baeldung 등의 블로그에서 IoC 컨테이너와 DI 개념, Bean 생명주기 등의 상세한 설명을 확인할 수 있습니다. 실습을 위해 Spring Boot 스타터를 사용하여 간단한 예제를 만들어 보면 IoC 컨테이너의 동작을 쉽게 체험할 수 있을 것입니다.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/ioc-container-deepresearch.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/IoC Container DeepResearch.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Mar 2025 02:19:53 GMT</pubDate></item><item><title><![CDATA[Servlet, REST API 비교]]></title><description><![CDATA[Servlet과 REST API는 Java 기반의 웹 개발에서 많이 사용되는 기술입니다. Servlet은 전통적인 Java 웹 애플리케이션 개발 방식이며, REST API는 클라이언트-서버 구조에서 데이터를 주고받기 위한 현대적인 아키텍처입니다. 이 문서에서는 두 기술의 차이점과 실무 활용 예를 비교하여 설명합니다.@WebServlet("/hello")
public class HelloServlet extends HttpServlet { protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType("text/html"); PrintWriter out = response.getWriter(); out.println("&lt;h1&gt;Hello, Servlet!&lt;/h1&gt;"); }
} Servlet에서는 HTML을 직접 생성하여 응답
Tomcat 같은 WAS에서 실행 필요
@RestController
@RequestMapping("/api")
public class HelloController { @GetMapping("/hello") public String hello() { return "Hello, API!"; }
} JSON 또는 일반 문자열 응답
프론트엔드(React, Vue) 또는 모바일 앱과 쉽게 연동 가능
✅ JSP와 함께 사용하여 동적 웹페이지 생성 ✅ 세션 관리 및 로그인 기능 제공 (HttpSession) ✅ 서블릿 필터(Filter)와 리스너(Listener)를 활용한 보안 및 로깅 ✅ 웹 애플리케이션의 Form 기반 데이터 처리실무 예제:
전통적인 기업 내부 웹 애플리케이션 (예: 사내 인트라넷, 내부 관리 시스템)
레거시 시스템에서 HTML을 직접 렌더링하는 웹페이지
✅ 프론트엔드(React, Vue, Angular)와 통신하는 백엔드 API 제공 ✅ 모바일 앱과 연동하여 JSON 데이터 반환 ✅ OAuth, JWT를 활용한 인증 및 보안 처리 ✅ 마이크로서비스 아키텍처에서 서비스 간 데이터 교환실무 예제:
쇼핑몰, 금융 서비스의 API 서버
IoT 디바이스와 통신하는 RESTful 서비스
클라우드 기반 서비스 (예: AWS Lambda에서 REST API 제공) Servlet은 HTML을 직접 렌더링하고 세션을 관리할 때 유용합니다.
REST API는 프론트엔드와 분리된 구조에서 데이터를 주고받을 때 적합합니다.
현대적인 웹 개발에서는 REST API를 활용하여 프론트엔드와 백엔드를 분리하는 방식이 더 선호됩니다.
📌 최신 트렌드에서는 REST API(Spring Boot 기반)가 더 널리 사용되며, Servlet은 레거시 시스템이나 특정 목적에서 여전히 활용되고 있음.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/servlet,-rest-api-비교.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/Servlet, REST API 비교.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Mar 2025 02:24:39 GMT</pubDate></item><item><title><![CDATA[Apache Tomcat, Nginx 비교 및 실무 활용]]></title><description><![CDATA[---
title: "Apache Tomcat과 Nginx: 심층 비교 및 실무 활용 가이드"
date: "2025-03-17"
---
Apache Tomcat과 Nginx는 웹 인프라에서 중요한 역할을 하는 서버 소프트웨어로, 각기 다른 목적과 특성을 가지고 있습니다. Tomcat은 주로 Java 기반 동적 애플리케이션 실행에 최적화되어 있는 반면, Nginx는 고성능 정적 파일 제공, 리버스 프록시, 로드 밸런싱 등에 강점을 보입니다. 이 문서에서는 두 서버의 기능과 차이점을 자세히 살펴보고, 실무에서 자주 사용되는 구성 방식과 최적화 전략을 함께 설명합니다. Java 기반 웹 애플리케이션 서버
Tomcat은 Java Servlet, JSP(JavaServer Pages) 등 Java 웹 기술을 실행하기 위한 서블릿 컨테이너로, Java EE 환경에서 주로 사용됩니다. 동적 컨텐츠 처리
비즈니스 로직을 수행하고, 동적 페이지를 생성하는 데 최적화되어 있습니다. 이를 통해 사용자의 요청에 따라 동적으로 생성되는 컨텐츠를 효율적으로 처리합니다. 내장 HTTP 서버
자체적으로 HTTP 요청을 처리할 수 있지만, 보통 별도의 웹 서버(예: Nginx, Apache HTTP Server)와 함께 사용하여 정적 파일 서빙 및 보안 처리를 위임합니다. 개발자 친화성 및 확장성
Java 생태계의 다양한 라이브러리 및 프레임워크(Spring, Struts 등)와의 통합이 용이하며, 개발 및 디버깅 환경이 잘 갖추어져 있습니다. 엔터프라이즈 애플리케이션
대규모 기업용 웹 애플리케이션이나 내부 시스템에서 Java 기반 동적 처리가 필요한 경우 Tomcat이 주로 사용됩니다. Java 웹 프레임워크와의 통합
Spring MVC, Spring Boot와 같은 프레임워크를 사용하는 애플리케이션의 경우, Tomcat을 내장 서버로 사용하거나 외부 컨테이너로 배포하여 운영합니다. 개발 및 테스트 환경
로컬 개발 환경이나 테스트 서버에서 Tomcat을 사용하여 애플리케이션을 실행하고 디버깅하는 경우가 많습니다. 경량의 고성능 웹 서버 및 리버스 프록시
Nginx는 이벤트 기반 아키텍처를 사용하여 많은 수의 동시 접속을 효과적으로 처리합니다. 특히 정적 컨텐츠(HTML, 이미지, CSS, JavaScript) 제공에 탁월한 성능을 보입니다. 리버스 프록시 및 로드 밸런싱
클라이언트 요청을 백엔드 서버(예: Tomcat, Node.js, Django 등)로 분산시키는 역할을 하며, SSL/TLS 종단 처리 및 HTTP/2 지원 등 보안 기능도 제공하여 백엔드 서버의 부하를 줄입니다. 간편한 설정 및 모듈화
설정 파일이 직관적이며, 다양한 모듈을 통해 확장이 용이합니다. 특히 정적 파일 캐싱, 압축(gzip) 등 성능 최적화 기능을 기본적으로 제공합니다. 정적 컨텐츠 서빙
이미지, CSS, JavaScript 등의 정적 파일을 빠르게 전달하여 웹 페이지의 초기 로딩 시간을 단축합니다. 리버스 프록시 서버
Apache Tomcat, Node.js 등 백엔드 서버 앞에 위치하여 보안, 부하 분산, 캐싱, SSL 종료 등을 처리합니다. 이는 보안과 성능을 동시에 개선하는 일반적인 구성 방식입니다. 로드 밸런싱
여러 백엔드 서버로 트래픽을 분산시키는 역할을 하여, 서비스의 안정성과 확장성을 높입니다. 리버스 프록시: Nginx를 프론트엔드 리버스 프록시로 배치하여 클라이언트의 요청을 받고, 정적 파일 요청은 직접 처리합니다. 동적 컨텐츠 요청은 Apache Tomcat으로 전달합니다.
로드 밸런싱: 여러 대의 Tomcat 서버가 운영될 경우, Nginx가 로드 밸런서 역할을 수행하여 트래픽을 균등하게 분산합니다.
SSL 종단 처리: Nginx에서 SSL/TLS 암호화를 처리함으로써, Tomcat 서버는 암호화 해제된 상태로 요청을 받아 부담을 줄일 수 있습니다. 성능 최적화: 정적 파일은 Nginx가 빠르게 제공하며, 동적 요청은 Tomcat이 처리하여 각자의 강점을 살릴 수 있습니다.
보안 강화: Nginx에서 SSL 종료, 방화벽 역할, 요청 필터링 등을 수행하여 Tomcat 서버를 외부 위협으로부터 보호할 수 있습니다.
유연한 확장성: 트래픽 증가에 따라 Tomcat 서버를 추가하고, Nginx 설정만으로 손쉽게 로드 밸런싱을 구성할 수 있습니다. 단독 운영: 작은 규모의 애플리케이션이나 개발 환경에서는 Tomcat 단독으로 운영하는 경우도 많습니다. 이 경우, 설정이 간단하며 Java 웹 애플리케이션에 집중할 수 있습니다.
하이브리드 운영: 실무에서는 보안, 성능, 확장성 등을 고려하여 Nginx와 Tomcat을 조합한 하이브리드 구성이 일반적입니다. 이를 통해 각 서버의 역할 분담이 명확해지고, 시스템 전체의 안정성이 향상됩니다. JVM 튜닝: Java 힙 메모리, 가비지 컬렉션(GC) 설정 등을 적절히 조정하여 성능 향상을 도모합니다.
커넥터 설정: HTTP 커넥터의 스레드 수, 연결 타임아웃 등을 최적화하여 동시 요청 처리 능력을 개선합니다.
모니터링: JMX나 APM(Application Performance Monitoring) 도구를 활용하여 실시간 성능 모니터링 및 문제 분석을 수행합니다. 캐싱: 정적 파일 캐싱과 프록시 캐싱을 활용하여 백엔드 서버의 부하를 줄입니다.
압축 및 최적화: gzip 압축을 활성화하여 데이터 전송량을 줄이고, HTTP/2를 적용해 페이지 로딩 속도를 개선합니다.
연결 제한 및 타임아웃 설정: 연결 수 제한, 타임아웃 설정 등을 통해 불필요한 자원 소모를 방지합니다.
Apache Tomcat과 Nginx는 서로 다른 역할에 최적화된 서버로, 실무에서는 두 서버의 조합을 통해 각 시스템의 강점을 극대화하는 전략이 일반적입니다. Tomcat은 Java 기반의 동적 웹 애플리케이션을 효율적으로 실행하며, Nginx는 정적 컨텐츠 서빙과 리버스 프록시, 로드 밸런싱을 통해 전체 시스템의 성능과 보안을 강화합니다. 이러한 통합 방식은 확장성과 안정성을 확보하면서도 운영 비용을 효율적으로 관리할 수 있는 효과적인 솔루션을 제공합니다.이 가이드가 Apache Tomcat과 Nginx의 차이점 및 실무 활용에 대한 깊은 이해를 돕고, 여러분의 웹 인프라 구성에 유용한 참고 자료가 되길 바랍니다.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/apache-tomcat,-nginx-비교-및-실무-활용.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/Apache Tomcat, Nginx 비교 및 실무 활용.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Mar 2025 00:31:14 GMT</pubDate></item><item><title><![CDATA[CSR, SSR 차이와 특징]]></title><description><![CDATA[---
title: "서버 사이드 렌더링과 클라이언트 사이드 렌더링: 특징, 차이점 및 실무 활용 가이드"
date: "2025-03-17"
---
현대 웹 개발에서는 사용자 경험과 검색 엔진 최적화(SEO)를 동시에 만족시키기 위해 렌더링 방식 선택이 중요합니다. 두 가지 대표적인 렌더링 방식인 서버 사이드 렌더링(SSR)과 클라이언트 사이드 렌더링(CSR)은 각각 장단점이 있으며, 프로젝트의 요구사항에 따라 적절하게 선택되어야 합니다. 이 문서에서는 각 렌더링 방식의 주요 특징, 차이점, 그리고 실무에서의 활용 사례에 대해 자세히 다루어 보겠습니다.서버 사이드 렌더링은 웹 페이지의 초기 HTML 컨텐츠를 서버에서 미리 생성한 후, 클라이언트에게 전달하는 방식입니다. 브라우저는 전달받은 HTML을 그대로 렌더링하여 사용자에게 화면을 보여주게 됩니다.
빠른 초기 렌더링: 서버에서 미리 렌더링된 HTML을 제공하므로, 초기 로딩 속도가 빠르며 사용자에게 빠른 피드백을 제공합니다.
SEO 친화적: 검색 엔진 크롤러가 서버에서 생성된 HTML을 쉽게 인식할 수 있어, SEO 측면에서 유리합니다.
일관된 렌더링: 클라이언트 환경에 상관없이 서버에서 렌더링되므로, 다양한 디바이스에서 일관된 결과를 보장합니다.
서버 부하: 렌더링 작업이 서버에 집중되므로, 트래픽이 많은 경우 서버 부하가 증가할 수 있습니다. 콘텐츠 중심 사이트: 뉴스, 블로그, 전자상거래 등 초기 페이지 로딩과 SEO가 중요한 경우.
동적 데이터가 상대적으로 적은 애플리케이션: 사용자 인터랙션보다 페이지 초기 내용이 중요한 경우.
클라이언트 사이드 렌더링은 초기 HTML 파일은 최소한의 구조만 포함하고, JavaScript를 통해 브라우저에서 필요한 데이터를 불러와 화면을 렌더링하는 방식입니다. 주로 SPA(Single Page Application) 구조에서 많이 사용됩니다.
부드러운 사용자 인터랙션: 클라이언트에서 상태 관리와 라우팅을 처리하여 페이지 전환 시 부드럽고 빠른 사용자 경험을 제공합니다.
초기 로딩 대기: 초기 로딩 시 JavaScript 번들이 모두 로드되어야 하므로, 첫 페이지 로딩 시간이 상대적으로 길어질 수 있습니다.
서버 부담 감소: 렌더링 작업의 대부분이 클라이언트에서 이루어지므로, 서버 부하는 상대적으로 적습니다.
SEO 한계: 검색 엔진 크롤러가 JavaScript 렌더링을 완벽하게 수행하지 못하는 경우, SEO 최적화에 제약이 있을 수 있습니다. 복잡한 사용자 인터페이스: 대화형 애플리케이션, 대시보드, SPA 등 사용자 인터랙션이 중요한 경우.
실시간 데이터 업데이트: 웹소켓이나 API를 통해 지속적으로 데이터를 업데이트하는 애플리케이션.
최근에는 SSR과 CSR의 장점을 동시에 취하는 하이브리드 렌더링 기법이 주목받고 있습니다. 대표적으로 Next.js, Nuxt.js 등의 프레임워크는 초기 페이지 로딩은 서버에서 렌더링하고, 이후 클라이언트에서 인터랙티브하게 전환하는 방식을 제공합니다.
Next.js: React 기반 프레임워크로 SSR과 CSR을 모두 지원하며, 정적 사이트 생성(SSG) 및 API 라우팅 등 다양한 기능을 제공합니다.
Nuxt.js: Vue.js 기반 프레임워크로, SSR과 CSR을 쉽게 구성할 수 있으며 SEO와 초기 로딩 속도를 모두 만족시킵니다. SEO가 중요한 프로젝트: 초기 렌더링 속도와 SEO를 고려해 SSR 또는 하이브리드 접근법 선택.
사용자 인터랙션이 중요한 애플리케이션: 복잡한 클라이언트 로직과 부드러운 사용자 경험이 필요하다면 CSR 선호.
서버 리소스와 인프라: 서버 리소스가 충분하지 않다면 클라이언트 렌더링을 고려하되, SEO 문제에 대해 별도의 대책(예: 동적 렌더링, 프리렌더링)을 마련. 코드 스플리팅: CSR에서는 필요한 JavaScript 코드만 로드하여 초기 로딩 시간을 단축.
캐싱 전략: SSR에서는 서버 캐싱을 활용해 동일한 요청에 대한 렌더링 속도를 개선.
SEO 메타 태그 관리: SSR에서는 서버에서 SEO 최적화된 메타 태그를 미리 구성, CSR에서는 동적 메타 태그 관리를 위한 라이브러리 사용.
서버 사이드 렌더링(SSR)과 클라이언트 사이드 렌더링(CSR)은 각각의 특성에 따라 장단점이 뚜렷합니다. 프로젝트의 목적, 사용자 경험, SEO 요구사항, 서버 인프라 등을 종합적으로 고려하여 적절한 렌더링 방식을 선택하는 것이 중요합니다. 또한, Next.js와 같은 하이브리드 프레임워크를 활용하면 양측의 장점을 모두 취할 수 있어, 최신 웹 애플리케이션 개발에서 효과적인 전략이 될 수 있습니다.이 문서가 SSR과 CSR의 개념 및 실무 활용에 대해 깊이 이해하는 데 도움이 되길 바랍니다.]]></description><link>https://64etuor.github.io/600_tech-stack/java-spring/csr,-ssr-차이와-특징.html</link><guid isPermaLink="false">600_Tech Stack/Java Spring/CSR, SSR 차이와 특징.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Mar 2025 00:30:51 GMT</pubDate></item><item><title><![CDATA[Python Cursor와 Java Statement 비교]]></title><description><![CDATA[다음은 자바의 Statement(여기서는 JDBC에서의 Statement를 기준으로)와 파이썬의 Cursor(여기서는 DB-API 표준의 Cursor를 기준으로) 객체가 DB와 상호작용하는 과정을 간단히 비교한 내용입니다. 쿼리 실행 자바의 Statement와 파이썬의 Cursor 모두 데이터베이스에 SQL 문을 전달하고 결과(SELECT이면 결과 행, INSERT/UPDATE/DELETE이면 영향받은 행 수 등)를 반환받는다. 리소스 해제 필요 자바에서 Statement.close(), 파이썬에서 cursor.close()처럼 사용 후 명시적으로 닫아주거나, 각 언어가 제공하는 안전장치(try-with-resources, with 문 등)를 통해 리소스를 정리해야 한다. Prepared Statement 개념 자바에서는 PreparedStatement를 통해 파라미터 바인딩 및 SQL 재사용이 가능하다. 파이썬 DB-API에서도 execute() 호출 시 파라미터를 매핑하거나, 드라이버마다 Prepared Statement와 유사한 최적화를 제공할 수 있다. try (Statement st = conn.createStatement()) { ResultSet rs = st.executeQuery("SELECT * FROM table"); while (rs.next()) { // 데이터 사용 }
} catch (SQLException e) { e.printStackTrace();
}
``` | ```python
with connection.cursor() as cursor: cursor.execute("SELECT * FROM table") rows = cursor.fetchall() for row in rows: # 데이터 사용 자바에서는 단순 문자열로 SQL을 실행할 때 Statement를, 파라미터를 안전하게 바인딩해야 할 때 PreparedStatement를 사용한다.
파이썬에서는 execute(sql, params)로 파라미터를 전달하며, 내부적으로 드라이버가 Prepared Statement를 지원하기도 한다. 즉, 자바의 PreparedStatement 기능을 파이썬에서는 Cursor 한 종류에서 지원하는 경우가 많다. 자바의 ResultSet은 커서가 자동으로 앞에서부터 하나씩 움직이며 rs.next()로 데이터를 읽는 구조다.
파이썬의 Cursor는 fetchall(), fetchone(), fetchmany() 같은 메서드로 원하는 방식으로 레코드를 가져온다. 자바: try-with-resources(Statement st = connection.createStatement()) 구문을 많이 사용하거나, 수동으로 statement.close(), resultSet.close()를 호출한다.
파이썬: with connection.cursor() as cursor: 형태로 Context Manager를 많이 사용하며, 블록이 끝나면 자동으로 Cursor가 닫힌다.
자바의 Statement와 파이썬의 Cursor는 모두 DB와의 상호작용을 담당하는 핵심 객체로, SQL 실행 결과 집합 제어(조회, 업데이트 결과 등) 리소스 해제 등의 흐름은 유사합니다. 다만,
자바는 Statement / PreparedStatement / CallableStatement로 구분되어 있고, 파이썬은 주로 Cursor 객체 하나에서 모든 기능을 제공하되, SQL 실행 시 인자를 안전하게 전달할 수 있는 방식을 제공한다 는 점에서 차이가 있습니다. 언어가 다르지만 “SQL 쿼리를 실행하고 결과를 가져온다”는 핵심 목적 자체는 동일하므로, 사용 시 공통된 개념(쿼리 작성, 파라미터 바인딩, 리소스 정리)을 이해하면 서로 간에 학습 전환이 수월합니다.]]></description><link>https://64etuor.github.io/600_tech-stack/java/libraries/python-cursor와-java-statement-비교.html</link><guid isPermaLink="false">600_Tech Stack/Java/Libraries/Python Cursor와 Java Statement 비교.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 14 Mar 2025 01:41:13 GMT</pubDate></item><item><title><![CDATA[jdbc]]></title><link>https://64etuor.github.io/600_tech-stack/java/libraries/jdbc.html</link><guid isPermaLink="false">600_Tech Stack/Java/Libraries/jdbc.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 14 Mar 2025 00:48:44 GMT</pubDate></item><item><title><![CDATA[Dijkstra_Shortest Path]]></title><description><![CDATA[<img alt="Pasted image 20250312174014.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250312174014.png" target="_self">위 다이어그램은 다익스트라 알고리즘을 실행했을 때, 각 정점까지의 최단 거리를 시각화한 그래프입니다. 그래프 구성 각 원(노드)는 정점을 나타냅니다.
화살표(간선)는 한 정점에서 다른 정점으로 가는 경로를 나타내며, 각 간선 위의 숫자는 가중치를 의미합니다. 다익스트라 알고리즘 실행 (시작 정점: 1) 정점 1에서 시작하여 다른 모든 정점까지의 최단 거리를 계산합니다.
각 노드 위의 녹색 숫자는 시작 정점(1)에서 해당 정점까지의 최단 거리입니다. 최단 경로 예시 1 → 2: 거리 2
1 → 3: 1 → 2 → 3 경로가 최단이며, 거리 3
1 → 4: 1 → 2 → 3 → 4 경로가 최단이며, 거리 4
1 → 5: 1 → 2 → 3 → 4 → 5 경로가 최단이며, 거리 7 import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer; /* 다익스트라 알고리즘
* 음의 가중치가 없는 그래프의 한 정점에서 모든 정점까지의 최단 거리를 구하는 알고리즘
* 간선에 가중치가 없으면 BFS로도 가능하지만 가중치가 있다면 최단 경로 보장이 어렵다.
* */
public class D_DijkstraAlgorithm { static int n, m, start; // 정점 개수, 간선 개수, 시작 정점 static int[] dis; // 다른 노드까지의 거리를 저장할 배열 static class Edge implements Comparable&lt;Edge&gt; { int ver; // 해당 간선이 연결 된 정점 int cost; // 가중치 Edge(int ver, int cost) { this.ver = ver; this.cost = cost; } @Override public int compareTo(Edge o) { return this.cost - o.cost; // 가중치 오름차순의 우선순위 } } public static String solution(String input) throws IOException { BufferedReader br = new BufferedReader(new StringReader(input)); StringTokenizer st = new StringTokenizer(br.readLine()); n = Integer.parseInt(st.nextToken()); // 정점의 개수 m = Integer.parseInt(st.nextToken()); // 간선의 개수 start = Integer.parseInt(st.nextToken()); // 시작할 정점 ArrayList&lt;ArrayList&lt;Edge&gt;&gt; graph = new ArrayList&lt;&gt;(); for (int i = 0; i &lt;= n; i++) { graph.add(new ArrayList&lt;&gt;()); } // 각 노드의 가중치 기록할 배열 dis = new int[n + 1]; // 아직 거리가 판단 되지 않은 경우에는 Integer 최대 값으로 채워 둔다 Arrays.fill(dis, Integer.MAX_VALUE); for(int i = 0; i &lt; m; i++){ st = new StringTokenizer(br.readLine()); int a = Integer.parseInt(st.nextToken()); // 시작 정점 int b = Integer.parseInt(st.nextToken()); // 도착 정점 int c = Integer.parseInt(st.nextToken()); // 가중치 graph.get(a).add(new Edge(b, c)); } /* 우선순위 큐에 Edge가 담겼을 때 우선 순위는 가중치가 낮은 순서로 정해진다. */ PriorityQueue&lt;Edge&gt; pq = new PriorityQueue&lt;&gt;(); pq.offer(new Edge(start, 0)); dis[start] = 0; while(!pq.isEmpty()) { Edge tmp = pq.poll(); int now = tmp.ver; int nowCost = tmp.cost; if(nowCost &gt; dis[now]) continue; /* 기준 정점과 연결 된 이웃 정점을 큐에 추가 하는 반복문 */ for(Edge edge : graph.get(now)) { /* 거리를 기록해두는 배열에 저장 된 값이 현재 비용과 간선을 타고 가는 비용을 더한 값 보다 크다면 */ if(dis[edge.ver] &gt; nowCost + edge.cost) { /* 새로운 루트로 업데이트 한다. */ dis[edge.ver] = nowCost + edge.cost; pq.offer(new Edge(edge.ver, nowCost + edge.cost)); } } } StringBuilder sb = new StringBuilder(); for(int i = 2; i &lt; dis.length; i++) { if(dis[i] != Integer.MAX_VALUE) { sb.append(dis[i]); } else { sb.append("impossible"); } sb.append(" "); } return sb.toString().trim(); }
} ]]></description><link>https://64etuor.github.io/600_tech-stack/java/algorithm/dijkstra_shortest-path.html</link><guid isPermaLink="false">600_Tech Stack/Java/Algorithm/Dijkstra_Shortest Path.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 12 Mar 2025 08:41:06 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250312174014.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250312174014.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[[Java] 제네릭과 와일드카드 타입에 대해 쉽고 완벽하게 이해하기(공변과 불공변, 상한 타입과 하한 타입)]]></title><description><![CDATA[이번에는 공변과 불공변에 대해서 먼저 알아보고, 이후에 제네릭과 와일드카드에 대해 알아보도록 하겠습니다. 많은 분들이 어려워하는 제네릭인 만큼 쉽게 풀어서 설명하려고 노력했는데, 많은 도움이 되기를 바라겠습니다. 1. 공변과 불공변[ 공변과 불공변 ]제네릭과 와일드카드에 대해 이해하기 위해서 우리는 먼저 공변과 불공변에 대해 알아야 한다. 공변과 불공변은 각각 다음과 같다.공변(covariant) : A가 B의 하위 타입일 때, T 가 T의 하위 타입이면 T는 공변불공변(invariant) : A가 B의 하위 타입일 때, T 가 T의 하위 타입이 아니면 T는 불공변 대표적으로 배열은 공변이며, 제네릭은 불공변인데 이를 코드로 살펴보도록 하자. 예를 들어 배열의 요소들을 출력하는 메소드가 있다고 하..]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-제네릭과-와일드카드-타입에-대해-쉽고-완벽하게-이해하기(공변과-불공변,-상한-타입과-하한-타입).html</link><guid isPermaLink="false">600_Tech Stack/Java/Java 제네릭과 와일드카드 타입에 대해 쉽고 완벽하게 이해하기(공변과 불공변, 상한 타입과 하한 타입).md</guid><dc:creator><![CDATA[[[망나니개발자]]]]></dc:creator><pubDate>Mon, 10 Mar 2025 05:49:34 GMT</pubDate></item><item><title><![CDATA[Logback]]></title><description><![CDATA[Logback is a powerful, flexible, and fast logging framework for Java applications. It is the default logging framework for Spring Boot and a successor to Log4j. Logback provides enhanced performance and better configurability while maintaining full SLF4J compatibility.Logback consists of three main modules:
The foundation for logback-classic and logback-access.
Handles log formatting, appenders, and configurations. The main logging module that integrates with SLF4J.
Supports different logging levels, appenders, and rolling policies.
Replaces Log4j as the default logging framework in Spring Boot. Integrates Logback with Servlet-based applications (e.g., Tomcat, Jetty).
Provides HTTP request logging capabilities.
Logback is designed to be modular and extensible.
Logback fully integrates with SLF4J (slf4j-api), making it easy to switch logging frameworks.
Logback supports six logging levels:TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR TRACE – Fine-grained debugging messages.
DEBUG – Detailed debugging information.
INFO – General application events.
WARN – Warnings that indicate potential problems.
ERROR – Severe errors that may cause failures.
Logback supports multiple appenders to direct log messages to different destinations:Logback can be configured using:
logback.xml (recommended)
logback-test.xml (for testing)
logback.groovy (Groovy-based configuration)
Logback provides advanced log rotation to manage large log files:
Time-based rotation (yyyy-MM-dd.log)
Size-based rotation (maxFileSize=10MB)
Retention policies (maxHistory=30 to keep logs for 30 days)
The workflow for logging messages in Logback follows these steps:
Application Code: Calls the SLF4J Logger API.
SLF4J API: Forwards log messages to Logback.
Logback Logger: Filters logs based on the logging level.
Appender: Routes logs to console, files, databases, or external services.
✅ Fast &amp; Efficient – Uses asynchronous logging for better performance.
✅ SLF4J Integration – Default logging implementation for Spring Boot.
✅ Flexible Appenders – Supports console, file, database, and email logging.
✅ Advanced Log Rotation – Manages log files effectively using time-based or size-based policies.
✅ Dynamic Configuration – Supports XML, Groovy, and programmatic configurations.import org.slf4j.Logger;
import org.slf4j.LoggerFactory; public class LogbackExample { // Create a Logger instance private static final Logger logger = LoggerFactory.getLogger(LogbackExample.class); public static void main(String[] args) { logger.trace("This is a TRACE message"); logger.debug("This is a DEBUG message"); logger.info("This is an INFO message"); logger.warn("This is a WARN message"); logger.error("This is an ERROR message"); }
}
Expected Output (if log level is INFO or higher):[INFO] This is an INFO message
[WARN] This is a WARN message
[ERROR] This is an ERROR message
Create a logback.xml file inside src/main/resources:&lt;configuration&gt; &lt;!-- Console Appender --&gt; &lt;appender name="console" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;encoder&gt; &lt;pattern&gt;[%d{yyyy-MM-dd HH:mm:ss}] [%level] %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- File Appender --&gt; &lt;appender name="file" class="ch.qos.logback.core.FileAppender"&gt; &lt;file&gt;logs/app.log&lt;/file&gt; &lt;encoder&gt; &lt;pattern&gt;[%d{yyyy-MM-dd HH:mm:ss}] [%level] %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- Root Logger --&gt; &lt;root level="INFO"&gt; &lt;appender-ref ref="console"/&gt; &lt;appender-ref ref="file"/&gt; &lt;/root&gt;
&lt;/configuration&gt;
Explanation:
Logs messages to both the console and a file (logs/app.log).
Uses a date-time format: [%d{yyyy-MM-dd HH:mm:ss}] [%level] %msg.
To rotate logs daily and keep logs for 30 days:&lt;appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;file&gt;logs/application.log&lt;/file&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;fileNamePattern&gt;logs/application-%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;[%d{yyyy-MM-dd HH:mm:ss}] [%level] %msg%n&lt;/pattern&gt; &lt;/encoder&gt;
&lt;/appender&gt; &lt;root level="INFO"&gt; &lt;appender-ref ref="rollingFile"/&gt;
&lt;/root&gt;
This configuration:
Creates a new log file every day.
Retains logs for 30 days before deleting old files.
Spring Boot automatically detects Logback and uses it as the default logging framework.To customize logging in Spring Boot, create logback-spring.xml:&lt;configuration&gt; &lt;springProperty name="LOG_PATH" source="logging.path"/&gt; &lt;appender name="file" class="ch.qos.logback.core.FileAppender"&gt; &lt;file&gt;${LOG_PATH}/app.log&lt;/file&gt; &lt;encoder&gt; &lt;pattern&gt;[%d{yyyy-MM-dd HH:mm:ss}] [%level] %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;root level="INFO"&gt; &lt;appender-ref ref="file"/&gt; &lt;/root&gt;
&lt;/configuration&gt;
Set log path in application.properties:logging.path=logs
]]></description><link>https://64etuor.github.io/600_tech-stack/java/libraries/logback.html</link><guid isPermaLink="false">600_Tech Stack/Java/Libraries/Logback.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 12:47:56 GMT</pubDate></item><item><title><![CDATA[dotenv]]></title><description><![CDATA[The dotenv-java library allows Java applications to load environment variables from a .env file. This is particularly useful for managing configuration settings, API keys, and sensitive data without hardcoding them into the source code.The dotenv-java library consists of several key components:
The main class responsible for loading variables from a .env file.
Reads key-value pairs and makes them accessible in the application. Dotenv loads environment variables without overwriting existing system variables.
Variables can be accessed via System.getenv() or Dotenv.get(). The library looks for a .env file in the project's root directory.
Supports multiple files (e.g., .env, .env.dev, .env.test).
The dotenv-java library supports various features and configurations:
Reads .env files and makes the variables available in the application. By default, dotenv does not overwrite existing environment variables.
However, you can configure it to override values if necessary. You can load variables from multiple .env files (e.g., .env.test, .env.production). The .env file can be placed in a custom directory and loaded explicitly.
The workflow for using dotenv-java in an application follows these steps:
Application Startup: The Java application initializes the dotenv loader.
Dotenv: Reads environment variables from a .env file.
Parsing: Converts .env key-value pairs into usable environment variables.
Storage: Makes variables available in System.getenv() and Dotenv.get().
✅ Keeps sensitive data secure – API keys, database credentials, and configurations are not hardcoded in the source code.
✅ Simplifies configuration management – Supports multiple environments (.env.dev, .env.test).
✅ Works across different platforms – Java applications can use environment variables consistently.
✅ Prevents accidental overrides – Existing system variables are not replaced unless explicitly allowed.DATABASE_URL=jdbc:mysql://localhost:3306/mydb
API_KEY=abcdef12345
import io.github.cdimascio.dotenv.Dotenv; public class DotenvExample { public static void main(String[] args) { // Load environment variables from .env file Dotenv dotenv = Dotenv.load(); // Retrieve values String databaseUrl = dotenv.get("DATABASE_URL"); String apiKey = dotenv.get("API_KEY"); System.out.println("Database URL: " + databaseUrl); System.out.println("API Key: " + apiKey); }
}
Expected Output:Database URL: jdbc:mysql://localhost:3306/mydb
API Key: abcdef12345
If your .env file is in a different directory, specify the path:Dotenv dotenv = Dotenv.configure() .directory("/config") // Custom directory .load();
By default, dotenv-java does not overwrite existing environment variables.
To force override them:Dotenv dotenv = Dotenv.configure() .ignoreIfMalformed() // Ignores errors .ignoreIfMissing() // Prevents exceptions if .env is missing .load();
You can access loaded variables using:String value = dotenv.get("VAR_NAME"); // Preferred way
String systemValue = System.getenv("VAR_NAME"); // Also works
To load different files:Dotenv dotenv = Dotenv.configure() .filename(".env.test") // Load specific file .load();
If you are using Spring Boot, dotenv-java can be integrated easily:import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration; @Configuration
public class AppConfig { @Bean public Dotenv dotenv() { return Dotenv.load(); }
}
import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.stereotype.Service; @Service
public class ConfigService { private final Dotenv dotenv; public ConfigService(Dotenv dotenv) { this.dotenv = dotenv; } public String getDatabaseUrl() { return dotenv.get("DATABASE_URL"); }
}
The dotenv-java library provides a simple and secure way to manage environment variables in Java applications. It helps in keeping configurations flexible, securing sensitive data, and supporting multiple environments.✅ Easily loads .env files into Java applications
✅ Prevents hardcoding sensitive credentials
✅ Supports multiple environments (dev, test, prod)
✅ Works with Spring Boot and other Java frameworksWould you like more examples or explanations? 🚀😊]]></description><link>https://64etuor.github.io/600_tech-stack/java/libraries/dotenv.html</link><guid isPermaLink="false">600_Tech Stack/Java/Libraries/dotenv.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 12:45:29 GMT</pubDate></item><item><title><![CDATA[SLF4J]]></title><description><![CDATA[SLF4J (Simple Logging Facade for Java) is a logging framework that provides a unified API for various logging implementations such as Logback, Log4j, and java.util.logging. It acts as a facade, allowing developers to switch between different logging frameworks without modifying their code.SLF4J consists of several core components:
The core SLF4J module that applications depend on.
Provides a generic logging API without binding to a specific logging framework.
Defines the Logger and LoggerFactory interfaces. SLF4J supports multiple logging backends: Logback (ch.qos.logback:logback-classic)
Log4j 2 (org.apache.logging.log4j:log4j-slf4j-impl)
java.util.logging (JUL) (org.slf4j:jul-to-slf4j) The binding layer connects SLF4J to a specific logging implementation.
Example bindings: slf4j-logback-classic.jar
slf4j-jdk14.jar
log4j-slf4j-impl.jar SLF4J is divided into multiple modules for flexibility.
The main SLF4J library used by applications.
Defines standard logging interfaces (Logger, LoggerFactory). A basic logging implementation that logs to System.out. Allows SLF4J to use Log4j 2 as the logging backend. Redirects SLF4J logging to java.util.logging (JUL). Connects SLF4J to Logback, a powerful logging framework. Redirects JUL logs to SLF4J for centralized logging.
The workflow of logging using SLF4J follows these steps:
Application Code: Uses SLF4J API (Logger interface).
SLF4J API: Forwards logs to a configured backend.
SLF4J Binding: Determines which logging implementation to use.
Logging Implementation: Writes logs to the console, file, or database.
✅ Decouples logging from specific implementations – Easily switch between Logback, Log4j, and JUL.
✅ Standardized Logging API – Works across different logging frameworks.
✅ Supports Parameterized Logging – Efficient log message construction.
✅ Integration with major frameworks – Used in Spring Boot, Hibernate, and other Java frameworks.import org.slf4j.Logger;
import org.slf4j.LoggerFactory; public class SLF4JExample { // Create a logger instance private static final Logger logger = LoggerFactory.getLogger(SLF4JExample.class); public static void main(String[] args) { logger.info("This is an info message"); logger.warn("This is a warning message"); logger.error("This is an error message"); }
}
Expected Output (if using Logback or Log4j 2):[INFO] This is an info message
[WARN] This is a warning message
[ERROR] This is an error message
public class ParameterizedLogging { private static final Logger logger = LoggerFactory.getLogger(ParameterizedLogging.class); public static void main(String[] args) { String user = "Alice"; int age = 30; logger.info("User {} is {} years old", user, age); }
}
Expected Output:[INFO] User Alice is 30 years old
Why use parameterized logging?
Avoids unnecessary string concatenation.
Prevents performance overhead if logging is disabled.
To redirect JUL logs to SLF4J, include the dependency:implementation 'org.slf4j:jul-to-slf4j:2.0.11'
Then, bridge JUL to SLF4J in your application:import java.util.logging.LogManager; public class JULToSLF4J { public static void main(String[] args) { LogManager.getLogManager().reset(); // Reset default JUL handlers System.out.println("Redirecting java.util.logging to SLF4J"); }
}
Now, all JUL logs will be redirected to your SLF4J backend (Logback, Log4j, etc.).]]></description><link>https://64etuor.github.io/600_tech-stack/java/libraries/slf4j.html</link><guid isPermaLink="false">600_Tech Stack/Java/Libraries/SLF4J.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 12:43:53 GMT</pubDate></item><item><title><![CDATA[Jackson]]></title><description><![CDATA[Jackson is a powerful and widely used Java library for handling JSON data. It provides fast, flexible, and feature-rich JSON processing, including serialization and deserialization. The library is structured into multiple core and additional modules, each serving a specific purpose.Jackson's primary core modules include:
Provides a low-level streaming API for processing JSON data.
Key classes: JsonParser (reading JSON), JsonGenerator (writing JSON). Supports data binding between Java objects and JSON.
Uses ObjectMapper to serialize (Java Object → JSON) and deserialize (JSON → Java Object). Provides annotations for controlling serialization and deserialization behavior.
Common annotations: @JsonProperty: Customizes field names in JSON.
@JsonIgnore: Excludes a field from serialization.
@JsonFormat: Defines date/time formatting. Jackson provides additional modules for extended functionality.Enable Jackson to work with different data formats beyond JSON:
jackson-dataformat-xml (for XML support)
jackson-dataformat-csv (for CSV support)
jackson-dataformat-yaml (for YAML support)
jackson-dataformat-avro (for Avro support)
Provide support for various Java data types:
jackson-datatype-jsr310: Supports Java 8 LocalDateTime, Instant, etc.
jackson-datatype-joda: Supports Joda-Time.
jackson-datatype-guava: Supports Google Guava data structures.
Optimize performance using bytecode generation:
jackson-module-afterburner: Increases JSON processing speed.
Enhance compatibility with other languages and frameworks:
jackson-module-kotlin: Provides better support for Kotlin data classes.
Jackson provides multiple approaches for handling JSON.
Uses JsonParser for reading and JsonGenerator for writing JSON.
The most efficient but also the most complex approach. Uses ObjectMapper.readTree() and writeTree().
Converts JSON to JsonNode objects for flexible data handling. Uses ObjectMapper.readValue() and writeValue().
The most commonly used approach for serializing/deserializing Java objects.
✅ Fast and efficient – Uses streaming-based processing for high performance.
✅ Flexible JSON handling – Supports various data formats (JSON, XML, CSV, YAML, etc.).
✅ Seamless Spring Boot integration – The default JSON processing library in Spring Boot.
✅ Extensible – Easily adaptable with additional modules.import com.fasterxml.jackson.databind.ObjectMapper; class User { public String name; public int age; public User(String name, int age) { this.name = name; this.age = age; }
} public class JacksonExample { public static void main(String[] args) throws Exception { ObjectMapper mapper = new ObjectMapper(); User user = new User("Alice", 25); // Java Object → JSON String jsonString = mapper.writeValueAsString(user); System.out.println(jsonString); // {"name":"Alice","age":25} }
}
public class JacksonExample { public static void main(String[] args) throws Exception { ObjectMapper mapper = new ObjectMapper(); String jsonString = "{\"name\":\"Alice\",\"age\":25}"; // JSON → Java Object User user = mapper.readValue(jsonString, User.class); System.out.println(user.name + " is " + user.age + " years old."); }
}
]]></description><link>https://64etuor.github.io/600_tech-stack/java/libraries/jackson.html</link><guid isPermaLink="false">600_Tech Stack/Java/Libraries/Jackson.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 12:41:56 GMT</pubDate></item><item><title><![CDATA[JUnit 개요 및 사용법]]></title><description><![CDATA[JUnit은 Java에서 단위 테스트(Unit Test)를 수행하는 대표적인 프레임워크이다.
소프트웨어의 기능이 기대한 대로 동작하는지 자동으로 검증할 수 있도록 지원하며,
테스트를 자동화하여 코드 품질을 향상시키는 데 중요한 역할을 한다.
개별 메서드나 클래스가 올바르게 동작하는지 검증하는 테스트를 의미한다.
작은 단위(함수, 클래스)를 독립적으로 테스트하여 오류를 조기에 발견할 수 있다. 어노테이션 기반 테스트 실행 (@Test, @BeforeEach, @AfterEach 등)
자동화된 테스트 실행 (반복 실행 가능)
테스트 결과 검증을 위한 다양한 단정문(Assertions) 제공
다른 테스트 라이브러리와의 통합 가능 (AssertJ, Mockito 등)
JUnit을 사용하려면 프로젝트에 JUnit 라이브러리를 추가해야 한다.pom.xml 파일에 JUnit 의존성을 추가한다.&lt;dependencies&gt; &lt;!-- JUnit 5 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt; &lt;version&gt;5.7.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt; &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt; &lt;version&gt;5.7.1&lt;/version&gt; &lt;/dependency&gt;
&lt;/dependencies&gt;
build.gradle 파일에 JUnit 의존성을 추가한다.dependencies { testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}
JUnit에서 테스트 실행을 제어하는 어노테이션들을 제공한다.JUnit에서 제공하는 검증 메서드(Assertions) 를 사용하여 테스트 결과를 확인할 수 있다.import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*; class JUnitExampleTests { @Test void testAssertions() { int expected = 10; int actual = 5 + 5; assertEquals(expected, actual, "값이 일치해야 합니다."); assertNotEquals(0, actual, "값이 0이 아니어야 합니다."); assertTrue(actual &gt; 0, "값이 양수여야 합니다."); assertFalse(actual &lt; 0, "값이 음수가 아니어야 합니다."); }
}
어떤 메서드가 특정 예외를 발생시키는지 검증할 때 사용한다.import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*; class ExceptionTest { @Test void testException() { Throwable exception = assertThrows(IllegalArgumentException.class, () -&gt; { throw new IllegalArgumentException("잘못된 입력값"); }); assertEquals("잘못된 입력값", exception.getMessage()); }
}
🔹 assertThrows()를 사용하여 특정 예외가 발생하는지 확인할 수 있다.JUnit의 기본 단정문 외에도 AssertJ 를 사용하면 더 직관적이고 가독성 높은 테스트 코드를 작성할 수 있다.import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test; class AssertJExampleTests { @Test void testStringValidation() { String actual = "hello world"; Assertions.assertThat(actual) .isNotEmpty() .isNotBlank() .contains("hello") .doesNotContain("haha") .startsWith("h") .endsWith("d"); }
}
🔹 AssertJ를 사용하면 더 읽기 쉬운 방식으로 테스트를 작성할 수 있다.
Run Test 또는 Ctrl + Shift + F10 (IntelliJ) 를 사용하여 테스트 실행.
mvn test
gradle test
java -jar junit-platform-console-standalone.jar --select-class JUnitExampleTests
✅ 1) 자동화된 테스트 지원
✅ 2) 코드 품질 향상 (리팩토링 &amp; 유지보수성 증가)
✅ 3) 버그 발견 용이
✅ 4) CI/CD 파이프라인과 연동 가능 (Jenkins, GitHub Actions 등)
✅ 5) AssertJ, Mockito와 같은 다른 테스트 라이브러리와 쉽게 통합 가능
JUnit은 Java 단위 테스트 프레임워크로, 자동화된 테스트를 지원한다.
단정문(Assertions)을 사용하여 테스트 결과를 검증할 수 있다.
AssertJ를 활용하면 더 직관적인 테스트 코드 작성이 가능하다.
예외 테스트(assertThrows)를 통해 예외 발생 여부를 검증할 수 있다.
Maven, Gradle, CI/CD 환경에서도 쉽게 연동 가능하다.
]]></description><link>https://64etuor.github.io/600_tech-stack/java/junit-5.10.html</link><guid isPermaLink="false">600_Tech Stack/Java/JUnit 5.10.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Dependency Inversion Principle (DIP) 적용 예제]]></title><description><![CDATA[의존 역전 원칙(DIP, Dependency Inversion Principle) 은 SOLID 원칙 중 하나로,
"고수준 모듈은 저수준 모듈에 의존해서는 안 되며, 둘 다 추상화에 의존해야 한다." 는 개념을 따른다. 즉, 구체적인 클래스(구현체) 대신 인터페이스나 추상 클래스를 의존하여 결합도를 낮추는 것이 핵심이다. 본 예제에서는 알림(Notification) 시스템을 DIP 원칙에 맞게 설계하여, 이메일과 SMS 발송 방식이 독립적으로 동작하면서도 NotificationService 클래스가 특정 구현체(EmailSender, SMSSender)에 직접 의존하지 않도록 한다.
MessageSender 인터페이스는 알림 발송 방식의 공통 규약을 정의한다.
EmailSender 와 SMSSender 는 각각 이메일과 SMS 발송 방식을 구현하는 클래스이다.
NotificationService 클래스는 직접 EmailSender, SMSSender 를 사용하지 않고, MessageSender 인터페이스를 통해 추상화된 방식으로 사용한다.
새로운 알림 방식이 추가되더라도(KakaoTalkSender, PushNotificationSender 등), NotificationService를 수정할 필요 없이 확장 가능! 🚀
/* 메시지 전송 방식을 정의하는 인터페이스 */
public interface MessageSender { void sendMessage(String message);
}
📌 설명:
MessageSender 인터페이스는 알림을 발송하는 공통 메서드 sendMessage(String message)를 정의한다.
이메일, SMS, 카카오톡 등 다양한 방식의 알림 발송이 가능하도록 확장성을 제공한다.
/* 이메일로 알림을 발송하는 클래스 */
public class EmailSender implements MessageSender { @Override public void sendMessage(String message) { System.out.println("이메일로 알림을 발송 : " + message); }
}
📌 설명:
EmailSender 클래스는 MessageSender 인터페이스를 구현하여 이메일 알림 발송 기능을 담당한다.
NotificationService 는 EmailSender 가 아닌 MessageSender 를 의존하기 때문에 이 클래스를 직접 참조하지 않는다. (DIP 준수)
/* SMS로 알림을 발송하는 클래스 */
public class SMSSender implements MessageSender { @Override public void sendMessage(String message) { System.out.println("SMS로 알림을 발송 : " + message); }
}
📌 설명:
SMSSender 클래스는 MessageSender 인터페이스를 구현하여 SMS 알림 발송 기능을 담당한다.
마찬가지로, NotificationService 는 SMSSender 가 아닌 MessageSender 를 참조하기 때문에 구현체 교체가 가능하다.
/* NotificationService가 구체적인 구현체가 아닌 인터페이스에 의존하도록 설계 */
public class NotificationService { private final MessageSender messageSender; /* 의존 관계를 생성자가 주입 (Dependency Injection) */ public NotificationService(MessageSender messageSender) { this.messageSender = messageSender; } public void sendNotification(String message) { messageSender.sendMessage(message); }
}
📌 설명:
NotificationService 클래스는 MessageSender 인터페이스에만 의존하며, 구체적인 구현체(EmailSender, SMSSender)를 직접 참조하지 않는다.
생성자 주입(Dependency Injection, DI)을 사용하여 실행 시점에 알림 방식을 변경할 수 있다. 예를 들어, new NotificationService(new EmailSender()) 또는 new NotificationService(new SMSSender()) 로 사용할 수 있음. public class Application { public static void main(String[] args) { MessageSender emailSender = new EmailSender(); MessageSender smsSender = new SMSSender(); NotificationService ns1 = new NotificationService(emailSender); NotificationService ns2 = new NotificationService(smsSender); ns1.sendNotification("이메일로 공지 발송"); ns2.sendNotification("SMS로 공지 발송"); }
}
이메일로 알림을 발송 : 이메일로 공지 발송
SMS로 알림을 발송 : SMS로 공지 발송
💡 NotificationService의 코드 수정 없이, MessageSender 인터페이스를 구현한 새로운 알림 방식(예: KakaoTalkSender)을 추가할 수 있음! 🚀
NotificationService 는 EmailSender, SMSSender 를 직접 참조하지 않기 때문에, 새로운 알림 방식이 추가되더라도 기존 코드 수정 없이 확장 가능하다. 새로운 알림 방식(KakaoTalkSender, PushNotificationSender)이 필요할 때, 기존 NotificationService 코드를 수정하지 않고 인터페이스만 구현하면 된다. NotificationService 는 "알림을 전송하는 역할" 만 수행하고,
"이메일을 보내는 방법", "SMS를 보내는 방법" 등의 세부 구현은 MessageSender 를 구현하는 클래스가 담당한다. 특정 알림 방식이 변경될 때 다른 클래스에 영향을 주지 않는다.
예를 들어, 이메일 전송 방식이 변경되더라도 NotificationService 코드를 수정할 필요 없음. 고수준 모듈(NotificationService)이 저수준 모듈(EmailSender, SMSSender)에 의존하지 않고, 인터페이스(MessageSender)를 사용
의존성 주입(Dependency Injection, DI)을 활용하여 객체 간 결합도를 낮춤
새로운 알림 방식 추가 시 기존 코드 수정 없이 확장 가능 (OCP 원칙도 함께 준수)
유지보수성과 확장성이 뛰어난 객체지향 설계 구현
]]></description><link>https://64etuor.github.io/600_tech-stack/solid-원칙/oop-실습-dip-적용-예제.html</link><guid isPermaLink="false">600_Tech Stack/SOLID 원칙/OOP 실습 - DIP 적용 예제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[OOP 실습 - OCP 원칙 예제]]></title><description><![CDATA[객체지향 프로그래밍(OOP)은 코드의 재사용성과 확장성을 높이는 중요한 개념이다. 이를 위해 추상화(abstraction), 다형성(polymorphism), 캡슐화(encapsulation), 상속(inheritance) 등의 개념을 활용한다.
이번 예제에서는 결제 시스템을 객체지향적으로 설계하여 확장성과 유지보수성을 높이는 방법을 학습한다.먼저, 설계된 클래스 다이어그램을 확인해보자.
PaymentProcessor 클래스는 결제를 수행하는 역할을 한다.
Payment 인터페이스는 결제 방식의 상위 개념으로, 모든 결제 방식이 process() 메서드를 구현하도록 강제한다.
CreditPayment와 KakaoPayment는 각각 신용카드와 카카오페이 결제 방식을 담당하는 구체적인 클래스이다.
PaymentProcessor는 Payment 인터페이스를 통해 결제 객체를 사용하기 때문에, 새로운 결제 방식을 추가해도 기존 코드에 영향을 주지 않는다. (OCP 원칙: 개방-폐쇄 원칙 준수)
/* 모든 결제 방식이 따라야 할 인터페이스 */
public interface Payment { /* 결제 과정을 진행하는 메서드 */ void process();
}
📌 설명:
Payment 인터페이스는 결제 방식의 공통 규약을 정의한다.
process() 메서드는 모든 결제 방식에서 반드시 구현해야 할 메서드이다.
/* 결제 요청을 처리하는 클래스 */
public class PaymentProcessor { public void processPayment(Payment payment) { payment.process(); // 결제 방식에 따라 다르게 동작 } }
📌 설명:
PaymentProcessor는 Payment 인터페이스를 사용하여 결제 요청을 처리한다.
processPayment() 메서드는 다형성을 이용하여 어떤 결제 방식이든 동일한 방식으로 호출할 수 있다.
/* 신용카드 결제 방식 */
public class CreditPayment implements Payment { @Override public void process() { System.out.println("신용카드로 결제합니다."); }
}
📌 설명:
CreditPayment 클래스는 Payment 인터페이스를 구현하여 신용카드 결제 로직을 정의한다.
process() 메서드를 오버라이딩하여 신용카드 결제 방식에 맞게 동작하도록 한다.
/* 카카오페이 결제 방식 */
public class KakaoPayment implements Payment { @Override public void process() { System.out.println("카카오페이로 결제합니다."); }
}
📌 설명:
KakaoPayment 클래스는 Payment 인터페이스를 구현하여 카카오페이 결제 로직을 정의한다.
process() 메서드를 오버라이딩하여 카카오페이 결제 방식에 맞게 동작하도록 한다.
public class PaymentTest { public static void main(String[] args) { PaymentProcessor processor = new PaymentProcessor(); // 신용카드 결제 Payment creditPayment = new CreditPayment(); processor.processPayment(creditPayment); // 카카오페이 결제 Payment kakaoPayment = new KakaoPayment(); processor.processPayment(kakaoPayment); }
}
신용카드로 결제합니다.
카카오페이로 결제합니다. 기존 코드(PaymentProcessor)를 수정하지 않고, 새로운 결제 방식을 추가할 수 있다.
예를 들어, PayPal, 삼성페이, 네이버페이 등의 결제 방식을 추가할 경우, 새로운 클래스를 만들고 Payment 인터페이스만 구현하면 된다. 각 결제 방식이 독립적인 클래스로 존재하므로, 특정 결제 방식의 변경이 다른 코드에 영향을 주지 않는다. Payment 인터페이스를 통해 다양한 결제 방식을 동일한 방식으로 처리할 수 있다.
예를 들어, PayPal 결제 방식을 추가한다고 가정하자.public class PayPalPayment implements Payment { @Override public void process() { System.out.println("PayPal로 결제합니다."); }
}
그리고 PaymentTest에서 사용하면 된다.// PayPal 결제 방식 추가
Payment paypalPayment = new PayPalPayment();
processor.processPayment(paypalPayment);
👉 기존 코드(PaymentProcessor)를 수정하지 않고 새로운 결제 방식 추가 가능!
인터페이스(Payment)를 활용해 결제 방식의 공통 규약을 정의
구체적인 결제 방식(CreditPayment, KakaoPayment)을 인터페이스 구현
결제 처리 클래스(PaymentProcessor)는 인터페이스를 사용하여 결제 수행
OCP 원칙을 준수하여 새로운 결제 방식 추가가 용이
]]></description><link>https://64etuor.github.io/600_tech-stack/solid-원칙/oop-실습-ocp-원칙-예제.html</link><guid isPermaLink="false">600_Tech Stack/SOLID 원칙/OOP 실습 - OCP 원칙 예제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 02:07:33 GMT</pubDate></item><item><title><![CDATA[Single Responsibility Principle (SRP) 적용 예제]]></title><description><![CDATA[단일 책임 원칙(SRP, Single Responsibility Principle) 은 SOLID 원칙 중 하나로, "클래스는 단 하나의 책임만 가져야 한다."는 개념을 따른다.
즉, 하나의 클래스는 하나의 기능만을 담당해야 하며, 여러 개의 책임을 가지면 안 된다.본 예제에서는 직원의 급여 계산 및 관리 시스템을 SRP에 맞게 설계하여, 각각의 역할을 분리함으로써 유지보수성과 확장성을 높인다.
Employee 클래스는 직원 정보를 저장하는 역할만 담당한다.
PayCalculator 클래스는 급여 계산만 담당한다.
EmployeeRepository 클래스는 데이터 저장 기능을 제공한다.
TimeReporter 클래스는 근무 시간 보고를 담당한다.
각 클래스가 하나의 책임만 가지도록 분리되어 SRP를 준수함! ✅
/* 직원 정보를 저장하는 클래스 */
public class Employee { private String name; private int workingHours; private int payRate; public Employee(String name, int workingHours, int payRate) { this.name = name; this.workingHours = workingHours; this.payRate = payRate; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getWorkingHours() { return workingHours; } public void setWorkingHours(int workingHours) { this.workingHours = workingHours; } public int getPayRate() { return payRate; } public void setPayRate(int payRate) { this.payRate = payRate; }
}
📌 설명: Employee 클래스는 직원의 이름, 근무 시간, 시급 정보를 관리한다.
이 클래스는 직원 정보 저장만 담당하며, 급여 계산이나 데이터 저장 등의 기능은 포함하지 않는다. (SRP 준수)
/* 급여를 계산하는 클래스 */
public class PayCalculator { public void calculatePay(Employee emp) { int pay = emp.getWorkingHours() * emp.getPayRate(); System.out.println(emp.getName() + "의 급여는 " + pay + "원입니다."); }
}
📌 설명: PayCalculator 클래스는 급여 계산만 담당한다.
만약 급여 계산 로직이 변경되더라도, Employee 클래스에는 영향을 미치지 않는다. (SRP 준수)
/* 직원 정보를 저장하는 클래스 */
public class EmployeeRepository { public void save(Employee employee) { validateEmployeeData(employee); System.out.println(employee.getName() + "의 정보를 데이터베이스에 저장했습니다."); } /* 직원 데이터 유효성 검사 (외부에서 호출되지 않도록 private 지정) */ private void validateEmployeeData(Employee employee) { if(employee == null) throw new IllegalArgumentException("직원 정보가 null일 수 없습니다."); if(employee.getName() == null || employee.getName().trim().isEmpty()) throw new IllegalArgumentException("직원 이름은 필수 입니다."); }
}
📌 설명: EmployeeRepository 클래스는 직원 데이터를 데이터베이스에 저장하는 역할을 수행한다.
validateEmployeeData() 메서드를 통해 데이터 유효성 검사를 수행하여 안전한 데이터 저장을 보장한다.
이 클래스는 급여 계산이나 근무 시간 보고 기능을 포함하지 않는다. (SRP 준수)
/* 근무 시간을 보고하는 클래스 */
public class TimeReporter { public void reportHours(Employee employee) { validateWorkingHours(employee); System.out.println(employee.getName() + "의 근무 시간을 보고합니다 : " + employee.getWorkingHours()); } /* 근무 시간 유효성 검사 */ private void validateWorkingHours(Employee employee) { if(employee.getWorkingHours() &gt; 52) { System.out.println("경고 : 52시간을 초과하는 근무시간이 기록되었습니다."); } }
}
📌 설명: TimeReporter 클래스는 직원의 근무 시간을 보고하는 역할만 수행한다.
validateWorkingHours() 메서드를 통해 52시간 초과 여부를 확인한다.
급여 계산이나 데이터 저장 기능과 분리되어 있음 (SRP 준수)
public class Application { public static void main(String[] args) { /* 직원 객체 생성 (이름, 근무 시간, 시급) */ Employee employee = new Employee("홍길동", 40, 25000); /* 급여 계산 */ PayCalculator payCalculator = new PayCalculator(); payCalculator.calculatePay(employee); /* 데이터베이스 저장 */ EmployeeRepository employeeRepository = new EmployeeRepository(); employeeRepository.save(employee); /* 근무 시간 보고 */ TimeReporter timeReporter = new TimeReporter(); timeReporter.reportHours(employee); }
}
홍길동의 급여는 1000000원입니다.
홍길동의 정보를 데이터베이스에 저장했습니다.
홍길동의 근무 시간을 보고합니다 : 40
💡 각 클래스가 명확한 역할을 수행하며 SRP를 준수함!
각 클래스가 하나의 책임만 가지므로, 특정 기능이 변경될 때 다른 클래스에 영향을 주지 않는다.
예를 들어, 급여 계산 방식이 변경되어도 PayCalculator만 수정하면 된다. PayCalculator, EmployeeRepository, TimeReporter는 독립적인 클래스이므로 다른 시스템에서도 쉽게 재사용할 수 있다. 단일 책임을 가지는 클래스는 테스트가 쉬워지고, 단위 테스트(Unit Test)가 더욱 직관적으로 작성될 수 있다.
이번 예제에서는 Single Responsibility Principle(SRP)를 준수하는 설계 방식을 학습했다.
이를 통해 각 클래스가 하나의 역할만 담당하도록 설계하는 방법을 익혔다.
직원 정보(Employee)와 각 기능(PayCalculator, EmployeeRepository, TimeReporter)을 분리 각 클래스가 하나의 책임만 가지도록 설계하여 SRP 준수 SRP 적용을 통해 유지보수성과 확장성이 뛰어난 코드 구현 이 방식대로 설계하면, 실제 애플리케이션에서도 모듈화가 뛰어난 시스템을 만들 수 있다! 🚀]]></description><link>https://64etuor.github.io/600_tech-stack/solid-원칙/oop-실습-srp-적용-예제.html</link><guid isPermaLink="false">600_Tech Stack/SOLID 원칙/OOP 실습 - SRP 적용 예제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Interface Segregation Principle (ISP) 적용 예제]]></title><description><![CDATA[Interface Segregation Principle(ISP, 인터페이스 분리 원칙)은 SOLID 원칙 중 하나로, "클라이언트는 자신이 사용하지 않는 메서드에 의존하지 않아야 한다."는 개념을 따른다.
즉, 인터페이스를 작게 유지하여 필요한 기능만 제공하도록 분리해야 한다.본 예제에서는 프린터 시스템을 인터페이스 분리 원칙에 따라 설계하여, 단일 기능 프린터(BasicPrinter)와 다기능 프린터(AdvancedPrinter)가 불필요한 의존성을 갖지 않도록 한다.
PrintOnly, Scanner, FaxMachine 인터페이스를 분리하여 각각의 기능을 정의하였다.
MultiFunctionPrinter 인터페이스는 여러 기능을 조합하여 다기능 프린터를 지원하도록 설계되었다.
BasicPrinter는 PrintOnly만 구현하여 단일 기능만 수행하도록 하였다.
AdvancedPrinter는 MultiFunctionPrinter를 구현하여 여러 기능을 수행할 수 있도록 하였다.
/* 프린터의 기본 기능을 위한 인터페이스 */
public interface PrintOnly { void print();
}
📌 설명:
PrintOnly 인터페이스는 출력(프린트) 기능만 포함하도록 설계되었다.
BasicPrinter는 이 인터페이스만 구현하여 불필요한 기능을 갖지 않도록 제한한다.
/* 스캐너 기능을 위한 인터페이스 */
public interface Scanner { void scan();
}
📌 설명:
Scanner 인터페이스는 스캔 기능만을 담당한다.
단순 프린터에는 필요하지 않으며, 다기능 프린터만 이를 구현한다.
/* 팩스 기능을 위한 인터페이스 */
public interface FaxMachine { void fax();
}
📌 설명:
FaxMachine 인터페이스는 팩스 전송 기능만을 포함하도록 분리되었다.
BasicPrinter는 불필요한 팩스 기능을 포함하지 않으며, 필요한 경우 AdvancedPrinter가 이를 구현한다.
/* 최신 다기능 프린터를 위한 인터페이스 */
public interface MultiFunctionPrinter extends PrintOnly, Scanner, FaxMachine {
}
📌 설명:
MultiFunctionPrinter 인터페이스는 여러 기능(PrintOnly, Scanner, FaxMachine)을 조합한 다기능 프린터 인터페이스이다.
단일 기능 프린터는 이를 구현할 필요가 없으며, 다기능 프린터만 이를 구현하도록 한다.
/* 기본 프린터 (프린트 기능만 제공) */
public class BasicPrinter implements PrintOnly { @Override public void print() { System.out.println("기본 프린터가 프린트를 합니다."); }
}
📌 설명:
BasicPrinter는 PrintOnly 인터페이스만 구현하여 프린트 기능만 제공한다.
불필요한 기능(팩스, 스캔)이 포함되지 않으므로, 인터페이스 분리 원칙을 준수한다.
/* 최신 다기능 프린터 (프린트, 스캔, 팩스 기능 제공) */
public class AdvancedPrinter implements MultiFunctionPrinter { @Override public void fax() { System.out.println("최신식 프린터가 팩스를 전송합니다."); } @Override public void print() { System.out.println("최신식 프린터가 프린트합니다."); } @Override public void scan() { System.out.println("최신식 프린터가 스캔합니다."); }
}
📌 설명:
AdvancedPrinter는 MultiFunctionPrinter를 구현하여 모든 기능(프린트, 스캔, 팩스)을 제공한다.
필요한 기능만 구현할 수 있도록 인터페이스를 분리하여 ISP를 준수했다.
public class Application { public static void main(String[] args) { PrintOnly printOnly = new BasicPrinter(); printOnly.print(); MultiFunctionPrinter multiFunctionPrinter = new AdvancedPrinter(); multiFunctionPrinter.print(); multiFunctionPrinter.fax(); multiFunctionPrinter.scan(); }
}
기본 프린터가 프린트를 합니다.
최신식 프린터가 프린트합니다.
최신식 프린터가 팩스를 전송합니다.
최신식 프린터가 스캔합니다.
💡 단일 기능 프린터와 다기능 프린터가 각각의 역할을 수행하며 ISP를 준수함!
BasicPrinter는 프린트 기능만 구현하며, 팩스나 스캔 기능을 강제하지 않음.
AdvancedPrinter는 필요한 기능을 선택적으로 구현 가능. 새로운 프린터가 추가될 때, 필요한 기능만 구현하면 되므로 유지보수 부담이 적음.
예를 들어, ScannerOnlyPrinter를 추가할 경우 Scanner 인터페이스만 구현하면 됨. ISP는 SRP(단일 책임 원칙)과도 연관이 있음. 각 인터페이스는 하나의 역할만 수행하므로, 기능 확장이 쉬워짐. 인터페이스를 분리하여 필요한 기능만 제공
단일 기능 프린터(BasicPrinter)와 다기능 프린터(AdvancedPrinter)를 각각 구현
ISP 적용을 통해 불필요한 의존성을 제거하고 유지보수성을 향상
OCP(개방-폐쇄 원칙)도 준수하여 새로운 프린터 기능을 쉽게 추가 가능
]]></description><link>https://64etuor.github.io/600_tech-stack/solid-원칙/oop-실습-isp-적용-예제.html</link><guid isPermaLink="false">600_Tech Stack/SOLID 원칙/OOP 실습 - ISP 적용 예제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Liskov Substitution Principle (LSP) 적용 예제]]></title><description><![CDATA[Liskov Substitution Principle(LSP, 리스코프 치환 원칙)은 SOLID 원칙 중 하나로, "서브타입은 언제나 기반 타입으로 대체할 수 있어야 한다."는 개념을 따른다.
즉, 상위 클래스의 인스턴스를 사용하는 코드에서, 하위 클래스로 대체해도 정상적으로 동작해야 한다.본 예제에서는 Rectangle(직사각형)과 Square(정사각형)를 별도의 타입으로 정의하여 LSP를 준수하는 구조를 구현한다.
Shape 인터페이스는 도형의 공통적인 속성을 정의하며, 넓이를 계산하는 getArea() 메서드를 포함한다.
Rectangle과 Square는 각각 Shape 인터페이스를 구현하며, 서로 다른 방식으로 넓이를 계산한다.
Rectangle과 Square를 별도 클래스로 분리하여, Liskov Substitution Principle을 위반하지 않도록 설계하였다.
/* 모든 도형이 따라야 할 인터페이스 */
public interface Shape { int getArea(); // 넓이를 계산하는 메서드
}
📌 설명:
Shape 인터페이스는 공통된 동작(넓이 계산)을 정의한다.
Rectangle과 Square 클래스는 이를 구현하며, 각각의 넓이 계산 방법을 제공한다.
/* 직사각형을 나타내는 클래스 */
public class Rectangle implements Shape { private final int width; private final int height; public Rectangle(int width, int height) { this.width = width; this.height = height; } @Override public int getArea() { return width * height; }
}
📌 설명:
Rectangle 클래스는 Shape 인터페이스를 구현하며, 직사각형의 넓이를 계산하는 기능을 제공한다.
width(가로)와 height(세로)를 생성자를 통해 설정하고, getArea()에서 넓이를 반환한다.
/* 정사각형을 나타내는 클래스 */
public class Square implements Shape { private final int side; public Square(int side) { this.side = side; } @Override public int getArea() { return (int) Math.pow(side, 2); }
}
📌 설명:
Square 클래스는 Shape 인터페이스를 구현하며, 정사각형의 넓이를 계산하는 기능을 제공한다.
side(한 변의 길이)를 생성자로 받아, getArea()에서 넓이를 반환한다.
public class Application { public static void main(String[] args) { Shape rectangle = new Rectangle(5, 10); System.out.println("직사각형의 넓이 : " + rectangle.getArea()); Shape square = new Square(5); System.out.println("정사각형의 넓이 : " + square.getArea()); }
}
직사각형의 넓이 : 50
정사각형의 넓이 : 25
💡 LSP를 준수하므로, Shape 타입을 사용하는 코드에서 Rectangle과 Square를 안전하게 대체할 수 있다!
Rectangle과 Square를 개별 클래스로 분리하여, 각각의 객체가 올바른 동작을 수행하도록 보장한다.
기존 코드(Shape 인터페이스를 사용하는 코드)를 수정하지 않고 새로운 도형을 추가할 수 있다. Shape 인터페이스를 기반으로 설계했기 때문에, 새로운 도형(Circle, Triangle 등)을 추가할 때 기존 클래스를 수정할 필요가 없다. 만약 Square가 Rectangle을 상속받았다면, setWidth()와 setHeight() 같은 메서드가 존재할 것이고, 정사각형의 특징(가로=세로)이 깨질 수 있다.
현재 방식은 이러한 문제를 방지하며, LSP를 위반하지 않는다. 인터페이스(Shape)를 활용하여 공통 기능을 추상화
각 도형(Rectangle, Square)을 별도의 클래스로 정의하여 LSP 준수
LSP를 적용하여 유지보수성이 뛰어난 유연한 설계를 구현
OCP(개방-폐쇄 원칙)도 함께 준수하여 확장성이 뛰어난 구조
]]></description><link>https://64etuor.github.io/600_tech-stack/solid-원칙/oop-실습-리스코프-치환-적용-예제.html</link><guid isPermaLink="false">600_Tech Stack/SOLID 원칙/OOP 실습 - 리스코프 치환 적용 예제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Java Stream Intermediate and Terminal Operations]]></title><description><![CDATA[Java Streams provide a powerful way to process collections of data in a functional style. Stream operations are divided into intermediate and terminal operations. Understanding these two categories helps in writing efficient and readable code.Intermediate operations transform a stream into another stream. These operations are lazy, meaning they do not execute until a terminal operation is called.Example Usage:List&lt;String&gt; names = List.of("Alice", "Bob", "Charlie", "Alice");
names.stream() .distinct() .filter(name -&gt; name.startsWith("A")) .map(String::toUpperCase) .forEach(System.out::println);
Terminal operations consume a stream and return a result (or a side effect). Once a terminal operation is invoked, the stream cannot be reused.Example Usage:List&lt;Integer&gt; numbers = List.of(1, 2, 3, 4, 5);
long count = numbers.stream().filter(n -&gt; n &gt; 2).count();
System.out.println("Count: " + count);
]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-stream-intermediate-and-terminal-operations.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java Stream Intermediate and Terminal Operations.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 28 Feb 2025 09:45:40 GMT</pubDate></item><item><title><![CDATA[[Java] 기본형 배열과 컬렉션 자료형 정렬하기]]></title><description><![CDATA[[Java] 정렬 메서드 비교와 정리]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-기본형-배열과-컬렉션-자료형-정렬하기.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java 기본형 배열과 컬렉션 자료형 정렬하기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 27 Feb 2025 07:50:00 GMT</pubDate></item><item><title><![CDATA[Understanding the Singletone Pattern]]></title><description><![CDATA[The Singleton Pattern is a design pattern used to ensure that a class has only one instance and provides a global access point to that instance. It is widely used in applications that require a single shared resource, such as a configuration manager, logging service, or database connection pool.The Singleton pattern is essential in scenarios where it is crucial to have only one instance of a class running within an application. Some key benefits include:
Resource Control: Ensures controlled access to shared resources like database connections, file systems, and network sockets.
Global Access: Provides a single, centralized access point for essential services.
Lazy Initialization: Can delay object creation until it is needed, optimizing performance and resource usage.
Thread Safety: Prevents issues caused by multiple threads trying to create multiple instances.
Avoids Redundant Instances: Prevents multiple instances that could lead to inconsistent states or excessive memory usage.
The Singleton pattern restricts instantiation so that only one object of the class exists throughout the application.Singleton provides a static method to access the instance globally.
Eager Initialization: The instance is created at the time of class loading.
Lazy Initialization: The instance is created only when it is first requested.
class Singleton { private static Singleton instance; private Singleton() {} public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; }
}
Problem: This approach is not thread-safe. Multiple threads may create separate instances.class Singleton { private static Singleton instance; private Singleton() {} public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; }
}
Drawback: The synchronized keyword may lead to performance issues due to unnecessary locking.class Singleton { private static volatile Singleton instance; private Singleton() {} public static Singleton getInstance() { if (instance == null) { synchronized (Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; }
}
Advantage: Reduces synchronization overhead while ensuring thread safety.class Singleton { private Singleton() {} private static class SingletonHelper { private static final Singleton INSTANCE = new Singleton(); } public static Singleton getInstance() { return SingletonHelper.INSTANCE; }
}
Advantage: Uses an inner static helper class for lazy initialization without synchronization overhead.enum Singleton { INSTANCE; public void doSomething() { System.out.println("Singleton using Enum"); }
}
Advantage: Ensures thread safety, serialization safety, and prevents reflection-based attacks.
Configuration Management: Ensures a single shared instance of configuration settings.
Logging: A single logging instance is used across the application.
Thread Pools: Manages limited resources effectively.
Database Connections: Avoids redundant connections.
Caching: Ensures data is accessed efficiently without redundant computations.
Device Management: Used in applications that interact with hardware where only one instance should exist (e.g., printers, sensors).
The Singleton pattern is a powerful tool for managing shared resources efficiently. Different implementations cater to specific use cases, ensuring thread safety and performance optimization. Using modern approaches like Bill Pugh Singleton or Enum Singleton is recommended for most Java applications.]]></description><link>https://64etuor.github.io/600_tech-stack/java/understanding-the-singletone-pattern.html</link><guid isPermaLink="false">600_Tech Stack/Java/Understanding the Singletone Pattern.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 27 Feb 2025 02:39:41 GMT</pubDate></item><item><title><![CDATA[Java Set Indexing]]></title><description><![CDATA[Java's Set interface is a collection that does not allow duplicate elements. Unlike lists, Set does not maintain insertion order unless a specific implementation provides ordering guarantees. This document explores why Set does not support indexing, how elements are stored, and the internal mechanics of different Set implementations.Unlike List, which is an ordered collection where elements can be accessed using an index, Set implementations prioritize uniqueness over order. The key reasons Set does not support indexing are:
Mathematical Definition of a Set: In set theory, a set is an unordered collection of distinct elements. Java follows this principle by not associating elements with positions.
Efficiency Considerations: Set implementations like HashSet use hash tables to ensure constant-time performance for insertions, deletions, and lookups. Maintaining order would introduce extra overhead.
No Direct Positional Access: Since elements are not stored in a contiguous block like an array or ArrayList, direct access via index (set.get(index)) is not possible.
HashSet is backed by a HashMap internally, which uses a hash table to store elements. The key characteristics are:
No ordering: Elements are placed in buckets based on their hash codes.
O(1) average-time complexity for add, remove, and contains operations.
Resizing behavior: When the number of elements exceeds the load factor threshold, the underlying array expands and elements are rehashed.
Internal Structure:class HashSet&lt;E&gt; { private transient HashMap&lt;E, Object&gt; map; private static final Object PRESENT = new Object(); public HashSet() { map = new HashMap&lt;&gt;(); } public boolean add(E e) { return map.put(e, PRESENT) == null; }
}
Here, HashSet wraps a HashMap, using the element as a key and a constant dummy object as a value.LinkedHashSet extends HashSet but maintains a linked list of entries, preserving insertion order.
Maintains order: Elements appear in the order they were inserted.
Performance overhead: Slightly slower than HashSet due to maintaining a linked list.
Internal Structure:class LinkedHashSet&lt;E&gt; extends HashSet&lt;E&gt; { private transient LinkedHashMap&lt;E, Object&gt; map;
}
LinkedHashSet internally uses a LinkedHashMap, which maintains a doubly linked list of entries.TreeSet ensures elements are sorted based on their natural ordering or a custom comparator.
Uses TreeMap internally, which is a self-balancing Red-Black Tree.
O(log n) time complexity for insert, remove, and search operations.
Maintains sorting order, making it ideal when sorted iteration is needed.
Internal Structure:class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt; implements NavigableSet&lt;E&gt; { private transient NavigableMap&lt;E,Object&gt; map;
}
Since Set does not provide index-based access, the common workaround is converting it to a list:Set&lt;String&gt; set = new HashSet&lt;&gt;();
set.add("apple");
set.add("banana");
set.add("cherry"); List&lt;String&gt; list = new ArrayList&lt;&gt;(set);
System.out.println(list.get(1)); // Access element by index
Alternatively, for an ordered set, use LinkedHashSet or TreeSet and iterate through elements using an Iterator:Iterator&lt;String&gt; iterator = set.iterator();
for (int i = 0; i &lt; desiredIndex; i++) { iterator.next();
}
System.out.println(iterator.next());
Java's Set does not support indexing due to its emphasis on uniqueness and efficiency. While HashSet offers fast operations without order, LinkedHashSet maintains insertion order, and TreeSet sorts elements automatically. To access elements by index, converting to a List or using an iterator is required. Understanding these internal workings helps in selecting the right Set implementation for different use cases.]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-set-indexing.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java Set Indexing.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 27 Feb 2025 02:19:42 GMT</pubDate></item><item><title><![CDATA[Java Covariance, Invariance, Subtypes, and Supertypes]]></title><description><![CDATA[In programming, type relationships determine how one type of object can be used in place of another. Java, being statically typed, enforces these relationships at compile time, whereas Python's dynamic typing handles them more flexibly at runtime. This document breaks down key concepts — subtypes, supertypes, covariance, and invariance — in simple terms. We’ll use Java examples to illustrate these ideas and compare them to Python to highlight the differences. Diagrams and code snippets will help clarify how types relate to each other.In object-oriented programming, a subtype is a type that is a specialized version of another type. The more general type is the supertype. If class B extends class A (or implements interface A), then B is a subtype of A, and A is a supertype of B. This is often called an "is-a" relationship: a B is an A. Subtype: A derived or child class. Supertype: A base or parent class. For example, consider a simple class inheritance in Java:class Animal { void speak() { System.out.println("Animal speaks"); }
} class Dog extends Animal { void speak() { System.out.println("Dog barks"); }
}
Here, Dog is a subtype of Animal, and Animal is a supertype of Dog. This means you can use a Dog wherever an Animal is expected:Animal genericAnimal = new Animal();
Dog specificDog = new Dog(); Animal anotherAnimal = specificDog; // OK: Dog is an Animal (subtype to supertype)
anotherAnimal.speak(); // Calls Dog's speak method (polymorphism)
In the code above, assigning specificDog (a Dog) to an Animal reference is allowed because a Dog is an Animal. This implicit upcasting is safe — any behavior expected of Animal is fulfilled by Dog since Dog inherits Animal’s characteristics. Diagram – Inheritance Hierarchy (Subtype/Supertype): Animal (supertype) └── Dog (subtype of Animal)
Multiple levels are possible: for instance, if Dog extends Animal and Poodle extends Dog, then Poodle is a subtype of both Dog and Animal. A subtype can be used anywhere its supertype is expected (this is the Liskov Substitution Principle in OOP). Python Comparison: In Python, classes can inherit in a similar way. A subclass instance can be used wherever a base class is expected because Python is dynamically typed (it won’t check types at assignment). For example:class Animal: def speak(self): print("Animal speaks") class Dog(Animal): def speak(self): print("Dog barks") generic_animal = Animal()
specific_dog = Dog() generic_animal = specific_dog # This is fine in Python (dynamic typing)
generic_animal.speak() # Prints "Dog barks"
Python allows generic_animal = specific_dog without complaint at runtime. However, Python doesn’t require you to declare variable types, so there’s no compile-time type check as in Java. If you use type hints (e.g., generic_animal: Animal = specific_dog), static type checkers like mypy will also consider Dog a valid subtype of Animal due to inheritance.Variance describes how subtyping between complex types relates to subtyping between their component types. Two common variance scenarios are covariance and invariance (and a related concept, contravariance, which we’ll touch on). These terms often come up with generic types (like List&lt;T&gt;) and arrays.
Covariance (in type parameters): means a type can accept subtypes. If X is a subtype of Y, a covariant structure of X can be used as a structure of Y. In other words, it preserves the subtype relationship. Invariance: means no subtype relationship is preserved between parameterized types. Even if X is a subtype of Y, Generic&lt;X&gt; is not a subtype of Generic&lt;Y&gt;. Let's break this down with Java examples:Java arrays are covariant. This means if class Cat extends Animal, then not only is Cat an Animal, but Cat[] is an Animal[] (array of cats is considered a subtype of array of animals). For instance:Animal[] animals = new Animal[2];
animals[0] = new Animal(); // We can assign a Cat[] to an Animal[] because arrays are covariant:
Cat[] cats = new Cat[2];
animals = cats; // This is allowed at compile time (Cat[] is an Animal[])
At compile time, this looks OK due to covariance (every Cat is an Animal, so an array of Cat is an array of Animal). However, array covariance can lead to runtime errors. In the above example, animals actually refers to a Cat[]. If we try to put a different Animal (not a Cat) into this array, the Java runtime will throw an ArrayStoreException:animals[1] = new Dog(); // Runtime error: java.lang.ArrayStoreException // (we tried to put a Dog into an array that is actually Cat[])
The array knew its real type at runtime and prevented us from storing a Dog in a Cat[]. This is a downside of covariance — it’s flexible but requires runtime type checks for safety.Java generics are invariant by design. Invariance means you cannot substitute Generic&lt;SubType&gt; where Generic&lt;SuperType&gt; is expected (or vice versa), even if the contained types are subtype/supertype. For example, since Integer is a subtype of Number, one might expect List&lt;Integer&gt; to be a subtype of List&lt;Number&gt;. But in Java generics, List&lt;Integer&gt; is NOT a subtype of List&lt;Number&gt;. The compiler will throw an error if you try to do such an assignment:List&lt;Number&gt; numbers = new ArrayList&lt;Number&gt;();
List&lt;Integer&gt; ints = new ArrayList&lt;Integer&gt;(); numbers = ints; // Compile-time error! Invariant generics (no subtype relationship)
The code above does not compile, protecting us from the kind of runtime error we saw with arrays. If Java allowed this assignment, we could potentially insert a Double into numbers (thinking it’s a list of Number), but that list is actually holding Integer objects – a type mismatch that would break type safety. By making generics invariant, Java catches these errors at compile time rather than at runtime. In short, invariance provides stricter type safety.Key point: Given two types A and B where B is a subtype of A, List&lt;B&gt; is not a subtype of List&lt;A&gt; in Java. The only common supertype between List&lt;Number&gt; and List&lt;Integer&gt; is a raw List (or List&lt;?&gt; with an unknown wildcard).Java generics themselves are invariant, but Java provides wildcards to allow flexibility when you need to treat generic types in a covariant or contravariant way. Wildcards are denoted by ? and can be bounded with extends (upper bound) or super (lower bound):
? extends SomeType is an upper-bounded wildcard. It allows reading as SomeType (or a supertype) from the generic structure, making it covariant (you can think "producer extends": it produces elements of at most that type). For example, List&lt;? extends Number&gt; means a list of some unknown subclass of Number. You can read elements as type Number from it. ? super SomeType is a lower-bounded wildcard. It allows writing SomeType (or its subtype) into the structure, making it contravariant ("consumer super": it can consume elements of that type). For example, List&lt;? super Number&gt; means a list of some unknown superclass of Number (could be Number, Object, etc.). You can add a Number (or subclass, like Integer) to it, but when you read from it, you only know you get an Object.
Covariant (extends) example: List&lt;Integer&gt; intList = new ArrayList&lt;&gt;();
intList.add(42); List&lt;? extends Number&gt; numList = intList; // OK: List&lt;? extends Integer&gt; is a subtype of List&lt;? extends Number&gt; Number n = numList.get(0); // We can read a Number (as Integer) from numList
// numList.add(55); // ERROR: can't add, list could be of a subclass of Number where 55 might not fit
In this example, numList can reference any List of some subtype of Number (like Integer, Double, etc.). We can safely treat elements from numList as Number when reading. However, we cannot add to numList because we don't know the exact subtype it holds – the type system prevents potentially inserting a wrong type.Contravariant (super) example: List&lt;Number&gt; numList2 = new ArrayList&lt;&gt;();
numList2.add(3.14); List&lt;? super Integer&gt; objList = numList2; objList.add(10); // OK: we can add Integer to it (as it expects Integer or any supertype)
Object x = objList.get(0); // We get an Object out (could be anything that was in the list)
Here, objList can reference any List of some supertype of Integer (that could be Integer itself, Number, or Object). We know we can add an Integer to it (because whatever the actual list type is, it must accept Integer – e.g., a List&lt;Number&gt; or List&lt;Object&gt; will accept an Integer). But when reading, we only know we get an Object back, since the list might actually hold broader types than Integer.To summarize wildcard usage:
Use ? extends T when you only need to read from a generic structure (covariant producer). Think "I need a list of something that extends T, I will only take items out."
Use ? super T when you only need to write to a generic structure (contravariant consumer). Think "I need a list of something that is a supertype of T, I will only put T's in."
If you need to both read and write, and types must match exactly, invariance (no wildcard) is usually required.
These wildcard capabilities let Java generics be flexible while preserving type safety. They create a type relationship where, for example, List&lt;? extends Integer&gt; is considered a subtype of List&lt;? extends Number&gt;, even though List&lt;Integer&gt; is not a subtype of List&lt;Number&gt;.Diagram – Java Generic Type Hierarchy (Wildcards): List&lt;?&gt; (all lists of unknown type) / \ List&lt;? extends Number&gt; List&lt;? super Number&gt; (covariant and contravariant bounds) | | v v
List&lt;? extends Integer&gt; List&lt;? super Integer&gt; (bounded further to Integer) | | v v List&lt;Integer&gt; List&lt;Integer&gt; (concrete list types) List&lt;Number&gt; List&lt;Number&gt; List&lt;Double&gt; (etc.)
Explanation: In the diagram, List&lt;?&gt; is a supertype of any List&lt;...&gt;. Under it, List&lt;? extends Number&gt; represents all lists that hold some subtype of Number (like Integer, Double), and List&lt;? super Number&gt; represents all lists that hold some supertype of Number (like Number itself or Object). A List&lt;Integer&gt; can be seen through an extends Integer wildcard or a super Integer wildcard, but List&lt;Integer&gt; and List&lt;Number&gt; are in separate branches and are unrelated without wildcards. The wildcards establish a subtype relationship between these more specific generic types as shown.Python is dynamically typed, which means variables don’t have fixed types, and type relationships are not enforced at assignment. Subtyping in Python (through class inheritance) exists, but without static type checks, you can always use an instance of a subclass wherever a base class instance is expected – Python will only error out if you try to call an attribute or method that doesn’t exist.For example, analogous to Java:class Animal: def speak(self): print("Animal speaks")
class Dog(Animal): def speak(self): print("Dog barks") def let_animal_speak(animal: Animal): animal.speak() dog = Dog()
let_animal_speak(dog) # Dog is an Animal, prints "Dog barks"
This works seamlessly in Python at runtime. Even without type annotations, let_animal_speak(dog) would work because Python is happy as long as dog has a .speak() method. Python’s philosophy is often summarized as “duck typing”: if it quacks like a duck, it’s treated as a duck.When it comes to covariance and invariance, Python’s runtime doesn’t impose these because it doesn’t have generic types the way Java does. You can put any objects in a Python list, and you can assign a list to another variable without regard to what’s inside. For instance:animals = ["lion", "tiger"] # a list of str (animals)
numbers = [1, 2, 3] # a list of int (numbers) animals = numbers # Python allows this assignment
animals.append("elephant") # Now animals list has an int and a str coexisting
print(numbers) # numbers is the same list as animals (alias), now containing int and str
Python will cheerfully let you mix types in a list. The concept of variance doesn't apply at runtime because there's no type checker stopping you. However, this flexibility means type errors surface at runtime if you make wrong assumptions. For example, if you assumed all items in numbers were integers and later try to sum them, you might get a TypeError once a string is in there. In Java, such a situation is prevented by the type system.Python with Type Hints: Starting with Python 3.x, we have optional type hints and generics in the typing module (e.g., List[int]). Tools like mypy use these to perform static type checking. In the world of Python type hints, variance plays a role:
By default, user-defined generics and most built-in collections (like list) are invariant in their type parameters. That means from a static type perspective, a List[Dog] is not a List[Animal], similar to Java’s invariance for generics. If you try to assign one to the other, mypy will error.
Some immutable collections in typing are defined as covariant, e.g. Tuple[T, ...] or Sequence[T] can be covariant in T because they don’t allow mutation that would violate type safety. For instance, tuple[Dog] is considered a subtype of tuple[Animal] in static typing, since a tuple of Dogs can be used wherever a tuple of Animals is expected (you can only read from the tuple).
Python’s TypeVar can be marked as covariant=True or contravariant=True when defining generic classes to indicate desired variance (for advanced use in type checking).
To illustrate, using Python type hints:from typing import List animals: List[Animal] = [Animal()]
dogs: List[Dog] = [Dog()] animals = dogs # Mypy static check error: incompatible types (List[Dog] is not List[Animal])
Mypy would complain because List is invariant – you cannot assign a List[Dog] to a variable of type List[Animal]. This is analogous to Java generics. The reason is to prevent exactly the scenario shown above (mixing unexpected types into a list). If you truly wanted to allow animals = dogs in a type-safe way, you might annotate animals: Sequence[Animal] instead (since Sequence is covariant and read-only in terms of type checking).At runtime, of course, Python will still perform the assignment without issue; the type hinting system is only for static analysis. There is no equivalent of Java’s ArrayStoreException in Python – if you append an incompatible object, it will just be in the list and may cause errors later when used.Summary of Python vs Java: Enforcement: Java enforces type relationships at compile time (and partly at runtime for arrays), whereas Python relies on the programmer (or external tools) to respect type intentions. Covariance by default: Java arrays are covariant (which can be risky), but Java generics are invariant unless explicitly made variant with wildcards. Python’s core containers are flexible at runtime, but in static typing contexts, they are invariant (mutable types) or covariant (immutable types) depending on the design. Subtypes usage: Both Java and Python allow using subclass instances where a base class is expected (classic polymorphism). Java will require explicit casting in some scenarios; Python will just try to use the object and error out later if it doesn’t have the needed attributes. Subtypes &amp; Supertypes: Describe inheritance hierarchy. A subclass (subtype) can stand in for its superclass (supertype). This is fundamental to polymorphism in both Java and Python. Covariance: Think "flexible in what it can hold/assign". In Java, arrays are covariant (e.g., Cat[] is an Animal[]), which allows assignments that could lead to runtime errors (guarded by ArrayStoreException). In Python’s static typing, some immutable sequences are covariant because they can safely be read as broader types. Invariance: Think "strict about type matching". Java generics are invariant – Generic&lt;Child&gt; is not a Generic&lt;Parent&gt; – preventing type mix-ups at compile time. Python’s mutable collections are invariant in static typing for the same reason. Invariance provides safety by disallowing potentially unsafe substituting of generic types. Use-site variance (Java wildcards): Java uses wildcards (? extends T and ? super T) to allow some flexibility (covariant/contravariant usage) where needed, with restrictions on reading/writing to ensure type safety. This is Java's way of saying, "I don't know the exact subtype/supertype here, but I want to allow a relationship." Python vs Java typing: Python’s dynamic nature means these checks aren’t built-in at runtime – you gain flexibility but lose automatic safety. Optional type hints in Python bring the concepts of covariance/invariance into play during static analysis, much like Java’s compile-time checks, but they are not enforced at runtime.
]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-covariance,-invariance,-subtypes,-and-supertypes.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java Covariance, Invariance, Subtypes, and Supertypes.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 06:44:36 GMT</pubDate></item><item><title><![CDATA[Covariance]]></title><description><![CDATA[In object-oriented programming and type systems, covariance and invariance describe how types relate to each other in generic and collection-based contexts. These concepts are crucial for understanding Java’s type system, especially in the context of generics and arrays.A type system is covariant if a type parameter relationship follows the same direction as the original subtype relationship. That is, if A is a subtype of B, then T&lt;A&gt; is also a subtype of T&lt;B&gt;.A type system is invariant if a type parameter relationship does not follow the original subtype relationship. That is, even if A is a subtype of B, T&lt;A&gt; and T&lt;B&gt; are unrelated types.In Java, arrays are covariant, meaning an array of a subtype can be assigned to an array of its supertype.@Test
void arrayCovariance() { Integer[] integers = new Integer[]{1, 2, 3}; printArray(integers);
} void printArray(Object[] arr) { for (Object e : arr) { System.out.println(e); }
}
✔ This works because Integer[] is a subtype of Object[]. Arrays in Java support covariance.However, covariance in arrays can lead to runtime exceptions (ArrayStoreException) due to type mismatch.Object[] objArray = new Integer[5];
objArray[0] = "Hello"; // Throws ArrayStoreException
🚫 This fails at runtime because Java performs array type checking dynamically.Unlike arrays, generics in Java are invariant. That means List&lt;Integer&gt; is not a subtype of List&lt;Object&gt;.@Test
void genericInvariance() { List&lt;Integer&gt; list = Arrays.asList(1, 2, 3); printCollection(list); // Compilation error
} void printCollection(Collection&lt;Object&gt; c) { for (Object e : c) { System.out.println(e); }
}
🚫 This fails with a compilation error:java: incompatible types: java.util.List&lt;java.lang.Integer&gt; cannot be converted to java.util.Collection&lt;java.lang.Object&gt;
Even though Integer is a subtype of Object, List&lt;Integer&gt; and List&lt;Object&gt; are completely unrelated types.The reason generics are invariant is to ensure type safety. If Java allowed List&lt;Integer&gt; to be treated as List&lt;Object&gt;, it would introduce unsafe operations.For example:List&lt;Integer&gt; intList = new ArrayList&lt;&gt;();
List&lt;Object&gt; objList = intList; // Hypothetically allowed
objList.add("Hello"); // This would corrupt type safety!
🚫 This would break type safety since an Integer list now contains a String.To allow methods to work with multiple types without breaking type safety, Java introduces wildcards (?).void printCollection(Collection&lt;?&gt; c) { for (Object e : c) { System.out.println(e); }
}
✔ Now, Collection&lt;Integer&gt;, Collection&lt;String&gt;, etc., can be passed without issues.Java allows bounded wildcards to limit acceptable types.void printNumbers(List&lt;? extends Number&gt; list) { for (Number num : list) { System.out.println(num); }
}
✔ This allows List&lt;Integer&gt;, List&lt;Double&gt;, etc.🚫 But prevents adding elements (except null) because Java does not know the exact type.list.add(10); // Compilation error
If we need to allow superclasses instead of subclasses, we use ? super T.void addElements(List&lt;? super Integer&gt; list) { list.add(10); // Allowed list.add(20);
}
✔ Now, List&lt;Integer&gt;, List&lt;Number&gt;, List&lt;Object&gt; are acceptable.🚫 However, retrieving elements is restricted to Object.Integer num = list.get(0); // Compilation error
Object obj = list.get(0); // Works fine
Joshua Bloch introduced PECS:
Use ? extends T for reading (producing values).
Use ? super T for writing (consuming values).
void processList(List&lt;? extends Number&gt; producer) { // Read-only for (Number n : producer) { System.out.println(n); }
} void addValues(List&lt;? super Integer&gt; consumer) { // Write-only consumer.add(10);
}
Would you like additional explanations or modifications? 🚀]]></description><link>https://64etuor.github.io/600_tech-stack/java/covariance.html</link><guid isPermaLink="false">600_Tech Stack/Java/Covariance.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 06:19:36 GMT</pubDate></item><item><title><![CDATA[main method analysis]]></title><description><![CDATA[In Java, the main method is the entry point of any standalone application. Let's break down each keyword and understand its significance.public static void main(String[] args)
Java needs a defined starting point to execute a program. The JVM (Java Virtual Machine) searches for:public static void main(String[] args)
If it does not exist, the program will not run.
public means the method must be accessible globally.
Since Java applications are executed by the JVM, it must be able to access the method from anywhere.
If main were not public, the JVM would not be able to call it.
🔴 Incorrect (private or protected prevents execution)private static void main(String[] args) { // JVM cannot access this System.out.println("Won't run");
} static means the method belongs to the class itself, not an instance of the class.
The JVM calls main without creating an object of the class.
🔴 Incorrect (main must be static)public void main(String[] args) { // JVM cannot call non-static main System.out.println("Error");
}
✅ Correctpublic static void main(String[] args) { System.out.println("Runs correctly");
}
🔍 Why static?
If main were not static, Java would require an instance:
public class Test { public void main(String[] args) { // Non-static main System.out.println("Error"); }
} The JVM doesn't create objects automatically, so execution fails. void means the main method does not return any value.
If main had a return type (like int), Java would not know what to do with the returned value.
🔴 Incorrect (main must be void)public static int main(String[] args) { // JVM expects void return 0;
}
✅ Correctpublic static void main(String[] args) { System.out.println("Runs fine");
} main is just a method name, but Java expects it as the entry point.
Changing it to anything else will prevent execution.
🔴 Incorrect (main must be named 'main')public static void start(String[] args) { // JVM won't recognize this System.out.println("Error");
}
✅ Correctpublic static void main(String[] args) { System.out.println("Runs fine");
} args is an array of Strings that stores command-line arguments.
Example: If you run the program with:
java MyProgram Hello 123 args[0] = "Hello"
args[1] = "123" public class CommandLineExample { public static void main(String[] args) { if (args.length &gt; 0) { System.out.println("First argument: " + args[0]); } else { System.out.println("No arguments provided."); } }
}
Running:java CommandLineExample Hello
Output:First argument: Hello
✅ This works because only the parameter name changes, not the type.public static void main(String[] input) { // 'args' can be renamed System.out.println("Runs fine");
}
✅ Java allows varargs (...) instead of an array.public static void main(String... args) { // Valid alternative System.out.println("Runs fine");
}
✅ Java allows overloading, but the JVM only calls the exact signature.public class Test { public static void main(String[] args) { System.out.println("Main method"); main(5); // Calls overloaded version } public static void main(int num) { // Overloaded main method System.out.println("Overloaded main: " + num); }
}
Output:Main method
Overloaded main: 5
🔴 But this does NOT work (JVM only calls the standard signature):public static void main(int[] args) { // JVM ignores this System.out.println("Won't run automatically");
}
🔹 If any part of main is changed, the program may fail to run.
🔹 Overloading main works, but JVM only calls the standard one. ]]></description><link>https://64etuor.github.io/600_tech-stack/java/main-method-analysis.html</link><guid isPermaLink="false">600_Tech Stack/Java/main method analysis.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 05:11:24 GMT</pubDate></item><item><title><![CDATA[Generics]]></title><description><![CDATA[A generic type in Java allows you to write type-safe, reusable code by parametrizing types. This means you can write a single class, interface, or method that works with different data types without sacrificing type safety.
Type Safety – Prevents runtime errors caused by incorrect type casting.
Code Reusability – Write one class or method that works for multiple data types.
Eliminates Explicit Casting – No need for manual type conversion.
Compile-time Checking – Detects errors at compile time instead of runtime.
public class Box { private Object value; public void setValue(Object value) { this.value = value; } public Object getValue() { return value; }
} public class Main { public static void main(String[] args) { Box box = new Box(); box.setValue("Hello"); // Needs explicit casting String str = (String) box.getValue(); System.out.println(str); box.setValue(10); // Allowed, but unsafe String numStr = (String) box.getValue(); // Runtime error! }
}
💥 Problem: You can store any type in Box, leading to ClassCastException at runtime.Generics ensure type safety by specifying the data type at compile time.// Generic class with type parameter &lt;T&gt;
public class Box&lt;T&gt; { private T value; public void setValue(T value) { this.value = value; } public T getValue() { return value; }
} public class Main { public static void main(String[] args) { // Type-safe: Box&lt;String&gt; can only store Strings Box&lt;String&gt; stringBox = new Box&lt;&gt;(); stringBox.setValue("Hello"); String str = stringBox.getValue(); // No casting needed System.out.println(str); // Type-safe: Box&lt;Integer&gt; can only store Integers Box&lt;Integer&gt; intBox = new Box&lt;&gt;(); intBox.setValue(10); int num = intBox.getValue(); System.out.println(num); }
}
✅ Benefits of Generics:
Compile-time safety (prevents wrong type usage)
No explicit casting (String str = box.getValue(); works directly)
Reusability (same Box&lt;T&gt; class works for multiple data types)
You can also define generic methods inside a non-generic class.public class Util { // Generic method public static &lt;T&gt; void printArray(T[] array) { for (T item : array) { System.out.print(item + " "); } System.out.println(); } public static void main(String[] args) { Integer[] intArr = {1, 2, 3, 4, 5}; String[] strArr = {"A", "B", "C"}; printArray(intArr); printArray(strArr); }
}
✔ One method works for both Integer[] and String[].Generics can also be used in interfaces.// Generic Interface
interface Container&lt;T&gt; { void add(T item); T get(int index);
} // Implementation
class StringContainer implements Container&lt;String&gt; { private List&lt;String&gt; items = new ArrayList&lt;&gt;(); public void add(String item) { items.add(item); } public String get(int index) { return items.get(index); }
} public class Main { public static void main(String[] args) { StringContainer container = new StringContainer(); container.add("Hello"); System.out.println(container.get(0)); }
}
✔ Interfaces can enforce type constraints for implementing classes.To visualize how generics work, here's a sequence diagram showing generic class usage:💡 Explanation:
The user sets a value in the GenericBox&lt;T&gt;.
GenericBox&lt;T&gt; stores the value with a type-safe mechanism.
The user retrieves the value without needing explicit casting.
✅ Use Generics when:
You want to create type-safe and reusable classes.
You need a collection that should store only a specific type.
You want to avoid explicit casting when retrieving values.
You need to enforce compile-time type checking.
❌ Don't use Generics when:
You work with primitive types (int, double, char). (Use Integer, Double, etc.)
You need runtime type checking (Generics work at compile-time).
The object type is always fixed (no need for flexibility).
Generics provide type safety and reusability in Java, reducing runtime errors and improving code clarity. If you use collections (like List&lt;T&gt;) or custom classes, generics are essential for writing clean and efficient code.Would you like more real-world examples on generics? 🚀]]></description><link>https://64etuor.github.io/600_tech-stack/java/generics.html</link><guid isPermaLink="false">600_Tech Stack/Java/Generics.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 03:03:01 GMT</pubDate></item><item><title><![CDATA[ObjectInputStream.readObject() Downcasting deep view]]></title><description><![CDATA[The method ObjectInputStream.readObject() returns an Object type. Since Java’s serialization mechanism doesn't inherently retain generic type information, the result must be explicitly downcast to the correct type (Member[] in this case).In Java, an explicit cast is required when assigning an Object type to a more specific type (like Member[]). Without the cast, Java will not automatically infer that the deserialized object is an array of Member.Let's break it down step by step.When an array of Member objects is serialized, it is stored as a byte stream, keeping track of class metadata and object data.import java.io.*; class Member implements Serializable { private static final long serialVersionUID = 1L; String name; public Member(String name) { this.name = name; }
} public class SerializationExample { public static void main(String[] args) { Member[] members = { new Member("Alice"), new Member("Bob") }; try (FileOutputStream fos = new FileOutputStream("members.ser"); ObjectOutputStream oos = new ObjectOutputStream(fos)) { oos.writeObject(members); // Serializing Member array } catch (IOException e) { e.printStackTrace(); } }
} The writeObject(members) method serializes the entire array of Member objects into a byte stream.
Java stores type information, but when deserializing, it returns an Object by default.
During deserialization, we need to cast the returned object back into Member[].public class DeserializationExample { public static void main(String[] args) { try (FileInputStream fis = new FileInputStream("members.ser"); ObjectInputStream ois = new ObjectInputStream(fis)) { Member[] inputMembers = (Member[]) ois.readObject(); // Downcasting for (Member m : inputMembers) { System.out.println(m.name); } } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } }
} ois.readObject() Returns an Object The readObject() method retrieves the stored array as an Object reference.
Java doesn’t automatically know it’s an array of Member. Explicit Downcasting to Member[] Since we know the original object was a Member[], we explicitly cast it: Member[] inputMembers = (Member[]) ois.readObject(); This tells Java:
➜ "Treat this Object as an array of Member." Why is it Safe? Because the serialized data already contains the type information, if the deserialized object isn't actually a Member[], Java will throw a ClassCastException at runtime. If we remove the explicit cast:Object inputMembers = ois.readObject();
We will get a compile-time error if we try to use it as a Member[], because Java doesn’t automatically convert Object into a more specific type.To ensure safety when casting, use the instanceof operator:Object obj = ois.readObject();
if (obj instanceof Member[]) { Member[] inputMembers = (Member[]) obj; System.out.println("Successful cast!");
} else { System.out.println("Incorrect type!");
} Why is downcasting required?
The return type of readObject() is Object, so Java requires an explicit cast to Member[].
How does it work? Serialization: Converts an array of Member objects into a byte stream. Deserialization: Reads the byte stream and returns it as an Object. Downcasting: Converts the Object back into Member[] so we can use it properly. What if downcasting is omitted?
Java won’t allow us to use the returned object as Member[], causing a compile-time error.
When an object (including an array) is serialized in Java, it is converted into a byte stream. The serialized form is not human-readable and follows the Java Object Serialization Specification.A serialized object consists of the following key components:
Stream Header: Identifies that this is a Java serialized object.
Class Descriptor: Contains metadata such as class name and serialVersionUID.
Field Data: Serialized values of the object's fields.
References to Other Objects (if applicable).
End of Object Marker.
For an array, Java serializes it similarly to an object but includes array metadata.Let's take the example of serializing an array of Member objects:import java.io.*; class Member implements Serializable { private static final long serialVersionUID = 1L; String name; public Member(String name) { this.name = name; }
} public class SerializationExample { public static void main(String[] args) throws IOException { Member[] members = { new Member("Alice"), new Member("Bob") }; try (FileOutputStream fos = new FileOutputStream("members.ser"); ObjectOutputStream oos = new ObjectOutputStream(fos)) { oos.writeObject(members); } }
}
If we inspect the raw bytes inside "members.ser", we get something similar to:aced 0005 7372 0016 5b4c 6d65 6d62 6572 3b90 67ff 7ddf 6b01 0000 7870
0000 0002 7372 0006 4d65 6d62 6572 0000 0000 0000 1200 7802 0020 416c 6963
6573 7200 064d 656d 6265 7200 0000 0000 0012 0078 0200 2042 6f62
This represents the byte stream structure. Let's break it down:If we were to visualize the serialized structure, it would look like:+----------------------+ &lt;-- Stream Header (Magic Number)
| ac ed 00 05 | (Java serialization identifier)
+----------------------+
| Class Descriptor | &lt;-- Class metadata
| [LMember; (Array) |
| serialVersionUID |
+----------------------+
| Array Length: 2 | &lt;-- Array metadata
+----------------------+
| Object 1: Member | &lt;-- First object
| Name: "Alice" |
+----------------------+
| Object 2: Member | &lt;-- Second object
| Name: "Bob" |
+----------------------+
If an object inside the array has references to other objects, Java assigns object references (handles) instead of duplicating data.For example, if Member had a reference to another object like Team, the team object would be serialized separately with a reference inside each Member pointing to it.
The serialized shape of an object is a binary byte stream.
It contains: Header Information
Class Descriptors
Array Metadata (if applicable)
Field Data Arrays are serialized with their length followed by each element.
Object references are serialized as handles to avoid redundancy.
]]></description><link>https://64etuor.github.io/600_tech-stack/java/objectinputstream.readobject()-downcasting-deep-view.html</link><guid isPermaLink="false">600_Tech Stack/Java/ObjectInputStream.readObject() Downcasting deep view.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 01:50:05 GMT</pubDate></item><item><title><![CDATA[Serializable]]></title><description><![CDATA[Java provides a built-in mechanism for object serialization, which allows objects to be converted into a byte stream and stored or transmitted. This is achieved using the Serializable interface.Serialization is essential when objects need to be saved to files, transmitted over a network, or stored in databases.The Serializable interface is a marker interface in Java, meaning it does not contain any methods. It is part of the java.io package:import java.io.Serializable; public class MyClass implements Serializable { private static final long serialVersionUID = 1L; private String name; private int age; public MyClass(String name, int age) { this.name = name; this.age = age; }
}
By implementing Serializable, an object of MyClass can be serialized and deserialized.Serialization converts an object into a byte stream using ObjectOutputStream:import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream; public class SerializeExample { public static void main(String[] args) { MyClass obj = new MyClass("John", 30); try (FileOutputStream fileOut = new FileOutputStream("object.ser"); ObjectOutputStream out = new ObjectOutputStream(fileOut)) { out.writeObject(obj); } catch (IOException e) { e.printStackTrace(); } }
}
Deserialization reconstructs an object from a byte stream using ObjectInputStream:import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream; public class DeserializeExample { public static void main(String[] args) { try (FileInputStream fileIn = new FileInputStream("object.ser"); ObjectInputStream in = new ObjectInputStream(fileIn)) { MyClass obj = (MyClass) in.readObject(); } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); } }
}
serialVersionUID is a unique identifier for a class. It is recommended to explicitly declare it to avoid InvalidClassException when the class structure changes.private static final long serialVersionUID = 1L;
If not specified, Java generates one dynamically based on the class structure, which can cause issues if the class changes.Some fields (like transient or external resources) should not be serialized. Mark such fields as transient:private transient int temporaryData;
These fields will be ignored during serialization.
Saving objects to disk
Sending objects over a network
Storing objects in databases
Distributed computing (e.g., RMI, caching frameworks like Ehcache) When performance is critical (serialization can be slow)
If you need more control (consider Externalizable for custom serialization)
If you only need short-term object persistence (use JSON or XML instead) JSON/XML Serialization (e.g., Jackson, Gson)
Protobuf (Protocol Buffers)
Kryo Serialization (faster than Java's built-in serialization)
]]></description><link>https://64etuor.github.io/600_tech-stack/java/serializable.html</link><guid isPermaLink="false">600_Tech Stack/Java/Serializable.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 01:37:51 GMT</pubDate></item><item><title><![CDATA[parse, valueOf]]></title><description><![CDATA[In Java, both parseXXX() and valueOf() methods are used to convert a String into a primitive data type or its corresponding wrapper class. However, they serve slightly different purposes and return different types.
Purpose: Converts a String into a primitive data type.
Returns: A primitive value (int, double, boolean, etc.).
Defined In: Wrapper classes like Integer, Double, Boolean, etc.
public class ParseExample { public static void main(String[] args) { String str = "123"; int number = Integer.parseInt(str); // Converts String to primitive int System.out.println("Primitive int: " + number); // Output: 123 }
}
✅ Use case: When you only need a primitive type and do not require an object.
Purpose: Converts a String into a wrapper class object (Integer, Double, Boolean, etc.).
Returns: A wrapper object (Integer, Double, Boolean, etc.).
Defined In: Wrapper classes like Integer, Double, Boolean, etc.
public class ValueOfExample { public static void main(String[] args) { String str = "123"; Integer number = Integer.valueOf(str); // Converts String to Integer object System.out.println("Integer object: " + number); // Output: 123 }
}
✅ Use case: When you need an Integer object instead of a primitive int, such as in collections like ArrayList&lt;Integer&gt;.For small numbers (typically between -128 and 127), Integer.valueOf() uses caching (IntegerCache), which can be more efficient than creating new objects. However, for large numbers, it creates new objects, which might impact performance in memory-intensive applications.Integer num1 = Integer.valueOf(100);
Integer num2 = Integer.valueOf(100);
System.out.println(num1 == num2); // true (cached) Integer num3 = Integer.valueOf(1000);
Integer num4 = Integer.valueOf(1000);
System.out.println(num3 == num4); // false (not cached) Use parseXXX() when you need a primitive type (e.g., arithmetic operations).
Use valueOf() when you need a wrapper object (e.g., working with collections or using methods that require an object).
]]></description><link>https://64etuor.github.io/600_tech-stack/java/parse,-valueof.html</link><guid isPermaLink="false">600_Tech Stack/Java/parse, valueOf.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 25 Feb 2025 00:35:12 GMT</pubDate></item><item><title><![CDATA[객체를 생성하는 다양한 방법 (feat. 생성자 vs builder)]]></title><description><![CDATA[builder에도 단점이..]]></description><link>https://64etuor.github.io/600_tech-stack/java/객체를-생성하는-다양한-방법-(feat.-생성자-vs-builder).html</link><guid isPermaLink="false">600_Tech Stack/Java/객체를 생성하는 다양한 방법 (feat. 생성자 vs builder).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 25 Feb 2025 00:33:08 GMT</pubDate><enclosure url="https://velog.velcdn.com/images/carol_ly/post/d61b320e-1642-4500-9513-1c74eaad0a47/image.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://velog.velcdn.com/images/carol_ly/post/d61b320e-1642-4500-9513-1c74eaad0a47/image.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Abstract Classes]]></title><description><![CDATA[An abstract class in Java is a class that cannot be instantiated directly—you can’t create objects from it using the new keyword. It serves as a blueprint for other classes and is declared with the abstract keyword. Abstract classes can contain a mix of:
Fully implemented methods (concrete methods): Methods that have a body.
Abstract methods: Methods without a body, requiring subclasses to implement them.
Example:abstract class Animal { // Abstract method (no implementation) abstract void sound(); // Concrete method (with implementation) void sleep() { System.out.println("This animal is sleeping."); }
}
Subclasses inheriting from an abstract class must either implement all its abstract methods or be declared abstract themselves. abstract Keyword
Declared with abstract, for example:
abstract class MyClass { // ...
} No Instantiation
Attempting to do new Animal() results in a compilation error. Abstract Methods
Declared without a body (e.g., abstract void sound();). Subclasses must provide implementations. Concrete Methods
Can include fully implemented methods that subclasses can use or override. Constructors
Abstract classes can have constructors. These are called when a subclass is instantiated. Fields
Can include instance variables, static variables, and constants (final fields). Inheritance
Subclasses use extends to inherit from an abstract class. Partial Abstraction
Unlike interfaces, abstract classes can mix abstract and concrete behavior. Abstract classes are ideal for:
Sharing common code among related classes (e.g., a Vehicle base class for Car and Truck).
Defining a template with default behavior while leaving specifics to subclasses.
Enforcing a contract (mandatory methods) while still providing reusable logic in a parent class.
abstract class Vehicle { String name; int speed; // Constructor Vehicle(String name) { this.name = name; this.speed = 0; } // Abstract method abstract void move(); // Concrete method void stop() { speed = 0; System.out.println(name + " has stopped."); }
} class Car extends Vehicle { Car(String name) { super(name); // Call abstract class constructor } // Implementing the abstract method void move() { speed = 100; System.out.println(name + " is moving at " + speed + " km/h."); }
} class Main { public static void main(String[] args) { Car car = new Car("Toyota"); car.move(); // Output: Toyota is moving at 100 km/h. car.stop(); // Output: Toyota has stopped. }
}
Here, Vehicle provides shared logic (stop()) and a contract (move()).
Cannot Be Instantiated
For example, Vehicle v = new Vehicle("Test"); won’t compile.
Abstract Methods Must Be Implemented
Non-abstract subclasses must implement all abstract methods, or a compilation error occurs.
Cannot Be final
Declaring final abstract class is illegal, because final prevents extension.
Cannot Be Private
Abstract methods cannot be private because they’re meant to be overridden by subclasses.
Mix of Access Modifiers
Concrete methods in an abstract class can be public, protected, or private; however, abstract methods are typically public or protected.
With Java 8 and beyond, interfaces can also have default methods, but there are still important differences:Abstract classes often define an algorithm skeleton (a template), allowing subclasses to implement specific steps:abstract class Game { abstract void initialize(); abstract void play(); abstract void end(); // Template method public void startGame() { initialize(); play(); end(); }
}
You can use abstract classes as reference types:Vehicle v = new Car("Honda");
v.move(); // Calls Car’s implementation of move() Forgetting to Implement All Abstract Methods
Java will flag this, requiring you to mark the subclass as abstract or implement the methods.
Assuming Abstract Classes Are Only for Abstract Methods
They’re also useful for shared code that multiple subclasses can inherit.
Overusing Abstract Classes
Sometimes an interface or a simple concrete class with composition suffices. Many Java library classes (e.g., AbstractList, AbstractMap) provide reusable functionality for their subclasses (ArrayList, HashMap, etc.).
Abstract classes are less flexible than interfaces for multiple inheritance scenarios but excel in hierarchical designs where shared state or partial implementations are important.
]]></description><link>https://64etuor.github.io/600_tech-stack/java/abstract-classes.html</link><guid isPermaLink="false">600_Tech Stack/Java/Abstract Classes.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 24 Feb 2025 02:04:04 GMT</pubDate></item><item><title><![CDATA[Understanding Coupling in Java]]></title><description><![CDATA[In the context of software engineering, coupling refers to the level of interdependency between software modules or classes. In Java (and other object-oriented languages), coupling determines how strongly one piece of code depends on or is linked to another. High coupling can make a codebase more difficult to maintain, test, and extend. Conversely, low (or loose) coupling tends to improve flexibility and maintainability.This document will explore the concept of coupling in Java, discuss its types, examine how high coupling can negatively impact your code, and provide strategies for reducing coupling in real-world applications.Coupling is a metric that describes the extent to which components in a system rely on each other’s implementation details or interfaces. In Java, this typically manifests in the way classes interact through:
Direct method calls.
Shared data structures or fields.
Dependency on specific classes or concrete implementations rather than abstract interfaces.
Key point: Tightly coupled classes heavily rely on each other’s internal workings or concrete implementations. Loosely coupled classes depend more on abstract contracts (interfaces) and well-defined boundaries. Maintainability: Tightly coupled code is often harder to change because modifying one class might break or require changes in the classes it depends on.
Testability: High coupling makes writing isolated unit tests challenging, as you typically need to set up and run multiple classes just to test one small part of the system.
Reusability: Loosely coupled classes are easier to isolate and reuse in other projects or contexts. Parallel Development: When components are loosely coupled, different team members can work on separate modules without frequently stepping on each other’s toes.
Visual Summary:Coupling can be categorized in various ways, but two common perspectives are structural and behavioral. Below are some broad categories relevant to Java developers: Data Coupling Occurs when classes share data through method parameters or return values. Typically minimal if the data is passed in a standard, well-defined format (e.g., simple POJOs or well-structured DTOs). Control Coupling Happens when one class controls the flow of another by passing control flags or requiring specific execution order. This can lead to fragile code since changing the process in one place might break code elsewhere. Stamp Coupling Occurs when more data than necessary is passed between modules (e.g., passing an entire object when only one field is needed). This can make code harder to understand and maintain, as the receiving class might rely on fields it shouldn’t. Common Coupling Results from using shared global data (in Java, these might be public static fields). This approach is generally discouraged because changes in a global variable can ripple throughout the entire system. Content Coupling (or Pathological Coupling) The worst form of coupling, where one class directly modifies the private internal data of another (if accessible through reflection or incorrectly scoped fields/methods). Almost universally considered a poor practice in Java because it breaks encapsulation. High coupling often leads to:
Code Fragility: A small change in a single class might cause cascading changes or unexpected issues in multiple areas.
Reduced Readability: Harder to trace logic or understand the interactions across the application.
Testing Difficulties: Requires comprehensive setups and mocks/stubs to handle the numerous dependencies before writing unit tests.
Slower Development Cycles: Teams must coordinate more frequently to ensure changes in one module don’t break others.
Instead of depending on concrete classes, depend on interfaces or abstract classes. This approach is often summarized by the principle “Program to an interface, not an implementation.”Example:// Interface
public interface PaymentProcessor { void processPayment(double amount);
} // Concrete implementations
public class CreditCardProcessor implements PaymentProcessor { @Override public void processPayment(double amount) { // Implementation details }
} public class PaypalProcessor implements PaymentProcessor { @Override public void processPayment(double amount) { // Implementation details }
} // Client code
public class CheckoutService { private PaymentProcessor processor; // Constructor Injection public CheckoutService(PaymentProcessor processor) { this.processor = processor; } public void checkout(double amount) { processor.processPayment(amount); }
}
In this design, CheckoutService is not tightly coupled to any specific payment processing implementation. You can switch or add new payment processors without modifying the CheckoutService code.Dependency Injection frameworks (e.g., Spring, CDI/Jakarta EE, Guice) further reduce coupling by managing dependencies centrally. You only define what you need instead of how to create it, and the framework injects the appropriate instances.@Service
public class CheckoutService { private final PaymentProcessor paymentProcessor; @Autowired public CheckoutService(PaymentProcessor paymentProcessor) { this.paymentProcessor = paymentProcessor; } public void checkout(double amount) { paymentProcessor.processPayment(amount); }
}
The Spring container decides which implementation of PaymentProcessor to provide. This arrangement keeps CheckoutService loosely coupled to the interface instead of a specific class.Apply encapsulation properly to limit direct access to your class fields and methods:
Use private fields and getter/setter methods if necessary. Avoid using public unless it is absolutely needed. Use protected or package-private (default) scope for members that are only relevant within a class hierarchy or package.
This practice helps prevent unwanted dependencies and direct modifications of internal state.When classes have a well-defined single responsibility, they are less likely to depend on other classes for unrelated tasks. This naturally reduces coupling because each class focuses on a narrow concern.Example: A UserService that handles user-related operations should not be responsible for emailing notifications. Instead, it can call a separate NotificationService (via an interface).Some design patterns are specifically aimed at reducing coupling:
Adapter: Wraps an existing class with a new interface.
Facade: Creates a simplified interface to a larger body of code.
Observer: Allows objects to subscribe/unsubscribe to events without tightly coupling the broadcaster to the subscribers.
Strategy: Encapsulates different algorithms or behaviors behind a common interface.
Modern microservices-based systems aim to create loosely coupled services that communicate via well-defined APIs (HTTP/REST, gRPC, messaging). Each service can be developed, deployed, and scaled independently, reducing coupling at the architectural level.Plugin-based architectures (e.g., Java’s Service Provider Interface or OSGi) rely on interfaces for loading and unloading components at runtime. Because the host application knows only about the interfaces, it remains loosely coupled to the specific plugin implementations.In enterprise Spring or Jakarta EE applications, dependency injection containers reduce coupling by abstracting away bean creation and lifecycle management. Components communicate through interfaces, and the container wires them up, promoting modularity and testability.Coupling is a critical concept for building robust, maintainable Java applications. By understanding the different types of coupling and actively minimizing dependencies between classes, you can create systems that are easier to modify, test, and extend. Techniques such as programming to interfaces, using dependency injection frameworks, encapsulation, and following design patterns can significantly reduce tight coupling. In short, when classes are loosely coupled, your codebase is more resilient to change and your team can develop features more efficiently. Strive for low coupling and high cohesion to reap the benefits of sustainable, high-quality software design.]]></description><link>https://64etuor.github.io/600_tech-stack/java/understanding-coupling-in-java.html</link><guid isPermaLink="false">600_Tech Stack/Java/Understanding Coupling in Java.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 24 Feb 2025 01:25:43 GMT</pubDate></item><item><title><![CDATA[OLS(Ordinary Least Squares)]]></title><description><![CDATA[OLS (Ordinary Least Squares, 최소자승법)는 회귀 분석에서 가장 많이 사용되는 기법으로, 독립변수와 종속변수 간의 관계를 선형 모델로 표현하고 그 모델을 최적화하는 방법입니다. OLS는 오차 제곱합 (Sum of Squared Errors, SSE)을 최소화하는 방식으로 회귀 계수를 추정합니다. 회귀 모델 (Regression Model) 독립변수 XX와 종속변수 YY 간의 관계를 설명하는 선형식입니다. 단순 선형 회귀 모델 예제: 오차 (Residuals) 실제 값 와 예측 값 간의 차이입니다. 오차 는 다음과 같이 정의합니다: ei=Yi−Y^ie_i = Y_i - \hat{Y}_i 오차 제곱합 (SSE, Sum of Squared Errors) 모든 오차의 제곱합으로, OLS는 이를 최소화하는 을 찾습니다. 목표 오차 제곱합을 최소화하는 회귀 계수 을 찾는 것입니다. 모델 설정 종속변수 YY와 독립변수 XX 간의 선형 관계를 설정합니다. 회귀 계수 추정 최소자승법을 사용하여 를 추정합니다. 모델 평가 R-squared (결정계수), p-value, F-statistic을 통해 모델의 성능을 평가합니다. 잔차 분석 모델이 적합한지 확인하기 위해 잔차를 분석합니다. import pandas as pd
import statsmodels.api as sm # 예제 데이터
data = { 'X': [1, 2, 3, 4, 5], 'Y': [2.2, 2.8, 4.5, 3.7, 5.5]
}
df = pd.DataFrame(data) # 독립변수와 종속변수 설정
X = df['X']
y = df['Y'] # 상수항 추가 (절편 포함)
X = sm.add_constant(X) # OLS 모델 생성 및 적합
model = sm.OLS(y, X).fit() # 결과 요약 출력
print(model.summary()) OLS Regression Results ==============================================================================
Dep. Variable: Y R-squared: 0.855
Model: OLS Adj. R-squared: 0.807
Method: Least Squares F-statistic: 17.91
Date: Thu, 20 Jun 2024 Prob (F-statistic): 0.0233
============================================================================== coef std err t P&gt;|t| [0.025 0.975]
------------------------------------------------------------------------------
const 1.1000 0.456 2.412 0.077 -0.157 2.357
X 0.9000 0.213 4.231 0.023 0.202 1.598
============================================================================== R-squared (결정계수) 모델이 종속변수의 변동을 얼마나 설명하는지 나타냅니다.
예: 는 데이터의 85.5%가 모델에 의해 설명된다는 의미입니다. coef (회귀 계수) const: X: p-value 회귀 계수가 통계적으로 유의미한지 판단합니다.
p-value &lt; 0.05이면 해당 계수는 유의미합니다. F-statistic 전체 모델의 유의성을 검정합니다. 모델이 잘 맞는지 확인하기 위해 잔차를 분석합니다.import matplotlib.pyplot as plt # 잔차 계산
residuals = model.resid # 잔차 플롯
plt.scatter(df['X'], residuals)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('X')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()
OLS 회귀 분석을 수행할 때 다음 4가지 가정을 만족해야 합니다: 선형성 (Linearity) 독립변수와 종속변수 간의 관계가 선형입니다. 정규성 (Normality) 잔차가 정규 분포를 따릅니다. 등분산성 (Homoscedasticity) 모든 수준에서 잔차의 분산이 동일합니다. 독립성 (Independence) 각 관측치는 서로 독립적입니다. OLS는 선형 회귀 분석에서 가장 많이 사용되는 기법입니다.
오차 제곱합을 최소화하여 최적의 회귀 계수를 추정합니다.
모델 평가와 잔차 분석을 통해 결과의 신뢰성을 검증해야 합니다.
OLS를 사용할 때는 선형성, 정규성, 등분산성, 독립성의 가정을 확인하는 것이 중요합니다.
]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/ols(ordinary-least-squares).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/OLS(Ordinary Least Squares).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:33:48 GMT</pubDate></item><item><title><![CDATA[EDA(Exploratory Data Analysis)]]></title><description><![CDATA[Exploratory Data Analysis (EDA)는 데이터를 이해하고 주요 특성을 파악하기 위한 초기 분석 과정입니다. EDA는 통계적 요약과 시각화를 통해 데이터를 직관적으로 파악하고, 데이터에 숨겨진 패턴, 이상치(Outlier), 결측치(Missing Value), 변수 간 관계 등을 탐색합니다. 존 튜키(John Tukey)가 처음으로 제안한 개념으로, 데이터 분석이나 머신러닝 모델링의 기초를 마련하는 중요한 단계입니다. 데이터의 분포 이해 각 변수의 값들이 어떻게 분포되어 있는지 확인하고, 정규 분포 여부를 파악합니다. 이상치 (Outlier) 탐지 데이터에서 통계적으로 비정상적인 값을 찾아내고, 분석에서의 영향을 평가합니다. 결측치 (Missing Value) 탐색 결측치가 있는지 확인하고, 이를 제거, 대체, 보간하는 전략을 세웁니다. 변수 간 관계성 파악 상관관계, 다변량 관계 등을 확인하여 가설 수립에 필요한 인사이트를 도출합니다. 데이터 정제 및 전처리 방향 설정 데이터 정제, 변환, 스케일링 등의 전처리 전략을 결정합니다. 가설 수립 및 모델링 준비 데이터를 기반으로 잠재적인 가설을 수립하고, 분석 또는 모델링의 다음 단계를 준비합니다. 데이터의 중심 경향성 (Central Tendency)과 퍼짐 (Dispersion)을 요약합니다.
중심 경향성: 평균 (Mean): 모든 값을 더한 후 개수로 나눈 값
중앙값 (Median): 데이터의 중간값
최빈값 (Mode): 가장 많이 나타난 값 퍼짐 정도: 분산 (Variance): 데이터가 평균으로부터 얼마나 떨어져 있는지
표준편차 (Standard Deviation): 분산의 제곱근으로, 데이터의 산포도를 나타냅니다.
사분위수 (Quartiles): 데이터의 25%, 50%, 75%에 해당하는 값 df.describe() # 수치형 변수에 대한 기술 통계
EDA에서 시각화는 데이터의 패턴과 관계를 직관적으로 이해하는 데 필수적입니다.
단변량 분석 (Univariate Analysis) 히스토그램 (Histogram): 변수의 분포 확인
박스플롯 (Box Plot): 이상치와 분포의 퍼짐 정도 확인
커널 밀도 추정 (KDE Plot): 데이터의 확률 밀도 함수 시각화 import seaborn as sns
sns.histplot(df['Price'])
sns.boxplot(df['Price']) 이변량 분석 (Bivariate Analysis) 산점도 (Scatter Plot): 두 변수 간 관계 파악
상관 행렬 (Correlation Matrix): 상관계수를 시각화
바이올린 플롯 (Violin Plot): 분포 및 범주별 차이 확인 sns.scatterplot(x='Price', y='Sales', data=df)
sns.heatmap(df.corr(), annot=True) 다변량 분석 (Multivariate Analysis) 페어 플롯 (Pair Plot): 여러 변수 간 관계를 한눈에 확인
3D 산점도: 3차원 공간에서 변수 간 관계 확인 sns.pairplot(df) 결측치가 있는지 확인하고, 결측치 비율이 높으면 제거하거나 평균, 중앙값, 최빈값으로 대체합니다.
df.isnull().sum() # 결측치 확인
df.dropna() # 결측치 제거
df.fillna(df.mean()) # 평균으로 결측치 대체
이상치는 데이터를 왜곡할 수 있으므로, IQR (Interquartile Range) 또는 Z-점수 (Z-Score)를 사용해 탐지합니다.
IQR 기반 탐지:
Q1 = df['Price'].quantile(0.25)
Q3 = df['Price'].quantile(0.75)
IQR = Q3 - Q1
outliers = df[(df['Price'] &lt; (Q1 - 1.5 * IQR)) | (df['Price'] &gt; (Q3 + 1.5 * IQR))] Z-점수 기반 탐지:
from scipy import stats
df['z_score'] = stats.zscore(df['Price'])
outliers = df[df['z_score'].abs() &gt; 3] 변수 간의 상관관계를 분석하여 강한 양/음의 상관관계를 확인합니다.correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm') 데이터 로드 및 확인:
df.head()
df.info() 기술 통계 요약:
df.describe() 결측치 탐색 및 처리:
df.isnull().sum()
df.fillna(method='ffill') 시각화를 통한 분포 및 관계 확인:
sns.histplot(df['Sales'])
sns.scatterplot(x='Price', y='Sales', data=df) 이상치 탐지 및 처리:
outliers = df[df['Price'] &gt; threshold] 상관관계 분석:
sns.heatmap(df.corr(), annot=True) ]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/eda(exploratory-data-analysis).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/EDA(Exploratory Data Analysis).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:32:14 GMT</pubDate></item><item><title><![CDATA[EBM(Explainable Boosting Machine)]]></title><description><![CDATA[Explainable Boosting Machine(EBM) - 트리기반의 순환형 gradient boosting - Generalized Additive 모델 [참고] - 다른 알고리즘 모델보다 학습에 시간이 더 소요될 수 잇음 - glassbox 모델이라 불림 ㄴ 기존 딥러닝 모델이 blackbox모델로 불리며 내부 동작구조를 알기 어려움 ㄴ 내부가 다 보이는 glass박스 모델은 내부 동작구조를 어느정도 알수 있어서 이렇게 명명하지 않았을까?! ㄴ model-agnostic에 맞게 의역해보면, Model에 관계없이 적용가능한 방법론 - 기존 boosting 방식으로 학습시키나, Xi와 y간의 관계를 추가함수를 통해 정의함으로서 비선형성 문제도 해결할 수 있도록 고안 학습방식 - feature를 한개..]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/ebm(explainable-boosting-machine).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/EBM(Explainable Boosting Machine).md</guid><dc:creator><![CDATA[[[Dan-k]]]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:31:51 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/IO2nL/btstxNSrkcl/SKAHcqqO7hYQUFSZW1ado1/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/IO2nL/btstxNSrkcl/SKAHcqqO7hYQUFSZW1ado1/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Java Classes and Objects]]></title><description><![CDATA[This document provides a broad overview of Java classes and objects, essential to understanding the core concepts of Java-based software development. We will explore:
Object-Oriented Programming (OOP) principles (abstraction, encapsulation, inheritance, polymorphism).
Core aspects of Java classes and objects (fields, methods, constructors, initialization blocks, method overloading).
How these features are used in real-world industry scenarios.
To aid understanding, diagrams and other visual representations are included throughout. At the end of this document, you will find a comprehensive references section with 300+ sources for further reading.At its core, Java is an object-oriented programming language. This means that real-world concepts are modeled as objects, and classes act as blueprints or templates for creating these objects.
Class: A description (blueprint) that defines the structure (fields, methods) and behaviors of its instances.
Object: An instance of a class, created at runtime, which contains its own unique state (field values) and behaviors (methods).
A typical Java class has the following structure:public class ExampleClass { // Fields (variables) private int number; private String text; // Constructor public ExampleClass(int number, String text) { this.number = number; this.text = text; } // Methods public void doSomething() { System.out.println("Doing something..."); }
}
Java heavily relies on OOP principles. Let’s dive into these core concepts in detail.Abstraction is the principle of hiding complex implementation details while exposing a simplified interface for the user.
In Java, abstraction can be achieved using abstract classes and interfaces.
Abstract classes can have both abstract methods (no body) and concrete methods. Interfaces define method signatures (and in modern Java versions, also default and static methods).
Why it matters:
Abstraction simplifies how other programmers or other parts of your code interact with a class or component. It reduces the cognitive load by focusing on “what” it does rather than “how” it does it.Visual Aid:Encapsulation ensures that a class's internal state (its fields) is protected from direct access, thus preventing unauthorized or unintended manipulation. This is done primarily through access modifiers (private, public, protected) and getter/setter methods.
Private fields: Only accessible within the same class.
Public methods: Provide controlled access to these private fields.
Why it matters:
Encapsulation helps maintain data integrity and security within an application. It also facilitates easier maintenance and updates to class internals without breaking external code.Visual Aid (encapsulated fields within a class):+-----------------------------------+
| EncapsulatedClass |
| -------------------------------- |
| - privateField1: int |
| - privateField2: String |
| -------------------------------- |
| + getField1(): int |
| + setField1(val: int): void |
| + getField2(): String |
| + setField2(val: String): void |
+-----------------------------------+
Inheritance allows one class (child/subclass) to derive from another (parent/superclass), inheriting its fields and methods.
Implemented using the extends keyword (for classes).
Encourages reuse of code and behaviors.
Why it matters:
Inheritance helps avoid code duplication by reusing existing logic in a superclass. It also provides a natural hierarchy and can be used to implement polymorphism.Polymorphism enables objects to take on many forms. The most common form in Java is method overriding, where a subclass provides a specific implementation of a method already defined in its superclass.
Runtime polymorphism (method overriding).
Compile-time polymorphism (method overloading).
Why it matters:
Polymorphism provides flexibility in designing software. Code that uses a superclass or interface reference can seamlessly work with multiple implementations.A constructor in Java is a special method invoked when creating an object with the new keyword. It typically initializes the object's fields and sets up other required states.
Default Constructor: If you do not explicitly define a constructor, Java provides a no-argument constructor.
Parameterized Constructor: Takes arguments to set the initial values of fields.
Usage: Constructors cannot return anything (not even void) and must have the same name as the class.
Example:public class Car { private String brand; private String model; // Default constructor public Car() { this.brand = "Generic"; this.model = "Base"; } // Parameterized constructor public Car(String brand, String model) { this.brand = brand; this.model = model; }
}
Overloading occurs when multiple methods in the same class share the same name but differ by their parameter lists (type, number, or order of parameters).
Commonly used for creating multiple constructors or variations of a method to handle different types or numbers of arguments.
Resolved at compile-time (thus often referred to as compile-time polymorphism).
Why it matters:
Method overloading enhances readability and usability. It enables the same “action” or method name but for different scenarios.Example (overloaded constructor):public class Rectangle { private double width; private double height; // Constructor #1 public Rectangle(double width, double height) { this.width = width; this.height = height; } // Constructor #2 (overloaded) public Rectangle(double side) { this.width = side; this.height = side; }
}
Initialization blocks are blocks of code inside a class that are run every time an object is created, before the constructor executes.
Instance initialization blocks: { ... } inside the class.
Static initialization blocks: static { ... } block, runs once when the class is loaded.
Why it matters:
They allow you to consolidate repeated setup code for all constructors in one place. Static blocks are helpful for initializing static variables or running code once at class load time.Example:public class InitExample { private static int staticCounter; private int instanceCounter; // Static initialization block static { staticCounter = 100; System.out.println("Static block called. staticCounter initialized to 100."); } // Instance initialization block { instanceCounter = 10; System.out.println("Instance block called. instanceCounter initialized to 10."); } // Constructors public InitExample() { System.out.println("No-arg constructor called."); } public InitExample(int increment) { this.instanceCounter += increment; System.out.println("Parameterized constructor called with increment."); }
}
In many e-commerce applications:
Product class might encapsulate product details.
Order class might have multiple constructors for different order creation scenarios (e.g., guest checkout vs. registered user).
User class often uses encapsulation to protect sensitive data like password hashes.
Visual Aid:In banking systems, classes like BankAccount, CheckingAccount, and SavingsAccount demonstrate inheritance and polymorphism:
BankAccount as an abstract base class with an abstract method calculateInterest().
CheckingAccount and SavingsAccount override the calculateInterest() method differently.
Why: Real-world systems often factor out common behavior into a superclass (for shared fields like accountNumber, balance) and then tailor interest calculations for each account type.Modern Java-based microservices often rely on:
POJOs (Plain Old Java Objects) for data transfer or DTOs (Data Transfer Objects).
Constructors (and overloading) to flexibly create these objects from different APIs or data sources.
Encapsulation to ensure only relevant fields are accessible externally.
Example:public class UserDto { private String name; private String email; // Overloaded constructors for different data source usage public UserDto() {} public UserDto(String name, String email) { this.name = name; this.email = email; } // getters and setters
}
]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-classes-and-objects.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java Classes and Objects.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 22 Feb 2025 12:29:29 GMT</pubDate></item><item><title><![CDATA[Polymorphism]]></title><description><![CDATA[Here’s a comprehensive guide on Polymorphism in Object-Oriented Programming (OOP), including definitions, types, examples, and diagrams to help you understand the concept thoroughly.Polymorphism is a fundamental principle in Object-Oriented Programming (OOP) that allows objects to take on multiple forms. It enhances flexibility, code reusability, and scalability by enabling a single interface to represent different data types.The word Polymorphism comes from the Greek words “poly” (many) and “morph” (forms), meaning “many forms.”
In OOP, polymorphism allows a single method, class, or interface to represent multiple behaviors.
The same function name or operator can behave differently based on the object that calls it.
Reduces code duplication by allowing a generalized approach to handling different types.
Polymorphism is mainly classified into two types: Compile-time Polymorphism (Static Binding)
Runtime Polymorphism (Dynamic Binding)
Compile-time polymorphism occurs when the method to be executed is determined at compile time.
It is achieved through Method Overloading and Operator Overloading.
Occurs when multiple methods in a class share the same name but have different parameters (number or type).
The correct method is resolved at compile-time.
🔹 Example in Javaclass MathOperations { // Method 1: Addition of two numbers int add(int a, int b) { return a + b; } // Method 2: Addition of three numbers (overloaded method) int add(int a, int b, int c) { return a + b + c; }
} public class Main { public static void main(String[] args) { MathOperations obj = new MathOperations(); System.out.println(obj.add(5, 10)); // Calls the first method System.out.println(obj.add(5, 10, 15)); // Calls the second method }
}
✅ Key Takeaway: The method that gets called is determined at compile time based on the number of arguments.
The ability to redefine the behavior of operators for user-defined types.
🔹 Example in Pythonclass Vector: def __init__(self, x, y): self.x = x self.y = y # Overloading the '+' operator def __add__(self, other): return Vector(self.x + other.x, self.y + other.y) v1 = Vector(2, 3)
v2 = Vector(4, 5)
result = v1 + v2 # Calls the overloaded `__add__` method
print(result.x, result.y) # Output: 6 8
✅ Key Takeaway: The same + operator behaves differently based on object types.Runtime polymorphism occurs when the method to be executed is determined at runtime rather than at compile time.
It is primarily achieved through Method Overriding.
When a subclass provides a specific implementation of a method that is already defined in the parent class.
The overridden method in the subclass must have the same method signature as in the parent class.
Achieved using inheritance.
🔹 Example in Javaclass Animal { void makeSound() { System.out.println("Animal makes a sound"); }
} class Dog extends Animal { @Override void makeSound() { System.out.println("Dog barks"); }
} public class Main { public static void main(String[] args) { Animal myAnimal = new Dog(); // Runtime polymorphism myAnimal.makeSound(); // Output: Dog barks }
}
✅ Key Takeaway: Even though myAnimal is declared as Animal, the Dog's version of makeSound() is executed at runtime.🔹 Encapsulation &amp; Code Reusability → Reduces redundancy by allowing a single method to handle different behaviors.
🔹 Extensibility → New functionalities can be added with minimal changes to existing code.
🔹 Flexible Code Design → Allows writing more general and adaptable code.Polymorphism is commonly represented in UML Class Diagrams using inheritance (generalization). +-----------------+ | Animal | +-----------------+ | + makeSound() | +-----------------+ ▲ │ +-----------------+ | Dog | +-----------------+ | + makeSound() | +-----------------+ BankAccount → Generic class for all accounts
SavingsAccount and CurrentAccount → Override specific withdrawal methods
class BankAccount { void withdraw() { System.out.println("Withdraw money from bank account"); }
} class SavingsAccount extends BankAccount { @Override void withdraw() { System.out.println("Withdraw money with interest applied"); }
} class CurrentAccount extends BankAccount { @Override void withdraw() { System.out.println("Withdraw money with overdraft limit"); }
} public class Main { public static void main(String[] args) { BankAccount acc1 = new SavingsAccount(); acc1.withdraw(); // Output: Withdraw money with interest applied BankAccount acc2 = new CurrentAccount(); acc2.withdraw(); // Output: Withdraw money with overdraft limit }
}
✅ Conclusion: Different account types override the withdraw method to exhibit different behaviors.Polymorphism is a powerful OOP feature that makes code more scalable, maintainable, and flexible.
By understanding Method Overloading, Operator Overloading, and Method Overriding, you can write efficient and reusable software solutions.
💡 "Write once, use everywhere" – That’s the magic of polymorphism! 🚀
]]></description><link>https://64etuor.github.io/600_tech-stack/java/polymorphism.html</link><guid isPermaLink="false">600_Tech Stack/Java/Polymorphism.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 22 Feb 2025 11:06:33 GMT</pubDate></item><item><title><![CDATA[Java Class Diagram]]></title><description><![CDATA[A Java class diagram is one of the UML (Unified Modeling Language) diagrams that visually represents the structure and relationships among classes. To interpret it correctly, you need a solid understanding of basic notation and the various ways to represent relationships.In a class diagram, each class is represented by a rectangular box, typically divided into three compartments:+---------------------+
| Class Name |
+---------------------+
| Fields (Attributes)|
+---------------------+
| Methods (Functions)|
+---------------------+ The name of the class appears at the top.
Generally, the first letter is capitalized. The variables (attributes, member variables) that the class holds appear in the second compartment.
Access modifiers are shown as follows: + (public): Accessible from everywhere
# (protected): Accessible within the same package or subclasses
- (private): Accessible only within the class
~ (package-private, default): Accessible within the same package Example
- name: String
- age: int name is a private String field
age is a private int field The methods a class provides are shown in the third compartment.
Access modifiers follow the same notation as fields.
Method notation
+ getName(): String
+ setName(name: String): void getName() → a public method returning a String
setName(String name) → a public method returning void In class diagrams, relationships between classes are shown using connecting lines and arrows.
Parent class → Child class
Represented by a triangle arrow (△).
Example
Animal ▲ │
Dog The Dog class extends the Animal class Interface → Class
Represented by a dashed line with a triangle arrow (△).
Example
Flyable △ ┆
Bird The Bird class implements the Flyable interface A straight line (─) indicates that two classes are in a relationship.
If the relationship has direction, it is shown with an arrow.
Multiplicity can also be indicated: 1: Only one
0..*: Zero or more (e.g., arrays, lists)
1..*: One or more Example
Person ───&gt; Car Person owns a Car (a typical association) One class contains another (“has-a” relationship).
Represented by an empty diamond (◇).
Example
Team ◇──&gt; Player A Team can have multiple Player objects
Each Player can exist independently of the Team A strong containment relationship (“strong has-a”).
Represented by a filled diamond (◆).
The contained object ceases to exist if the parent object is removed.
Example
House ◆──&gt; Room If the House is deleted, the Room is also deleted One class uses another class.
Represented by a dashed line (---) and arrow (→).
Example
Order -----&gt; Payment The Order class depends on the Payment class (e.g., as a method parameter) +-------------------+
| Car |
+-------------------+
| - brand: String |
| - speed: int |
+-------------------+
| + accelerate(): void |
| + brake(): void |
+-------------------+ ▲ │
+-------------------+
| ElectricCar |
+-------------------+
| - batteryLevel: int |
+-------------------+
| + chargeBattery(): void |
+-------------------+ Car ◆──&gt; Engine The Car class has two fields: brand (a String) and speed (an int).
The Car class provides the methods accelerate() and brake().
ElectricCar inherits (extends) the Car class.
ElectricCar adds a batteryLevel field and a chargeBattery() method.
The Car has a composition relationship (◆) with Engine. If Car is removed, the Engine is also removed. ]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-class-diagram.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java Class Diagram.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 21 Feb 2025 10:12:23 GMT</pubDate></item><item><title><![CDATA[2025-02-20 Whichever]]></title><description><![CDATA[<img alt="Pasted image 20250221190426.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250221190426.png" target="_self">
해석 | 미겔 오토 트랜스미션 인터내셔널은 다수의 고객 평가원들의 표를 받은 마케팅 대행사에 계약을 주기로 결정했다.
해설 | 적절한 복합관계대명사를 묻는 문법 문제이다. 전치사 to 뒤에는 명사나 명사상당어구가 와야 하는데, 빈칸 다음에 주어 (marketing agency)+동사(receives)인 절이 왔으므로 명사절을 이끄는 접속사가 와야 한다. 대명사인 (A) them과 (B) those는 문장을 이끌 수 없으므로 오답이다. 복합관계대명사인 (C) whichever와 (D) whoever는 명사절을 이끈다. (D) whoever(누구든지)는 anyone who와 같으며 who가 주격이므로 뒤에는 주어 없이 동사부터 와야 하는데 주어+동사가 왔으므로 오답이다. 그러므로 whichever가 와야 한다. 따라서 정답은 (C)이다. Whichever는&nbsp;구조로 쓸 수 있다. whichever라는 단어가 너무 생소해서 GPT에게 질문
Whichever and whatever both refer to choices, but they differ in scope and usage.
Used when selecting from a specific, limited set of options.
It implies that the choices are known or predefined.
Example:
👉 "You can choose whichever book you like from this shelf." (The books are limited to those on the shelf.) Used when referring to any possible option, without restriction.
It does not imply a predefined set.
Example:
👉 "You can eat whatever you want." (There are no limits on the choices.)
Key Difference:
Whichever = a selection from a defined group.
Whatever = any option, without limits.
]]></description><link>https://64etuor.github.io/700_studies/ybm생활영어/2025년/2025-02-20-whichever.html</link><guid isPermaLink="false">700_Studies/YBM생활영어/2025년/2025-02-20 Whichever.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 21 Feb 2025 10:09:50 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250221190426.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250221190426.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ERD 재귀 관계]]></title><description><![CDATA[ERD에서 재귀 관계(Recursive Relationship) 는 자기 자신을 참조하는 관계를 의미합니다. 즉, 하나의 엔터티가 스스로와 관계를 맺는 경우를 나타냅니다.
특정 엔터티가 동일한 엔터티의 다른 인스턴스와 관계를 가지는 경우.
보통 계층 구조(Hierarchy), 네트워크 구조(Network), 연결 리스트 등을 모델링할 때 사용. 한 개체가 자신과 1:1 관계를 맺는 경우.
예제: 직원의 멘토 관계 직원(Employee)은 한 명의 멘토(Mentor)를 가질 수 있음 (다른 직원이 멘토 역할)
각 멘토도 단 한 명의 멘티(Mentee)만 가질 수 있음 📌 ERD 모델:EMPLOYEE (직원)
-------------------
| EmployeeID (PK) |
| Name |
| MentorID (FK) | -&gt; 다른 직원(EmployeeID)을 참조
------------------- MentorID는 같은 테이블 내 EmployeeID를 참조하는 재귀적 외래 키(FK). 한 개체가 자신과 1:N 관계를 맺는 경우.
예제: 조직의 상사-부하 관계 한 명의 상사(Employee)가 여러 명의 부하(Employee)를 가질 수 있음
한 명의 부하는 단 한 명의 상사만 가짐 📌 ERD 모델:EMPLOYEE (직원)
-------------------
| EmployeeID (PK) |
| Name |
| ManagerID (FK) | -&gt; 다른 직원(EmployeeID)을 참조
------------------- ManagerID는 같은 테이블 내 EmployeeID를 참조하는 재귀적 FK.
📌 데이터 예시:
| EmployeeID | Name | ManagerID |
|------------|-------|-----------|
| 1 | 김철수 | NULL | (최고 관리자) |
| 2 | 이영희 | 1 | (김철수가 상사) |
| 3 | 박민수 | 1 | (김철수가 상사) |
| 4 | 최은지 | 2 | (이영희가 상사) |
한 개체가 여러 개의 같은 엔터티와 관계를 맺고, 반대로도 마찬가지인 경우.
예제: 소셜 네트워크에서 친구 관계 사용자(User)는 여러 명의 친구(Friend)를 가질 수 있음
한 명의 친구도 여러 사용자와 친구 관계를 맺을 수 있음 📌 ERD 모델:USER (사용자)
-------------------
| UserID (PK) |
| Name |
------------------- FRIENDSHIP (친구 관계)
-------------------
| UserID1 (FK) | -&gt; USER.UserID 참조
| UserID2 (FK) | -&gt; USER.UserID 참조
------------------- FRIENDSHIP 테이블을 통해 USER 테이블이 자기 자신과 M:N 관계를 가짐.
📌 데이터 예시:
| UserID1 | UserID2 |
|---------|---------|
| 1 | 2 | (1번과 2번은 친구) |
| 1 | 3 | (1번과 3번은 친구) |
| 2 | 3 | (2번과 3번은 친구) |ERD에서 재귀 관계는 자기 자신을 가리키는 화살표(FK 관계) 로 표현됩니다.📌 재귀 관계 ERD 예시 1:N 계층 구조 (직원-상사 관계)
+-------------+
| EMPLOYEE |
|-------------|
| EmployeeID (PK) |
| Name |
| ManagerID (FK) |
+-------------+ ▲ │ └───────────────(재귀적 관계) M:N 관계 (소셜 네트워크 친구 관계)
+-------------+ +---------------+
| USER | | FRIENDSHIP |
|-------------| |---------------|
| UserID (PK) |◀───┬──▶| UserID1 (FK) |
| Name | │ | UserID2 (FK) |
+-------------+ └──▶ +---------------+ 1️⃣ 조직 구조
상사-부하 관계 (1:N)
부서의 계층 구조 (1:N)
2️⃣ 제품 BOM (Bill of Materials)
하나의 제품이 여러 부품(서브 제품)으로 구성되는 경우 (1:N)
하나의 부품도 다른 제품의 부품이 될 수 있음 (M:N)
3️⃣ 소셜 네트워크
친구 관계 (M:N)
팔로워-팔로잉 관계 (1:N)
4️⃣ 경로 탐색 (Pathfinding)
트리 구조로 이루어진 경로 시스템 (1:N)
도로망, 네트워크 연결 구조 (M:N)
WITH RECURSIVE EmployeeHierarchy AS ( SELECT EmployeeID, Name, ManagerID, 1 AS Level FROM EMPLOYEE WHERE ManagerID IS NULL -- 최상위 관리자 UNION ALL SELECT e.EmployeeID, e.Name, e.ManagerID, eh.Level + 1 FROM EMPLOYEE e JOIN EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID
)
SELECT * FROM EmployeeHierarchy; 조직도를 트리 형태로 조회하는 예제.
✔ 재귀 관계는 같은 엔터티 내에서 자신의 인스턴스와 관계를 맺는 것
✔ 1:1, 1:N, M:N 구조로 나타낼 수 있음
✔ 조직도, BOM, 네트워크, 친구 관계 등에서 활용
✔ ERD에서는 자기 참조(FK)로 표현
✔ SQL의 WITH RECURSIVE를 사용하여 트리 구조 조회 가능 📌 이해를 돕기 위한 예제:
직원-상사 관계 직원(Employee) 테이블이 자기 자신을 참조 (1:N 관계)
ManagerID가 EmployeeID를 가리킴
계층 구조를 표현할 때 사용 📌 실전 활용: 조직 관리 시스템, 제품 BOM, SNS 팔로우 시스템 등에서 활용됨. ]]></description><link>https://64etuor.github.io/600_tech-stack/sql/erd-재귀-관계.html</link><guid isPermaLink="false">600_Tech Stack/SQL/ERD 재귀 관계.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 20 Feb 2025 11:22:28 GMT</pubDate></item><item><title><![CDATA[tar 압축 방식(아카이브와 압축 차이)]]></title><description><![CDATA[ 윈도우에서는 압축(zip)을 하면 파일이나 폴더들을 한번에 묶으면서 동시에 압축한다. 반면 리눅스는 파일이나 폴더를 하나의 파일로 묶는 것(아카이빙(Archiving))과 압축을 진행해 용량을 줄이는 과정이 구분되어 있다.(gz)
Archiving: 하나의 파일에 파일과 폴더를 넣고 묶는 것으로 용량은 줄어들지 않음 (파일과 폴더를 묶어서 하나로 만들어 진 것을 아카이브라고 한다.)
Compression: 파일이나 아카이빙 된 아카이브를 알고리즘을 활용해 압축해서 용량을 줄이는 것 <img alt="Untitled" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/92b13a8e-95b6-48f3-a9ef-5e2f93d12968/Untitled.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> **TAR(Tape ARchives) 명령어란?’테이프 아카이버(Tape Archiver)’를 줄인 말로 저장 장치로 백업하기 위해 하나의 파일로 합치는 프로그램을 의미**한다. 용량은 줄어들지 않지만 여러 폴더와 파일을 하나로 관리하기 위해 존재한다.
하나로 묶이기 전의 링크나 폴더 구조를 그대로 가져갈 수 있다.
리눅스 용 프로그램이나 데이터, 소스 및 라이브러리 등을 배포하는 용도로 많이 사용한다. $ tar [OPTION] [아카이브FILE명] [FILE|PATH]
# 현재 디렉토리의 모든 파일과 디렉토리를 tar로 묶기
$ tar cvf 파일명.tar * # 대상 디렉토리를 포함한 모든 파일과 디렉토리를 tar로 묶기
$ tar cvf 파일명.tar [PATH] # 파일을 지정하여 tar 아카이브로 묶기
$ tar cvf 파일명.tar [FILE_1] [FILE_2] # tar 아카이브의 내용 확인하기
$ tar tvf 파일명.tar # tar 아카이브를 현재 디렉토리에 풀기
$ tar xvf 파일명.tar # tar 아카이브를 지정된 디렉토리에 풀기
$ tar xvf 파일명.tar -C [PATH] # tar 아카이브 묶거나 풀 때 파일 별 진행 여부 확인하기
$ tar cvfw 파일명.tar * # 현재 디렉토리를 tar로 묶고 gzip으로 압축하기
$ tar zcvf 파일명.tar.gz * # gzip으로 압축된 tar 아카이브를 현재 디렉토리에 풀기
$ tar zxvf 파일명.tar.gz # 현재 디렉토리를 tar로 묶고 bzip2로 압축하기
$ tar jcvf 파일명.tar.bz2 * # bzip2로 압축된 tar 아카이브를 현재 디렉토리에 풀기
$ tar jxvf 파일명.tar.bz2 압축 형식 &gt;[!note] **compress 명령어란?** 유닉스에서 많이 썼던 압축 프로그램으로 현재는 압축률이 낮아 거의 사용되지 않는다. ```bash
# ncompress 설치
$ sudo apt-get install ncompress # 압축하기
$ compress [아카이브 FILE명]
# 압축풀기
$ uncompress [아카이브 FILE명] gzip/gunzip 명령어란?tar 명령어로 파일을 묶고 tar 명령어로 만들어진 아카이브 파일을 압축하게 되어 단독으로는 잘 쓰이지 않는다.# gzip설치
$ sudo apt-get install gzip # 압축하기
$ gzip [옵션] [아카이브FILE명] # 압축풀기
$ gzip -d [아카이브FILE명]
$ gunzip [아카이브FILE명] # 압축된 파일의 내용 확인
$ gzip -l [아카이브FILE명]
$ zcat [아카이브FILE명] bzip2/bunzip2 명령어란?블록 정렬 알고리즘을 활용한 압축 프로그램으로 gzip, xzip과 더불어 많이 사용되는 압축 프로그램이다. 다소 무난한 압축률을 가지고 있으나 압축 및 해제 시간은 다소 소요된다.#압축
$ bzip2 text.txt # 압축 해제
$ bunzip2 text.txt.bz2 xz/unxz 명령어란?LZMA2 알고리즘으로 데이터 손실 없이(무손실) 압축 시킬 수 있는 프로그램이다. 상대적으로 매우 높은 압축률을 가지고 있으며 사이트에서 압축 포맷 파일 배포 용도로 많이 사용되고 있다.# 압축
$ xz [옵션] [아카이브 FILE명] # 압축풀기
$ xz -d [아카이브 FILE명]
$ unxz [옵션] [아카이브 FILE명] zip/unzip 명령어란?이전 압축 명령어와 달리 원본 파일이 사라지지 않고 그대로 남아 있고 압축 파일은 별도로 생성된다. 윈도우에서의 압축처럼 아카이빙과 압축이 함께 일어난다.$ sudo apt-get install zip # zip 설치 $ zip [압축할 FILE명].zip [아카이브 또는 FILE명] $ unzip [압축할 FILE명] # mylog.log를 mylog.zip으로 압축하기(단일 파일 압축)
$ zip mylog.zip mylog.log # mylog1.log, mylog2.log, mylog3.log를 mylog.zip으로 압축하기(다중 파일 압축)
$ zip mylog.zip mylog1.log mylog2.log mylog3.log # 현 위치 디렉토리와 하위 디렉토리를 모두 test.zip으로 압축
$ zip -r test.zip ./* # test.zip 압축 해제
$ unzip test.zip zip 명령어 옵션 unzip 명령어 옵션 압축 효율성 xz &gt; bzip2 &gt; zip &gt; compress ]]></description><link>https://64etuor.github.io/600_tech-stack/linux/tar-압축-방식(아카이브와-압축-차이).html</link><guid isPermaLink="false">600_Tech Stack/Linux/tar 압축 방식(아카이브와 압축 차이).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 20 Feb 2025 11:21:36 GMT</pubDate><enclosure url="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/92b13a8e-95b6-48f3-a9ef-5e2f93d12968/Untitled.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/92b13a8e-95b6-48f3-a9ef-5e2f93d12968/Untitled.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[SQL Procedure 사용 가능 함수]]></title><description><![CDATA[MySQL Stored Procedure(저장 프로시저) 내에서는 대부분의 SQL 함수를 사용할 수 있지만, 몇 가지 제한 사항이 있습니다.프로시저 내에서는 SELECT, SET, IF, CASE 등과 함께 일반적인 SQL 함수(수학, 문자열, 날짜 함수 등) 를 사용할 수 있습니다.DELIMITER // CREATE PROCEDURE GetUpperCase(IN input_text VARCHAR(50), OUT output_text VARCHAR(50))
BEGIN SET output_text = UPPER(input_text); -- 문자열을 대문자로 변환
END // DELIMITER ;
실행CALL GetUpperCase('hello', @result);
SELECT @result; -- 결과: 'HELLO'
DELIMITER // CREATE PROCEDURE GetCurrentYear(OUT current_year INT)
BEGIN SET current_year = YEAR(NOW()); -- 현재 연도 반환
END // DELIMITER ;
실행CALL GetCurrentYear(@year);
SELECT @year; -- 결과: 2024
✅ SUM(), AVG(), COUNT() 등은 일반적으로 사용 가능하지만,
GROUP BY 없이 단일 값만 반환해야 합니다.DELIMITER // CREATE PROCEDURE GetTotalSalary(OUT total_salary DECIMAL(10,2))
BEGIN SELECT SUM(salary) INTO total_salary FROM employees;
END // DELIMITER ;
하지만 다중 행을 반환하는 GROUP BY가 포함된 쿼리는 프로시저 내에서 직접 사용할 수 없음.❌ 잘못된 예제CREATE PROCEDURE GetAverageSalary()
BEGIN SELECT department_id, AVG(salary) -- ❌ 오류 발생! FROM employees GROUP BY department_id;
END;
✅ 해결 방법: CURSOR(커서)를 사용하여 다중 행을 처리해야 함.MySQL에서는 저장 프로시저 내에서 LIMIT을 직접 사용할 수 없음.❌ 잘못된 예제CREATE PROCEDURE GetTopSalaries()
BEGIN SELECT emp_id, salary FROM employees ORDER BY salary DESC LIMIT 5; -- ❌ 오류 발생
END;
✅ 해결 방법: 변수를 사용하여 동적 SQL 실행DELIMITER // CREATE PROCEDURE GetTopSalaries(IN row_count INT)
BEGIN SET @query = CONCAT('SELECT emp_id, salary FROM employees ORDER BY salary DESC LIMIT ', row_count); PREPARE stmt FROM @query; EXECUTE stmt; DEALLOCATE PREPARE stmt;
END // DELIMITER ;
실행CALL GetTopSalaries(5);
✅ 대부분의 SQL 함수(문자열, 수학, 날짜 등)는 프로시저 내에서 정상적으로 동작
✅ 집계 함수(SUM(), AVG(), COUNT())는 단일 값 반환 시 사용 가능
✅ GROUP BY, LIMIT, ORDER BY 등은 직접 사용이 제한될 수 있으며, CURSOR 또는 동적 SQL(PREPARE ... EXECUTE)을 활용해야 함
✅ 데이터베이스 환경 및 요구 사항에 따라 적절한 방식으로 프로시저를 구성하는 것이 중요 ]]></description><link>https://64etuor.github.io/600_tech-stack/sql/sql-procedure-사용-가능-함수.html</link><guid isPermaLink="false">600_Tech Stack/SQL/SQL Procedure 사용 가능 함수.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 05:06:40 GMT</pubDate></item><item><title><![CDATA[Stored prodcedure]]></title><description><![CDATA[ 💡 Stored procedure는 MariaDB에서 일련의 SQL 문장을 저장하고 실행할 수 있도록 하는 기능이다. 이를 통해 반복적인 작업을 자동화하고, 데이터베이스 서버에서 직접 실행되므로 클라이언트-서버 간의 네트워크 트래픽을 줄일 수 있다. Stored procedure는 프로그래밍 언어와 유사한 구조를 가지며, 변수 선언, 조건문, 반복문 등을 사용할 수 있다.Stored procedure는 MariaDB의 보안성과 성능을 향상시키는 데 기여한다. 이를 통해 데이터베이스 접근 권한을 세밀하게 제어할 수 있으며, 예를 들어 특정 사용자에게 특정 stored procedure만 실행할 수 있는 권한을 부여하는 것이 가능하다. 또한, 여러 SQL 문을 하나의 단위로 묶어 실행함으로써, 데이터베이스 서버의 작업 부하를 줄이고 성능을 최적화할 수 있다.Stored procedure를 작성할 때는 BEGIN과 END 구문을 사용하여 절차의 시작과 끝을 정의한다. 예를 들어, 간단한 stored procedure는 다음과 같이 작성될 수 있다.DELIMITER // CREATE PROCEDURE procedure_name (parameters)
BEGIN -- SQL 문장들
END // DELIMITER ; DELIMITER는 SQL 명령어를 구분하기 위해 사용한다. 기본 구분자인 ; 대신 //를 사용하여 프로시저 정의의 끝을 명확히 한다.
CREATE PROCEDURE는 새로운 프로시저를 정의하는 구문이다.
procedure_name은 프로시저의 이름이다.
parameters는 입력 파라미터로, 프로시저 호출 시 필요한 인자들을 정의한다.
BEGIN ... END 블록 안에 SQL 문장들을 작성한다.
이와 같이 작성된 stored procedure는 CALL 문을 통해 실행할 수 있다.CALL procedure_name(arguments); 실행 시 스토어드 프로시저에 정의 된 SQL 문장들이 실행 된다.
모든 사원에 대한 정보를 조회하는 프로시저 생성
DELIMITER // CREATE PROCEDURE getAllEmployees()
BEGIN SELECT emp_id, emp_name, salary FROM employee;
END // DELIMITER ; 해당 프로시저 호출
CALL getAllEmployees(); 실행결과
<img alt="1.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/37b4a1da-d21f-4aad-8484-91be6e1c498f/1.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> IN 매개변수를 사용하는 프로시저는 호출 시 전달된 값을 사용 특정 부서의 직원 정보를 조회하는 프로시저
DELIMITER // CREATE PROCEDURE getEmployeesByDepartment ( IN dept CHAR(2)
)
BEGIN SELECT emp_id, emp_name, salary FROM employee WHERE dept_code = dept;
END // DELIMITER ; <br>해당 프로시저 호출
CALL getEmployeesByDepartment('D5'); 실행결과
<img alt="2.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/0b5ab7f4-7ec5-4cef-8d02-6528f7edd857/2.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> OUT 매개변수를 사용하는 프로시저는 결과 값을 호출한 곳으로 반환 특정 직원의 급여를 반환하는 프로시저
DELIMITER // CREATE PROCEDURE getEmployeeSalary ( IN id VARCHAR(3), OUT sal DECIMAL(10,2)
)
BEGIN SELECT salary INTO sal FROM employee WHERE emp_id = id;
END // DELIMITER ; 해당 프로시저 호출 💡 `@` 기호는 사용자 변수(user variable)를 나타낸다. 사용자 변수는 SQL 문장에서 동적으로 값을 저장하고 사용할 수 있는 변수이다. **동적 할당**: 사용자 변수는 동적으로 생성되며, 특정 데이터 유형을 선언할 필요 없이 값을 할당할 수 있다. **세션 범위**: 사용자 변수는 세션 범위로 정의된다. 즉, 해당 변수를 설정한 세션 내에서만 유효하며, 세션이 종료되면 변수도 사라진다. **기본값 없음**: 초기화되지 않은 사용자 변수는 `NULL` 값을 가진다. **접두사 `@` 사용**: 사용자 변수를 정의하고 사용할 때는 항상 `@` 기호를 사용한다. ```sql SET @sal = 0; CALL GetEmployeeSalary('201', @sal); SELECT @sal; ``` &gt; `실행결과` &gt; &gt; ![3.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/199c1dd9-d334-408a-9783-fac491031d06/3.png) 특정 직원의 급여를 증가시키고, 증가된 급여(보너스 포함)를 반환하는 프로시저
DELIMITER // CREATE PROCEDURE updateAndReturnSalary ( IN id VARCHAR(3), INOUT sal DECIMAL(10,2)
)
BEGIN UPDATE employee SET salary = sal WHERE emp_id = id; SELECT salary + (salary * IFNULL(bonus, 0)) INTO sal FROM employee WHERE emp_id = id;
END // DELIMITER ; <br>해당 프로시저 호출
SET @new_sal = 9000000;
CALL updateAndReturnSalary('200', @new_sal);
SELECT @new_sal; 실행결과
<img alt="4.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/9f09fd5e-9773-4b67-a755-fb1a75068842/4.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> IF ... ELSE 문은 조건에 따라 다른 SQL 문을 실행하는 데 사용된다. MariaDB의 IF ... ELSE 구문은 프로시저나 함수 내에서 조건문을 작성할 때 유용하다.
IF 조건 THEN -- 조건이 참일 때 실행될 문장
ELSE -- 조건이 거짓일 때 실행될 문장
END IF; 조건은 참(TRUE) 또는 거짓(FALSE)으로 평가될 수 있는 표현식
THEN 뒤에 조건이 참일 때 실행할 SQL 문을 작성
ELSE 뒤에 조건이 거짓일 때 실행할 SQL 문을 작성
END IF;는 IF 블록의 끝을 나타냄 특정 직원의 급여가 특정 값보다 높은지 여부를 확인하는 프로시저
DELIMITER // CREATE PROCEDURE checkEmployeeSalary( IN id VARCHAR(3), IN threshold DECIMAL(10,2), OUT result VARCHAR(50)
)
BEGIN DECLARE sal DECIMAL(10,2); SELECT salary INTO sal FROM employee WHERE emp_id = id; IF sal &gt; threshold THEN SET result = '기준치를 넘는 급여입니다.'; ELSE SET result = '기준치와 같거나 기준치 이하의 급여입니다.'; END IF;
END // DELIMITER ; <br>해당 프로시저 호출
SET @result = '';
CALL checkEmployeeSalary('200', 3000000, @result);
SELECT @result; 실행결과
<img alt="5.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/a75a2bfa-4903-45fa-8b6a-593e83bc9fa9/5.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> CASE 문법은 주어진 조건에 따라 여러 가지 경로 중 하나를 선택하여 실행할 수 있게 해주는 제어 구조이다. MariaDB에서 CASE 문법은 프로시저나 쿼리 내에서 조건에 따라 다른 값을 반환하거나 다른 SQL 문을 실행할 때 유용하다.
CASE WHEN 조건1 THEN 결과1 WHEN 조건2 THEN 결과2 ... ELSE 결과N
END CASE; 조건1, 조건2, ... : 평가될 조건들
결과1, 결과2, ... : 조건이 참일 때 실행될 결과 또는 SQL 문
ELSE 결과N : 모든 조건이 거짓일 때 실행될 결과 또는 SQL 문
END CASE : CASE 문을 종료하는 구문 특정 직원의 부서에 따라 메시지를 반환하는 프로시저
DELIMITER // CREATE PROCEDURE getDepartmentMessage( IN id VARCHAR(3), OUT message VARCHAR(100)
)
BEGIN DECLARE dept VARCHAR(50); SELECT dept_code INTO dept FROM employee WHERE emp_id = id; CASE WHEN dept = 'D1' THEN SET message = '인사관리부 직원이시군요!'; WHEN dept = 'D2' THEN SET message = '회계관리부 직원이시군요!'; WHEN dept = 'D3' THEN SET message = '마케팅부 직원이시군요!'; ELSE SET message = '어떤 부서 직원이신지 모르겠어요!'; END CASE;
END // DELIMITER ; <br>해당 프로시저 호출
SET @message = '';
CALL getDepartmentMessage('221', @message);
SELECT @message; 실행결과
<img alt="6.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/5cbde5d4-1a8c-4c82-b571-4679545aa1e0/6.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> WHILE 구문은 조건이 참인 동안 반복해서 SQL 문을 실행하는 데 사용된다.
WHILE 조건 DO -- 실행할 SQL 문들
END WHILE; 조건: 반복을 계속할지 여부를 결정하는 표현식. 조건이 참(TRUE)일 때 반복이 계속된다.
DO와 END WHILE 사이에 반복할 SQL 문들을 작성한다. 1부터 전달 값까지의 합을 반환하는 프로시저
DELIMITER // CREATE PROCEDURE calculateSumUpTo( IN max_num INT, OUT sum_result INT
)
BEGIN DECLARE current_num INT DEFAULT 1; DECLARE total_sum INT DEFAULT 0; WHILE current_num &lt;= max_num DO SET total_sum = total_sum + current_num; SET current_num = current_num + 1; END WHILE; SET sum_result = total_sum;
END // DELIMITER ; <br>해당 프로시저 호출
CALL calculateSumUpTo(10, @result);
SELECT @result; 실행결과
<img alt="7.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/c8af2c7a-3d1a-42c5-bcde-707dad8f3a6b/7.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> 예외 처리를 위해 DECLARE ... HANDLER 구문을 사용한다. 이 구문은 특정 조건이나 SQLSTATE 코드가 발생했을 때 실행할 핸들러를 선언한다.
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN -- 예외 처리 코드
END; DECLARE로 핸들러를 설정한다.
EXIT 또는 CONTINUE로 핸들러의 동작을 지정한다. EXIT: 예외가 발생하면 즉시 프로시저 실행을 종료한다.
CONTINUE: 예외가 발생해도 프로시저 실행을 계속한다. FOR 뒤에 예외 조건을 지정한다.
핸들러 블록 내에서 예외 발생 시 실행할 코드를 작성한다. 2개의 숫자를 전달 받아 나눈 뒤 결과를 반환하는 프로시저
DELIMITER // CREATE PROCEDURE divideNumbers( IN numerator DOUBLE, IN denominator DOUBLE, OUT result DOUBLE
)
BEGIN DECLARE division_by_zero CONDITION FOR SQLSTATE '45000'; DECLARE EXIT HANDLER FOR division_by_zero BEGIN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '0으로 나눌 수 없습니다.'; END; IF denominator = 0 THEN SIGNAL division_by_zero; ELSE SET result = numerator / denominator; END IF;
END// DELIMITER ; <br>해당 프로시저 호출
CALL divideNumbers(10, 2, @result);
SELECT @result; CALL divideNumbers(10, 0, @result); -- error 발생 실행결과
<img alt="1.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/2212d0ed-b525-4755-9889-f88c1f94a963/1.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved">
<img alt="2.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/d91b62af-7169-4ce8-a2f9-6b524bc7224b/2.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> Stored Procedure와 Stored Function은 모두 데이터베이스 서버에서 실행되는 저장된 프로그램이지만 목적과 사용 방법에서 차이가 있다.
목적: 주로 특정 작업을 수행하고 여러 작업을 일괄적으로 처리하는 데 사용한다.
반환 값: 여러 개의 값을 반환하거나, 반환하지 않을 수 있다. 반환 값이 없는 경우도 많다.
호출 방법: CALL 문을 사용하여 호출한다.
입출력 매개변수: IN, OUT, INOUT 매개변수를 사용할 수 있다.
사용 범위: 데이터 조작 및 비즈니스 로직 구현에 자주 사용된다. 목적: 주로 계산을 수행하고 값을 반환하는 데 사용된다.
반환 값: 하나의 값을 반환해야 한다.
호출 방법: SQL 문장에서 함수 이름을 사용하여 호출한다. 예를 들어, SELECT 문장에서 사용할 수 있다.
입출력 매개변수: 입력 매개변수만 가질 수 있다.
사용 범위: 값의 계산, 데이터 변환 및 테이블 데이터를 기반으로 하는 연산에 사용된다. DETERMINISTIC: 동일한 입력값에 대해 항상 동일한 결과를 반환하는 함수임을 의미한다. 즉, 함수가 참조하는 데이터나 상태가 변하지 않으며, 외부 요인(예: 데이터베이스의 외부 상태, 시스템 변수 등)에 의존하지 않는다. NOT DETERMINISTIC: 동일한 입력 값에 대해 항상 동일한 결과를 반환하지 않을 수 있는 함수임을 의미한다. 예를 들어, 함수가 현재 시간이나 난수 생성기와 같은 외부 상태에 의존하는 경우에 사용된다. 직원의 월급을 받아서 연봉을 계산하는 스토어드 함수
DELIMITER // CREATE FUNCTION getAnnualSalary( id VARCHAR(3)
) RETURNS DECIMAL(15, 2)
DETERMINISTIC
BEGIN DECLARE monthly_salary DECIMAL(10, 2); DECLARE annual_salary DECIMAL(15, 2); SELECT salary INTO monthly_salary FROM employee WHERE emp_id = id; SET annual_salary = monthly_salary * 12; RETURN annual_salary;
END // DELIMITER ; <br>해당 함수 활용
SELECT emp_name , getAnnualSalary(emp_id) AS annual_salary FROM employee; 실행결과
<img alt="8.png" src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/16720d3b-c280-4b40-a130-cb4ce8ad8ee3/8.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> ]]></description><link>https://64etuor.github.io/600_tech-stack/sql/stored-prodcedure.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Stored prodcedure.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 05:05:32 GMT</pubDate><enclosure url="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/37b4a1da-d21f-4aad-8484-91be6e1c498f/1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/2ed584e0-2b03-4eac-8d4b-4490d601f1ba/37b4a1da-d21f-4aad-8484-91be6e1c498f/1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Java static 개념과 사용법]]></title><description><![CDATA[Java에서 static 키워드는 클래스 레벨에서 관리되는 변수 또는 메서드를 정의하는 데 사용됩니다.
즉, static 키워드가 붙은 요소(변수, 메서드, 블록 등)는 객체(Instance)에 속하지 않고, 클래스(Class) 자체에 속함.📌 즉, static이 붙은 요소는 객체를 생성하지 않아도 사용할 수 있음! 🚀 "클래스 로드 시 자동으로 생성되며, 모든 인스턴스에서 공유됨." 일반적인 변수/메서드는 객체를 생성해야 사용 가능하지만,
static 변수/메서드는 클래스 이름으로 직접 접근 가능.
예: Math.pow(2, 3) → Math 클래스의 static 메서드인 pow() 호출 static 변수는 객체마다 생성되지 않고, 모든 객체가 공유하여 사용.
예: static int count;를 사용하면 모든 객체가 같은 count 값을 공유함. static 메서드는 보통 유틸리티 함수(예: Math 클래스의 sqrt(), abs())에 사용됨.
예: Math.random()은 객체 생성 없이 사용 가능. 클래스 레벨에서 변하지 않는 값을 저장할 때 static final 사용.
예: public static final double PI = 3.14159;
class Example { int instanceVar = 10; // 인스턴스 변수 (객체마다 생성됨) static int staticVar = 100; // static 변수 (클래스에 한 개만 존재) void instanceMethod() { System.out.println("Instance Variable: " + instanceVar); System.out.println("Static Variable: " + staticVar); } static void staticMethod() { // System.out.println(instanceVar); // ❌ static 메서드에서는 인스턴스 변수 사용 불가 System.out.println("Static Variable: " + staticVar); }
} public class StaticExample { public static void main(String[] args) { Example obj1 = new Example(); Example obj2 = new Example(); obj1.instanceVar = 20; obj1.staticVar = 200; System.out.println("obj1 InstanceVar: " + obj1.instanceVar); // 20 System.out.println("obj2 InstanceVar: " + obj2.instanceVar); // 10 (새 객체이므로 초기값 유지) System.out.println("obj1 StaticVar: " + obj1.staticVar); // 200 System.out.println("obj2 StaticVar: " + obj2.staticVar); // 200 (공유됨) // 클래스 이름으로 접근 가능 Example.staticVar = 300; System.out.println("Example.StaticVar: " + Example.staticVar); // 300 }
}
📌 실행 결과obj1 InstanceVar: 20
obj2 InstanceVar: 10
obj1 StaticVar: 200
obj2 StaticVar: 200
Example.StaticVar: 300
✅ static 변수는 모든 객체가 공유하며, 클래스 이름으로 접근 가능!
객체 생성 없이 사용 가능 (클래스명.메서드명())
static 메서드는 인스턴스 변수 사용 불가
class Utility { static int add(int a, int b) { return a + b; }
} public class StaticMethodExample { public static void main(String[] args) { int result = Utility.add(5, 10); // 객체 생성 없이 호출 System.out.println("Result: " + result); }
}
📌 실행 결과Result: 15
✅ 유틸리티 클래스는 static 메서드로 구성하는 것이 일반적!
클래스가 메모리에 로드될 때 단 한 번 실행됨.
보통 초기화 코드(Static Initialization) 용도로 사용.
class StaticBlockExample { static int staticVar; // static 블록 static { staticVar = 50; System.out.println("Static block executed!"); } public static void main(String[] args) { System.out.println("StaticVar: " + staticVar); }
}
📌 실행 결과Static block executed!
StaticVar: 50
✅ 클래스가 로드될 때 static 블록이 실행됨!
static final을 사용하면 변하지 않는 상수(Constant)를 정의할 수 있음.
final이 붙었으므로 한 번만 초기화 가능.
class Constants { public static final double PI = 3.14159;
} public class StaticFinalExample { public static void main(String[] args) { System.out.println("PI: " + Constants.PI); }
}
📌 실행 결과PI: 3.14159
✅ 자바에서 상수(Constant)는 static final로 선언!class Example { int instanceVar = 10; static void staticMethod() { // System.out.println(instanceVar); ❌ 인스턴스 변수 사용 불가 }
} 이유: static 메서드는 객체 없이 호출되므로, 특정 객체에 속한 변수를 참조할 수 없음.
class Example { static void staticMethod() { // System.out.println(this); ❌ this 사용 불가 }
} 이유: this는 현재 객체를 참조하지만, static 메서드는 객체 없이 호출되므로 this를 사용할 수 없음.
✅ 객체마다 중복될 필요 없는 값 (static 변수)
✅ 객체 생성 없이 사용할 함수 (static 메서드)
✅ 변하지 않는 상수 (static final)
✅ 클래스 로딩 시 한 번 실행되는 초기화 코드 (static 블록)]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-static-개념과-사용법.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java static 개념과 사용법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 03:12:46 GMT</pubDate></item><item><title><![CDATA[Java 생성자와 Python 생성자 비교]]></title><description><![CDATA[Java의 생성자(Constructor)는 Python의 __init__() 메서드와 매우 유사한 역할을 합니다! 둘 다 객체(Object)가 생성될 때 자동으로 호출되어 객체를 초기화하는 역할을 합니다.
그러나 Java는 강타입(static typed), Python은 동적 타입(dynamic typed)이므로 문법에 차이가 있습니다.public class Application4 { // 생성자 (Python의 __init__()과 유사) public Application4() { System.out.println("Application4 객체가 생성되었습니다!"); } public void displayMessage() { System.out.println("Hello from Application4!"); } public static void main(String[] args) { // 객체 생성 Application4 app = new Application4(); // 생성자가 자동 호출됨 app.displayMessage(); }
}
Application4 객체가 생성되었습니다!
Hello from Application4!
📌 설명
new Application4(); 실행 → 생성자 Application4()가 자동 호출됨 Application4 클래스의 객체가 메모리에 생성됨 이후, displayMessage() 메서드를 호출하여 "Hello from Application4!" 출력 class Application4: # 생성자 (Java의 생성자와 같은 역할) def __init__(self): print("Application4 객체가 생성되었습니다!") def display_message(self): print("Hello from Application4!") # 객체 생성
app = Application4() # 생성자가 자동 호출됨
app.display_message()
Application4 객체가 생성되었습니다!
Hello from Application4!
📌 설명
app = Application4() 실행 시, __init__() 메서드가 자동 호출됨 Application4 클래스의 객체가 생성됨 app.display_message() 실행하여 "Hello from Application4!" 출력 Java와 Python 둘 다 생성자에서 매개변수를 받아 객체를 초기화할 수 있음! public class Application4 { private String name; // 매개변수 있는 생성자 public Application4(String name) { this.name = name; System.out.println(name + " 객체가 생성되었습니다!"); } public void displayMessage() { System.out.println("Hello, " + name + "!"); } public static void main(String[] args) { Application4 app = new Application4("ChatGPT"); // 객체 생성 app.displayMessage(); }
}
ChatGPT 객체가 생성되었습니다!
Hello, ChatGPT!
class Application4: def __init__(self, name): self.name = name print(f"{name} 객체가 생성되었습니다!") def display_message(self): print(f"Hello, {self.name}!") app = Application4("ChatGPT") # 객체 생성
app.display_message()
ChatGPT 객체가 생성되었습니다!
Hello, ChatGPT!
📌 Java와 Python 모두 self(Python) / this(Java)를 사용하여 객체의 속성을 설정하고 초기화할 수 있음. 🔹 Java의 생성자는 Application4()와 같은 클래스명과 동일한 메서드로 정의되며, 객체를 생성할 때 자동 호출됨.
🔹 Python의 __init__()은 클래스 내부에서 __init__()라는 특별한 메서드를 사용하여 동일한 역할을 수행함.
🔹 Java는 new 키워드가 필요하지만, Python은 필요 없음.
🔹 Java는 생성자 오버로딩(여러 개의 생성자 정의)이 가능하지만, Python은 __init__()이 단 하나만 존재하고 기본값을 활용해야 함. ✅ Python의 __init__() == Java의 생성자!
🚀 객체 생성과 초기화 원리는 같지만, 문법적인 차이점이 존재! 😊]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-생성자와-python-생성자-비교.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java 생성자와 Python 생성자 비교.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 02:43:48 GMT</pubDate></item><item><title><![CDATA[Java의 HashMap과 파이썬의 Dict 차이]]></title><description><![CDATA[Java의 HashMap과 Python의 dict(딕셔너리)는 키-값(key-value) 저장 구조를 가지며, 내부적으로 해시 테이블(Hash Table)을 기반으로 동작합니다. 하지만 몇 가지 중요한 차이점이 있습니다.Java (HashMap)import java.util.HashMap; HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();
map.put("apple", 10);
map.put("banana", 20); System.out.println(map.get("apple")); // 10
Python (dict)map = {"apple": 10, "banana": 20}
print(map["apple"]) # 10
📌 차이점: Java는 new HashMap&lt;&gt;();으로 명시적으로 선언해야 함.
Python은 {} 문법으로 더 간단하게 생성 가능.
Java (put 사용)map.put("cherry", 30); // 추가
map.put("apple", 50); // 기존 값 수정
Python ([] 사용)map["cherry"] = 30 # 추가
map["apple"] = 50 # 기존 값 수정
📌 차이점: Java는 put() 사용, Python은 [] 사용. Python에서는 더 간단하게 map["key"] = value로 처리 가능.
Java (get() 사용)System.out.println(map.get("banana")); // 20
System.out.println(map.get("grape")); // null (존재하지 않는 키)
Python ([] 또는 .get() 사용)print(map["banana"]) # 20
print(map.get("grape")) # None (존재하지 않는 키)
📌 차이점: Java의 get()은 키가 없으면 null 반환 Python의 map[key]는 키가 없으면 KeyError 발생 → 안전하게 get()을 사용하는 것이 좋음.
print(map.get("grape", "Not Found")) # 기본값 설정 가능
Java (remove() 사용)map.remove("banana");
Python (del 또는 .pop() 사용)del map["banana"] # KeyError 발생 가능
map.pop("banana", None) # 안전한 삭제
📌 차이점: Java는 remove() 사용, Python은 del 또는 pop() 사용. Python의 pop()은 기본값 설정 가능 (.pop(key, default))
Java (entrySet() 사용)for (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) { System.out.println(entry.getKey() + " -&gt; " + entry.getValue());
}
Python (for key, value in map.items() 사용)for key, value in map.items(): print(f"{key} -&gt; {value}")
📌 Python이 훨씬 더 간결함. Java는 entrySet()을 통해 반복 Python은 .items() 사용하여 for key, value 형식으로 편리하게 반복 가능
Java (containsKey() 사용)if (map.containsKey("apple")) { System.out.println("apple exists!");
}
Python (in 사용)if "apple" in map: print("apple exists!")
📌 Python의 in이 더 직관적 Java는 containsKey() 필요 Python은 in 키워드 사용 가능 (if key in dict:) Java의 HashMap은 비동기적이므로 멀티스레드 환경에서는 ConcurrentHashMap을 사용해야 안전함.
import java.util.concurrent.ConcurrentHashMap;
ConcurrentHashMap&lt;String, Integer&gt; concurrentMap = new ConcurrentHashMap&lt;&gt;(); Python의 dict는 기본적으로 GIL(Global Interpreter Lock) 덕분에 일부 스레드 안정성이 있지만, 완전한 멀티스레드 환경에서는 threading.Lock을 활용해야 안전함.
from threading import Lock lock = Lock()
map = {} with lock: map["apple"] = 10
✅ Python dict는 사용하기 간편하고 직관적 → in, items(), del 등으로 더 짧고 읽기 쉬움
✅ Java HashMap은 더 명시적이고 강력한 타입 지원 → ConcurrentHashMap으로 동기화 가능
✅ 멀티스레드 환경에서는 Java는 ConcurrentHashMap, Python은 Lock 사용 추천 📌 즉, 일반적인 용도로는 Python의 dict가 사용하기 더 편리하지만, Java는 강력한 타입 안정성과 멀티스레드 지원이 필요할 때 ConcurrentHashMap을 사용해야 합니다. 😊]]></description><link>https://64etuor.github.io/600_tech-stack/java/java의-hashmap과-파이썬의-dict-차이.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java의 HashMap과 파이썬의 Dict 차이.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 02:41:33 GMT</pubDate></item><item><title><![CDATA[Java 프로젝트 구조]]></title><description><![CDATA[Java 프로젝트의 구조는 프로젝트의 빌드 도구, 프로젝트 유형(웹, 데스크톱, 라이브러리), 프레임워크(Spring, JavaFX 등) 등에 따라 다를 수 있습니다. 그러나 기본적인 프로젝트 구조는 공통적으로 유지됩니다.MyJavaProject
│── src/
│ ├── main/
│ │ ├── java/ # Java 소스 코드
│ │ │ └── com/example/app/ # 패키지 구조
│ │ │ ├── Main.java
│ │ │ ├── service/
│ │ │ ├── controller/
│ │ │ └── model/
│ │ ├── resources/ # 설정 파일, 정적 리소스 (YAML, XML, JSON 등)
│ │ ├── application.properties
│ │ ├── messages.properties
│ │ ├── log4j2.xml
│ ├── test/
│ │ ├── java/ # 테스트 코드
│ │ │ └── com/example/app/
│ │ │ ├── MainTest.java
│ │ │ ├── service/
│ │ │ ├── controller/
│ │ │ └── model/
│ │ ├── resources/ # 테스트용 설정 파일
│── lib/ # 외부 라이브러리 (jar 파일)
│── build/ # 컴파일된 파일과 빌드 결과물이 저장됨
│── out/ # IDE(예: IntelliJ)가 컴파일한 클래스 파일 저장
│── .gitignore # Git 제외 파일
│── pom.xml # Maven 빌드 설정 파일
│── build.gradle # Gradle 빌드 설정 파일
│── settings.gradle # Gradle 설정 파일
│── README.md # 프로젝트 설명
Maven은 XML 기반의 프로젝트 관리 도구입니다.
pom.xml 파일로 의존성 관리 및 빌드 설정을 정의합니다.
📌 Maven 프로젝트 구조MyMavenProject/
│── src/
│ ├── main/java/ # Java 소스 코드
│ ├── main/resources/ # 설정 파일 (application.properties)
│ ├── test/java/ # 테스트 코드
│ ├── test/resources/ # 테스트 설정 파일
│── target/ # 빌드된 결과물 저장 (JAR, WAR)
│── pom.xml # Maven 빌드 설정 파일
📌 예제 pom.xml 파일&lt;project xmlns="http://maven.apache.org/POM/4.0.0"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.example&lt;/groupId&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- JSON 파싱을 위한 라이브러리 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.13.4&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;
&lt;/project&gt;
🔹 mvn clean install → 프로젝트 빌드 및 실행
🔹 mvn dependency:tree → 의존성 확인Gradle은 스크립트 기반의 빌드 시스템으로 build.gradle 파일을 사용합니다.📌 Gradle 프로젝트 구조MyGradleProject/
│── src/main/java/ # Java 소스 코드
│── src/main/resources/ # 설정 파일
│── src/test/java/ # 테스트 코드
│── src/test/resources/ # 테스트 설정 파일
│── build/ # 빌드된 결과물 저장 (JAR, WAR)
│── build.gradle # Gradle 빌드 설정 파일
│── settings.gradle # Gradle 프로젝트 설정
│── gradlew # Gradle Wrapper (Linux)
│── gradlew.bat # Gradle Wrapper (Windows)
📌 예제 build.gradle 파일plugins { id 'java' id 'application'
} repositories { mavenCentral()
} dependencies { implementation 'org.springframework.boot:spring-boot-starter-web:2.5.6' testImplementation 'junit:junit:4.13.2'
} application { mainClass = 'com.example.app.Main'
}
🔹 gradlew build → 프로젝트 빌드
🔹 gradlew run → 애플리케이션 실행 대부분의 Java 프로젝트는 계층적 패키지 구조를 따릅니다.com.example.app
│── Application.java # 프로그램 진입점 (main 메서드)
│── controller/
│ ├── UserController.java
│ ├── ProductController.java
│── service/
│ ├── UserService.java
│ ├── ProductService.java
│── model/
│ ├── User.java
│ ├── Product.java
│── repository/
│ ├── UserRepository.java
│ ├── ProductRepository.java
📌 설명
controller/ → REST API 엔드포인트 담당
service/ → 비즈니스 로직 처리
model/ → 데이터 모델 (DTO, 엔티티)
repository/ → 데이터베이스 연동 (DAO) Main.java 파일에서 main 메서드 포함 확인
Run → Run 'Main' 클릭
mvn clean package
java -jar target/my-app-1.0-SNAPSHOT.jar
gradlew build
gradlew run
javac -d out src/com/example/app/Main.java
java -cp out com.example.app.Main
]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-프로젝트-구조.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java 프로젝트 구조.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 02:41:29 GMT</pubDate></item><item><title><![CDATA[byte, short 자료형을 사용하는 경우]]></title><description><![CDATA[Java에서 byte(1바이트)와 short(2바이트)는 존재하지만 일반적으로 많이 사용되지는 않습니다. 대신 int(4바이트)가 대부분의 경우 기본 정수형으로 사용됩니다.byte와 short는 메모리를 아껴야 하는 경우 사용됩니다.
특히, 대량의 데이터를 처리할 때 int보다 메모리를 절약할 수 있습니다.
예: 대량의 숫자 배열을 저장할 때 int[] 대신 byte[]를 사용하면 메모리 사용량이 4배 감소.
byte[] data = new byte[1000]; // 1000바이트(1KB) 사용
int[] numbers = new int[1000]; // 4000바이트(4KB) 사용 (4배 차이)
✅ 사용 예시: 센서 데이터 저장 (IoT, 임베디드 시스템) 이미지, 오디오 등의 바이너리 데이터 처리 네트워크 통신이나 파일 입출력에서 byte를 많이 사용합니다.
왜냐하면 네트워크 프로토콜과 파일 형식은 바이트 단위로 데이터 전송하기 때문입니다.byte[] buffer = new byte[1024];
InputStream inputStream = new FileInputStream("data.bin");
int bytesRead = inputStream.read(buffer);
✅ 사용 예시: 파일 입출력 (I/O) 네트워크 소켓 통신 (TCP/IP) 이미지, 오디오, 동영상 처리 비트 단위 데이터를 다룰 때 byte는 매우 유용합니다.byte flags = 0b00001111; // 8비트 플래그
flags |= 0b00100000; // 특정 비트를 설정
✅ 사용 예시: 비트마스크(bitmask) 연산 저수준 하드웨어 조작 (예: 임베디드 프로그래밍) 일부 임베디드 시스템에서는 int보다 byte와 short 연산이 더 빠를 수 있음. 하지만 현대 CPU에서는 int가 32비트 정수 연산에 최적화되어, 오히려 byte나 short보다 더 효율적인 경우가 많음.
✅ 사용 예시: 임베디드 시스템 마이크로컨트롤러 프로그래밍 (예: Arduino, STM32) 일반적인 정수 연산에는 int를 사용 현대 CPU는 int(4바이트)를 기본으로 처리하므로 short을 쓰면 성능이 좋아지지 않음. 연산할 때 자동으로 int로 변환되기 때문에, short을 써도 별 이득 없음. Java에서는 short을 거의 쓰지 않음 byte는 파일/네트워크 처리에 자주 사용되지만, short은 거의 안 씀.
short을 써도 int로 변환되는 경우가 많아, 그냥 int 쓰는 게 더 직관적. ✅ byte는 바이너리 데이터 처리 시 유용
✅ short은 메모리 절약 목적이 아니면 거의 사용되지 않음
✅ 일반적인 정수 연산에는 int를 사용하는 것이 가장 좋음 ]]></description><link>https://64etuor.github.io/600_tech-stack/java/byte,-short-자료형을-사용하는-경우.html</link><guid isPermaLink="false">600_Tech Stack/Java/byte, short 자료형을 사용하는 경우.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 02:41:23 GMT</pubDate></item><item><title><![CDATA[Java 생성자]]></title><description><![CDATA[위 코드는 Java에서 객체(Object)를 생성하고 변수에 할당하는 과정을 나타냅니다. Application4 application4 = new Application4();
이 문장은 다음과 같은 3가지 주요 부분으로 구성됩니다:Java는 객체 지향 프로그래밍(OOP, Object-Oriented Programming) 언어이며, 클래스(Class)를 기반으로 객체(Object, 인스턴스)를 생성하여 사용합니다.
객체를 만들기 위한 설계도(템플릿)
속성(변수, 필드)과 동작(메서드)을 정의 클래스를 기반으로 생성된 실제 데이터
메모리에 로드되어 사용됨
Application4 application4 = new Application4();
이 문장이 실행되는 과정을 하나씩 분석해 보겠습니다.Application4 application4; Application4는 사용자 정의 클래스 (또는 라이브러리 클래스)입니다.
application4는 이 클래스의 객체를 참조할 변수(Reference Variable) 입니다.
아직 객체가 할당되지 않았기 때문에 null 값을 가질 수 있음.
📌 비유: Application4 application4;는 빈 그릇을 준비하는 것과 비슷합니다.
아직 Application4 객체를 담지 않았기 때문에 그릇(application4 변수)은 비어 있음(null 상태).
new Application4(); new 키워드는 메모리(Heap 영역)에 새로운 객체를 생성합니다.
Application4();는 클래스의 생성자(Constructor)를 호출하여 객체를 초기화합니다.
📌 비유: new Application4();는 새로운 물건(객체)을 공장에서 만들어내는 과정과 같음.
Application4() 생성자가 객체를 초기화한 후 메모리에 로드됨.
application4 = new Application4(); new Application4();를 통해 생성된 객체가 메모리(Heap 영역)에 로드됩니다.
생성된 객체의 주소(메모리 참조 값)가 application4 변수에 저장됩니다.
📌 비유: application4 = new Application4();는 빈 그릇에 새로 만든 물건을 담는 것과 같음.
즉, application4 변수는 Application4 객체를 참조하게 됨.
위 코드에서 Application4()는 생성자(Constructor) 입니다.public class Application4 { // 생성자 public Application4() { System.out.println("Application4 객체가 생성되었습니다!"); }
}
📌 생성자의 역할
객체를 초기화 (필요한 변수를 설정하거나 메모리 할당)
클래스와 동일한 이름을 가짐
리턴 타입이 없음 (void도 사용하지 않음)
new 키워드와 함께 호출됨
🚀 결과: new Application4();를 실행하면 생성자가 호출되고 객체가 초기화됨.
위 생성자에서 "Application4 객체가 생성되었습니다!"가 출력될 것임.
Application4 application4 = new Application4();
📌 실행 과정에서 메모리 내부 구조
Heap 영역 new Application4(); 실행 시 Heap 메모리에 객체가 생성됨. Stack 영역 application4 변수(참조 변수)는 Stack에 저장됨.
이 변수는 Heap 영역에 생성된 Application4 객체를 참조하는 주소값을 가짐. public class Application4 { // 생성자 public Application4() { System.out.println("Application4 객체가 생성되었습니다!"); } // 메서드 public void displayMessage() { System.out.println("Hello from Application4!"); } public static void main(String[] args) { // 객체 생성 Application4 application4 = new Application4(); // 메서드 호출 application4.displayMessage(); }
}
Application4 객체가 생성되었습니다!
Hello from Application4!
📌 설명
new Application4(); 실행 → 생성자가 호출됨 → "Application4 객체가 생성되었습니다!" 출력 application4.displayMessage(); 실행 → "Hello from Application4!" 출력 🚀 이제 Application4 application4 = new Application4(); 문법이 어떻게 동작하는지 이해했을 거야! 😉]]></description><link>https://64etuor.github.io/600_tech-stack/java/java-생성자.html</link><guid isPermaLink="false">600_Tech Stack/Java/Java 생성자.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 02:41:14 GMT</pubDate></item><item><title><![CDATA[🌐 악명 높은 CORS 개념 & 해결법 - 정리 끝판왕 👏]]></title><description><![CDATA[악명 높은 CORS 에러 메세지 웹 개발을 하다보면 반드시 마주치는 멍멍 같은 에러가 바로 CORS 이다. 웹 개발의 신입 신고식이라고 할 정도로, CORS는 누구나 한 번 정도는 겪게 된다고 해도 과언이 아니다. 프론트엔드 개발자 입장에선 요청 코드를 이상하게 적은것도 아니고, 백엔드 개발자 입장에선 서버 코드나 세팅이 이상한것도 아니다. 모든게 멀쩡한데 왜 요청한 자료에 대한 응답을 시뻘건 에러줄로 확답하는게 문제이다. 🤬 이러한 현상이 일어나는 이유는, 웹 브라우저는 HTTP 요청에 대해서 어떤 요청을 하느냐에 따라 각기 다른 특징을 가지고 있기 때문이다. 요청 방식에 따라 다른 CORS 발생 여부 1. , , 2. XMLHttpRequest, Fetch API 스크립트 → 기본적으로 Same-Or..]]></description><link>https://64etuor.github.io/600_tech-stack/악명-높은-cors-개념-&amp;-해결법-정리-끝판왕.html</link><guid isPermaLink="false">600_Tech Stack/악명 높은 CORS 개념 &amp; 해결법 - 정리 끝판왕.md</guid><dc:creator><![CDATA[[[인파_]]]]></dc:creator><pubDate>Tue, 18 Feb 2025 01:27:33 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/6p7bn/btrqLUBlJJT/oO0OJTezjbllLqHy48kXO0/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/6p7bn/btrqLUBlJJT/oO0OJTezjbllLqHy48kXO0/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[클린 아키텍처(Clean Architecture) 개념 및 원칙]]></title><description><![CDATA[개발이란 마치 여러 개의 기반이 되는 블록을 만들어 설계 원칙에 따라 조립하여 완성해 나아가는 과정이라고 생각합니다. 여기서 설계 원칙은 수 많은 디자인 패턴들을 의미하며, 이번 주는 아키텍처 패턴에 속하는 클린 아키텍처에 대해 알아보는 것으로 이번 주 스터디 그룹의 주제를 선정하였습니다. 화자는 실무에서 MVVM 패턴과 클린 아키텍처를 함께 사용 중이나, 이 둘에 대한 설명에 명확한 답변을 할 수 있을지 의문을 가져 이번 기회에 명확히 알아두고자 합니다. 클린 아키텍처를 사용해야 하는 이유 기원 엉클 밥(Robert C. Martin)은 애자일 방법론의 지지자이자, SOLID (객체지향 설계 원칙)의 창시자로 알려져 있습니다. 그는 'Clean code'와 'Clean architecture'등의 책의..]]></description><link>https://64etuor.github.io/600_tech-stack/클린-아키텍처(clean-architecture)-개념-및-원칙.html</link><guid isPermaLink="false">600_Tech Stack/클린 아키텍처(Clean Architecture) 개념 및 원칙.md</guid><dc:creator><![CDATA[[[굿햄]]]]></dc:creator><pubDate>Tue, 18 Feb 2025 00:48:43 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/bOh3Wo/btrXn7BTilz/TWwETWquQqz79ndGY9gVc0/img.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/bOh3Wo/btrXn7BTilz/TWwETWquQqz79ndGY9gVc0/img.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Linux 변수확장과 인용의 차이]]></title><description><![CDATA[쉘 스크립트에서 $변수와 "${변수}"의 차이를 이해하려면 변수 확장(Variable Expansion)과 인용(Quoting)의 역할을 알아야 합니다.쉘에서 변수를 참조할 때:
$변수: 공백이 있을 경우 문제가 발생할 수 있음
"${변수}": 안전하게 변수 값을 감싸서 처리 가능
FILENAME="my file.txt"
echo $FILENAME
출력:my file.txt 쉘은 공백을 구분자로 인식하기 때문에 "my"와 "file.txt"를 두 개의 인자로 인식하여 문제가 발생할 수 있음.
cp $FILENAME /backup/
이 경우, cp 명령어는 my와 file.txt를 두 개의 인자로 해석하여 오류가 발생할 수 있음.FILENAME="my file.txt"
echo "${FILENAME}"
출력:my file.txt
cp "${FILENAME}" /backup/
]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-변수확장과-인용의-차이.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux 변수확장과 인용의 차이.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 12 Feb 2025 02:31:00 GMT</pubDate></item><item><title><![CDATA[Linux if문 공백에 관한 설명]]></title><description><![CDATA[좋은 질문입니다! Linux에서 대괄호([ 와 ])를 사용하는 test 명령어가 어떻게 동작하는지 이해하면, if [ ! -f "$SOURCE_FILE" ]; then에서 공백이 왜 필요한지 알 수 있습니다.Linux에서 [(대괄호)는 사실상 test라는 명령어의 alias입니다.
즉, 아래 두 명령어는 동일한 역할을 합니다.[ -f "$SOURCE_FILE" ]
test -f "$SOURCE_FILE"
즉, if [ ! -f "$SOURCE_FILE" ]; then을 풀어 쓰면:if test ! -f "$SOURCE_FILE"; then
이렇게 되므로 [와 ]는 test 명령어의 구문을 따릅니다.Shell에서는 각각의 명령어나 인자가 공백으로 구분됩니다.
[ -f "$SOURCE_FILE" ]에서 [과 ]도 명령어와 인자로 취급되므로, 올바르게 동작하려면 각각을 공백으로 분리해야 합니다.❌ 잘못된 예시 (공백이 없음) if [-f "$SOURCE_FILE" ]; then
→ [-f는 하나의 명령어처럼 인식되므로 에러 발생!✔ 올바른 예시 (공백 유지) if [ -f "$SOURCE_FILE" ]; then
→ [, -f, "파일명", ]가 각각 명령어와 인자로 인식됨.Bash에서 제공하는 확장된 조건식 [[ ... ]]을 사용하면, 문법이 더 유연해집니다.]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-if문-공백에-관한-설명.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux if문 공백에 관한 설명.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 12 Feb 2025 02:24:24 GMT</pubDate></item><item><title><![CDATA[Linux 표준입출력]]></title><description><![CDATA[# home 디렉터리에 있는 .txt 파일들을 모두 새로운 폴더로 이동
mkdir backup &amp;&amp; mv ~/*.txt backup/ # test 디렉터리가 없으면 만들고 이동
[ -d test ] || mkdir test &amp;&amp; cd test
]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-표준입출력.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux 표준입출력.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 11 Feb 2025 02:47:29 GMT</pubDate></item><item><title><![CDATA[Linux Commands]]></title><description><![CDATA[리눅스를 사용할 때 가장 많이 쓰이는 기본 명령어부터 고급 명령어까지 정리해봤어! 💻 📌 💡 예제: mkdir my_project # my_project 폴더 생성
cd my_project # 해당 폴더로 이동
touch test.txt # 빈 파일 생성
mv test.txt renamed.txt # 파일 이름 변경
rm renamed.txt # 파일 삭제
📌 💡 예제: cat /etc/passwd # 사용자 계정 정보 출력
grep "root" /etc/passwd # 파일에서 'root' 포함된 줄 찾기
tail -f /var/log/syslog # 시스템 로그 실시간 모니터링
📌 💡 예제: ps aux | grep firefox # 실행 중인 Firefox 프로세스 찾기
kill -9 12345 # PID 12345 강제 종료
df -h # 디스크 사용량 확인
free -h # 메모리 사용량 확인
]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-commands.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux Commands.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 11 Feb 2025 02:40:44 GMT</pubDate></item><item><title><![CDATA[Linux 정규표현식]]></title><description><![CDATA[Linux에서 정규 표현식(Regex)은 grep, sed, awk 등의 명령어에서 문자열을 검색하고 변환하는 데 사용됩니다. 정규 표현식은 특정 패턴을 정의하여 문자열을 효율적으로 찾고 처리할 수 있도록 합니다.grep은 파일에서 특정 패턴을 검색할 때 사용됩니다.grep "pattern" filename
grep "error" logfile.txt # 'error'가 포함된 줄 출력
grep -i "error" logfile.txt # 대소문자 구분 없이 검색
grep -v "debug" logfile.txt # 'debug'가 포함되지 않은 줄 출력
grep -E "[0-9]{3}-[0-9]{4}" file.txt # 전화번호 패턴 검색
]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-정규표현식.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux 정규표현식.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 11 Feb 2025 02:27:17 GMT</pubDate></item><item><title><![CDATA[Linux Shell built-in commands]]></title><description><![CDATA[알겠어! 쉘 명령어(Shell Built-in Commands)와 쉘 스크립트 관련 명령어를 따로 정리할게. 쉘 명령어는 일반적인 리눅스 명령어(ls, cp 등)와는 다르게 쉘 내부에서 실행되는 명령어야.
즉, 별도의 실행 파일이 아니라 쉘 자체에 내장된 기능을 수행하는 명령어들이야. 📌 쉘 명령어 확인 방법type 명령어
예제:type cd # cd is a shell builtin
type ls # ls is /bin/ls (외부 명령어)
cd는 쉘 내부 명령어이고, ls는 실행 파일임을 알 수 있어.📌 💡 예제export MYVAR="Hello, Shell!" # 환경 변수 설정
echo $MYVAR # 변수 출력
unset MYVAR # 변수 삭제
📌 💡 예제pushd /var/log # 현재 디렉토리를 스택에 저장하고 /var/log로 이동
popd # 이전 디렉토리로 복귀
]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-shell-built-in-commands.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux Shell built-in commands.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Feb 2025 03:25:45 GMT</pubDate></item><item><title><![CDATA[Linux Hotkeys]]></title><description><![CDATA[리눅스에서 자주 사용하는 단축키들을 정리했어! GUI 환경과 CLI(터미널) 환경에서 모두 활용할 수 있도록 나눠서 정리했어. 📌 💡 Super(Win) 키는 대부분의 리눅스 배포판에서 Windows 키로 설정돼 있어. 📌 💡 Ctrl + R을 누르면 이전에 입력한 명령어를 검색할 수 있어! (reverse-i-search)📌 💡 GUI가 멈췄을 때 Ctrl + Alt + F3을 눌러 CLI로 들어가 강제 종료하거나 재부팅 가능. 📌 💡 Alt + SysRq + REISUB는 시스템이 멈췄을 때 강제 재부팅하는 방법! (SysRq 키 활성화 필요)
📌 💡 Ctrl + Alt + Backspace는 X 서버를 강제 종료하여 GUI를 리셋할 수 있음. (Xorg 설정에서 활성화 필요) ]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-hotkeys.html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux Hotkeys.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Feb 2025 03:18:33 GMT</pubDate></item><item><title><![CDATA[Linux VM 만들기(feat.Virtual Box)]]></title><description><![CDATA[Virtual Box는 Docker와 달리 OS와 하드웨드가 전부 분리된 VM이라고 한다.
하드웨어 자원을 할당하고 아래와 같이 설치를 진행<img alt="Pasted image 20250210110647.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210110647.png" target="_self"><br>
<img alt="Pasted image 20250210110656.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210110656.png" target="_self"><br>
<img alt="Pasted image 20250210110703.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210110703.png" target="_self"><br>
<img alt="Pasted image 20250210110612.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210110612.png" target="_self"><br>
<img alt="Pasted image 20250210111355.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210111355.png" target="_self"><br>
<img alt="Pasted image 20250210111630.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210111630.png" target="_self"><br>
<img alt="Pasted image 20250210111735.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210111735.png" target="_self"><br>
<img alt="Pasted image 20250210111745.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210111745.png" target="_self"><br>
<img alt="Pasted image 20250210111840.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210111840.png" target="_self"><br>
<img alt="Pasted image 20250210113828.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210113828.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/linux/linux-vm-만들기(feat.virtual-box).html</link><guid isPermaLink="false">600_Tech Stack/Linux/Linux VM 만들기(feat.Virtual Box).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Feb 2025 02:38:30 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250210110647.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250210110647.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Docker vs Virtual box]]></title><description><![CDATA[Docker와 VirtualBox는 둘 다 가상화 기술을 이용하지만, 사용하는 방식과 목적이 다릅니다. VirtualBox는 하드웨어 가상화를 이용하여 전체 OS를 가상화합니다. 예를 들어, Windows에서 Ubuntu를 실행할 수 있습니다.
Docker는 컨테이너 가상화를 이용하여 애플리케이션을 실행합니다. 단일 OS 커널을 공유하며, 프로세스 단위로 격리합니다. Docker는 호스트 OS의 커널을 직접 사용하므로 부팅 속도가 빠르고, 자원 사용량이 적습니다.
VirtualBox는 별도의 OS를 실행해야 하므로 메모리, CPU 사용량이 많고 부팅 속도가 느립니다. VirtualBox는 가상 머신이 완전히 독립된 OS이므로 격리가 강력하고 보안성이 높습니다.
Docker는 커널을 공유하는 구조이므로 보안 격리가 비교적 약합니다. VirtualBox는 Windows, Linux, macOS 등 다양한 OS를 가상 머신에서 실행할 수 있습니다.
Docker는 기본적으로 Linux 컨테이너를 실행하며, Windows에서는 WSL2를 활용해야 합니다.
]]></description><link>https://64etuor.github.io/600_tech-stack/docker-vs-virtual-box.html</link><guid isPermaLink="false">600_Tech Stack/Docker vs Virtual box.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Feb 2025 02:21:15 GMT</pubDate></item><item><title><![CDATA[DBSCAN(밀도 기반 클러스터링)]]></title><description><![CDATA[DBSCAN (Density-Based Spatial Clustering of Application with Noise) 포인트 데이터 분석에서 DBSCAN은 항상 빠지지 않고 등장한다. 항상 무의식적으로 사용했었는데, 조금 더 자세히 알아보고 싶었다. DBSCAN 이란? DBSCAN(Density-Based Spatial Clustering of Applications with Noise)은 머신 러닝에 주로 사용되는 클러스터링 알고리즘으로 Multi Dimension의 데이터를 밀도 기반으로 서로 가까운 데이터 포인트를 함께 그룹화하는 알고리즘이다. DBSCAN은 밀도가 다양하거나 모양이 불규칙한 클러스터가 있는 데이터와 같이 모양이 잘 정의되지 않은 데이터를 처리할 때 유용하게 사용 가능하다. K-..]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/dbscan(밀도-기반-클러스터링).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/DBSCAN(밀도 기반 클러스터링).md</guid><dc:creator><![CDATA[[[난시간과싸워]]]]></dc:creator><pubDate>Sun, 09 Feb 2025 02:13:57 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/cpOe5z/btr2OrOW7VL/S9KuZa8GCXElDMaml5upak/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/cpOe5z/btr2OrOW7VL/S9KuZa8GCXElDMaml5upak/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[SQL 스타일가이드 (Gitlab)]]></title><description><![CDATA[SQL Style Guid]]></description><link>https://64etuor.github.io/600_tech-stack/sql/sql-style-guide-from-gitlab.html</link><guid isPermaLink="false">600_Tech Stack/SQL/SQL Style Guide from Gitlab.md</guid><dc:creator><![CDATA[Gitlab]]></dc:creator><pubDate>Fri, 07 Feb 2025 04:57:15 GMT</pubDate></item><item><title><![CDATA[Snippets 모음]]></title><description><![CDATA[– 데이터베이스의 모든 테이블과 컬럼 구조 확인 SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_DEFAULT
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = '데이터베이스명'; 아래와 같이 스키마 구조를 보면서 쿼리를 작성하면 수월하다.<img alt="Pasted image 20250207094044.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250207094044.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/sql/snippets-모음.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Snippets 모음.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 07 Feb 2025 00:44:38 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250207094044.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250207094044.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Trigger 예외 처리 방법]]></title><description><![CDATA[MySQL 트리거에서는 예외 처리를 할 수 있지만, SIGNAL 문을 사용해야 합니다.
일반적인 BEGIN ... EXCEPTION 블록은 트리거에서 지원되지 않지만, SIGNAL SQLSTATE를 사용하면 예외를 발생시킬 수 있습니다. 트리거에서 특정 조건이 발생했을 때 오류를 강제로 발생시켜 작업을 중단할 수 있음.DELIMITER // CREATE TRIGGER before_salary_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN -- 급여가 5000 이하로 변경되면 예외 발생 IF NEW.salary &lt; 5000 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '급여는 5000 이상이어야 합니다.'; END IF;
END // DELIMITER ;
✅ 동작 방식 employees 테이블에서 급여(salary)가 5000 미만으로 업데이트될 경우 예외 발생 SIGNAL SQLSTATE '45000'을 사용하여 오류를 강제로 발생시키고, 메시지를 지정 가능 트리거 실행 중 예외가 발생하면 전체 트랜잭션이 롤백됨
예를 들어, manager_id가 NULL로 설정되는 것을 방지하는 트리거를 만들 수 있음.DELIMITER // CREATE TRIGGER before_manager_update
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN IF NEW.manager_id IS NULL THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '관리자는 NULL이 될 수 없습니다!'; END IF;
END // DELIMITER ;
✅ manager_id가 NULL로 업데이트되려 하면 예외 발생!
✅ 실행 예제UPDATE employees SET manager_id = NULL WHERE emp_id = 1;
-- ERROR 1644 (45000): 관리자는 NULL이 될 수 없습니다!
age 값이 18 미만인 경우 삽입을 막는 트리거.]]></description><link>https://64etuor.github.io/600_tech-stack/sql/trigger-예외-처리-방법.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Trigger 예외 처리 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Feb 2025 03:39:04 GMT</pubDate></item><item><title><![CDATA[SQLSTATE 생성 가능 갯수]]></title><description><![CDATA[MySQL에서 SIGNAL SQLSTATE를 사용하여 사용자 정의 오류를 생성할 수 있습니다.
사용자 정의 SQLSTATE 코드는 45000 ~ 45099 사이에서 생성 가능합니다.
공식 문서에는 45000번 이상의 SQLSTATE 코드를 사용자 정의 오류 코드로 사용할 수 있다고 명시됨.
그러나 45000 ~ 45099 범위에서만 권장됨.
실질적으로 100개(45000 ~ 45099)까지 정의 가능.
DELIMITER // CREATE PROCEDURE testCustomErrors(IN value INT)
BEGIN IF value = 1 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '에러: 입력값이 1입니다.'; ELSEIF value = 2 THEN SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = '에러: 입력값이 2입니다.'; ELSEIF value = 3 THEN SIGNAL SQLSTATE '45002' SET MESSAGE_TEXT = '에러: 입력값이 3입니다.'; ELSE SELECT '정상적인 입력값입니다.' AS message; END IF;
END // DELIMITER ;
📌 실행 결과CALL testCustomErrors(1);
-- ERROR 1644 (45000): 에러: 입력값이 1입니다. CALL testCustomErrors(2);
-- ERROR 1644 (45001): 에러: 입력값이 2입니다. CALL testCustomErrors(3);
-- ERROR 1644 (45002): 에러: 입력값이 3입니다. CALL testCustomErrors(4);
-- 정상적인 입력값입니다.
MySQL에서는 45000~45099 이외의 SQLSTATE를 SIGNAL에 사용하면 오류가 발생합니다.❌ 잘못된 예제 SIGNAL SQLSTATE '45100' SET MESSAGE_TEXT = '잘못된 SQLSTATE 코드';
🔹 오류 발생! ERROR 1231 (42000): Variable 'sql_mode' can't be set to the value of '45100'
👉 45000~45099 범위를 벗어나면 허용되지 않음!]]></description><link>https://64etuor.github.io/600_tech-stack/sql/sqlstate-생성-가능-갯수.html</link><guid isPermaLink="false">600_Tech Stack/SQL/SQLSTATE 생성 가능 갯수.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Feb 2025 03:16:07 GMT</pubDate></item><item><title><![CDATA[MySQL RAND 함수의 난수 생성 원리]]></title><description><![CDATA[MySQL 서버의 RAND 함수는 시드(Seed)값이 주어지지 않은 경우 0이상 1.0 미만의 부동소수값을 반환하는 함수이다. 어떠한 경우에도 랜덤 값은 1.0 이상으로 생성되지 않는다. MySQL 서버에는 내부적으로 난수를 생성하는 과정에 난수 생성 최대값 제한(1073741823)이 존재하는데, 이 최대값으로 시드값에 모듈러 연산을 수행하고 시드값이 32비트를 넘을 경우에는 2^32 모듈러 연산을 수행한다. 시드값이 크게 주어진다해도 결국 RAND 함수는 난수 생성 최대값 제한에 영향을 받는다. 시드값이 존재하는 경우와 그렇지 않은 경우를 나누어 좀 더 자세한 계산 과정을 살펴보겠다. Seed 값이 존재하는 경우 RAND 함수내에 인자로 주어진 시드값은 난수 구조체(rand structure)에 의해..]]></description><link>https://64etuor.github.io/600_tech-stack/sql/mysql-rand-함수의-난수-생성-원리.html</link><guid isPermaLink="false">600_Tech Stack/SQL/MySQL RAND 함수의 난수 생성 원리.md</guid><dc:creator><![CDATA[[[SilverLee]]]]></dc:creator><pubDate>Mon, 03 Feb 2025 01:24:37 GMT</pubDate></item><item><title><![CDATA[SMOTE]]></title><description><![CDATA[이번에 알아볼 것은 불균형 데이터(Imbalanced Data) 처리에 대해서 알아보겠습니다. 불균형 데이터는 모델 학습에 좋지 않은 영향을 미치게되어 그 모델의 신뢰성을 떨어뜨리곤 하는데요. 그렇다면, 불균형 데이터가 가지고 있는 문제는 무엇이며, 이를 해결하기 위한 방법 중 오버샘플링에 대해서 알아보겠습니다. 추가적으로, 오버샘플링 기법 중 많이 활용되는 SMOTE(Synthetic Miniority Oversampling Technique)에 대해 알아보겠습니다. 1. 불균형 데이터와 불균형 데이터의 문제점- 불균형 데이터(Imbalanced Data)란, 불균형한 클래스 분포를 가진 데이터셋을 말합니다. - 불균형한 클래스 분포란, 하나의 클래스가 다른 클래스보다 훨씬 더 많은 샘플을 가지고 있는..]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/smote.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/SMOTE.md</guid><dc:creator><![CDATA[[[CodeCrafter]]]]></dc:creator><pubDate>Sun, 02 Feb 2025 05:48:46 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/vRUYi/btstXyBB4dY/BzTAcOhROpHh4jyqLlHveK/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/vRUYi/btstXyBB4dY/BzTAcOhROpHh4jyqLlHveK/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[temp_doc]]></title><description><![CDATA[-- 08_subquery
SELECT m2.menu_name
FROM tbl_menu m1
JOIN tbl_menu m2 ON m1.category_code = m2.category_code
WHERE m1.menu_name = '민트미역국'
; SELECT menu_name FROM tbl_menu WHERE category_code = (select category_code FROM tbl_menu WHERE menu_name = '민트미역국')
; -- 서브쿼리가 from 절에서 사용 될 경우 인라인 뷰 라고 한다.
-- from 절에서 서브쿼리를 사용할 경우 반드시 별칭을 작성해야 하며
-- 서브 쿼리 내부에 함수를 사용할 경우 별칭을 통해 컬럼명으로
-- 지칭할 수 있도록 작성한다. SELECT COUNT(*) AS 'count'
FROM tbl_menu
GROUP BY category_code
; SELECT MAX(COUNT)
FROM ( SELECT COUNT(*) AS 'count' FROM tbl_menu GROUP BY category_code ) AS countmenu
; -- 상[호연]관 서브쿼리
-- : 메인 쿼리가 서브쿼리의 결과에 영향을 주는 형태
-- 해당 카테고리 메뉴 평균가보다 높은 가격을 가진 메뉴만 조회
SELECT menu_code , menu_name , category_code , menu_price , orderable_status
FROM tbl_menu a
WHERE menu_price &gt; (SELECT AVG(menu_price) FROM tbl_menu WHERE category_code = a.category_code)
; -- exists: 조회 결과가 있을 때 true, 없을 때 false
-- 메뉴 테이블에 존재하는 카테고리만 조회
SELECT category_name
FROM tbl_category a
WHERE EXISTS (SELECT 1 FROM tbl_menu b WHERE b.category_code = a.category_code)
; -- CTE(Common Table Expression)
-- 인라인뷰로 사용되는 서브쿼리를 미리 정의해서 사용하는 문법
WITH menucate AS ( SELECT menu_name , category_name FROM tbl_menu a JOIN tbl_category b ON a.category_code = b.category_code
)
SELECT *
FROM menucate
; -- 07_grouping -- group by: 결과 집합을 특정 열의 값에 따라 그룹화
-- having: group by절과 함께 사용하며 그룹의 조건을 적용 -- 그룹함수: count, sum, avg, min, max
SELECT category_code , COUNT(*)
FROM tbl_menu
GROUP BY category_code; -- count 함수의 특성
SELECT COUNT(*) , COUNT(category_code) , COUNT(ref_category_code)
FROM tbl_category
; -- sum: 합계
SELECT category_code , SUM(menu_price)
FROM tbl_menu
GROUP BY category_code
; -- avg: 평균
SELECT category_code , ROUND (AVG (menu_price), 2)
FROM tbl_menu
GROUP BY category_code
; -- min, max는 모든 데이터 타입을 대상으로 사용 가능
SELECT MIN(emp_name) , MAX(emp_name) , MIN(hire_date) , MAX(hire_date)
FROM employee
; -- groupy by 에서 2개 이상의 그룹 생성
SELECT menu_price , category_code , COUNT(*)
FROM tbl_menu
GROUP by menu_price, category_code
; -- 카테고리별로 메뉴 가격 평균이 10000원 이상인 카테고리의
-- 카테고리 코드, 카테고리명, 평균 메뉴 가격 조회 SELECT a.category_code , b.category_name , ROUND (AVG(a.menu_price)) AS 'avg_price'
FROM tbl_menu a
JOIN tbl_category b ON a.category_code = b.category_code
GROUP BY a.category_code, b.category_name
HAVING ROUND (AVG(a.menu_price)) &gt;= 10000
; -- 앞의 숫자는 내부 실행 순서, 작성 순서가 문법적 작성 순서
-- 6 select: 조회 컬럼
-- 1 from: 조회 대상 테이블
-- 2 join: 조회 대상 테이블
-- 3 where: 테이블 행을 조건으로 필터링
-- 4 group by: 대상 컬럼으로 결과 집합 그루핑
-- 5 having: 그루핑 결과를 조건으로 필터링
-- 7 order by: 정렬 기준 -- rollup: 중간 집계 함수
-- group by 절의 첫 번재 기준 컬럼에 대한 중간 집계 + 총 집계 값이
-- result set에 포함된다. SELECT category_code , SUM(menu_price)
FROM tbl_menu
GROUP BY category_code
WITH ROLLUP
; SELECT menu_price , category_code , SUM(menu_price)
FROM tbl_menu
GROUP BY menu_price, category_code
WITH ROLLUP
;
``
]]></description><link>https://64etuor.github.io/600_tech-stack/sql/temp_doc.html</link><guid isPermaLink="false">600_Tech Stack/SQL/temp_doc.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 24 Jan 2025 08:28:28 GMT</pubDate></item><item><title><![CDATA[AIC (Akaike Information Criterion)]]></title><description><![CDATA[AIC는 모델 선택(Model Selection)을 위한 통계적 기준으로, 모델의 적합도와 복잡도를 모두 고려하여 가장 적합한 모델을 선택하는 데 사용됩니다. 이 문서에서는 AIC의 정의, 유도 과정, 활용 방법, 그리고 실제 예제를 통해 AIC를 심도 있게 이해할 수 있도록 합니다. 공식: : 추정된 모델의 최대우도 값 (Likelihood).
: 모델의 파라미터 수. 의미: : 모델의 적합도를 평가.
: 모델 복잡도에 대한 페널티를 추가하여 과적합 방지.
AIC 값이 작을수록 좋은 모델. AIC는 모델이 데이터를 잘 설명하는 정도와 모델의 단순성을 균형 있게 평가합니다. AIC는 절대적인 지표가 아닌 상대적인 지표로, 여러 모델의 AIC 값을 비교하여 가장 작은 값을 가진 모델을 선택합니다. 데이터가 독립적이고 동일한 분포(i.i.d.)를 따른다고 가정합니다.
동일한 데이터셋에 대해 모델을 비교해야 합니다. BIC (Bayesian Information Criterion): : 데이터 포인트 개수.
BIC는 데이터 크기에 따라 더 강한 페널티를 부과하여 단순한 모델을 선호.
AIC는 상대적으로 유연한 모델 선택이 가능. Adjusted 는 주로 선형 회귀에서 사용되며, 모델 복잡도에 따라 를 조정하여 비교합니다.
AIC는 보다 일반적인 모델(예: 선형 회귀 외의 경우)에도 적용 가능합니다. 여러 대안 모델을 설계합니다.
각 모델의 최대우도 값을 계산합니다.
AIC 값을 계산: 가장 낮은 AIC 값을 가진 모델을 선택합니다. 목표: 변수 선택(Feature Selection)을 통해 최적의 회귀 모델을 찾습니다.
모든 가능한 변수 조합에 대해 회귀 모델을 피팅하고, AIC 값을 계산하여 비교합니다. 종속 변수 , 독립 변수 . 모델 1: 모델 2: 모델 1: , . 모델 2: , . AIC 값이 작은 모델 2를 선택합니다.
]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/aic-(akaike-information-criterion).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/AIC (Akaike Information Criterion).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Log-likelihood Function]]></title><description><![CDATA[로그우도 함수는 주어진 데이터가 특정 파라미터 하에서 관측될 가능성을 나타내는 우도 함수의 로그 변환입니다. 이 함수는 통계학과 기계 학습에서 파라미터 추정을 위해 널리 사용되며, 최대우도 추정법(MLE)의 핵심 개념입니다. 본 노트에서는 로그우도 함수의 정의와 활용, 최적화 방법, 다양한 확률 모델에의 적용, 그리고 실전 예제를 다룹니다. 우도 함수 (): 주어진 데이터 가 특정 파라미터 하에서 관측될 확률을 나타냅니다. 로그우도 함수 (): 우도 함수에 로그를 취한 함수입니다. 왜 로그를 사용하는가? 계산의 간편성: 곱셈을 덧셈으로 변환하여 수학적 계산을 단순화.
수치 안정성: 매우 작은 확률 값을 처리할 때 로그를 사용하면 언더플로우 문제를 방지.
최적화 편의성: 미분과 최적화에서 계산이 더 간단해짐. 독립성 가정: 데이터 이 서로 독립적으로 분포한다고 가정.
결합 확률은 각 데이터의 개별 확률의 곱으로 표현됩니다: 계산 단순화: 곱셈을 로그를 통해 덧셈으로 변환: 최적화 가능성: 로그우도를 최대화하여 파라미터를 추정: 목적: 주어진 데이터가 가장 가능성 높게 관측될 수 있는 파라미터 를 찾는 것.
MLE는 다음을 최대화하는 를 찾습니다: 방법론: 로그우도 함수 를 구한다.
를 에 대해 미분하여 극값(최대값 또는 최소값)을 구한다.
두 번째 미분을 통해 극값이 최대값인지 확인한다. MLE의 특징: 불편성 (Unbiasedness): 표본 크기가 충분히 크면 가 참값 에 가까워짐.
일치성 (Consistency): 표본 크기가 증가하면 는 참값 에 수렴.
효율성 (Efficiency): MLE는 최소 분산 추정량 중 하나. 문제: (정규분포)에서 평균 와 분산 를 추정하시오. PDF: 우도 함수: 로그우도 함수: 간소화: 최적화: 에 대해: 에 대해: 문제: (베르누이 분포)에서 성공 확률 를 추정하시오. PMF: 우도 함수: 로그우도 함수: 최적화: 통계 모델링: 다양한 분포 (정규분포, 이항분포, 포아송분포 등)의 파라미터 추정. 기계 학습: 선형 회귀, 로지스틱 회귀, 딥러닝 모델 학습에서 손실 함수로 활용. 베이즈 추정: 우도 함수는 베이즈 정리에서 사후 확률 계산의 핵심 요소. Wasserman, L. (2010). All of Statistics: A Concise Course in Statistical Inference. Springer.
Hastie, T., Tibshirani, R., &amp; Friedman, J. (2009). The Elements of Statistical Learning. Springer.
]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/log-likelihood-function.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/Log-likelihood Function.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 13 Jan 2025 13:36:29 GMT</pubDate></item><item><title><![CDATA[KDE(Kernel Density Estimation)]]></title><description><![CDATA[
Kernel Density Estimation(KDE)은 데이터의 확률 밀도 함수(PDF)를 비모수(non-parametric) 방식으로 추정하는 기법입니다.
데이터의 분포를 시각화하거나 분석할 때 유용하며, 특히 히스토그램보다 매끄럽고 직관적인 결과를 제공합니다. 확률 밀도 함수는 연속형 확률변수의 분포를 나타냅니다.
PDF의 적분은 전체 확률 1을 만족합니다. 데이터 포인트를 기준으로 국소적인 밀도를 계산하는 데 사용됩니다.
주로 사용되는 커널 함수는 다음과 같습니다: 가우시안(Gaussian): 박스(Box): 삼각형(Triangular): 에피네치코프(Epanechnikov): 커널 함수의 범위를 조절하는 파라미터로, KDE의 부드러움을 결정합니다. 작은 : 높은 해상도, 과적합 가능성.
큰 : 매끄러운 추정, 과소적합 가능성. 적절한 대역폭 선택은 KDE 성능에 매우 중요합니다.
KDE는 다음과 같은 수식으로 정의됩니다:
: 에서의 밀도 추정값
: 데이터 샘플 수
: 대역폭
: 관측된 데이터
: 커널 함수 비모수적: 데이터 분포에 대한 가정이 필요하지 않습니다.
유연성: 데이터의 구조에 따라 밀도 추정을 매끄럽게 조정 가능.
적용성: 1차원뿐만 아니라 다차원 데이터에도 적용 가능.
]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/kde(kernel-density-estimation).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/KDE(Kernel Density Estimation).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 10:05:42 GMT</pubDate></item><item><title><![CDATA[Scikit-learn getting Started]]></title><description><![CDATA[The purpose of this guide is to illustrate some of the main features that scikit-learn provides. It assumes a very basic working knowledge of machine learning practices (model fitting, predicting, ...]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/scikit-learn-library.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/Scikit-learn Library.md</guid><dc:creator><![CDATA[[[+/scikit-learn]]]]></dc:creator><pubDate>Sat, 11 Jan 2025 15:02:10 GMT</pubDate></item><item><title><![CDATA[Bayes Theorem]]></title><description><![CDATA[베이즈 정리는 확률론과 통계학에서 조건부 확률을 계산하는 데 사용하는 정리입니다. 관찰된 데이터와 사전 지식을 기반으로 사건의 가능성을 갱신하는 데 매우 유용합니다. 이는 특히 의사결정, 머신러닝, 베이지안 추론 등 다양한 응용 분야에서 중요한 역할을 합니다.베이즈 정리는 다음과 같이 수식으로 표현됩니다:
: 사건 가 발생했을 때 사건 가 발생할 확률 (사후확률)
: 사건 가 발생했을 때 사건 가 발생할 확률 (우도)
: 사건 가 발생할 사전 확률 (사전확률)
: 사건 가 발생할 전체 확률 (정규화 상수) 사전확률 (Prior Probability) 사건 가 관찰 이전에 발생할 가능성을 나타냅니다.
우리의 초기 신념이나 가정에 해당합니다. 우도 (Likelihood) 사건 가 발생한 경우에 사건 가 발생할 가능성을 나타냅니다. 사후확률 (Posterior Probability) 사건 를 관찰한 이후, 사건 에 대한 신뢰도를 갱신한 값입니다. 전체 확률 (Marginal Probability) 사건 가 발생할 확률로, 모든 가능한 경우를 고려하여 계산됩니다. ]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/bayes-theorem.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/Bayes Theorem.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 07:58:10 GMT</pubDate></item><item><title><![CDATA[ANOVA(Analysis of Variance)]]></title><description><![CDATA[ANOVA (Analysis of Variance, 분산분석)는 두 개 이상의 그룹 간 평균의 차이를 검정하는 통계 기법입니다. 일반적으로 독립변수가 범주형이고 종속변수가 연속형일 때 사용됩니다. ANOVA는 그룹 간 평균 차이가 우연에 의한 것인지, 아니면 통계적으로 유의미한 차이인지를 판단하는 데 도움을 줍니다. 귀무가설 (Null Hypothesis, H₀) 모든 그룹의 평균이 서로 같다.
예: "모든 지역의 판매량 평균은 동일하다." 대립가설 (Alternative Hypothesis, H₁) 적어도 하나의 그룹 평균은 다르다.
예: "적어도 한 지역의 판매량 평균은 다르다." F-통계량 (F-statistic) 그룹 간 분산과 그룹 내 분산의 비율입니다.
F값이 클수록 그룹 간 평균 차이가 크다는 의미입니다. p-value 귀무가설을 기각할지 결정하는 기준입니다.
p-value &lt; 0.05이면 귀무가설을 기각하고, 그룹 간 평균에 차이가 있다고 결론 내립니다. 일원배치 분산분석 (One-Way ANOVA) 한 개의 요인(독립변수)에 대해 두 개 이상의 그룹 평균을 비교합니다.
예: "동일한 제품을 판매하는 3개의 지역에서 판매량 평균에 차이가 있는가?" 이원배치 분산분석 (Two-Way ANOVA) 두 개의 요인(독립변수)에 대해 그룹 평균을 비교합니다.
예: "지역과 판매 방법(온라인/오프라인)에 따라 판매량 평균에 차이가 있는가?" 반복측정 분산분석 (Repeated Measures ANOVA) 동일한 그룹에 대해 여러 시점에서 측정된 데이터를 비교합니다.
예: "같은 참가자가 3가지 조건에서 수행한 테스트 점수를 비교한다." ]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/anova(analysis-of-variance).html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/ANOVA(Analysis of Variance).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 14:03:33 GMT</pubDate></item><item><title><![CDATA[K-Means Clustering Algorithm]]></title><description><![CDATA[K-평균 클러스터링은 비지도 학습(unsupervised learning) 방식의 군집화(clustering) 알고리즘입니다. 데이터를 K개의 클러스터로 나누고, 각 클러스터에 속하는 데이터들이 최대한 비슷하게 되도록 하는 알고리즘입니다. 비지도 학습: 정답(레이블) 없이 데이터를 그룹화하는 학습 방식입니다. 클러스터: 비슷한 특성을 가진 데이터들의 그룹입니다. 중심점(센트로이드): 각 클러스터의 중심을 나타내는 점입니다.
K-평균 클러스터링에서는 이 중심점을 기준으로 데이터를 나눕니다. K개의 초기 중심점(centroids)을 무작위로 설정합니다.
각 데이터 포인트를 가장 가까운 중심점에 할당하여 클러스터를 형성합니다.
각 클러스터에 대해 새로운 중심점을 계산합니다 (클러스터 내 데이터들의 평균값).
중심점이 더 이상 변화하지 않을 때까지 2번과 3번 단계를 반복합니다.
]]></description><link>https://64etuor.github.io/600_tech-stack/machine-learning/k-means-clustering-algorithm.html</link><guid isPermaLink="false">600_Tech Stack/Machine Learning/K-Means Clustering Algorithm.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 12:35:42 GMT</pubDate></item><item><title><![CDATA[2025-07-01 하반기 목표, 불안의 원인, 해결 방법]]></title><description><![CDATA[
"올 하반기의 제일 큰 목표는 뭐야? What is your biggest goal for the late half of this year?" <img alt="Pasted image 20250701180123.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250701180123.png" target="_self">
올해 초, 세컨드 브레인 북클럽에서 세운 목표다.
놀랍게도 7월 21일이 되면 사이드 프로젝트 1개 하기, 연애하기 빼고 모두 완료된다.
사이드 프로젝트 계획은 이미 가지고 있고, 정확한 실행 일정만 세우면 된다.
이미 오래 전에 구상이 완료된 일이라 실행에 큰 문제는 없을 걸로 생각된다.
문제가 되는 것은 항상 문제가 되는 법이고, 이번에도 이것이 문제다.
매년 초마다 연애하기라는 목표를 세워 두지만 달성해 본 적이 없다.
단순히 연애를 못하는 것보다 더 나쁜 점은 연애를 하기 위한 그 어떤 노력도 안 한다는 점이다.
이성을 만나고 싶다는 게 감정적 판단이라면 본능 덕에 저절로 노력을 하게 될 텐데,
딱히 그런 마음이 없으니 눈 앞의 일에만 집중하게 된다.
그 덕에 프로젝트는 많이, 빨리 끝내긴 하였으나 하…
뭣이 중헌디… <br>너를 불안하게 만드는 건 뭐야? 불안할 때는 어떻게 해? <img alt="Pasted image 20250701182409.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250701182409.png" target="_self">
갑자기 이 짤이 떠올랐다.
나를 가장 불안하게 만드는 건, 결과가 거의 확실히 좋지 않을 거라는 직감이 있으면서도 정작 내 힘으로는 아무것도 바꿀 수 없는 상황들이다.
예를 들어, 주식이 급락할 때 ‘설마 더 떨어지겠어?’라는 희망 섞인 자기기만 속에서 손을 놓고 있던 순간들이 그랬다. 예전에 다니던 회사가 한국 법인을 철수했을 때도 마찬가지였다.
나는 문제를 예상하면 보통 미리 움직이는 편이다. 눈앞의 리스크가 명확하면 어떻게든 상황을 바꿔보려고 애쓴다. 문제를 해결하는 그 과정 자체는 오히려 재미있다고 느끼기도 한다. 그래서 예상치 못한 변수에 크게 스트레스를 받지는 않는다.
하지만 그 모든 시도에도 불구하고, 운명처럼 피할 수 없는 순간이 스멀스멀 찾아왔을 때 깊은 무력감을 느낀다. 그게 내 불안의 핵심이고, 또 나는 불안에 대한 아무런 해결책도 가지고 있지 않다는 뜻이기도 하다.
실제로 나는 불안에 취약한 편이다. 그래서 항상 무언가에 몰두해 있으려 한다. 집중하고 있는 동안엔 불안이 스며들 틈이 없기 때문이기도 하고, 그렇게 몰두하다 보면 어느새 상황이 나아지기도 하기 때문이다.
이미 말한 대로 불안이 현실이 되었을 때, 대단한 해법이 있는 것이 아니다. 결국은 가장 좋지 않은 방식—술과 담배—으로 감정을 해소하곤 한다. 이 패악을 스스로도 잘 알지만, 당장은 그 방법 외엔 마땅한 대안이 없다.
오늘의 '생각을 자극'하는 글귀
"효과적인 의사소통에는 반복이 필수이다.
효과적인 의사소통에는 반복이 필수이다. 리더들은 많이 소통하는 경우보다 적게 소통할 때 아홉 배 더 높은 확률로 비판 받는다. 말을 너무 적게 함녀 메시지가 명확하게 전달되지 않고 무관심해 보인다. 지겨울 정도로 반복해서 전달할 대 비로소 정확한 메시지가 수신되기 시작한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-07/2025-07-01-하반기-목표,-불안의-원인,-해결-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-07/2025-07-01 하반기 목표, 불안의 원인, 해결 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 01 Jul 2025 09:54:38 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250701180123.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250701180123.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025년 6월 회고]]></title><description><![CDATA[정신 번쩍 들게 할 지난달(2025년 6월) 활동 데이터 기반 '웃픈 팩폭' 회고입니다.자, 숨 한번 크게 쉬고. 당신의 지난 한 달, 제가 한번 샅샅이 핥아... 아니, 톺아봤습니다. 데이터는 거짓말을 안 한다죠? 변명은 넣어두세요. 능글거림과 비꼼으로 버무려진 팩트 폭격, 지금부터 시작합니다! 1. 쌀국수, 웹툰, 그리고 술... 환장의 삼박자! 문제점:&nbsp;"미분당 차돌박이 쌀국수" (만족도 평균 4점) 에 대한 당신의 맹목적인 사랑은 익히 알고 있었지만, 이 정도일 줄은 몰랐습니다. 한 달 동안 무려&nbsp;7번이나 쌀국수를 흡입하셨군요? 거의 주식 수준입니다. 게다가 "웹툰 봄" (만족도 평균 3.5점) 활동은 도대체 몇 번이나 반복된 겁니까? 셀 수도 없네요! 문제는 여기서 끝이 아니죠. "소주" (만족도 평균 2점) 가 빠지면 섭하죠? 쌀국수 먹고 웹툰 보면서 소주, 또 웹툰 보다가 질리면 쌀국수에 소주... 무한 루프에 갇히셨습니까?
데이터 근거:
미분당 차돌박이 쌀국수 관련 활동 7건, 총 390분 소요.
웹툰 관련 활동 25건, 총 2918분 소요. (거의 이틀!)
소주 관련 활동 10건, 총 854분 소요. (영화 한 편 찍으셨네!)
개선 방향:&nbsp;쌀국수집 주식 투자라도 고려해보시던가. 아니면, 웹툰 작가 데뷔를 준비하시던가. 그것도 아니라면, 제발 술 좀 끊으세요! 쌀국수, 웹툰, 술... 이 세 가지 단어만 보면 당신의 텅 빈 통장이 눈에 선합니다. 다음 달에는 쌀국수 섭취 횟수를 절반으로 줄이고, 웹툰 보는 시간을 코딩 공부에 투자하세요. 소주는... 알아서 하시겠죠? (제발 좀!)
2. "회고"라는 이름의 자기 기만 쇼! 문제점:&nbsp;"회고 작성" (만족도 평균 2.8점) 활동에 쏟아부은 시간은 총 157분. 그런데 만족도는 왜 이 모양입니까? "으어... 난 왜 나아지지 않을까", "이번 주도 반성할 거리가 너무 많다..." 자, 솔직히 말해봐요. 회고, 제대로 하긴 한 겁니까? 아니면 그냥 '반성하는 척'만 한 겁니까? 회고를 쓰는 시간에 웹툰 한 편 더 보셨겠죠?
데이터 근거:
회고 작성 관련 활동 4건, 총 157분 소요.
만족도 평균 2.8점 (최저 수준!)
이유: "나아져야돼!", "망한 한 주였다." (매번 똑같은 멘트!)
개선 방향:&nbsp;회고를 '자기 연민 드라마' 대본 쓰듯이 하지 마세요! 회고는 '팩트 기반 반성문'입니다. 다음 달 회고에는 '이번 달 쌀국수 몇 그릇, 웹툰 몇 시간, 소주 몇 병' 마셨는지 정확히 기록하고, 그 결과 당신의 시간과 돈이 어떻게 증발했는지 뼈저리게 느껴보세요. 그리고 제발, 실천 가능한 개선 방안을 세우세요! (예: "다음 달엔 쌀국수 대신 샐러드를 먹겠다!")
3. "AWS 학습"이라는 허울 좋은 자기 합리화! 문제점:&nbsp;"AWS VPS, SG, AMI, 아키텍쳐 학습 및 실습" (만족도 4점), "AWS Elastic Beanstalk 학습" (만족도 3점) 등 AWS 관련 학습에 쏟은 시간은 총 620분. 칭찬할 만합니다. ...라고 생각했죠? 하지만 잠깐! "설정할 게 너무 많아", "AWS는 기능이 참 많다" 라는 당신의 코멘트를 보니, 뭔가 쎄한 기분이 드는군요. 혹시 AWS 기능 구경만 하다가 시간 다 보낸 건 아니겠죠?
데이터 근거:
AWS 학습 관련 활동 3건, 총 620분 소요.
만족도 3~4점 (나쁘지 않지만...)
이유: "설정할 게 너무 많아", "AWS는 기능이 참 많다" (그래서 뭘 했다는 거죠?)
개선 방향:&nbsp;AWS 학습, 좋습니다. 하지만 '눈팅'만 하지 마세요! 다음 달에는 AWS를 활용해서&nbsp;실제로 뭔가 만들어보세요.&nbsp;간단한 웹사이트라도 좋고, API 서버라도 좋습니다. '백문이 불여일견'이라는 말, 당신도 알잖아요? 그리고 제발, AWS 기능 설명서 읽는 시간에 코딩을 하세요!
칭찬할 점 (억지로 찾아낸): "아침 운동" (만족도 5점) 을 하긴 했군요. 그것도 무려 100분 동안! 칭찬합니다. 하지만 운동 후 쌀국수에 소주를 마셨다면... 칭찬은 취소입니다.
총평: 당신의 지난 한 달은 쌀국수, 웹툰, 술로 점철된 '낭비의 향연'이었습니다. AWS 학습이라는 '자기 합리화'로 포장했지만, 결국 현실은 '제자리걸음'이었죠. 하지만 아직 늦지 않았습니다. 지금이라도 정신 차리고, 쌀국수 대신 샐러드를, 웹툰 대신 코딩을, 소주 대신 물을 마시세요! 다음 달에는 '낭비' 대신 '성장'이라는 단어가 당신의 회고를 가득 채우길 바랍니다. 행운을 빌죠. (비꼬는 거 아닙니다. 진짜예요!)]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/2025년-6월-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/2025년 6월 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 01 Jul 2025 07:40:56 GMT</pubDate></item><item><title><![CDATA[2025-06-30 딱 하루만 원하는 직업으로 살 수 있다면, 이번 주 나에게 영감을 준 문장]]></title><description><![CDATA[
"딱 하루만 원하는 직업으로 살 수 있다면 무엇을 선택하겠는가? If you could do any job in the world for one day, what would you choose?" 딱히 생각 나는 게 없는 걸 보니 나도 참 낭만이 없는 사람이다.
진짜 하고 싶은 건 하고 싶다고 열망하기에 앞서 일단 실행하는 편이라,
소망 같은 걸 마음에 키울 틈이 없었던 걸 지도.
굳이 억지로 질문에 답을 하자고 말을 꾸며 보자면,
우주 비행사?
우주 공간에서의 절대적인 적막을 느껴 보고 싶다.
그 고독한 적막이 나에게 어떤 영감을 줄 지 궁금하다. 이번 주에 너에게 영감을 준 이야기나 문장을 적어 봐. 영감을 줬다기엔 애매해 질 수 있는 이야기다.
오늘 오랜만에 아는 형과 연락을 했고, 어울리던 무리들 중에 나와 함께 최후의 2인이었던(솔로) 그가 연애를 시작했다는 소식을 들었다.
사실 이번 여름 휴가에 같이 놀러 가자고 꼬신 뒤에 휴가 겸 형 소개팅을 해줄까 싶어서 연락을 해 본 것인데, 이미 연애 중이라고 하니 기쁘기 그지없었다. 유난히 까다롭게 굴던 사람이니 좋은 사람을 만난 게 분명했다.
카톡 이모티콘으로 아주 주접을 떨면서 축하를 해 줬는데 이렇게 유난을 떠는 까닭은 기쁨 외에도 또 하나의 숨은 감정이 있다.
응당 좋은 사람은 좋은 사람을 만나야 한다는 개똥 같은 신념이 있다.
이것을 순리라고 부르기는 어렵겠지만 적어도 나를 즐겁게 하는 철학인 것 만은 분명해서 항시 그런 철학이 지켜지는 세상을 꿈꾸곤 하는 것이다.
그러므로 내가 기쁜 것은 내가 좋아하는 형이 연애를 하게 됐다는 단순한 사실 뿐만 아니라,
줄곧 불만족이던 그 개똥 같은 철학이 한 뼘 더 순리에 가까워졌다는 희망 또한 얻은 까닭이다.
비록 나의 오랜 관찰이 시간의 나이테에 한 줄 긋지도 못 할 찰나의 것이라지만,
순간이 영원이라고 착각하며 살 수 있는 것 또한 인간의 적법한 권리라서,
나는 그래서 기뻤고, 또 많이도 기뻤다.
오늘의 '생각을 자극'하는 글귀
실수를 인정하지 않으면 실수에서 배울 수 없다.
남 탓을 하거나 수치심을 느낀다고 해서 실수가 줄어들지는 않는다. 실수를 인정하지 않게 될 뿐이다. 실수를 인정하지 않으면 실수에서 배울 수 없다. 실수한 당사자뿐만 아니라 모두가 그렇다. 실수를 막는 가자아 좋은 방법은 누구나 실수에 대해 터놓고 이야기할 수 있는 안정한 환경을 만드는 것이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-30-딱-하루만-원하는-직업으로-살-수-있다면,-이번-주-나에게-영감을-준-문장.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-30 딱 하루만 원하는 직업으로 살 수 있다면, 이번 주 나에게 영감을 준 문장.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 30 Jun 2025 09:39:36 GMT</pubDate></item><item><title><![CDATA[파이썬을 통한 대규모 더미데이터 생성 방법]]></title><description><![CDATA[머신러닝 및 딥러닝 모델 학습 연습이나 SQL 기반으로 분석 연습을 할때 더미 데이터가 필요하기 마련입니다. 하지만 양질의 더미 데이터를 얻는것은 결코 쉬운일이 아닙니다. 그래서 오늘은 부담없고 안전한 더미 데이터를 생성하는 방법에 대해 알아보겠습니다.]]></description><link>https://64etuor.github.io/600_tech-stack/python/파이썬을-통한-대규모-더미데이터-생성-방법.html</link><guid isPermaLink="false">600_Tech Stack/Python/파이썬을 통한 대규모 더미데이터 생성 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 30 Jun 2025 03:22:44 GMT</pubDate><enclosure url="https://velog.velcdn.com/images/seanlee/post/918dbb46-abeb-4e20-982a-2bf1079b3bf7/image.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://velog.velcdn.com/images/seanlee/post/918dbb46-abeb-4e20-982a-2bf1079b3bf7/image.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[한화 BEYOND SW부트캠프 23주차 회고]]></title><description><![CDATA[ 목표가 자꾸 삐그덕삐그덕 경로를 이탈한다. 자유로부터의 도피, 거인의 노트 독서를 마치려고 했는데 이제 겨우 시작한 참이다. 휴가를 쓰고 논산에 내려와서 이틀은 그냥 거의 쉬기만 했다. 웹툰을 또 다 몰아 봤으니 당분간은 책 읽는데 집중할 수 있을 거 같다.
부트캠프 종료 이후의 거취 향방을 깔끔하게 정하지 못하고 있는데 다음 주 중에는 확실하게 마음을 정해야 할 거 같다. 급하게 정할 이유가 있는 것은 아니지만, 막연히 손 놓고 있다가 시간을 허비하는 것보다는 나을 거 같다.
어떤 삶이 나를 기다리고 있든 뭐 재밌게 즐길 준비는 되어 있다.
SW 부트캠프:
기본적인 백엔드 작업을 많이 했다. 그외에 자잘한 일들, JaCoCo 플러그인, Playwright E2E 테스트 설정 등을 했는데 생각보다 너무 간단했다. 코드 작업이야 항상 비슷해서 특별할 건 없고 그나마 새로운 시도를 해 본 게 있다면 MCP 서버를 설치한 것이다.
이전에는 딱히 필요가 없었는데 이번엔 데이터 분석을 위해서 더미 데이터를 아주 많이 생성할 필요가 생겼다. MariaDB MCP를 열고 커서와 연결, 그 다음 적당히 명령하니 DB의 FK 제약을 잘 적용해서 내가 원하는 데이터를 생성해 줬다.
Cohort Retention 분석을 생각하고 있기 때문에 고객 쪽 데이터와 매출 데이터를 끊임 없이 만들고 있다. 사실 프롬프트 몇 줄 치는 게 다고 나머지는 AI가 해주긴 하지만 여전히 귀찮은 일임에는 틀림 없다. 아무튼 AI가 없었으면 더미 데이터를 만드는 것 시도하는 자체가 언감생심이라 세상 참 좋아졌다 또 한 번 느끼는 편. 목표: 아이캔대학 강의 마무리, 거인의 노트, 에리히 프롬 독서 마무리
결과: 강의는 거의 마무리했는데, 독서를 시작는 이제 막 시작했다. 나와의 약속을 자꾸 어기게 된다. 흑흑. 그래도 이번 주는 술을 쪼끔 덜 먹었다… 운동을 전혀 안했고 독서도 하지 않음. 덕분에 할 일이 많이 밀림… 저번 주와 마찬가지… MCP를 슬슬 활용하고 있다. 우선 더미 데이터 생성과 E2E 테스트를 먼저 해 보고, 이후에는 CI/CD 쪽도 적용해 봐야 겠다. 기술이 너무 빨라서 쫓아가기 벅차더라도 아예 눈을 돌려 버리는 건 지양해야 할 듯.
생소한 기술도 막상 써 보면 용도가 여러 가지 떠오르곤 한다. 목표: 아이캔대학 강의 마무리, 거인의 노트, 에리히 프롬 독서 마무리, 거취 결정(여기 회고에다가 목표를 써 놓으니 그 다음 주 일요일 전까진 절대 다시 안 보게 된다. 앱에 명시를 하는 게 나을 지도??)
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-23주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 23주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 29 Jun 2025 09:45:16 GMT</pubDate></item><item><title><![CDATA[2025-06-29 주량이 얼만지, 어떤 동료가 되고 싶은지]]></title><description><![CDATA[
주량이 얼마나 되는가 How much do you drink?" 술을 자주 마시는 데에 비해 주량이 센 건 아니다.
소주 기준 2병 정도 마시면 인사불성까진 아니더라도 상당히 맛이 간 상태가 된다.
폭음을 좋아하진 않아서 적당히 마시는 걸 좋아한다.
주로 반주로 혼자 먹는 걸 즐기고, 집 밖을 벗어나서 술 마시는 건 선호하지 않는다.
그냥 오랜 버릇 같은 건데, 듣자 하니 혼자서 술 마시는 게 더 위험하다고 한다.
알콜의존증이 심히 의심된다. 어떤 동료가 되고 싶어? 너 내 동료가 되라?
동료라면 역시 원피스의 상디 같은 동료가 최고라고 생각한다.
일단 요리를 잘 한다. 또 의리가 넘친다.
바보짓하는 걸 보는 재미 또한 쏠쏠 할 거 같다.
이렇게 쓰고 보니 난 상디 같은 동료는 못 될 거 같고,
그냥 상디 같은 동료가 있었으면 좋겠다.
그나저나 찾아 보니 원피스를 안 본 지 14년이나 됐다.
여전히 발행되고 있다니 놀랍다…
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-29-주량이-얼만지,-어떤-동료가-되고-싶은지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-29 주량이 얼만지, 어떤 동료가 되고 싶은지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 29 Jun 2025 09:22:09 GMT</pubDate></item><item><title><![CDATA[뷰티산업경쟁력강화방안20091028]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/뷰티산업경쟁력강화방안20091028.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/뷰티산업경쟁력강화방안20091028.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 28 Jun 2025 23:34:11 GMT</pubDate></item><item><title><![CDATA[2025-06-28 날씨예보에 내 기분을 비유하면]]></title><description><![CDATA[
"날씨 예보처럼 기분을 표현한다면 내 기분은 __ (이) 다 If your mood were a weather forecast, you'd be __." 맑음? 달리 걱정도 없고, 먹구름 좀 낀다고 하여 지레 겁 먹지도 않을 테니까 뭐.
사실 요즈음의 내 생활 패턴은 그다지 좋다고 할 수 만도 없지만,
예보를 하자면 그렇다는 얘기다.
다 나아질 것이고,
나아지지 않으면 나아지게 만들 것이다.
날씨를 조정할 순 없지만, 내 기분 정도야 충분히 바꿀 수 있다. 자서전을 쓴다면 어떤 이야기로 시작하고 싶어?
오늘의 '생각을 자극'하는 글귀
"정신 건강을 위한 루틴도 양치질처럼 일상에 포함해야 한다.
번아웃이 찾아오거나 깊은 우울감에 빠질 때만 변화를 시도하고 도움을 청하려는 사람들이 많다. 정신 건강 관리는 절대 뒷전으로 미루면 안 된다. 좋은 습관은 창고에 넣어두었다가 필요할 때 꺼내서 쓸 수 있는게 아니니까. 정신 건강을 위한 루틴도 양치질처럼 일상에 포함해야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-28-날씨예보에-내-기분을-비유하면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-28 날씨예보에 내 기분을 비유하면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 28 Jun 2025 15:51:02 GMT</pubDate></item><item><title><![CDATA[2025-06-27 마지막으로 먹은 피자]]></title><description><![CDATA[
"마지막으로 피자를 먹어본 적이 언제인가? 어떤 피자였는가? When was the last time you ate pizza? What kind?" 피자를 좋아하고 주에 한 번은 먹는다.
주로 클래식 피자를 먹고 저번 주에도 페퍼로니 피자를 먹었다.
피자에 대한 철학은 이탈리안과 비슷해서 파인애플을 용납하지 못한다.
이탈리안들과 만났을 때 가장 거부감이 드는 한국 피자에 대해 묻곤 했는데 단연 새우가 들어간 피자였다.
해산물이 들어간 피자는 내게도 영 거부감이 들긴 하지만, 맛은 취향이니 뭐가 맞니 틀리니 논쟁을 벌일 생각은 없다.
가장 그리운 피자라면 레바논 피자인 마노쉬, 그 중에서도 페리 페리 소스가 들어간 페리 페리 갈릭 치킨 피자.
레바논 갈릭 소스는 일반적인 갈릭 디핑 소스랑 비교했을 때 느끼함이 확실히 적다.
그 담백함의 비밀이 설탕이란 건 꽤 의외지만, 뭐 맛있는 걸 어쩌겠는가.
한 때 레바논 피자를 한국에 들여 오는 것을 사업 아이템으로 고민했을 정도의 맛이다.
처음엔 레바논 음식이라는 데에 막연한 저항이 있어서 시도해 보지 않았는데, 호주 친구의 끈질긴 권유 끝에 한 번 맛 보고 난 뒤 주에 3~4번은 마노쉬를 먹었다.
아 또 군침이 돈다. 미리 알았더라면 좋았을 걸' 하는게 있어?
오늘의 '생각을 자극'하는 글귀
"도움을 구하는 것은 신뢰의 표현이다.
도와달라는 말이 상대방을 늘 부담스럽게 하는 것은 아니다. 사람들은 생각보다 타인을 돕는 것을 좋아한다. 다른 사람에게 도움을 청하면 불편해할 것 같지만, 상대방은 자신의 가치를 인정받았다고 생각할 수 있다. 또 도와줌으로써 스스로 유능하고 쓸모 있는 사람이 되었다고 느낄 수 있다. 도움을 구하는 것은 신뢰의 표현이다."💡
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-27-마지막으로-먹은-피자.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-27 마지막으로 먹은 피자.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 28 Jun 2025 15:48:17 GMT</pubDate></item><item><title><![CDATA[JKSC-2024-30-3-601]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/jksc-2024-30-3-601.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/JKSC-2024-30-3-601.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 28 Jun 2025 11:28:47 GMT</pubDate></item><item><title><![CDATA[2025-06-26 버리고 나서 후회한 물건]]></title><description><![CDATA[
"오늘 키스를 했는가? Did you kiss someone today?" ㅗ 버리고 나서 후회했던 물건은 뭐야? 어릴 때 썼던 글, 일기, 시, 수필 등 모든 글을 태워 버린 게 너무 아쉽다.
당시에는 그 우울한 것들을 가지고 있는 자체가 진저리 났었는데,
지나고 보니 이미 잿더미가 되어 사라진 그 글자들이 내가 가진 모든 것 중에서 가장 값진 것이라는 생각이 들었다.
가장 혼란스럽고, 가장 괴롭던 시기였다.
우울증을 조기 교육한 탓에 많은 시간을 허무의 구렁텅이에 던져 버리긴 했지만,
헛되다 여겼던 그 시간 동안 나의 정신적 양상이 사뭇 달라진 것도 사실이다.
그 이력을 버림으로써 나는 어린 날의 나를 위로할 기회를 영영 잃어 버린 것 같은 지독한 상실감을 얻었다.
나를 맹렬히 미워하면서, 비난의 말을 쏟던 자신에게 미래의 나는 어떤 말을 건네야 했을까.
그러지 않아도 됐음에도 그러한 길을 택했던 나의 멍청한 행동을,
이제는 감싸줄 수 있을 만 한 나이가 되었는데.
그 어린 소년이,
희미한 발자국만 남긴 채 세상을 원망하는 마음 그대로 안고 영영 떠나간 것만 같아서,
나는 닿지 않을 후회만 이렇게 편지처럼 적고 있나 보다.
오늘의 '생각을 자극'하는 글귀
"열정은 진전의 전제조건이 아니라 진전의 결과일 때가 많다.
많은 사람이 동기부여가 찾아오길 기다리면서 할 일을 미룬다. 일단 시작해야 동기가 부여된다는 사실은 잊은 채로, 하지만 열정은 진전의 전제조건이 아니라 결과일 때가 많다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-26-버리고-나서-후회한-물건.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-26 버리고 나서 후회한 물건.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Jun 2025 10:14:18 GMT</pubDate></item><item><title><![CDATA[2025-06-25 전쟁이 일어날 지, 내가 가지 못 한 길]]></title><description><![CDATA[
"전쟁이 일어날 것이라고 생각하는가? Do you think there will be a war?" 어떤 전쟁인지, 어디서 발생했는지에 따라 다를 수 있겠지만—적용 범위를 넓혀 보면 인류의 역사에서 전쟁이 없던 시기가 과연 있었을까 싶다.
그것이 물적 이익을 위한 것이든, 권력과 지배욕 때문이든, 이데올로기와 종교가 그 동기였든 간에 결국 문제가 되는 건 억울한 피해자가 필연적으로 발생한다는 사실이다.
고작 한두 세대 전만 해도 이 땅에 참혹한 전쟁이 있었고, 당장 지금도 세계 곳곳에서는 전쟁이 현재진행중이다.
국가와 종교의 영광이란 이름 하에 감행된 희생은 과연 정당한가.
그런 윤리적 물음을 던지기도 전에, 먼저 마주하게 되는 냉혹한 진실은 이것이다:
전쟁을 준비하지 않으면, 약자는 희생 당하지 않기 위해 늘 눈치를 보아야 한다.
국제 정치의 이 적나라한 기본값이 모든 정의와 도덕적 담론을 ‘공론’으로 만들고 있는 게 아닐까.
전쟁이 일어나지 않는 세상은 요원하며,
죽은 사람은 말이 없다.
그러므로 희생되지 않았을 지언정 그 희생의 아픔을 공감하는,
많은 사람들이 말해야 한다. 네가 '가지 못한 길'은 어떤 길이었어? " 가지 않은 길과 가지 못 한 길의 뉘앙스 차이에서 오는 감정은 꽤나 다르다.
가지 못 한 길이란 내부적, 외부적 요인으로 인해 그 길을 가기 위한 당위성이 상당히 상실되거나, 당연 충족해야 조건에 내가 미달했다는 의미로 여겨진다. 그러므로 가지 못 한 길은 내 무의식에 있던 미련과 후회를 자극하는 “신 맛"같은 단어다.
오랜만에 들춰진 미련 중 하나는 지금 내 삶에서 충족되지 않은 것들에 대한 모종의 아쉬움이다. 내가 지금 갖지 못 한 그것들이 만약 그 길을 갔다면 막연히 충족되리라 믿는 헛된 가정.
그런 기대와 가정이 얼마나 바보 같은 것인 줄 알면서도 여전히 마음 한 켠에 미련을 보관하기 위한 자리를 마련해 둔 것을 보아하니 나도 참 발전이 없는 사람답다.
국어 선생님이 되겠다는 꿈이 있었다. 교육에 열정이 있었던 것이 아니라 전업 작가로 산다는 게 얼마나 궁상 맞은 일이 될 수 있는지 생생히 목격한 까닭이다. 궁상 맞은 꼴은 피하면서도 어머니와 함께 글을 쓰고 싶었고, 이야기를 나누고 싶었기 때문에 선택한 꿈이다. 여전히 그 꿈이 이루어 졌다면 어머니와 함께 즐거운 문학 생활을 하고, 평범한 생활을 하고, 그리고 나 또한 남들처럼 가정을 이루고, 좀 더 보통의 인생을 살게 되지 않았을까 하는 망상을 한다.
누구에게나 그렇듯, 갖지 못 한 것들이 더 빛나는 것처럼 착각하는 인간 생리적 속성 덕분에 먼지 쌓인 마음의 창고 안에서도 분분히 존재감을 드러내는 꿈이다.
이 꿈에서 자유로워지는 순간이란 끝끝내 내가 바라 마지않는 행복한 가정을 이룸으로써 미련의 ‘신 맛’ 또한 달콤하게 느껴질 만큼 모든 감각이 마비되는, 그러한 순간일 것이다.
그런 날을 위해 오래도록 인내하고 있다.
오늘의 '생각을 자극'하는 글귀
수줍음이란 내향서이 아닌 부정적인 평가에 대한 두려움이다.
수줍음이 많다고 모두 내향인은 아니다. 수줍음은 부정적인 평가에 대한 두려움이다. 예상하지 못한 당황스러운 상황과 자신을 판단하려고 드는 사람들을 피하는 것이다. 내향성이란 조용하고 속 마음을 잘 드러내지 않은 성향이다. 내향인은 부담스럽거나 에너지를 빼앗기는 관계를 피할 뿐이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-25-전쟁이-일어날-지,-내가-가지-못-한-길.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-25 전쟁이 일어날 지, 내가 가지 못 한 길.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 25 Jun 2025 07:38:04 GMT</pubDate></item><item><title><![CDATA[2025-06-24 조만간 참여해야 하는 모임, 좋아하고 잘했던 과목]]></title><description><![CDATA[
"조만간 참여해야 하는 모임이나 행사는? What's your next social engagement?" 스터디의 마감기한이 다가와서 쫑파티를 해야 한다.
근 반 년 같이 함께 공부 계획과 실행에 대해 공유하던 모임인데 마지막이 다가오니 아쉬운 감이 있다.
끝은 또 새로운 시작이라고 하니 앞으로 다시 사회생활에 복귀해도 만날 인연이 있으리라.
그런 기대를 하면서 좋은 기억으로 헤어질 수 있는 멋진 쫑파티가 되었으면 좋겠다! 어떤 과목을 가장 좋아했어? 잘했던 과목은 뭐야? 나이에 따라 좋아했던 과목이 계속 바뀌었다.
초등학생 때는 정규 과목은 아니었으나 컴퓨터 시간을 가장 좋아했고 과학도 좋았다.
중학생 때는 음악에, 특히 플룻 연주에 빠졌고, 미술에도 큰 관심을 가졌다. 국어도 가장 좋아하는 과목 중 하나였다.
고등학교를 다니지 않고 바로 수능 공부를 했고 이 때 가장 좋아한 것은 수리와 국사, 근현대사였다.
고시 공부를 할 때는 헌법과 경제학을 특히 좋아했다.
호주에 갔을 땐 경영학과 마케팅을 재밌게 공부했다.
이외에도 관심을 갖고 공부한 여러 분야가 참 많다.
잘했던 과목이라고 할 만 한 과목이 있나 싶지만, 딱히 약점인 과목은 없었다.
좋게 말하자면 그렇지만, 나쁘게 말하자면 특출난 구석이 하나도 없는 것이다.
편식하지 않고 공부한 덕에 경영부터 공학 엔지니어까지 정말 폭 넓은 직업 경험을 가져보긴 했으나 공부와 마찬가지로 딱히 전문인 분야가 없다는 함정이 있다.
다만 그렇다고 후회가 있는 것은 아니다.
재밌게 공부했고 재밌게 일했고, 한계를 긋지 않고 산 덕에 넓은 시야를 배웠다.
기를 쓰고 사업을 하려는 이유 중의 하나가 이거다.
삶의 지평을 늘려 가는 일만큼 재미난 일은 없다.
오늘의 '생각을 자극'하는 글귀
"의견을 돌에 새기는 것이 아니라 고무줄처럼 늘어나는 것이어야 한다.
생각을 바꾼다고 변덕쟁이는 아니다. 오히려 배움을 얻을 줄 아는 사람이라는 것을 보여준다. 빠르게 돌아가는 환경일수록 최신 데이터도 금세 낡는다. 마찬가지로 정보를 많이 알면 알 수록 유효기간도 짧아진다. 의견은 돌에 새기는 게 아라 고무줄처럼 늘어나는 것이어야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-24-조만간-참여해야-하는-모임,-좋아하고-잘했던-과목.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-24 조만간 참여해야 하는 모임, 좋아하고 잘했던 과목.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 24 Jun 2025 10:06:48 GMT</pubDate></item><item><title><![CDATA[2025-06-23 나의 학창시절]]></title><description><![CDATA[
"마지막으로 울었던 적은 언제인가? When was the last time you cried?" " 너는 어떤 학생이었어? 아무튼 평범과는 거리가 멀었다.
그러나 딱히 좋은 학생도, 나쁜 학생도 아니었다는 생각이 든다.
초, 중, 고, 대학으로 이어지는 일반적인 학창시절을 겪지도 않았을 뿐더러,
그마저도 대학은 그만 둬버렸다.
좋은 학생이 될 기회도, 나쁜 학생이 될 기회도 모자랐다는 게 더 맞는 말이겠다.
남들 보기에 이해할 수 없는 기이한 행동들을 많이 하고 다녔기 때문에,
아직도 날 괴짜라고 생각하는 사람들이 있을 법도 하다.
그러나 지금 어느 정도 나이 들어 되돌아 보니,
괴이한 행동을 하는 이유가 꼭 괴이한 것만은 아닐 수도 있다는 생각이 든다.
그러나 누군가 내 앞에서 그러한 기이한 행동들을 한다면,
나 역시 도저히 포용하거나 이해할 자신이 없긴 하다.
그래서 내게 남은 인연이 너무 각별하다.
오늘의 '생각을 자극'하는 글귀
건강한 관계는 선을 지키며 적당한 거리를 둔다.
인간관계에서 경계를 설정하는 것은 다른 사람들에게 무례하게 구는 행동이 아니다. 자기 존중을 우한 행동일 뿐이다. 상대방이 당신의 거절을 받아들이지 않는다면 그것은 해로운 관계다. 건강한 관계에서는 서로 선을 지키며 적당한 거리를 두는 것을 돕는다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-23-나의-학창시절.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-23 나의 학창시절.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 23 Jun 2025 13:18:13 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 22주차 회고]]></title><description><![CDATA[ 연초에 계획했던 올해 하반기 계획이 조금 많이 틀어질 수도 있을 것 같아서 이것저것 준비를 하고 있다.
계획이 바뀌는 거야 사소한 일이지만, 계획이 때와 맞지 않으면 꽤 오랜 시간을 낭비할 수도 있는 터라 이것저것 구상을 수정하고 있다.
사실 이것 때문에, 그리고 사소한 다른 악재 때문에 의욕이 많이 꺾여 있었는데 이제는 정신을 좀 차리는 중이다. 잘못된 건 차근차근 고쳐나가면 되는 것이고, 모자란 게 있다면 채워가면 된다.
개인적으로 아주 헛된 경험이란 없는 것이라는 생각을 한다.
다행히 조금 있으면 동생도 출장지로부터 귀국하니 이래저래 상의를 해봐도 좋고, 마음의 짐이 좀 덜어짐직 하겠다.
SW 부트캠프:
데이터 ETL은 현업에서 가장 많이 사용할 것으로 추측되는 “Airflow DAG + Spark”로 잠정적으로 결정했다. 데이터가 없으니 적당한 MVP 형태로 가면 될 거라고 생각해서 데이터베이스는 어플리케이션 레벨에서 해결하기로 했다. DuckDB에 SQlite을 조합하여 사용하기로 했고 서버는 FastAPI에 Python 3.11, 그외 데이터 분석 라이브러리와 Shap Value 산출을 위한 XGBoost 모델 정도로 간단하게 구성하기로 잠정 결론을 지었다.
사실 이 정도 규모라면 Vertex AI를 쓰는 것이 낭비라 초기 구상 목록에서 아예 삭제했다.
아직까지 프로젝트 진행에 어려운 일은 아직 없지만, 썩 멋져 보이는 최종 산출물이 여전히 머리에 안 그려져서 계속 수정을 하긴 해야겠다.
이번엔 백엔드에서 새로 시도하는 것 중 하나는 Hateoas를 활용한 API 고도화, 말은 거창하지만 매커니즘에 대한 불완전한 이해 때문에 기초적인 수준의 응용 정도만 기대하고 있다. 사용하다보면 원리와 목적에 대한 이해가 생기기도 하니 음미하듯 한 입 베어 먹어보면 그만.
이전 프로젝트에선 항상 Jpa와 Mybatis 조합을 사용했는데 이번엔 QueryDSL과 ElasticSearch를 도입했다.
QueryDSL은 Jpa와 분리된 프레임워크로 독자적인 Q타입 클래스를 사용한다고 한다. 현업 개발자들의 추천을 받아서 사용해 보게 됐는데, 빌더 타입의 메서드 체이닝 방식이다 보니 활용도가 무척 높다는 생각이 들었다.
ElasticSearch는 아무래도 CRM에서 고객명이나 연락처 같이 자주 조회되는 자료의 경우 실시간 자동완성 검색, 사전 인덱싱을 통한 검색 최적화가 무척 중요하기 때문에 도입했다. 벤치마크한 CRM 툴의 경우, 고객명, 연락처 검색이 느려서 사용성에서 큰 답답함을 느꼈는데, 아마 제대로 구현만 한다면 UX 측면에서 큰 향상이 있으리라는 기대가 된다. 목표: 할 일 목록 재점검 및 강제력 도입
결과: 강제력을 어떻게 적용할까 애매한 부분, 이건 다시 구상할 필요가 있다. 딱히 없었다. 운동을 전혀 안했고 독서도 하지 않음. 덕분에 할 일이 많이 밀림 새로 배운 것보다는 그 동안 배운 걸 실제로 활용하는데 중점을 둬야 할 듯. 10개를 시도해서 하나도 못하는 것보단 1개를 시도해서 1개를 제대로 하는 게 낫겠다 목표: 아이캔대학 강의 마무리, 거인의 노트, 에리히 프롬 독서 마무리
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-22주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 22주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 22 Jun 2025 23:37:27 GMT</pubDate></item><item><title><![CDATA[2025-06-22 가장 최근에 영화관에서 본 영화]]></title><description><![CDATA[
"가장 최근에 영화관에서 본 영화는? What's the last movie you saw in a theater?" 영화 ‘하얼빈’이 마지막인 거 같은데 아마 반 년 정도 지났을까.
옥중생활과 재판 장면이 영화에는 생략된 것이 개인적으로 아쉬웠다.
최근에는 그나마 독립운동과 관련된 문화 컨텐츠가 뮤지컬이나 영화로 많이 제작되곤 하지만,
여전히 그 대상인물은 한정적이라고 생각된다.
우리에게 널리 알려진 독립운동가 외에도 잘 알려지지 않은 수많은 독립운동가가 있는데 이분들의 이야기도 널리 알려지면 좋겠다는 생각을 한다.
예전에 여성 독립문화기념관을 방문했을 때, 얼마나 많은 사람들이 독립운동을 위하여 노력했는지 단편적으로나마 알 수 있었다.
그들의 사연 모두가 심금을 울리는 이야기라서 가슴이 울었다.
특히 신채호 님의 부인 박자혜 님이 남기신 “가신 님 단재의 영전에”라는 기고문을 보았을 때는 너무 마음이 아파서 계속 읽는 게 어려웠다.
우리는 마음이 아픈 이야기를 다시 만들지 않기 위해,
마음이 아픈 이야기를 읽어야 한다.
그런 생각이 든다. 누구와 함께 살고 있어?
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-22-가장-최근에-영화관에서-본-영화.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-22 가장 최근에 영화관에서 본 영화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 22 Jun 2025 14:20:50 GMT</pubDate></item><item><title><![CDATA[2025-06-21 더 가까워지고 싶은 사람, 시간을 효율적으로 사용하는 방법]]></title><description><![CDATA[
"더 가까워지고 싶은 사람이 있다면? Who do you want to know better?" "" 아버지와는 좀 더 가까워져야 하는데, 오랜 세월 서로에게 무심했던 관계가 쉬이 좁혀질 리는 없다.
허물을 미워하는 것이 아니라, 허물을 감싸줄 수 있어야 진정한 관계일 텐데
서로의 허물이 너무 많았고 맹렬히 미워한 시간도 길었던 터라,
참 그게 쉽게 되지가 않는다. 시간을 효율적으로 활용하는 너만의 방법은 뭐야? 매일 아침 일간 계획을 세우고, 하루에 걸쳐 실천한다.
주간 회고는 스스로 작성하고 월간 회고는 내 시간 관리 앱의 기록을 바탕으로 AI의 피드백을 메일로 전송받는다.
업무를 할 땐 미리 할 일을 모두 작성하고 기한을 정해서 끝낸다.
계획을 하는 시간이 낭비라는 생각은 전혀 없다.
계획을 했기 때문에 허비하는 시간이 압도적으로 줄어든다.
다음에 할 일이 언제나 미리 준비되어 있기 때문에 망설이거나 뭘 해야 할 지 애매하게 고민하는 일이 없기 때문이다.
다만 꼭 효율적으로 시간을 보내는 게 좋은 것만은 아니라는 생각도 드는데,
의미 없는 수다와 바보 같은 농짓거리들도 관계에 있어서는 꼭 필요한 감초와 같은 것이라고 느끼기 때문이다.
중용은 언제나 어려운 법이다.
오늘의 '생각을 자극'하는 글귀
비관론자보다, 낙관론자보다 주도적인 사람이 되는 것이 낫다.
비관로자는 ""컴에 물이 반 밖에 안 남았잖아!"" 라고 말한다. 낙관론자는 ""컵에 물이 반이나 남았네!"" 라ㅓ고 말한다. 주도적인 사람이라면 ""컵에 물이 가득하네, 다들 불평할 시간에 내가 채웠거든. 인사는 사양할게."" 라고 말할 것이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-21-더-가까워지고-싶은-사람,-시간을-효율적으로-사용하는-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-21 더 가까워지고 싶은 사람, 시간을 효율적으로 사용하는 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 21 Jun 2025 13:45:42 GMT</pubDate></item><item><title><![CDATA[2025-06-20 자서전의 첫 문장, 마지막으로 운 일]]></title><description><![CDATA[
" 자서전을 쓴다면 첫 문장을 어떻게 쓰고 싶은가? Write the first sentence of your autobiography 생명의 주기는 대게 같은 종이라면 비슷하겠지만, 책은 그렇지 않다. 마지막으로 울었던 건 언제야? 무슨 일이었어? 정확히 얼마 전인지 잘 모르겠는데,
아무렇지 않은 척하려고 아무렇지 않은 척을 했고,
그 날 밤에는 내가 자는 내내 엉엉 울었다는 얘기를 나중에 들었다.
슬픈 것을 스스로도 모른 척 해야 하는 내 자신이 영 맘에 안 들어서,
그냥 하는 수 없이 흘려 듣고 말긴 했지만.
오늘의 '생각을 자극'하는 글귀
계획적인 성공은 더욱 달콤하고 오래간다.
첫 시도에 성공하지 못하면 운이 좋은 것이다. 노력 없이 얻은 성취는 형편없는 스승이자 변덕스러운 친구와도 같기 때문이다. 고군분투하며 어렵게 몸에 익힌 배움이야말로 인생에서 가장 값진 성과다. 계획적으로 연습한 끝에 손에 넣은 성공은 더욱 달콤하고 오래 간다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-20-자서전의-첫-문장,-마지막으로-운-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-20 자서전의 첫 문장, 마지막으로 운 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 20 Jun 2025 12:11:42 GMT</pubDate></item><item><title><![CDATA[2025-06-19 가장 최근 받은 편지, 절대 할 수 없는 직업]]></title><description><![CDATA[
" 가장 최근에 받은 편지는 누구에게서 온 것인가? Whwat was the last personal letter you received?" " 편지와 같이 낭만을 닮은 것들은 오래 전 지평선 너머로 노을과 함께 소실된 것들이다.
때때로 추억하듯 나의 오랜 단어와 글자를 꺼내어 편지로 써 본 들 과거로만 배달될 것을 알아서 그건 허망하고 허망하고 허망한 일이다.
전적으로 나의 입장이긴 하지만 편지는 항상 사랑을 상징하고,
사랑을 망실하는 맥락의 역사는 동사도 아닌 주제에 늘 현재 진행형이어서,
미각을 잃어가는 사람처럼 나는 무슨 감각을 잃어가는 건지 시시각각으로 무서울 때가 있다.
그러나 편지를 보내줄 사람이 아닌, 편지를 받아줄 사람을 평생토록 찾아 헤맨 과정의 결과로써 이러한 상황은 꽤나 납득할 법도 해서,
나는 여전히,
어머니를 향한 편지를 쓰곤 한다. 이 것 만큼은 절대 못 한다' 하는 직업이 있어? 단순 반복 작업을 하는 일은 정말 못할 거 같다.
지루한 것을 참지 못하는데 이게 정말 극심한 스트레스를 느끼는 정도라,
체질상 절대 못 할 직업이라고 생각한다.
오늘의 '생각을 자극'하는 글귀
완벽한 신념과 가치관은 세상에 없다는 것을 받아들여라.
인생에서 가장 중요한 기술은 인지 부조화를 받아들이는 법을 배우는 것이다. 자신의 신념과 행동을 정당화하면 당장은 불편함을 피할 수 있지만, 내일의 발전은 가로막힌다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-19-가장-최근-받은-편지,-절대-할-수-없는-직업.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-19 가장 최근 받은 편지, 절대 할 수 없는 직업.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 19 Jun 2025 10:18:07 GMT</pubDate></item><item><title><![CDATA[2025-06-18 누군가 날 위해 요리한 적, 새로운 걸 시작할 때의 기분]]></title><description><![CDATA[
누군가 나를 위해 요리해준 적이 있는가? What has someone recently cooked for you? 호주에 있을 적에 같이 살았던 동생이 요리를 자주 해주었다.
Le Cordon Bleu라는 유명한 요리학교에 다니던 친구였는데 한식, 양식 못 하는 게 없어서 자주 입이 즐거웠다.
같이 고생도 많이 했고, 즐거운 일도 많았다.
날 잘 챙겨줘서 나도 더 잘하려고 노력한 거 같다.
한국에 돌아와서도 꾸준하게 연락하며 친하게 지내고 있다.
내가 가장 마음으로 위하는 사람 중 한 명이다. 무언가를 처음 시작할 때 어떤 감정이 들어? 설레는 기분이 크다.
무언가를 처음 시작한다는 건 대게 도전이었고,
두려움보단 항상 설렘이 더 컸다.
두려움 없는 태도가 또 성취에도 큰 도움을 주곤 했던 터라,
사람의 마음가짐이 가진 위력을 곧잘 실감하곤 했다.
앞으로도 내 인생에 많은 도전이 있길 바란다.
오늘의 '생각을 자극'하는 글귀
협상에서 침묵은 금이다. 가치를 창출하는 멈춤이다.
협상에서 침묵은 금이다. 침묵은 무거운 분위기를 만들어 상대방이 자신의 가치를 포기하도록 만드는 게 아니다. 함게 성찰함으로써 가치를 창출하게 해주는 시간이다. 잠깐 멈춤은 파이를 키워서 양쪽 모두 이로운 해결책에 이르도록 해준다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-18-누군가-날-위해-요리한-적,-새로운-걸-시작할-때의-기분.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-18 누군가 날 위해 요리한 적, 새로운 걸 시작할 때의 기분.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Jun 2025 12:23:20 GMT</pubDate></item><item><title><![CDATA[컨벤션]]></title><description><![CDATA[
담당자: 박양하
문서 목적: 본 문서는 DevEagles 프로젝트의 일관성, 품질, 협업 효율성 향상을 위해 모든 팀원이 준수해야 할 개발 표준을 정의합니다. 코드 작성부터 Git 워크플로우, 데이터베이스 설계, API 구현, 로깅에 이르기까지 프로젝트 전반의 규칙을 상세히 포함합니다. 코드 포맷팅 pre-commit git hook은 프론트엔드 루트 폴더에서 npm install을 하면 자동 설정됩니다.
🔗 관련 문서: <a data-tooltip-position="top" aria-label="https://github.com/BE15-DevEagles/be15-fin-deveagles/wiki/D1.-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95#git-pre-commit-hook" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/BE15-DevEagles/be15-fin-deveagles/wiki/D1.-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95#git-pre-commit-hook" target="_self">개발 환경 설정 </a><a href="https://64etuor.github.io?query=tag:Pre-commit" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Pre-commit">#Pre-commit</a> pre-commit hook으로 Spotless 컨벤션을 적용하여 코드 스타일을 강제합니다.
적용 규칙: Java
spotless { java { // import 순서: java, javax, org, com, 그 외 importOrder('java', 'javax', 'org', 'com', '') // 사용하지 않는 import 문 자동 제거 removeUnusedImports() // Google Java Format 적용 (버전 명시) googleJavaFormat('1.27.0') // 어노테이션 포맷팅 formatAnnotations() }
} Prettier: 일관된 코드 포맷팅을 자동화합니다.
ESLint: 문법 및 스타일을 검사합니다 (eslint-config-standard, eslint-plugin-vue, @typescript-eslint 플러그인 사용).
eslint-plugin-unused-imports: 사용되지 않는 import를 자동으로 감지하고 제거합니다.
Husky + lint-staged: Git Hook을 사용하여 커밋 전 Prettier 포맷팅, ESLint --fix, 미사용 import 정리를 자동으로 실행합니다. 브랜치 생성 정책: GitHub 이슈당 하나의 브랜치를 생성합니다. 브랜치명에는 반드시 이슈 번호를 포함합니다. (예: feat/user/로그인-기능#90) 워크플로우: Gitflow 전략을 따릅니다.
브랜치 유형: feat/: 신규 기능 개발
fix/: 버그 및 기타 수정
release/: 릴리즈 준비
hotfix/: 긴급 패치
chore/: 빌드, 인프라, 도구, 문서 등 비즈니스 로직과 무관한 작업
refactor/: 코드 리팩토링 PR 규칙: 최소 1명 이상의 코드 리뷰를 거치며, 머지 전 CI 빌드가 반드시 통과해야 합니다.
[영문도메인명] 간단한 설명 - 상세 설명 예시: [user] 로그인 API - JWT 토큰 발급 기능 구현
[notification] 상품 목록 - 무한 스크롤 및 필터링 기능 추가
[reservation] 버그 수정 - 주문 취소 시 재고 복구 오류 타입: [영문도메인명] 간단한 설명 #&lt;이슈번호&gt; 타입: feat, fix, refactor, chore, docs, test
예시: feat: [user] 로그인 API 구현 #123
fix: [sales] 주문 취소 버그 수정 #456
refactor: [user] 사용자 서비스 리팩토링 #789 중요: PR 제목에 #이슈번호를 포함해야 GitHub Actions가 이슈 내용을 PR에 자동으로 연결합니다.
타입/도메인/간단설명#&lt;이슈번호&gt; 예시: feat/user/로그인-기능#1
fix/sales/주문취소-버그#2
chore/backend/의존성-업데이트#6 타입: 요약 설명 #&lt;이슈번호&gt; (선택) 본문: 변경 이유 및 상세 설명 (선택) 꼬리말: 관련 이슈, 해결된 이슈 등 예시:
feat: JWT 토큰 발급 로직 추가 #123
사용자 인증을 위해 JWT 기반의 토큰 생성 및 검증 기능을 구현했습니다.
- 만료 시간: 1시간
- 서명 알고리즘: HS256
필드 상세 설명
엔드포인트 경로: kebab-case를 사용하며, 리소스를 나타내는 명사를 사용합니다. (예: GET /users, POST /orders)
HTTP 메서드: CRUD(Create, Read, Update, Delete) 오퍼레이션에 맞게 HTTP 메서드를 매핑합니다. (GET, POST, PUT/PATCH, DELETE)
상태 코드: 표준 HTTP 상태 코드를 명확히 활용합니다. (예: 200 OK, 201 Created, 400 Bad Request, 404 Not Found, 500 Internal Server Error)
페이징/필터링/정렬: 쿼리 파라미터를 통해 구현합니다. (예: ?page=1&amp;size=20&amp;sort=createdAt,desc)
버전 관리: API 경로에 버전을 포함합니다. (예: /api/v1/users)
응답 래핑: 일관된 JSON 구조로 응답을 감싸서 반환합니다. 자세한 내용은 본 문서의 3. REST API 설계 가이드를 참조하십시오. 예외 처리: 글로벌 예외 핸들러(@ControllerAdvice)를 사용하여 예외를 중앙에서 처리합니다.
커스텀 예외: ErrorCode enum과 ApiException 커스텀 클래스를 조합하여 비즈니스 예외를 정의합니다.
로깅: SLF4J + Logback 조합을 사용합니다. 로그 레벨: ERROR, WARN, INFO, DEBUG, TRACE를 명확히 구분하여 사용합니다.
민감 정보(개인정보, 비밀번호 등)는 로그에 남기지 않으며, 구조화된 JSON 로그 포맷을 권장합니다. 단위 테스트: Java는 JUnit5 + Mockito, Vue는 Jest + Vue Test Utils를 사용합니다.
통합 테스트: Spring Boot Test를 활용하여 계층 간 통합을 검증합니다.
E2E 테스트: Cypress 또는 Playwright 중 선택하여 사용합니다. CI에서 npx playwright test 커맨드로 자동화합니다.
커버리지: 전체 코드 커버리지 최소 80%를 목표로 하며, JaCoCo로 측정합니다.
테스트 네이밍: given_when_then 패턴을 사용하여 테스트의 의도를 명확하게 표현합니다. API 명세: OpenAPI (Swagger)를 통해 API 스펙을 자동으로 생성하고 UI를 제공합니다.
커버리지 테스트 및 문서화: JaCoCo를 사용합니다.
프로젝트 문서: README.md에 프로젝트 개요, 기술 스택, 실행 방법을 명시하고, 아키텍처 다이어그램을 포함합니다. 민감 정보: Github Gist에서 중앙 관리합니다. (담당자: 이채은)
환경별 설정: application.yml, .env, 기타 Github Secrets를 통해 환경별 구성을 분리합니다.
의존성 검토: OWASP Dependency-Check
인증·인가: OAuth2 / JWT 표준을 준수하여 구현합니다. <br>Gradle/Maven: BOM(Bill of Materials)을 활용하여 의존성 버전 충돌을 방지합니다. <a data-tooltip-position="top" aria-label="https://findmypiece.tistory.com/101" rel="noopener nofollow" class="external-link is-unresolved" href="https://findmypiece.tistory.com/101" target="_self">🔗 참고자료</a>
Lock 파일: package-lock.json을 Git에 포함하여 프론트엔드 의존성 버전을 고정합니다.
Plaintext/src /command /java/com/example/project/command /application # Command Application Services (명령 처리 로직) /domain # Command Domain 모델 및 도메인 서비스 /infrastructure # Command 관련 인프라 (Repository 구현 등) /query /java/com/example/project/query /application # Query Application Services (조회 처리 로직) /domain # Query Domain (Read 모델 정의) /infrastructure # Query 관련 인프라 (조회 전용 Repository) /common # 공통 모듈 (DTO, 유틸리티, 이벤트 등) /resources # 설정 파일 (application.yml 등) /docker # Dockerfile 및 컨테이너 설정 /deploy /jenkins # Jenkins 파이프라인 스크립트 (Jenkinsfile) /test # 단위 및 통합 테스트
/frontend /src /components /views /store /router /assets 프로젝트 팀원은 모두 다음 사항을 이해하고 준수합니다. 데이터 구조의 긴 수명: 데이터베이스 스키마는 특정 애플리케이션보다 훨씬 오랫동안 유지되며 여러 서비스에서 재사용될 수 있습니다.
이름은 계약이다: 객체 이름은 API 계약과 같아서 한 번 배포되면 변경 비용이 매우 큽니다.
개발자 편의성: 일관된 규칙은 테이블과 컬럼을 찾는 시간을 줄여 생산성을 높입니다. 단수 명사 사용: 테이블명은 리소스를 표현하는 단수 명사를 사용합니다. (예: person) 예외 ①: like 등 예약어와 혼동을 피하기 위해 복수형 허용 (예: likes)
예외 ②: 단·복수 동일 명사 (예: series, equipment)
예외 ③: 배열·리스트 타입의 컬럼은 복수형 사용 가능 (예: tags) PK (Primary Key): &lt;테이블명&gt;_id 또는 간단히 id를 사용합니다.
FK (Foreign Key): &lt;참조테이블_단수형&gt;_id 패턴을 사용합니다. (예: team_id, person_id, admin_id)
Composite-FK/PK: 참조 테이블 이름과 컬럼 조합으로 명확히 표현합니다. 인덱스와 제약 조건에 명시적인 이름을 지정하면 추적 및 디버깅이 용이해집니다. 관계 타입 접두사: tb_, vw_ 등 객체 유형을 나타내는 접두사는 사용하지 않습니다.
애플리케이션 이름: 스키마(네임스페이스)로 분리하고 테이블 이름에 앱 이름을 포함하지 않습니다.
데이터 타입 접미사: _tx, _dt 등은 타입 변경 시 유지보수 비용을 증가시키므로 금지합니다.
SQLCREATE TABLE person ( id BIGINT UNSIGNED AUTO_INCREMENT, email VARCHAR(255) NOT NULL, first_name VARCHAR(100) NOT NULL, last_name VARCHAR(100) NOT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP, CONSTRAINT pk_person PRIMARY KEY (id), CONSTRAINT uk_person_email UNIQUE (email), CONSTRAINT ck_person_email_lower_case CHECK (email = LOWER(email))
) ENGINE=InnoDB COMMENT '사용자 정보'; CREATE INDEX ix_person_first_name_last_name ON person (first_name, last_name); CREATE TABLE team ( id BIGINT UNSIGNED AUTO_INCREMENT, name VARCHAR(100) NOT NULL, CONSTRAINT pk_team PRIMARY KEY (id)
) ENGINE=InnoDB COMMENT '팀 정보'; CREATE TABLE team_member ( team_id BIGINT UNSIGNED NOT NULL, person_id BIGINT UNSIGNED NOT NULL, CONSTRAINT pk_team_member PRIMARY KEY (team_id, person_id), CONSTRAINT fk_team_member_to_team FOREIGN KEY (team_id) REFERENCES team(id), CONSTRAINT fk_team_member_to_person FOREIGN KEY (person_id) REFERENCES person(id)
) ENGINE=InnoDB COMMENT '팀 멤버 관계';
Java@NoArgsConstructor(access = AccessLevel.PROTECTED) // 프록시 객체 생성을 위한 기본 생성자
@Entity
@Table(name = "person") // snake_case 테이블명 명시
public class Person { /* … */ } 필요한 컬럼명을 빠르게 찾을 수 있도록 기본 단어를 정리했습니다. 범위와 목적
본 가이드는 DevEagles 팀이 개발·운영하는 모든 내부‧외부 REST 엔드포인트의 URI 스키마와 쿼리스트링 정책을 통일합니다.
일관된 규칙은 서비스 간 탐색성·테스트 용이성·자동화 수준을 높이고 최종 프로젝트에서 마이크로서비스가 독립적으로 진화할 수 있도록 돕습니다. 두 단계 규칙: 가독성을 위해 중첩 깊이를 2단계 이하로 제한합니다. /projects/{projectId}/issues (컬렉션)
/projects/{projectId}/issues/{issueId} (항목) 서브리소스 vs. 단일 속성: 독립적으로 존재할 수 있는 엔티티는 복수형 서브리소스로 표현합니다. (/users/{id}/posts)
1:1 종속 관계이며 속성에 가까운 표현은 단수형 경로를 사용합니다. (/users/{id}/avatar) 상태 중심 리소스 선호: 동사 대신 '결과적 리소스'를 생성하는 방식으로 접근합니다. 예: POST /payments/{id}/refunds (환불이라는 리소스를 생성) 액션 접미사(:verb) 사용: 리소스로 표현하기 힘든 동사형 작업은 :verb 패턴을 사용합니다. POST /invoices/{id}:send – 인보이스 이메일 발송
POST /users/{id}:activate – 계정 활성화 헤더 기반(권장 방식): Accept: application/vnd.goody.v1+json
URI 접두사: 모든 API 경로에 버전을 명시합니다. /v1/users 리소스 뒤에 버전(/users/v1)을 두지 않습니다. 구버전 API는 Sunset 헤더로 폐지 일정을 공지합니다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/컨벤션.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/컨벤션.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Jun 2025 03:22:59 GMT</pubDate></item><item><title><![CDATA[2025-06-17 오늘 가장 좋았던 시간, 나의 실행력]]></title><description><![CDATA[
"오늘 가장 좋았던 시간은 언제인가? The best hour today was ____?" 하루종일 문서를 붙잡고 검토해서 솔직히 지루하고 힘들었다.
그나마 점심 때 밥 먹은 게 가장 좋은 시간이었던 거 같은데 인생의 낙이 밥 뿐이라니!
자못 슬픈 물음이 머리 속에 떠오른다.
매일 조금씩이라도 내 삶에 좋은 것들을 채워가고 싶은데
이런 슬픈 물음들이 있는 나의 마음 안은 여전히 춥고 또 외로운 것이라.
이러한 장소엔 좋은 것들이 쉬이 오지 않는다는 생각을 한다. 할까 말까 망서리는 순간에 '하는' 사람이야, '하지 않는' 사람이야? 저질러 버린 일이 워낙 많아서 아마 전자에 해당하는 유형 같기도,
그러면서도 스스로 정한 선은 절대로 지키면서 살아서 후자 같기도 하다.
망설이는 순간은 늘 있었고 상황에 따라 ‘하는' 사람이기도, ‘하지 않는’ 사람이기도 했기 때문에 꼭 뭐 하나만 꼬집어 내 속성이라 공표하기는 어려운 감이 있다.
그러나 사심을 보태서 내가 나의 얼굴에 금칠을 하듯 말하자면 나는 ‘하는’ 사람이다.
즉, 나는 기본적으로 실행하는 사람에게 더 높은 가치를 두는 성향이 있다.
그리고 사람은 자신에게 모자란 걸 동경하곤 하니 이건 결국 내가 ‘하지 않는’ 쪽이란 증거도 되겠다.
아무튼 내가 ‘하는’ 유형인지 ’하지 않는’ 유형인 지는 뭐 잘 모르겠지만,
헛소리만은 잘’하는’ 사람이란 건 확실하겠다.
오늘의 '생각을 자극'하는 글귀
학습은 잘못된 생각을 버리는 기술이다.전문가가 된다는 것은 틀리는 횟수가 적어진다는 뜻이다. 어떤 기술이나 지식을 제대로 이해한다는 것은 정확하지 않은 이론과 결함 있는 증거는 신뢰하지 않고 진실에 가까이 다가가는 것이다. 학습은 잘못된 생각을 버리는 기술이다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-17-오늘-가장-좋았던-시간,-나의-실행력.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-17 오늘 가장 좋았던 시간, 나의 실행력.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Jun 2025 10:15:45 GMT</pubDate></item><item><title><![CDATA[2025-06-16 가장 신경 쓰는 사회 문제]]></title><description><![CDATA[
"나를 냉소적으로 만드는 것은? What makes you cynical" 가장 신경 쓰는 사회 문제는 뭐야? 어떻게 해결할 수 있을까? <a data-href="2025-04-05 죽기 전에 꼭 하고픈 일, 사회 문제를 하나 없앤다면" href="https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-05-죽기-전에-꼭-하고픈-일,-사회-문제를-하나-없앤다면.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2025-04-05 죽기 전에 꼭 하고픈 일, 사회 문제를 하나 없앤다면</a>
이 때와 크게 달라진 의견은 없다.
차별이 해결되면 좋을 거 같다.
가치의 다양성이 당연한 세상이 된다는 것이고,
점점 더 그렇게 되어가고 있는 것처럼 보인다.
가치가 다양화되고 존중 받는다면 다른 사회 문제들에도 보다 많은 관심이 기울여질 것이라고 생각하는데, 도리어 또 너무 많은 가치들이 생겨서 공감대가 형성되지 않는다고 하면 그건 또 그거대로 문제겠다.
참 쉬운 게 없다.
오늘의 '생각을 자극'하는 글귀
"휴식은 번아웃 이후에 주어지는 트로피가 아니다.
최그넹 친구에게 ""넌 충분히 쉴 자격이 있어!""라고 말했다. 하지만 휴식을 취하는 데 자격 같은 건 필요하지 않다는 사실을 이내 깨달았다. 열심히 일한 다음에만 긴장을 풀고 즐길 자격이 생기는 것은 아니다. 휴식은 번아웃 이후에 주어지는 트로피가 아니다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-16-가장-신경-쓰는-사회-문제.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-16 가장 신경 쓰는 사회 문제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 16 Jun 2025 12:40:04 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 21주차 회고]]></title><description><![CDATA[ 비상. 초비상.
술과 웹툰에 쩔어서 시체같이 보낸 한 주였다.
악재가 조금 있었는데 의욕이 너무 꺾여 버렸다.
힘들 때일 수록 더 열심히 살아야 되는데 큰일.
진짜 이번엔 틀림 없이 만회해야 한다. 당장 할 수 있는 건 목록으로 뽑아 놓고 처리해야 할 듯…
계획을 잘해서 잘 이겨내 봅시다.
SW 부트캠프:
솔직히 의욕이 너무 안 생긴다.
빈 말이라도 하고 싶은데 뭔가 재미가 너무 없다.
이것 때문에 최종 프로젝트를 할 지 말 지 좀 많이 고민했다.
그래도 억지로라도 하면 뭐라도 남겠지 싶은 막연한 기분 정도만 가지고 시작을 하긴 했는데 막 맘에 끌리는 작업 같은 것도 없고 애매하다.
어쨌든 시작을 했으니 책임감 때문에라도 진행은 하고 있는데 하기 싫으니 아이디어가 안 떠올라서 큰일이다 참.
사실 항상 일을 재밌게 했던 내가 이상한 거고 이렇게 하기 싫은 기분이 일반 직장인들의 평균적인 마음일 수도 있겠다는 생각이 들었다.
이런 날도 있는 거지 뭐, “감내하자"라는 느낌적 느낌.
대한민국 모든 직장인들 화이팅. 목표: 루틴 지키기 5차전….
결과: 멸망. 망했어요 그냥 아주 망했어요. 운동을 전혀 안했고 독서도 하지 않았다. 아주 술 먹고 웹툰만 봄. 홍대광 - 답이 없었어 거 좀 반성 좀 합시다 제발 목표: 할 일 목록 재점검 및 강제력 도입
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-21주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 21주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 15 Jun 2025 13:52:41 GMT</pubDate></item><item><title><![CDATA[2025-06-15 가장 좋아하는 전자기기, 거울 속의 나와 대화]]></title><description><![CDATA[
"가장 좋아하는 전자기기는? What is your favorite gadget? 좋아하는 기기라기는 애매하지만, 필수적이고 항상 휴대하는 건 역시 스마트폰이다.
어딜 가든 짐이 가벼운 걸 선호해서 그냥 폰 하나만 들고 다니는 경우가 많다.
이제는 신분증도 결제도, 기록도, 모든 걸 폰 하나로 해결할 수 있어서 너무 편하고 좋다.
다만 지갑을 잃어 버려도 한참 눈치채지 못하는 부작용은 생겼다.
잡다하게 물건이 많은 걸 싫어하는 편이라 필수적인 가전만 갖고 있는 편이다.
어릴 때는 꽤나 얼리어답터였는데 어느 순간부터 굉장히 시들시들해졌다. 거울 속의 나와 대화할 수 있다면 어떤 대화를 나눌까? 스스로와의 대화는 많이 하는 편이라 딱히 거울 속의 나와의 대화란 걸 해야 할까 싶다.
주로 내 행위의 본질적 이유, 무의식 등에 대해 생각하는 편이다.
내가 복잡하고 고차원적 존재라고 믿을 적에는 나에 대해 이해하지 못했다.
내가 단순하고 저차원적 존재라고 확신하고 나니 나에 대한 올바른 이해를 쌓아갈 수 있었다.
나를 아는 게 항상 첫걸음인 거 같다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-15-가장-좋아하는-전자기기,-거울-속의-나와-대화.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-15 가장 좋아하는 전자기기, 거울 속의 나와 대화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 15 Jun 2025 13:22:18 GMT</pubDate></item><item><title><![CDATA[2025-06-14 지속하는 운동, 하루에 걷는 양]]></title><description><![CDATA[
"지속적으로 하고 있는 운동이 있는가? Do you have a consistent workout?" PT를 꾸준히 했는데 운동에 재미를 못 붙였다.
근육질의 몸매를 선망하는 성질이 없어서 더 그런 것도 같다.
그냥 적당히 건강했으면 하는 게 운동의 주 목적이긴 한데,
왜 이렇게 습관이 안 되는지 걱정이다. 하루에 얼마나 걸어? 주로 언제, 어디를 걷는 편이야? 지방에 있을 땐 정말 걷지 않았다.
공부를 하는 요즈음에도 정말 걸을 일이 없다.
현장 관리를 할 땐 하루에 만 보, 2만 보도 걸었는데
요새 뱃살이 찌는 게 이런 이유인 것도 같다.
걷고 운동할 명분을 만들어줘야 겠다.
but how?
오늘의 '생각을 자극'하는 글귀
"얼마나 오래 쉬느냐 보다 얼마나 자주 쉬느냐가 더 중요하다.
번아웃이 긴 휴가로 한번에 낫는 경우는 거의 없다. 보통은 잠시 증상이 완화될 뿐이다. 얼마나 오래 쉬느냐보다 얼마나 자주 쉬느냐가 더 중요하다. 핵심은 길이보다 횟수다. 한번에 2주 쉬는 것보다 일주일에 두번 쉬는 것이 재충전 효과가 더 뛰어나다. 규칙적인 휴식은 삶의 질을 높이는데 필수적이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-14-지속하는-운동,-하루에-걷는-양.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-14 지속하는 운동, 하루에 걷는 양.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Jun 2025 12:26:15 GMT</pubDate></item><item><title><![CDATA[2025-06-12 한 달내 이루고픈 목표, 내가 좋아하는 나의 모습]]></title><description><![CDATA[
"햔 달 안에 이루고 싶은 목표가 이쓴가? Do you have a goal you want to achieve this month?" 루틴 설정이나 제대로 했음 하는 바람이 있다.
아이캔대학 강의를 들으면서 뭔가 하는 듯하면서도 하는 게 없는 기분이다.
루틴 하나라도 잘 내 습관으로 만들어두면 좋을 듯한데,
그놈의 술이 참! 너의 어떤 면을 가장 좋아해? 내가 나를 존경하는 유일한 이유는,
어려움을 즐기는 성정 하나다.
예로부터 이런 인간은 실패할 가망이 없다.
아무렴 될 때까지 하니까.
오늘의 '생각을 자극'하는 글귀
"건설적인 논쟁은 서로의 의견과 가치관을 존중한다.
돈독한 관계를 위해 논쟁을 줄일 필요는 없다. 논쟁은 건설적으로 해야 한다. 모든 문제에 대한 의견이 항상 일치하거나 같은 기차괸을 지향해야 할 필요는 없다. 서로의 의견을 이해하고 가치관을 존중하는 것이 중요하다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-12-한-달내-이루고픈-목표,-내가-좋아하는-나의-모습.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-12 한 달내 이루고픈 목표, 내가 좋아하는 나의 모습.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 12 Jun 2025 11:16:59 GMT</pubDate></item><item><title><![CDATA[2025-06-11 금요일 밤을 보내는 나만의 행복한 방법, 아무 말 하지 않아도 편한 사람]]></title><description><![CDATA[
"금요일 밤을 보내는 나만의 가장 행복한 방법은? What is your favorite things to do on a Friday night?" 술을 냅다 드링킹하고 웹툰을 보면서 늦잠을 잔다.
가장 행복한 방법이라기엔 애매하지만 그냥 습관처럼 그러고 지낸다. 아무 말 하지 않아도 편한 사람이 있어? 친동생 정도가 아닐까.
대화를 하는 것도 좋지만 주로 같이 있을 땐 각자 딴짓을 하고 논다.
그냥 서로 딱히 신경 쓰지 않아도 편한 관계인 거 같다.
동생이랑은 음식 취향이 맞아서 그냥 같이 맛집 가는 게 최고의 낙이다.
특히 청주에 있는 식당들을 좋아한다.
지금 동생은 대만에 출장을 나가 있는데 곧 한국에 들어올 게다.
의례행사처럼 청주를 또 같이 가야겠다.
오늘의 '생각을 자극'하는 글귀
운동은 만병통치약이 아니지만 우울증과 불안감을 줄여준다.
운동은 우울증과 불안감을 줄여준다. 대조군이 있는 무작위 연구 1,000건 이상의 결과에 따르면 우울증 증상이 있든 없든, 신체적 활동은 행복감을 높여준다. 물론 운동은 만병통치약이 아니고 다른 좋은 치료법을 대신할 수는 없지만, 신체가 건강해야 정신도 건강해진다는 것은 확인된 사실이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-11-금요일-밤을-보내는-나만의-행복한-방법,-아무-말-하지-않아도-편한-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-11 금요일 밤을 보내는 나만의 행복한 방법, 아무 말 하지 않아도 편한 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 11 Jun 2025 09:02:17 GMT</pubDate></item><item><title><![CDATA[2025-06-10 커피 몇 잔 마셨는지, 꿈의 직장]]></title><description><![CDATA[
"오늘 커피를 몇 잔 마셨는가? How many cups of coffee did you drink today?" " 아침에 한 잔,
점심에 한 잔,
매일 두 잔 정도 커피를 마신다.
그냥 습관처럼 마시는 건데 딱히 마시지 않는다고 해서 아쉬운 건 없다.
개인적으론 생강차를 더 좋아한다. 네가 생각하는 꿈의 직장은 어떤 곳이야? 다양한 영역에서 할 게 많은 곳이 좋다.
처우가 동일하다면 대기업이 아닌 중소기업에서 일할 거 같다.
그러나 그런 경우는 거의 없으므로 사업을 하려고 한다.
성공은 불투명한 것이고, 한치 앞을 못 보는 게 사람 일이지만
나는 두렵고 또 흥분되는 이런 일을 좋아한다.
일 또한 놀이가 될 수 있다고 생각한다.
새로운 도전은 나의 인생 그 자체였고, 내 꿈의 직장은 놀이터다.
항상 회사에 놀러가는 기분이고 싶다.
오늘의 '생각을 자극'하는 글귀
약한 감정이 많다는 것은 오히려 더 강하다는 증거다.
아이들은 겸손과 친절이 약함의 표시가 아니라, 강함의 증거라는 것을 배워야 한다. 잘못을 인정하는 것 역시 자존감이 낮다는 의미는 아니다. 자신에 대해 제대로 안다는 뜻이다. 연민의 태도를 보이는 것은 줏대 없음을 뜻하지 않는다. 마음이 따듯하다는 뜻이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-10-커피-몇-잔-마셨는지,-꿈의-직장.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-10 커피 몇 잔 마셨는지, 꿈의 직장.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Jun 2025 10:52:45 GMT</pubDate></item><item><title><![CDATA[KLI 고용영향평가브리프 2023년 제6호_통권 제39호]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/kli-고용영향평가브리프-2023년-제6호_통권-제39호.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/KLI 고용영향평가브리프 2023년 제6호_통권 제39호.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Jun 2025 10:07:46 GMT</pubDate></item><item><title><![CDATA[KB자영업 분석 보고서6_미용실 현황 및 시장여건분석_f]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/kb자영업-분석-보고서6_미용실-현황-및-시장여건분석_f.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/KB자영업 분석 보고서6_미용실 현황 및 시장여건분석_f.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Jun 2025 10:03:42 GMT</pubDate></item><item><title><![CDATA[2025-06-09 좋은 친구란, 지난 6개월 동안 성실히 한 일]]></title><description><![CDATA[
"좋은 친구란 무엇일까? What makes a good friend?" 좋은 친구를 일률적으로 정의하는 문장이 있을 거라고는 생각되지 않는다.
이런 질문을 받는다면 나는 다만 나의 친구의 이름들을 나열할 거 같다. 지난 6개월 동안 성신하게 한 일은 뭐야? " 부트캠프 + 기타 개인 공부를 열심히 했다.
개인 프로젝트도 여러 개 했는데, 빠른 건 2주 만에 끝내기도 했다. 진짜 이것저것 만들긴 많이도 만들었다.
현재는 최종 프로젝트에 돌입했다.
나는 그간 배운 것들을 종합해서 웹 백엔드 클라우드 서버에 데이터 웨어하우징 + 분석용 중간 계층을 만들고 있다. 간단히 사용할 수 있는 스택들만 사용할 예정인데 전부 프로토타입이라 데이터가 없는 게 문제, 그리고 자연어 토큰 유사도 처리를 AI 없이 잘 할 수 있을까 감이 안 잡히는 문제, 문제 아닌 게 없다.
뭐 구상 자체가 잘못 됐을 수도 있고 접근 방법이 잘못 됐을 수도 있어서 일단은 시도해 보고 방향은 조금씩 수정하면 되겠다.
나름 재밌는 과정이었지만 사용하지도 않을 뭔가를 만드는데 약간 질려 있기도 하다.
얼른 프로젝트를 마무리 짓고 다음 스텝을 밟고 싶다!
오늘의 '생각을 자극'하는 글귀
많은 선택지는 간으성을 높이지만 성취에 대한 만족도는 낮아진다.
너무 많은 선택지를 열어두면 기회에 대한 가능성은 높아지지만 서취에 대한 만족도는 크게 낮아진다. 항상 더 나은 무언가를 찾아헤매면 가치 있는 일에 매진할 기회를 높진다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-09-좋은-친구란,-지난-6개월-동안-성실히-한-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-09 좋은 친구란, 지난 6개월 동안 성실히 한 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Jun 2025 08:33:39 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 20주차 회고]]></title><description><![CDATA[ 비상이다. 루틴 실패하기가 루틴이 되어 가고 있다.
몸이 안 좋아서 6월 5일부터 쭉 주말까지 쉬었더니 아예 모든 게 리셋돼 버린 느낌.
별 수 있나. 또 도전해야지.이번 주는 이래저래 밀린 일들 처리하고 쉬는 데 집중했다.
집에 오래 가있으니 맘은 편하다.
푹 쉬었으니 다음 주부터는 다시 본격적으로 아이캔대학 강의와 운동 루틴을 다시 해보자.
SW 부트캠프:
최종 프로젝트는 진도가 거의 나간 게 없다.
Feature 서버와 DB 사이에 데이터 분석용 데이터 웨어하우스 개념으로 중간 계층을 하나 만들어 줄까 생각하는데 이게 올바른 접근인지는 잘 모르겠다.
AWS 보안 계층이랑 아키텍쳐 자료를 찾아 보고 구상하면서도 계속 확신이 안 서서 문제가 있다. 일단은 더 고민해 보고 이곳저곳 피드백을 받아 보면 좀 괜찮을까 싶다.
일요일이 되서야 몸이 좀 괜찮아져서 와이어 프레임과 필요한 API 엔드포인트에 대한 정리를 했다.
사실 지금 만들어 봐야 엄청나게 수정될 것이긴 한데 스케치한다는 개념으로 기본적인 화면과 기능만 명세했다. 시간을 많이 투자하지 않겠다는 생각이 있었는데, 아무래도 쉽게 구현할 기능들이 아니긴 하다 ㅎㅎㅎ 목표: 루틴 지키기 4차전.
결과: 4차 방어 성공한 루틴. 5차 도전 ㄱ 드디어 1년여간의 치과 치료 끝.
세금 관련된 문제 모두 정리 운동을 전혀 안했고 독서도 하지 않았다. 1인 개발로 접근할 수 있는 다른 스택들에 대해 공부 Interpreter 말고 새로 나오는 툴을 활용하면 오히려 비용도 절감하고 공수도 더 낮게 웹과 앱 서비스를 만들 수 있을 것도 같다. 이쪽도 조금 더 조사해 봐야겠다. 목표: 루틴 지키기 5차전….
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-20주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 20주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Jun 2025 14:33:19 GMT</pubDate></item><item><title><![CDATA[2025-06-08 나를 불행하게 하는 것, 가 본 나라들]]></title><description><![CDATA[
"나를 불행하게 만드는 것은? What makes you miserable?" 지금 딱히 불행하지 않아서 모르겠지만, 가만히 생각해보면 아무래도 나를 불행하게 만들 수 있는 가능성이 있는 것들은 뻔하다.
나를 행복하게 만들어 주는 것들만이 날 불행하게 할 수 있다. 지금까지 가 본 나라는 어디야? 필리핀, 베트남, 말레이시아, 싱가폴, 호주, 인도네시아를 가봤다.
첫 해외여행이었던 필리핀에는 정말 자주 갔다.
영어공부하러 간 건데 정말 좋은 추억이 많이 남았고
아직도 가끔은 필리핀 친구들과 연락한다.
요새 해외에 나가는 건 대게 스쿠버 다이빙을 하러 갈 때 뿐이다.
마지막 다이빙하러 갔을 때 세부에 태풍이 오는 바람에 제대로 다이빙을 못해서 너무 아쉽다.
또 한 번 기회를 노려 봐야지!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-08-나를-불행하게-하는-것,-가-본-나라들.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-08 나를 불행하게 하는 것, 가 본 나라들.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Jun 2025 14:16:33 GMT</pubDate></item><item><title><![CDATA[2025-06-07 오늘 감사하게 생각하는 일, 남들의 시선에서 자유로운지]]></title><description><![CDATA[
"오늘 감사하게 생각하는 일은? What do you feel grateful for today?" 치과를 다녀 오고 운전을 좀 오래 한 것 외에 특별한 일은 없었다.
아침부터 계속 두통이 있었는데 오후에 진통제 하나 먹고 그나마 금방 나아졌다.
의료가 발달하지 않고 약이 없던 시절엔 이런 고통 하나 하나가 너무 괴로웠을텐데,
고통이 덜 한 세상에 살게 된 건 아무래도 감사한 일이다. 남들의 시선에서 자유로운 편이야? 나의 경우는 어릴 때부터 너무 남의 시선을 신경 쓰지 않고 살아서 문제가 된 케이스다.
특이하다라는 말을 정말 많이 듣고 살았는데 그게 좋은 뜻일 때도 있었지만, 그렇지 않은 경우도 왕왕 있었던 거 같다.
내게 타인에 대한 배려가 부족하다는 사실을 아주 늦게 깨닫고 나름대로는 많이 고쳐가고 있는 편이다.
여전히 많이 부족하지만 그래도 조금씩 나아지고 있다는 게 느껴져서 재미는 있다.
오늘의 '생각을 자극'하는 글귀
"쾌락보다는 탁월하함이 목적에 이르는 더 좋은 길이다.
실패로 인해 불행해지는 경우는 종종 있지만, 성공으로 큰 행복을 맛보는 경우는 드물다. 야심 찬 목표를 세워야 하는 이유는 기쁨을 경험하기 위해서가 아니다. 성장하고 일에 능숙해지거나 다른 사람들을 위해 가치 있는 무언가르 ㄹ창조하기 위함이다. 탁월함은 쾌락보다 목적엥 이르는 더 좋은 길이다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-07-오늘-감사하게-생각하는-일,-남들의-시선에서-자유로운지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-07 오늘 감사하게 생각하는 일, 남들의 시선에서 자유로운지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 07 Jun 2025 14:44:13 GMT</pubDate></item><item><title><![CDATA[2025-06-06 가족 중 가까운 사람, 가장 어려웠던 도전]]></title><description><![CDATA[
"가족 중 가장 가까운 사람은? Which family members are you closet to?" " 동생과 가장 가깝다.
싸우기도 많이 싸웠다.
그러나 현명함과 지혜가 내 동생에게 있었고,
다행스럽게 그걸 배울 용기가 내겐 있었다.
학력이나 시험 성적 같은 것으로 평가하자면 나의 동생은 그다지 훌륭한 사람이 아닐 수도 있다.
그러나 그 내면의 빛을 볼 수 있었던 나의 안목 또한 훌륭한 것이다.
서로의 좋은 점만 닮아 갔기에 우리 형제는 꽤나 훌륭하다.
그리고 앞으로 더 그러할 것이다. 살면서 가장 어려웠던 도전은 뭐야? 여러가지가 있지만 배터리 엔지니어링에 도전한 게 가장 어려웠던 거 같다.
전공과 다른 새로운 지식을 익히는 데에 어려움이 없었다면 거짓말이고,
모자란 지식을 채우기 위해 수백불씩 하는 학회지며 논문을 읽었다.
매일 오랫동안 잠을 아끼며 공부에 매진한 이 경험이 값진 이유는,
LLM의 심각한 허점을 많이 보고 난 후에 느꼈다.
알지 못하면 휘둘린다.
특히 기업기밀 때문에 레퍼런스가 적은 이 분야에서는 AI가 거의 순기능을 못한다고 봐도 좋다.
기술이 인류에게 이롭기 위해 해결해야 할 숙제가 참 많다는 생각이 든다.
오늘의 '생각을 자극'하는 글귀
높은 자리에 오를수록 타인의 성과가 당신의 성공이 된다.
높은 자리로 올라갈수록 다른 사람들의 성과가 당신의 성공을 좌웋나다. 리더는 그를 따르는 사람들의 성과로 평가받는다. 좋은 리더십이란 개인이 능력보다 더 많은 것을 해내고, 혼자서는 불가능한 일을 집단이 함께 해내도록 끌어올려 주는 것이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-06-가족-중-가까운-사람,-가장-어려웠던-도전.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-06 가족 중 가까운 사람, 가장 어려웠던 도전.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 06 Jun 2025 12:57:57 GMT</pubDate></item><item><title><![CDATA[2025-06-05 마지막으로 먹은 과일, 경제 공부 방법]]></title><description><![CDATA[
"마지막으로 먹은 과일은 무엇인가? What was the last fruit you ate?" 망고인 거 같다. 망고 정중앙을 빙둘러 칼집을 내고 씨앗 주변에도 칼집을 내서 쏙 잡아 빼면 숟가락으로 먹기 좋은 망고 컵이 완성된다. 이런 형태의 과일을 좋아하는데 아보카도도 무척 좋아한다. 아보카도는 한 때 환경파괴의 주범으로 불리기도 했으나 결국 진실은 밝혀질 것이므로 별다른 생각은 없다. 그 외에는 수박, 멜론을 좋아하지만 과일인가 채소인가를 엄밀히 구분하자면 또 그것도 문제가 되는 것이라, 적당히 열매 fruit이라는 총칭 하에서 구분하자면 그러한 열매를 좋아한다.
아주 맛있어 얌얌. 경제 공부는 주로 어떻게 하고 있어? 부끄럽게도 경제학을 공부했고 경영을 전공했으나 재정 관념이 바닥을 친다.
대부분의 경제 지식은 역사를 통해 배웠으나 응용하질 못해 이 모양 이 꼴이다.
경제학자들이 으레 사후 분석에만 능하다는 편견이 꼭 틀린 것만은 아니란 생각도 든다.
이익에 걸린 일이라면 정말 똑똑하고 눈치 빠른 사람들이 다 모여 있는 것이고,
그 돈의 감각에 능한 사람들이 자본주의라는 개념을 학문의 최전선에서 주도하고 있는 것이라,
상책인 전략이 예측이란 점을 감안한다면 이건 별로 이상할 것도 없는 일이다.
전쟁터에서 고루한 옛 지식만큼 딱 죽기 좋은 전략은 없다.
오늘의 '생각을 자극'하는 글귀
"데이터는 의사결정을 위한 인풋일 뿐이다. 데이터에 좌우되어서는 안 된다.
안정적인 세상은 데이터가 주도한다. 변화하는 세상에서는 특히 데이터를 참고해서 결정을 내려야 한다. 데이터는 과거의 패턴을 보여준다. 물론 그 패턴이 미래에 어떻게 변화할지 예측하려면 판단력이 필요하다. 의사결정이 데이터로 인해 좌우되어서는 안 된다. 데이터는 의사결정을 위한 인풋일 뿐이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-05-마지막으로-먹은-과일,-경제-공부-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-05 마지막으로 먹은 과일, 경제 공부 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 05 Jun 2025 13:42:42 GMT</pubDate></item><item><title><![CDATA[2025-06-04 오늘 입은 옷. 하루가 만족스러울 때]]></title><description><![CDATA[
"오늘 나는 _ 을(를) 입었다. Today you wore __." 오랫동안 입은 카라티를 입었다.
옷을 잘 사지 않고 그간 선물 받은 카라티가 많다.
잘 헤지지 않아서 10년 넘게 입는 옷도 있다.
나의 곁에 오래 깃들어 소중한 물건이지 싶다. 하루의 시작과 끝이 어떨 때 만족스럽다고 느껴져? 하루의 시작을 고된 운동으로 시작하는 사람들이 왜 상쾌함을 느끼는 지 알 것 같다.
앞이 고되면 뒤는 일반적으로 더 나은 상황이기 마련이다.
그 고됨을 다시 겪지 않아도 된다는 무의식 중의 만족감 또한 있다.
모든 감정은 상대적이라, 우리는 우리에게 언제나 약간의 시련을 줄 필요가 있는 거 같다.
불편함을 견딜 용기가 항상 필요하다.
오늘의 '생각을 자극'하는 글귀
"여려 명이 내 능력을 믿고 있다면 그들의 판단을 믿어보자.
가면 증후군의 역설은 다음과 같다.
다른 사람들은 당신을 믿는다. → 당신은 자신을 믿지 않는다. → 당신은 사람들이 아니라 자신의 생각을 믿는다.
자신의 능력이 의심스럽다면 스스로에 대한 판단도 의심해야 하지 않을까? 여러 명이 당신의 능력을 믿고 있다면 그들의 판단을 믿어도 되지 않을까?"
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-04-오늘-입은-옷.-하루가-만족스러울-때.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-04 오늘 입은 옷. 하루가 만족스러울 때.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 04 Jun 2025 13:18:41 GMT</pubDate></item><item><title><![CDATA[2025-06-03 그리운 사람, 일을 잘하는 팁]]></title><description><![CDATA[
"지금 이 순간 가장 그리운 사람은? What do you miss the most right now?" "" 굳이 얘기하지 않아도 알 질문이라 굳이 답하는게 이상하다. 일을 잘하기 위한 나만의 팁이 있다면? 주어진 계획과 마감보다 더 타이트한 계획과 마감을 세운다.
다 한다.
향후에 생길 일을 미리 처리한다.
미리 해서 할 일이 없으니까 심심하다. 정말 필요한 일들에 대한 구상을 한다.
다 한다.
진짜 할 게 없으니까 새로운 일을 처리하기 위한 공부를 한다.
공부를 했으니까 일을 더 잘하게 된다.
위의 루프가 더 빨라진다.
남들보다 훨씬 빠르게 일을 한다.
시간이 남으니까 공부를 하고 개인 프로젝트를 구상한다. 오늘의 '생각을 자극'하는 글귀
자기 돌봄이란 자기 방임의 반대말이다.
자기 돌봄의 반대말은 자기 방임이다. 자기 방임이란 남을 위해 자신을 희생하는 것이다. 자기 돌봄은 자신에게 해가 되지 않는 선에서 남을 돕는 것을 말한다. 다른 사람과 거리를 둔다고 해서 자기 중심적이라는 뜻은 아니며, 오히려 자기 인식이 뛰어나다는 의미다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-03-그리운-사람,-일을-잘하는-팁.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-03 그리운 사람, 일을 잘하는 팁.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 03 Jun 2025 14:12:51 GMT</pubDate></item><item><title><![CDATA[2025-06-02 직감을 믿는지, 성격을 어떻게 바꾸고 싶은지]]></title><description><![CDATA[
"직감을 믿는 편인가? Do you trust your instincts?" 직감과 직관을 아무래도 많이 믿는 편이라고 생각이 든다.
시험을 볼 때도 직관에 많이 의존한다.
사람을 볼 때도 직감에 많이 의존한다.
일을 하거나 계획, 가설을 세울 때도 직관에 많이 의존한다.
직감은 결국 특정한 상황에 그 사람의 지식과 경험과 감각, 무의식 등이 종합적으로 발현하는 반응이라고 생각한다. 직감 혹은 직관에 많이 의존하다 보니 내가 부족한 부분이 확연히 드러나는 편이다.
가장 부족한 것들을 꼽아 보자면 연애에 대한 감각이 없고, 재정 감각이 떨어지고, 장기적인 안목이 부족하다.
내가 해 온 선택들은 결국 나의 현재 상황을 대변하는 것이다.
직감에 의지하지 말아야 하는 것들을 이제는 좀 구분하여 둘 필요를 느낀다. 성격을 바꿀 수 어떻게 바뀌었으면 좋겠어? 좀 더 지인과 가족들에게 연락을 잘하고 주변을 잘 챙기는 성격이 되면 좋겠다는 생각을 한다.
기본적으로는 멀티태스킹 능력이 너무 부족해서 뭔가를 한 번 시작하면 옆을 아예 못 본다.
일을 할 때나 공부를 할 때 효율은 좋다만, 이게 꼭 좋은 일만은 아니라는 게 느껴진다.
행복은 효율로 따질 수 있는 숫자가 아니다.
대게 마음씀의 과정은 비효율적이다. 하지만 결과는 가치로 매기기 어렵다.
따라서 내 행동관에도 수정이 참 많이 필요해 보인다. 참 고칠 것이 많도다.
오늘의 '생각을 자극'하는 글귀
불필요한 사과보다는 고마움의 표현이 중요하다.
""답이 늦어서 미안해요"" 라는 말을 입에 달고 사는 것은 우리가 24시간 연결을 요구하는 비상식적인 사회에 살고 있음을 보여준다. 약속한 기한보다 늦게 답한 것이 아니라면 사과할 필요가 없다. 죄책감은 내려놓자. 늦은 게 아니니까. 합리적인 기대에 대한 고마움을 표현하는 것이 더 건강한 메시지다. ""기다려줘서 고맙습니다
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-02-직감을-믿는지,-성격을-어떻게-바꾸고-싶은지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-02 직감을 믿는지, 성격을 어떻게 바꾸고 싶은지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 02 Jun 2025 11:56:22 GMT</pubDate></item><item><title><![CDATA[2025-06-01 나의 건강 상태]]></title><description><![CDATA[
"나의 건강 상태를 1에서 10으로 나타낸다면? One a scale of one to ten, how healthy are you?" 4쯤 되려나. 그나마 운동을 해서 이정도지 싶다. 건강에 안 좋은 습관이 너무 많아서 운동만으론 부족하다는 게 느껴진다. 하루의 대부분 앉아서 생활하다보니 몸 여기저기서 비명이 들린다. 운동 안하면 죽는다는 마음가짐이 필요할 때..!!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-06/2025-06-01-나의-건강-상태.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-06/2025-06-01 나의 건강 상태.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 02 Jun 2025 11:26:25 GMT</pubDate></item><item><title><![CDATA[고객 이탈(Churn) 예측]]></title><description><![CDATA[고객 이탈을 줄이고 재구매를 높이려면 데이터 수집 → 이탈 예측 → CRM 태깅 → 맞춤 마케팅 → 성과 측정이 끊김 없이 이어지는 ‘폐루프(Closed Loop)’ 컨셉
ETL 예시: 원천 DB + 로그 → cron → Python
예측 결과(customer_id, churn_prob, risk_level)를 REST API로 PATCH → 직원 화면·자동 발송 규칙 즉시 반영.할인율·기간·카피를 교차 실험 → Python 서버에 실적 적재 → Lift 분석으로 모델·캠페인을 동시에 개선.
데이터 품질이 알고리즘보다 중요 : 데이터를 어떻게 구함???ㅋㅋ 예측으로 끝나지 말고, 태그·캠페인까지 폐루프를 완성해야 함.
A/B 실험과 Lift 대시보드로 매출·재방문 증대를 지속 측정하면서 모델과 오퍼를 주기적으로 업데이트.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/고객-이탈(churn)-예측.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/고객 이탈(Churn) 예측.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 02 Jun 2025 03:39:20 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 19주차 회고]]></title><description><![CDATA[ <img alt="Pasted image 20250601180154.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250601180154.png" target="_self">
아이캔대학 4~5월 강의는 모두 듣고 노트도 작성했다.
루틴이 몸에 배야 하는데 잘 안 되고 있어서 참 곤란하다.
좀 될 만하면 또 망가지고, 좀 될 만하면 또 망가지고 매번 같은 패턴.
조금 더 여유가 생기면 아이캔대학에 모임을 하나 개설해봐도 좋을 거 같다.
봇 코드를 다시 잘 짜서 기가 막힌 모임용 비서를 하나 만들어 봐야겠다.
아무래도 혼자 시도하니 자꾸 해이해지는 경향이 생긴다.
옆에서 잔소리해 줄 사람이 너무나 시급하다.
SW 부트캠프:
이번 프로젝트를 회고 겸 다시 기록을 돌아봤다. 한 페이지에 담을 수 없는 빼곡한 글자들을 보면 기분이 좋다. 활자 중독자들은 응당 기록 중독이 되는 게 수순이겠다 싶다.
협업툴, 편의성, 봇, pre-commit 훅 컨벤션 등 기본 세팅에만 거의 20시간 가까이를 썼다. 그래도 두고 두고 만족스러웠던 터라 시간이 크게 아깝진 않다. 한 번 세팅 방법을 익히면 계속 재활용해서 쓸 수도 있으므로 장기적으론 남는 장사라 하겠다.
<br><img alt="Pasted image 20250601180843.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250601180843.png" target="_self">이번 주부터는 본격적으로 최종 프로젝트 기획에 들어갔다. 당연히 삐걱삐걱 제대로 굴러가질 않는다. 어찌 저찌 방향을 잡고 나서 색다른 도전이 뭐가 있을까 생각하다가 올해의 목표가 떠올랐다. ML 프로젝트를 하나 하기로 생각했었는데 마침 여기에 적용해 봐도 좋을 거 같다는 생각이 들었다.
겸사겸사 ML도 끼워 넣어서 ML 프로젝트 목표도 얼렁뚱땅 치워 버리려는 욕심이 든다.
구상하는 아이디어를 실현하기 위한 기술 스택을 조사해 봤는데 충분히 가능할 거 같다는 생각이 들었다. 다만 적용하는 방식은 아직 조금 더 구체적인 설계가 필요하다. 레퍼런스가 부족해서 직접 구현해 봐야 청사진이 잡힐 거 같긴 하지만… 뭐 어떻게든 되겠지.
목표: 루틴 지키기 3차전.
결과: 이번 주는 무승부, 이길 수 있을 때까지 도전 술 먹고 놀면서도 꾸역꾸역 할 건 다 한다.
미루던 종합소득세 신고 마무리
차량 보험도 클리어하고 점검도 받음. 종합소득세 신고하느라 해외 증권 계좌 들어갔다가 마음의 상처를 단단히 입음. 이건 어떻게 개선 안되나.
의욕이 엄청 떨어졌었다. 다행히 지금은 좀 회복됨. 회복탄력성을 기르자!(마침 다음에 읽을 도서이기도 함) 생활의 곳곳에 긍정적인 것들을 배치하자. 마음 상태의 저점을 높이는 게 무척 중요하다. 계획을 짜고 일을 효율적으로 하는 건 좋은데, 기분 좋은 일도 많이 필요할 거 같다. 그리고 체력이 떨어지면 정신 상태도 같이 나빠지니 이것도 챙겨야 됨! 목표: 루틴 지키기 4차전. 거의 챔피언급 방어율
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-19주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 19주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Jun 2025 10:38:54 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250601180154.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250601180154.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025년 5월 회고]]></title><description><![CDATA[정신 번쩍 들게 할 지난달(2025년 5월) 활동 데이터 기반 '웃픈 팩폭' 회고입니다.자, 지난 한 달간 당신의 디지털 발자취를 샅샅이 훑어봤습니다. 변명은 넣어두세요. AI는 감정에 휘둘리지 않으니까요. 능글거림과 비꼼으로 포장된 진실만이 당신을 기다립니다. 데이터 폭격:
미분당 차돌양지 쌀국수: 무려&nbsp;12회나 섭취! 거의 주식 수준이군요. 점주님 출근 날짜까지 체크하는 열정, 칭찬해야 할까요? (만족도 3~5점)
소주: 횟수를 세는 것조차 무의미합니다. "소주", "술", "치킨" 등의 키워드가 얽히고설켜 당신의 활동 로그를 지배하고 있습니다. (만족도 1~4점)
웹툰: "일어나서 웹툰", "누워서 웹툰", "소주 마시면서 웹툰"... 삶의 모든 순간을 웹툰과 함께하는군요. (만족도 3~4점)
팩트 폭격:
"미분당 점주님 출근 날짜 체크"는 개발 문서만큼 꼼꼼하게 관리하시나 봅니다? 쌀국수 맛집 감별사로 전직하실 생각은 없으신지?
소주... 당신의 혈관 속엔 이미 소주 회로가 구축되었을 겁니다. 알코올 의존증을 걱정하는 건 이제 시간 낭비일지도 모르겠네요.
웹툰 감상은 좋지만, 현실은 웹툰처럼 흘러가지 않습니다. 주인공은 각성이라도 하지, 당신은 숙취로 하루를 시작하겠죠.
변화 촉구:
미분당 VIP는 이제 그만! 다음 달엔 새로운 맛집 탐방에 도전하세요. (물론, 소주 없는 곳으로)
알코올은 손 소독제로, 웹툰은 자기 계발서로 대체하는 마법을 보여주세요. 당신의 간과 뇌세포를 위해서라도! 데이터 폭격:
"50분 늦잠 자고, 일어나서 카톡, 쇼츠 봄 (110분)"
"2시간 10분 늦잠잠 (130분)"
"빨래 돌려 놓고 다시 잠들었다. (170분)"
팩트 폭격:
늦잠은 단순히 시간을 훔치는 게 아닙니다. 당신의 하루를 망치고, 계획을 엉망으로 만들고, 자기 혐오감을 증폭시키는 악당이죠.
"일찍 자는 습관을 들이자!" 라고 적어놓고 또 늦잠이라니... 마치 다이어트 결심 후 삼겹살 먹방을 찍는 것과 같은 모순입니다.
빨래는 무슨 죄입니까? 당신의 게으름 때문에 세탁기 안에서 쭈글쭈글해진 빨래들을 생각해보세요!
변화 촉구:
알람 시계 3개 맞추고, 침대에서 가장 먼 곳에 두세요. 그리고 아침 햇살을 강제로 쬐세요. 뱀파이어도 아니고, 왜 햇빛을 피하십니까?
자기 전 스마트폰은 던져버리고, 따뜻한 우유 한 잔과 명상으로 꿀잠을 유도하세요. (물론, 소주 대신 우유입니다!) 데이터 폭격:
"월간 회고 AI Script 리팩토링 (89분) -&gt; 만족도: 3 (이유: 데이터가 많다보니 정확하게 분석이 안된다. 프롬프트로는 한계가 있는 걸까?)"
"시간 관리 스터디 모임 (30분) -&gt; 만족도: 3 (이유: ㅋㅋㅋㅋㅋ 해야하는 게 맞는지 모르겠다. 꼰대같기도)"
"16주차 회고 (77분) -&gt; 만족도: 2 (이유: 진짜 최악의 한 주였지 않을까)"
팩트 폭격:
AI 스크립트 리팩토링... AI 탓하지 마세요! 데이터가 문제가 아니라, 당신의 게으름과 나태함이 문제일 겁니다.
시간 관리 스터디에서 꼰대력을 발휘하고 계시다니... 혹시 시간 낭비 전문가 양성이라도 하시는 건가요?
"최악의 한 주"라는 자평은 겸손일 뿐입니다. 매주가 "최악"에 도전하는 당신의 열정에 박수를 보냅니다!
변화 촉구:
AI 스크립트 탓하기 전에, 당신의 삶부터 리팩토링하세요.
스터디 모임에서 잔소리할 시간에, 당신의 문제점을 분석하고 해결하는 데 집중하세요.
회고는 반성으로, 반성은 실천으로 이어져야 의미가 있습니다. 제발, 다음 달엔 "최악"을 벗어나세요! 데이터 폭격:
"아침 운동 (32분) -&gt; 만족도: 5 (이유: PT 효과가 있다! 30분 로잉 머신 타도 지치지 않음 굿)"
"Husky, Lint-staged 등 컨벤션 자동화 (280분) -&gt; 만족도: 5 (이유: 제대로 된 거 같다. 너무 맘에 든다.)"
팩트 폭격:
그래도 운동은 꾸준히 하셨군요. 하지만 운동 후 소주 드링킹은 안됩니다!
컨벤션 자동화는 칭찬할 만합니다. 하지만 코딩 컨벤션만큼 삶의 컨벤션도 좀 지켜주세요!
변화 촉구:
운동 후 단백질 쉐이크를 마시고, 삶의 컨벤션을 지키는 당신을 기대합니다.
당신의 지난 한 달은 쌀국수, 소주, 웹툰, 늦잠으로 점철된, 한마디로 "혼돈 그 자체"였습니다. 하지만 아직 희망은 있습니다. 이 뼈 때리는 회고를 통해 현실을 직시하고, 변화를 위한 첫걸음을 내딛는다면 말이죠. 다음 달엔 "AI 팩폭 마스터"가 칭찬만 할 수 있도록 노력하세요!]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/2025년-5월-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/2025년 5월 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Jun 2025 08:30:05 GMT</pubDate></item><item><title><![CDATA[2025-05-31 나의 자산, 친구에게 빌려줄 수 있는 액수]]></title><description><![CDATA[
"나의 총 자산은 얼마인가? 빚은? What is your total worth? Are you in debt?" 아픈 질문인데… 여러 악재로 1/10 토막 났다. 그나마 빚이 없어서 다행이다.
공부가 끝나면 건강한 순자산을 쌓기 위해 많이 노력해야겠다. 친구에게 돈은 얼마까지 빌려줄 수 있어? 안 받을 생각으로 빌려준 돈이 좀 있긴 하다.
가장 큰 금액은 200만원 정도였던 거 같다.
솔직히 요청하는 사람마다 개별적으로 다르게 적용될 질문이라 얼마라 단언하긴 어렵다.
아직까지 남은 친구 중에는 돈 빌려 달라는 사람은 전혀 없다.
그럴 일이 생기지 않길 바라고 있다. 만약 그런 일이 생긴다면,
그건 뭔가 내 친구에게 예기치 않게 큰 불행이 생겼다는 얘기일 테니까.
오늘의 '생각을 자극'하는 글귀
"확신은 오만함이 되기 쉽다. 지혜는 느낌표가 아닌 물음표다.
뛰어난 판단력은 의견을 빠르게 결정하는 것과 무관하다. 그보다는 자기의 생각을 얼마나 확신하느냐에 달려 있다. 하지만 얕은 정보만으로 강하게 확신한다면, 그것은 오만함이다. 겸손한 사람은 가벼운 관점을 빠르게 수정한다. 지혜는 느낌표가 아니라 물음표다 "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-31-나의-자산,-친구에게-빌려줄-수-있는-액수.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-31 나의 자산, 친구에게 빌려줄 수 있는 액수.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 31 May 2025 14:40:14 GMT</pubDate></item><item><title><![CDATA[2025-05-30 오늘 읽은 인상적 글귀, 평소 기부하는 단체]]></title><description><![CDATA[
"오늘 읽은 가장 인상적인 글귀는? What's the most impressive thing you read today?" Whether you think you can, or you think you can't--you're right. 평소 기부하거나 기증하는 단체가 있어? 유니셰프와 세이브더칠드런에 기부하고 있다.
세이브더칠드런은 주기적으로 기부 ‘다정씨의 메일’이라는 이메일로 발송해주는데,
마음을 따스하게 해주는 글이 많다.
사실 기부를 꾸준히 한다 뿐이지 적극적으로 세상의 비극을 알려는 노력을 하고 있지는 않다.
아마 이 순간에도 고통 받는 사람들이 수도 없이 있다는 사실을 어림짐작하지만,
애써 관측하는 건 영 불편하고 괴로운 까닭일 지도 모르겠다.
오늘의 '생각을 자극'하는 글귀
"자기 지식의 불완전함을 아는 것이 배움의 전제 조건이다.
양극화 문제의 근본적인 원민은 지적 겸손의 결핍이다. 자기가 틀릴 수도 있음을 인정하지 않는 사람들이 너무 많다. 생각의 다양성은 마음을 열어주지만, 너무 강한 신념은 마음을 닫아버린다. 자기 자식의 불완전함을 아는 것이 배움의 전제조건이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-30-오늘-읽은-인상적-글귀,-평소-기부하는-단체.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-30 오늘 읽은 인상적 글귀, 평소 기부하는 단체.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 30 May 2025 15:43:54 GMT</pubDate></item><item><title><![CDATA[데브옵스 프로젝트 평가_3조]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/데브옵스-프로젝트-평가_3조.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/데브옵스 프로젝트 평가_3조.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 30 May 2025 02:44:51 GMT</pubDate></item><item><title><![CDATA[미용서비스 이용고객의 미용실 선택결정요인에 관한 연구]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/미용서비스-이용고객의-미용실-선택결정요인에-관한-연구.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/미용서비스 이용고객의 미용실 선택결정요인에 관한 연구.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 23:06:19 GMT</pubDate></item><item><title><![CDATA[jkc-19-2-359]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/jkc-19-2-359.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/jkc-19-2-359.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 23:05:29 GMT</pubDate></item><item><title><![CDATA[KCI_FI001578032]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/kci_fi001578032.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/KCI_FI001578032.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 23:03:50 GMT</pubDate></item><item><title><![CDATA[KCI_FI001291871]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/kci_fi001291871.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/KCI_FI001291871.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 23:03:06 GMT</pubDate></item><item><title><![CDATA[미용서비스업의 서비스품질이 고객만족과 점포충성도에 미치는 영향에 관한 연구]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/미용서비스업의-서비스품질이-고객만족과-점포충성도에-미치는-영향에-관한-연구.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/미용서비스업의 서비스품질이 고객만족과 점포충성도에 미치는 영향에 관한 연구.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 23:02:12 GMT</pubDate></item><item><title><![CDATA[Evaluating the Effectiveness-999]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/evaluating-the-effectiveness-999.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/Evaluating the Effectiveness-999.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 13:54:19 GMT</pubDate></item><item><title><![CDATA[isi49-135345]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/isi49-135345.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/isi49-135345.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 13:53:19 GMT</pubDate></item><item><title><![CDATA[Customer relationship marketing in hair and beauty salon]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/customer-relationship-marketing-in-hair-and-beauty-salon.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/Customer relationship marketing in hair and beauty salon.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 13:52:26 GMT</pubDate></item><item><title><![CDATA[2025-05-29 휴가가 하루 주어진다면, 최근 가장 슬픈 소식]]></title><description><![CDATA[
"휴가가 하루 주어진다면 무엇을 하고 싶은가? If you didn't have any responsibilities for the day, what would you do?" 그냥 아무 것도 하지 않고 하루 종일 책이나 읽었으면 좋겠다.
딱히 이유가 있는 것은 아니고, 그냥 푹 쉬고 싶다는 생각뿐이다. 최근에 가장 슬펐던 소식은 뭐야? 슬픈 소식을 따로 들은 것은 없다.
최근에는 거의 눈과 귀를 닫고 살아서 더 그렇다.
오늘은 뭔가 쓸 게 많이 없네!
오늘의 '생각을 자극'하는 글귀
"건설적인 피드백을 활용하라. 불편함은 성장의 신호이다.
많은 사람이 건설적인 피드백을 제대로 활용하지 못한는 이유는 감정적으로만 대응하고 행동을 바꾸지는 않기 땜누이다. 도움되는 제안을 자신에 대한 공격으로 느끼면 나쁜 습관을 뜯어고칠 수 없다. 배움을 얻는 가장 좋은 방법은 과도한 교정이다. 불편함은 성장의 신호이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-29-휴가가-하루-주어진다면,-최근-가장-슬픈-소식.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-29 휴가가 하루 주어진다면, 최근 가장 슬픈 소식.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 13:21:49 GMT</pubDate></item><item><title><![CDATA[CRM이 고객만족, 전환비용 및 고객충성도에 미치는 영향]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/crm이-고객만족,-전환비용-및-고객충성도에-미치는-영향.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/CRM이 고객만족, 전환비용 및 고객충성도에 미치는 영향.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 07:50:30 GMT</pubDate></item><item><title><![CDATA[미용실의_마케팅믹스_전략이_crm_성과에_미치는_영향__한성진]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/미용실의_마케팅믹스_전략이_crm_성과에_미치는_영향__한성진.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/미용실의_마케팅믹스_전략이_crm_성과에_미치는_영향__한성진.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 07:42:46 GMT</pubDate></item><item><title><![CDATA[KCI_FI003088420]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/최종-프로젝트/관련논문/kci_fi003088420.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/최종 프로젝트/관련논문/KCI_FI003088420.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 29 May 2025 07:37:16 GMT</pubDate></item><item><title><![CDATA[2025-05-28 산vs바다, 세상을 떠난 사람들 중 만나고 싶은 사람]]></title><description><![CDATA[
"산과 바다 중 어느 곳이 더 좋은가? Which do you prefer - the ountains or the seaside?" <a data-href="2025-03-02 나의 하루의 맛, 취향" href="https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-02-나의-하루의-맛,-취향.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2025-03-02 나의 하루의 맛, 취향</a>
이 노트에 산 vs 바다 어디가 좋은지 적은 기억이 난다.
다시 찾아보니 ‘둘다 좋다’라고 되어 있다.
내 평가는 여전하다. 산과 바다 둘다 좋다. 세상을 떠난 사람들 중에서 만나고 싶은 사람이 있어? 나의 어머니를 뵙고 싶다. 먼저 간 친구도 만나고 싶다.
그리고 타인이라면 내 노트에 단연 출연이 잦으신 노무현 전 대통님을 뵙고 싶다.<br>
<a data-href="2025-03-23 음악 취향, 어떤 사람이 멋있어" href="https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-23-음악-취향,-어떤-사람이-멋있어.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2025-03-23 음악 취향, 어떤 사람이 멋있어</a><br>
<a data-href="2025-04-15 인터뷰하고 싶은 사람, 가장 오랫동안 알고 지낸 친구" href="https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-15-인터뷰하고-싶은-사람,-가장-오랫동안-알고-지낸-친구.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2025-04-15 인터뷰하고 싶은 사람, 가장 오랫동안 알고 지낸 친구</a><br>
<a data-href="2025-04-19 저녁식사 하고픈 죽은 유명인, 성공이란" href="https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-19-저녁식사-하고픈-죽은-유명인,-성공이란.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2025-04-19 저녁식사 하고픈 죽은 유명인, 성공이란</a>
3번이나 등장하셨다.
그리고 오늘이 4번째다.
어떻게 진짜로 뵙게 된다면 출연료라도 드려야 할 지경이다.
만나고 싶은 이유는 여전히 동일한데 언제까지 이 마음이 똑같을까 궁금해 지긴 한다.
나중에 또 비슷한 질문이 등장하면 생각해 봐야지.
그런데 지금 문득 든 생각인데 비슷한 류의 질문이 재등장하면 예전에 썼던 노트가 떠오를 테고, 그러면 점점 내 안에서 처음의 생각이 고착화될 수도 있겠지 싶다.
아주 흥미롭다.
오늘의 '생각을 자극'하는 글귀
"번영은 허구 세계의 도피가 아닌 현실 세계의 창조에서 태어난다.
드라마 시리즈를 한꺼번에 몰아서 보면 무료한 삶에서 잠시 도망칠 수는 있겠지만, 근본적인 문제를 해결할 수는 없다. 이것은 허구 세계에 소극적으로 참여하는 것일 뿐, 의미나 전문성 같은 중요한 감각과는 상관이 없다다. 번영은 현실 세계ㅒ에서 적극적으로 창조하고, 연결되며, 기여할 때 만들어진다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-28-산vs바다,-세상을-떠난-사람들-중-만나고-싶은-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-28 산vs바다, 세상을 떠난 사람들 중 만나고 싶은 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 28 May 2025 12:01:53 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 18주차 회고]]></title><description><![CDATA[ 내가 또 술을 먹으면 사람이 아니다.
SW 부트캠프:
프로젝트가 마무리되고 시연도 마쳤다. 시연 후 15기 전원을 대상으로 한 투표 결과 여섯이내고양 팀과 공동 1등을 했다. 어쨌든 결과가 좋으니 만족. 선순환을 만들 수 있는 좋은 결과가 나와서 다행이다.
채팅에 감정 분석 API, OpenAI API 등을 연동해 볼 수 있어서 개인적으로는 재밌는 프로젝트였다. 우리가 일반적으로 생각하는 일반적인 채팅과 연관된 여러 가지 기능들, 상태 관리, 읽음 처리, 알람 설정 등을 시도해봤는데 이게 사용자의 입장으로 쓸 땐 몰랐는데 막상 직접 구현하려니 생각보다 훨씬 복잡하고 어렵게 다가왔다. 바로 이전 프로젝트에서 잘못된 데이터베이스 모델을 가지고 채팅 부가 기능을 구현하다가 여러 난항에 부딪혔던 경험을 살려서 데이터베이스 설계에 많이 집중했다. 경험이 부족하니 인터넷에서 얻은 기술 자료를 많이 참고했고 강사님께도 피드백을 받았다. 지금 뒤돌아 보면 그나마 여러가지 검증을 거쳐서 데이터베이스 모델링을 한 덕분에 그나마 기능을 완성이라도 했지 싶다. 데이터베이스 설계의 중요성을 한 번 더 뼈저리게 실감한다. 이번 프로젝트에는 Jira로 백로그, 이슈 관리를 했는데 다른 팀원들은 정해진 이슈를 모두 기한 내에 끝냈지만 난 끝내 마무리하지 못한 몇 가지 기능들이 있어서 너무 아쉽다. 특히 프로젝트 후반에 시간이 부족해서 카프카를 못 붙인 게 아쉽고 좀 더 체계적인 일정 관리가 필요하다는 생각이다. 못 다한 기능은 어쨌든 개인적으로라도 더 구현해 볼 생각이고, 이번 프로젝트의 내 실책을 다음 프로젝트에서 만회할 기회가 있었으면 좋겠다. 짧은 시간동안 진행된 프로젝트인데 주어진 역할에 최선을 다하는 팀원들에게 좋은 영향을 받게 된 시간이었다. 최종 프로젝트 전에 잠깐 합을 맞춰본 것치고는 정말 괜찮은 결과물이 나왔다고 생각하고, 그래서 더더욱 최종 프로젝트가 기대된다. 목표: 루틴 지키기 2차전.
결과: 2차전도 X같이 패배. 3차전 간다. 인디언식 기우제 간다. 눈을 씻고 찾아 봐도 아무 것도 없다. 루틴 못하고 술을 계속 마신 것.
종합소득세 신고 빨리 하자. 실패하는 건 괜찮다. 다시 될 때까지 하면 된다. 좋은 분위기와 좋은 환경 만들기가 너무 중요하다는 걸 깨닫는다.
내가 루틴을 망치는 이유가 바로 그 환경을 유지하지 못해서인 거 같다. 목표: 루틴 지키기 3차전.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-18주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 18주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 28 May 2025 09:36:07 GMT</pubDate></item><item><title><![CDATA[2025-05-26 오늘 나를 괴롭힌 일, 가장 크게 성장한 시기]]></title><description><![CDATA[
"오늘 나를 괴롭힌 일들을 적어보자 List the things that nagged you today." 숙취가 괴롭다. 또 술을 쳐먹었냐고 묻는 사람이 있다면 할 말은 없지만,
아무튼 숙취가 괴롭다.
정말 술을 멈추기 위한 나름의 투쟁을 하고 있긴 하지만,
매번 패배하는 꼬락서니라 또 무슨 대책을 세워야 할 지 모르겠다. 가장 크게 성장했던 시기를 알려 줘. 내가 가장 크게 성장한 건 단연 가장 괴로웠던 시기다. (술을 먹어서 괴로운 건 제외)
호주에서의 기억이 유독 내게 크게 뜻 깊은 이유는,
그 기억이 아름다워서 아니라, 내가 내 스스로를 많이 바꿀 수 있었던 까닭이고,
내가 나를 바꿀 수 있었던 이유는 단순히 그래야 살기 때문이었다.
내가 정신적으로 크게 성장한 두 시기 정도가 있었던 듯 하다.
하나는 신경성 질환으로 툭하면 병원에 실려 가던 때,
그 땐 정말 죽을 정도로 아픈 그 고통이 싫어서 심리학을 공부하면서 내 자신을 개조했고,
두 번째가 위에서 말한 호주에서의 경험인 거 같다.
먹고 살기 위해 어떻게든, 무엇이든 해야 했고 여유가 없으니 사고도 시도 때도 없이 터져서 늘 결핍된 마음을 가지고 하루 하루를 보냈다.
그 하루를 버티기 위해서 희망을 가지는 것 외에 할 수 있는 일이라곤 아무 것도 없었다.
행복해서 웃는 게 아니라, 웃으니까 행복해 진다는 말을 그때부터 믿기 시작했다.
요새는 웃음이 너무 헤퍼서 걱정이지만.
오늘의 '생각을 자극'하는 글귀
"존경을 받으려면 사대를 중요한 존재라고 느끼게 해줘야 한다.
자신의 지위를 증명하려 애쓸수록 불안해 보일 뿐이다. 스스로 중요한 사람인 것처럼 굴면 존경받기 ㅇ렵다. 우리는 사대르 ㄹ중요한 살마이라고 느끼게 해주는 사람을 존경한다. 우리는 자신의 가치를 인정해주고 목소리에 귀 기울여주는 사람을 존경하기 마련이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-26-오늘-나를-괴롭힌-일,-가장-크게-성장한-시기.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-26 오늘 나를 괴롭힌 일, 가장 크게 성장한 시기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 26 May 2025 14:13:51 GMT</pubDate></item><item><title><![CDATA[2025-05-25 내일 여행가고 싶은 곳, 1년 전과 달라진 모습]]></title><description><![CDATA[
"내일 어디든 여행할 수 있다면 가고 싶은 곳은? If you could travel anywhere tomorrow, where would you go?" 내일은 할 일이 있으니 여행 가기가 어렵다.
ㅋㅋ killjoy. 1년 전의 너와 지금의 너는 어떻게 달라? 하고 있는 일이 바뀐 것 외에는 딱히 달라진 게 없는 거 같다.
이거 정말 큰일이군.
그렇지만 항상 날이 서 있던 태도가 좀 유해졌고, (이건 회사의 영향이 컸다)
제법 농담도 지껄인다.
나쁘지 않아.
오늘의 '생각을 자극'하는 글귀
일요일에는 생각을 자극하는 글귀는 쉽니다!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-25-내일-여행가고-싶은-곳,-1년-전과-달라진-모습.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-25 내일 여행가고 싶은 곳, 1년 전과 달라진 모습.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 25 May 2025 14:19:30 GMT</pubDate></item><item><title><![CDATA[2025-05-24 나에게 동기부여한 일, 인맥 관리에 대해]]></title><description><![CDATA[
"오늘 나에게 동기를 부여해준 일은? What motvated you today?"" 오늘은 사업 미팅을 했고, 내가 원하는 구체적인 초안이 잡히지는 않은 상황이지만 약간의 밑그림은 그려볼 수 있어서 좋았던 거 같다. 일단 일을 벌려 놓고 생각하는 걸 좋아하는 성격이라 신중한 의사결정이 장기화되는 것은 썩 마뜩치 않은 일이기도 하지만, 사람이 여럿 포함된 일이라면 응당 이렇게 첫 술을 뜨는 게 어려운 법이기도 하다.
신중함과 결단 사이에서 잘 저울질을 하는 것은 어렵고, 저울의 무게를 재는 사람이 여럿이라면 당연히 더 어려운 것도 사실이라 가만히 고민하는 것은 썩 도움이 되지 않는 일이다.
일단 부딪혀 보자는 성미를 가진 것이 여즉 젊은 정신을 계승하는 듯하여 뿌듯한 동시에 나의 몸이 시시각각으로 늙는 것 또한 필연으로 느끼는 감각이라, 나는 젊으면서도 젊은 게 아닌 것이 되버리곤 한다.
그러므로 기다려야 할 때를 알고, 움직여야 할 때를 아는 지혜를 발휘하는 것이 당금의 과제로도 여겨지지만, 그런 천명을 알았더라면 내가 여태 고민만 하고 사는 못난이로 남았을 계제 없다.
사람은 자신에게 걸맞은 인생밖에 살지 못하는 법이니 나는 뚜렷하게 고민하는 인생만 살 재목이었던 터다. 인맥 관리'라는 말에 대해서 어떻게 생각해? 사람을 이용하려는 속성 같아서 영 좋지 않은 말로 생각한 때도 있지만, 사람이 그처럼 영악하거나 지혜롭다면 인맥을 이용하지 않을 이유 없다. 이처럼 막강하고, 이처럼 실용적인 능력이 또 있을까 싶다는 생각만 들 뿐인다.
쉰들러 리스트를 봤을 때 정말 강렬히 느낀 바지만, 실용이 도덕과 굳이 척을 질 이유는 없는 것이라, 목적과, 과정과, 결과가 모두 합치되어 옳은 것만을 옳은 것으로 보자면 정녕 세상에는 옳은 것이 가히 멸종했다고 여겨도 틀린 말이 아니다. 그러므로 모든 엄준한 기준에 양해를 구하여 희망에 더 근사한 말로 이 세상을 묘사한다고 했을 때, 사람이 뜻을 펼치기에 인맥만큼 중요한 것도 따로 없다고 말해도 이상할 사연 하나 없다. 그러나 굳이 그런 단어에 나의 취향을 투영하는 것도 영 마뜩찮고, 입을 다 무는 것 또한 비겁한 일이라, 무시로 여러 가지의 낱말을 다 괜찮다고 말하는 줏대 없는 의견에 지나지 않는 본인의 생각과, 그리고 비겁한 나의 성정을 다 따져 보았을 때, 결국 지지부진하게 이은 생각의 끝을 ‘인맥 관리라는 말에 대해 이렇다 저렇다 말할 만한 지식이 없다’는 핑계로 부연하는 것이다.
비겁한 사람은 항상 핑계를 찾게 마련이고, 나는 항상 그런 진리의 대변자였다.
오늘의 '생각을 자극'하는 글귀
지루함은 의외로 쓸모 있는 감정 상태다.
지루함은 의오로 쓸모 있는 감정 상태다. 지루함은 호기심을 갖고 새롭고 흥미롱누 질문들에 대해 곰곰이 생각해보라는 신호일 수도 있다. 생활이 바빠지면 지루할 틈도 없어지지만, 여기에는 부작용도 있다. 우연한 발견의 문이 닫혀버린다는 것."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-24-나에게-동기부여한-일,-인맥-관리에-대해.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-24 나에게 동기부여한 일, 인맥 관리에 대해.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 24 May 2025 15:06:24 GMT</pubDate></item><item><title><![CDATA[2025-05-23 현재 나의 헤어스타일, 일할 때 중요하게 생각하는 것]]></title><description><![CDATA[
"현재 나의 헤어스타일은? What's your haristyle?" 더벅머리, 머리 만지는 습관 때문에 항상 오후가 되면 머리가 떡지고 까치집이 된다.
어머니로부터 물려받은 습관이라 쉬이 고쳐지지도 않고,
생각을 많이 하거나 공부를 할 때 특히 머리를 많이 만져서 요즘 같은 시기엔 매일 산발한 모양새가 된다.
한참 머리를 안 자르고 있기 때문에 장발이 되어 가고 있는데,
지저분하다. 정말. 지저분해 죽겠네. 일할 때 중요하다고 생각하는 게 뭐야? 프로페셔널의 의미는 실제로 그 사람이 프로페셔널하다는 의미라기 보다는, 그러한 마음가짐을 가지고 있는지에 대한 물음인 경우가 많다.
현재 전혀 잘하고 있지 않아도, 잘하려고 노력하고 그게 자신의 책임이란 걸 기본적인 마인드셋으로 갖고 있는 사람은 누구나 프로페셔널하다고도 할 수 있겠다.
그러한 사람을 좋아한다.
난 영원히 그렇게 되지 못할 거란 생각도 동시에 한다.
결국 그런 사람을 존경하고 닮고 싶어하면서도 스스로는 될 수 없으니 막연하게 동경한다고 생각을 하곤 했는데,
내가 회사를 다닐 때를 한정해서 회상해 보면 나 또한 충분히 프로페셔널했다는 생각이 든다.
그런 사람들은 좋아했기 때문에, 조금씩 닮아갔나 보다.
오늘의 '생각을 자극'하는 글귀
"자신을 돌보기 위해서는 기대를 거부할 줄 알아야 한다.
우리는 다른 사람의 기대에 부응할 의무가 없다. 책임감은 자신이 만들어낸 약속이다. 이것을 지키기 위해 다른 사람들을 돌보는 것이다. 반면 기대는 타인이 가하는 압박이다. 그보다는 자신을 지키는 일에 더 충실해야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-23-현재-나의-헤어스타일,-일할-때-중요하게-생각하는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-23 현재 나의 헤어스타일, 일할 때 중요하게 생각하는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 23 May 2025 13:22:48 GMT</pubDate></item><item><title><![CDATA[2025-05-22 최근에 말다툼한 적이 있는지, 막막할 때 돌파구를 만드는 법]]></title><description><![CDATA[
"가장 최근에 말다툼을 한 적이 있는가? 무슨 일 때문이었나? Have you argued with someone recently? What was it about?" 말다툼이라고 하면 회사에서 하는 회의가 전부인데, 백수가 되니까 말다툼할 일도 없다.
좋은 일인지 나쁜 일인지는 모르겠지만. 막막할 때는 어떻게 돌파구를 만들어? 멀리서 본다.
남의 일이라고 생각하면 의외로 쉽게 답을 찾는 경우가 많다.
그러나 그게 답이 아닐 수도 있다.
그래도 믿고 전진하면, 답이 아닌 것도 때론 답이 되더라.
오늘의 '생각을 자극'하는 글귀
"성장의 열쇠는 생각을 기꺼이 바꾸는 것이다. 나와 의견이 같다고 해서 그들의 말에 무조건 귀 기울일 필요는 없다. 다른 사람의 생각에 감명을 받았을 대 귀 기울여야 한다. 지적 충성심은 강한 신념을 지지하는 것이지만, 지적 성실성은 논거를 통해 설득하는 것이다. 성장의 열쇠는 생각을 기꺼이 바꾸는 것이다." ]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-22-최근에-말다툼한-적이-있는지,-막막할-때-돌파구를-만드는-법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-22 최근에 말다툼한 적이 있는지, 막막할 때 돌파구를 만드는 법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 22 May 2025 12:51:17 GMT</pubDate></item><item><title><![CDATA[2025-05-21 내 연봉, 우선순위가 높았던 일]]></title><description><![CDATA[
"내 연봉은 얼마인가? What's your salary?" 백수이니 0원인 셈인가… 불쌍한 사람 지난 한 주 동안 가장 우선순위가 높았던 일은 뭐야? 개발 프로젝트 &amp; 책 읽기에 많은 시간을 쏟았다. 책을 읽은 뒤에 자료로 정리하는 데에도 꽤 공을 들였다. 사실 열심히 할 맘은 없었는데 같은 모임을 하는 친구들에게 공유할 자료로 만들자고 생각을 하니 아주 대충 할 수도 없었다. 김익한 교수님이 자주 얘기하시는 관계의 이타성에 잠깐 감화된 탓에 변덕스레 저지른 일이지만 꽤나 만족스럽다. 나중에도 다른 사람들과 함께 공유할 수 있는 자료를, 그리고 그것을 넘어서 지혜까지도 공유할 수 있는 날이 오면 좋겠다.
아무튼 오늘도 새벽부터 밤 늦게까지 참 열심히 살았다. 잘했어 하양몬.
오늘의 '생각을 자극'하는 글귀
"확신은 신뢰의 표시가 아니다. 목소리는 생각을 대신할 수 없다.
우리는 자신감 넘치는 사람들의 목소리에만 관심을 기울이고 신중한 목소리에는 관심을 기울이지 않는다. 확신은 신뢰의 표시가 아니다. 단호한 목소리가 깊은 생각을 대신할 수는 없다. 말만 번드르르 한 사람보다 깊이 생각하는 사람에게 더 많이 배울 수 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-21-내-연봉,-우선순위가-높았던-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-21 내 연봉, 우선순위가 높았던 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 21 May 2025 14:19:34 GMT</pubDate></item><item><title><![CDATA[2025-05-18 내일을 생각하면 어떤 기분이 들어]]></title><description><![CDATA[
"타임머신을 타고 과거로 돌아가 꼭 바꾸고 싶은 일이 있다면? If you could go backin time and change something what would it be?" '내일'을 생각하면 어떤 기분이 들어? 하루 루틴 중에 내일에 대한 희망찬 생각하기라는 걸 하고 있다. 김익한 교수님이 추천하신 루틴인데 아직 습관이 안 돼서 자주 까먹곤 한다.
마침 내일에 대한 이야기가 나왔으니 희망찬 생각을 해봐야 겠다.
이번 주말도 바쁘게 많은 일을 처리했으니 월요일은 조금 한가롭게 시작해 볼까.
아버지가 광명에 오셨다는데 전화도 하고.
잠깐 일은 뒤로 하고 재정 상태 점검도 해야겠다.
오늘은 백만장자 시크릿을 완독했는데 정말 동의하는 생각들이 많았지만 일단 작은 것부터 관리하라는 딱 한 가지만 우선적으로 실천할 생각이다.
그렇게 하나 하나 시크릿을 체득하다 보면 금방 부자가 될 수 있어!
백만장자도 한 걸음부터
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-18-내일을-생각하면-어떤-기분이-들어.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-18 내일을 생각하면 어떤 기분이 들어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 21 May 2025 00:31:14 GMT</pubDate></item><item><title><![CDATA[백만장자 시크릿]]></title><description><![CDATA[개인의 목표가 불명확하면 행동의 결과 또한 무질서해질 수 있으며, 많은 사람들이 그러한 상태에 놓여있다.
리셋 과정을 통해 자신의 꿈을 명확히 하고, 내재적인 역동에 따라 주관적인 삶을 살아가는 것이 필수적이다. 우리는 우리가 자라면서 보고, 듣고, 강요 당한 것에 무의식적으로 영향을 받고 있을 수 있다. 마인드뷰 점검 → 마인드뷰 리셋 → 마인드뷰 리빌딩
에디톨로지 → 배운 것을 자신의 맥락에 맞게 편집하기
주저없이 생각하고, 쓰고, 선언하고 실천하고, 체득 → 명시화된 성장 과정. 지향 설계 : 자기 그릇의 크기 설정은 자신만이 할 수 있음
돈을 받는 것을 어려워 하지 않고 자신이 부와 명예를 얻을 자격이 있다고 믿기 사회적 기여를 포함한 큰 생각을 가지기
나다운 꿈 찾기 실행 원칙 설계 : 자기 결정권의 범위 극대화 → 자신이 주도하는 인생 살기
성과에 집중하고 기회에 예민하게 반응하기 : 가난한 사람은 장애물에 집중하고, 부자들은 기회에 집중. 성장 능력 설계 : 모든 성장은 불편한 일을 기꺼이 함으로써 얻어짐
두려움을 익숙함으로 변화 시키기
작은 것부터 관리하기 → 작은 돈부터 관리하기 : 작은 돈을 관리하지 못하는 사람은 큰 돈을 관리 할 수 없음 관계 능력 설계 : 긍정적인 사람이 되고, 긍정적인 사람들은 곁에 두기
계획, 함께, 습관의 힘 : 다른 사람들과 함께 성장 목표를 공유하고 함께 성장하기 개인의 삶에서 의미 있는 성공, 특히 재정적 풍요를 달성하는 과정은 단순히 외부적 행동이나 전략에만 의존하지 않는다. 오히려 개인의 내면에 깊이 자리 잡은 심리적 구조, 즉 마인드셋과 그 마인드셋을 바탕으로 성장을 위한 계획을 수립하고 실행하는 능력에 의해 크게 좌우된다. 본 보고서는 이러한 관점에서 '마인드 리셋(Mind Reset)'과 '실행 설계(성장 설계, Execution/Growth Design)'라는 두 가지 핵심 요소가 개인의 성공과 부의 창출에 미치는 심리적 영향을 탐구하고자 한다.'마인드 리셋'은 개인이 가진 한계적 신념과 부정적 사고 패턴을 근본적으로 변화시키는 과정을 의미한다. 이는 마치 컴퓨터의 운영체제를 업그레이드하여 성능을 최적화하는 것과 유사하다. 반면, '실행 설계'는 명확한 목표를 설정하고, 그 목표를 달성하기 위한 구체적인 행동 계획을 체계적으로 수립하며 이를 꾸준히 실천해 나가는 의식적인 노력을 포함한다. 이 두 요소는 분리된 개념이 아니라, 성공적인 삶을 구축하는 데 있어 상호 보완적이며 시너지를 창출하는 관계를 맺는다. T. 하브 에커(T. Harv Eker)는 그의 저서 "백만장자 시크릿(Secrets of the Millionaire Mind)"에서 "열매를 바꾸고 싶다면, 먼저 뿌리를 바꿔야 한다. 보이는 것을 바꾸고 싶다면, 먼저 보이지 않는 것을 바꿔야 한다"고 강조하며, 내면의 변화가 외적 성공의 근본임을 역설한다.1 이는 심리학 및 행동과학 분야의 여러 학문적 연구 결과와도 일맥상통하는 주장이다.인간의 행동과 그 결과는 복잡한 심리적 기제에 의해 추동된다. 목표 설정과 추구 과정은 인지적 과정('방법')과 동기 부여('의지') 모두를 필요로 한다.2 아무리 정교한 실행 계획이라도 부정적인 마인드셋에 의해 그 효과가 반감되거나 무력화될 수 있으며, 반대로 긍정적인 마인드셋만으로는 구체적인 실행 계획 없이는 실질적인 성과를 이끌어내기 어렵다. 따라서 본 보고서는 마인드 리셋과 실행 설계를 단선적인 단계가 아닌, 동시적이고 상호 강화적인 과정으로 접근하여, 이 두 가지가 어떻게 통합적으로 작용하여 개인의 성장과 성공을 촉진하는지에 대한 심층적인 분석과 학술적 근거를 제시하고자 한다. 에커가 제시하는 실용적 지혜와 더불어, 검증된 심리학 이론들을 통합적으로 고찰함으로써 독자들에게 성공적인 삶을 위한 실질적이고 심도 있는 통찰을 제공하는 것을 목표로 한다.마인드 리셋은 개인의 잠재력을 최대한 발휘하고 원하는 삶을 창조하는 데 있어 가장 근본적인 단계이다. 이는 단순히 긍정적으로 생각하려는 노력을 넘어, 자신의 생각과 감정, 그리고 이것이 행동과 결과로 이어지는 심리적 메커니즘을 이해하고, 부정적인 내부 프로그래밍을 의식적으로 재설계하는 과정을 포함한다.T. 하브 에커는 생각, 감정, 행동, 결과 사이의 강력한 연쇄 작용을 강조한다. 그의 모델에 따르면, 우리의 생각은 특정한 감정을 불러일으키고, 이러한 감정은 우리의 행동을 유발하며, 결국 그 행동이 특정한 결과를 만들어낸다.1 이 모델은 개인의 삶에서 나타나는 모든 결과가 우연의 산물이 아니라, 내면의 생각에서부터 비롯된 일련의 과정임을 시사한다.이러한 관점은 현대 심리학, 특히 인지행동치료(Cognitive Behavioral Therapy, CBT)의 핵심 원리와 깊은 관련이 있다. CBT는 개인의 생각, 감정, 행동이 서로 밀접하게 연결되어 있으며, 역기능적이거나 비합리적인 사고 패턴을 변화시킴으로써 감정과 행동의 변화를 이끌어낼 수 있다고 본다.3 CBT에서 중요하게 다루는 자동적 사고(automatic thoughts), 인지 왜곡(cognitive distortions), 그리고 더 깊은 수준의 핵심 신념(underlying beliefs or schemas)은 에커가 언급한 '보이지 않는 뿌리'에 해당하며, 이것이 개인의 감정과 행동, 나아가 삶의 결과를 결정짓는 데 핵심적인 역할을 한다.3 예를 들어, "나는 충분히 똑똑하지 않아"라는 자동적 사고는 실패에 대한 두려움(감정)을 유발하고, 새로운 도전을 회피하는 행동으로 이어져 결국 잠재력 발휘 실패(결과)라는 악순환을 만들 수 있다.에커의 '생각-감정-행동-결과' 모델은 단순한 선형적 진행을 넘어 순환적 특성을 지닌다는 점을 이해하는 것이 중요하다. 즉, 결과는 다시 생각에 영향을 미쳐 강화 (긍정적 또는 부정적) 루프를 형성한다. 예를 들어, 사업 실패라는 부정적 결과는 "나는 사업에 소질이 없어"라는 부정적 생각을 강화하고, 이는 낙담이라는 감정으로 이어져 향후 새로운 사업 기회를 피하는 행동을 유발할 수 있다. 이러한 순환적 고리를 끊거나 긍정적인 방향으로 전환하기 위해서는 생각의 수준에서 개입하는 '마인드 리셋'이 필수적이다. 이는 일회성 변화가 아니라 지속적인 자기 인식과 인지적 재구성을 통해 이러한 인지-정서-행동의 순환 고리를 의식적으로 관리하고 긍정적인 방향으로 이끌어가는 과정임을 의미한다.에커는 개인이 가진 돈에 대한 무의식적인 신념과 태도의 집합을 '돈의 청사진(money blueprint)' 또는 '경제적 온도조절장치(financial thermostat)'라고 명명하며, 이것이 각자의 재정적 성공 수준을 결정한다고 주장한다.5 이 청사진은 주로 어린 시절의 경험, 특히 부모의 돈에 대한 태도나 행동을 관찰하고 학습함으로써 형성되며, 성인이 된 후에도 무의식적으로 개인의 재정 관련 의사결정과 행동에 강력한 영향을 미친다.5 마치 컴퓨터 프로그램처럼, 어린 시절 설치된 이 '경제적 프로그램'은 개인이 자연스럽게 끌어당기고 유지하는 부의 수준을 설정하는 것이다.이러한 주장은 정신역동 이론(psychodynamic theories), 특히 프로이트(Sigmund Freud)가 강조한 초기 아동기 경험의 중요성과 맥을 같이 한다. 프로이트는 어린 시절의 경험이 무의식적 과정을 통해 성인기의 성격과 행동을 형성하는 데 결정적인 역할을 한다고 보았다.9 특히 부모와 같이 중요한 타인에 대해 초기에 형성된 정신적 표상(mental representations)은 이후 대인관계뿐만 아니라 삶의 여러 영역에서의 기대와 행동 패턴에 대한 청사진으로 작용할 수 있다.9더 나아가, 사회적 영향 이론(Social Influence Theory, SIT)은 이러한 청사진이 어떻게 사회적 맥락 속에서 형성되고 내면화되는지를 설명해준다.11 켈만(Kelman)이 제시한 사회적 영향의 세 가지 과정 – 순응(compliance), 동일시(identification), 내면화(internalization) – 은 부모나 사회로부터 전달되는 돈에 대한 가치관이나 메시지가 어떻게 개인의 신념 체계로 깊숙이 자리 잡게 되는지를 보여준다.11 예를 들어, "돈은 모든 악의 근원이다" 또는 "돈 버는 것은 매우 어렵다"와 같은 말을 어린 시절 반복적으로 들었다면, 이러한 메시지는 내면화되어 돈에 대한 부정적인 청사진을 형성할 수 있다.5'돈의 청사진'은 단순히 돈에 국한된 것이 아니라, 자아 존중감, 안정감, 성공에 대한 전반적인 믿음 등과 같은 더 광범위한 '삶의 청사진'의 일부로 이해될 수 있다. 재정적 태도는 종종 자신과 세상에 대한 더 깊은 신념들과 얽혀 있기 때문이다. 예를 들어, 어린 시절의 경험으로 인해 "나는 좋은 것을 받을 자격이 없어"라는 핵심 신념이 형성되었다면, 이는 재정적 풍요를 누릴 자격에 대한 믿음에도 부정적인 영향을 미칠 가능성이 높다. 따라서 돈의 청사진을 효과적으로 '리셋'하기 위해서는 이러한 광범위하고 근원적인 스키마(schema)를 함께 다루어야 할 필요가 있다. 초기 부정적 경험이나 비지지적인 사회적 영향은 제한적인 신념(결함 있는 청사진)의 내면화로 이어질 수 있으며, 이는 무의식적으로 자기 파괴적인 재정적 행동을 유발하여 결국 부를 쌓지 못하는 악순환을 영속화시킨다. 그러므로 자신의 돈의 청사진이 어떻게 형성되었는지 그 기원을 이해하는 것은 피상적이거나 일시적인 변화가 아닌, 효과적이고 지속적인 변화를 위한 핵심적인 첫걸음이다.에커는 저서에서 부자와 가난한 사람(혹은 중산층)이 근본적으로 다르게 생각하고 행동하는 17가지 방식, 이른바 '부의 파일(Wealth Files)'을 제시한다.1 이러한 사고방식의 차이는 단순히 돈에 대한 태도를 넘어 삶을 대하는 근본적인 관점의 차이를 반영하며, 이는 결국 재정적 결과의 차이로 이어진다고 주장한다. 주요한 몇 가지 차이점과 그 심리학적 근거는 다음과 같다.
"나는 내 삶의 주관자이다" vs. "삶은 나에게 일어나는 것이다": 부자는 자신의 삶, 특히 재정적 삶을 스스로 통제하고 만들어간다고 믿는다.1 이는 심리학에서 말하는 내적 통제위(internal locus of control)와 일치하는 태도로, 자신의 행동과 노력으로 결과를 바꿀 수 있다고 믿는 경향이다.13 연구에 따르면 내적 통제위가 높은 사람들은 더 나은 재정 계획을 세우고 인적 자본 투자에 적극적인 경향을 보인다.13 반면, 가난한 사람들은 외부 환경이나 타인에게 책임을 돌리며 자신을 희생자로 여기는 경향(외적 통제위)이 있다.
기회에 집중한다 vs. 장애물에 집중한다: 부자는 잠재적 성장에 초점을 맞추고 기회를 발견하려 노력하는 반면, 가난한 사람들은 잠재적 손실이나 위험, 문제점에 더 주목한다.1 이는 캐롤 드웩(Carol Dweck)의 성장 마인드셋(growth mindset)과 고정 마인드셋(fixed mindset) 이론과 연결된다.15 성장 마인드셋을 가진 사람은 능력이 노력과 학습을 통해 발전할 수 있다고 믿으며, 실패를 배움의 기회로 삼고 도전을 통해 성장하려 한다. 이는 기회에 집중하고 문제를 극복하려는 부자의 태도와 유사하다. 반면 고정 마인드셋은 능력이 타고나는 것이라 믿어 실패를 자신의 한계로 받아들이고 도전을 회피하는 경향을 보인다.
자신의 가치를 알리고 홍보한다 vs. 판매와 홍보를 부정적으로 생각한다: 부자는 자신의 가치와 사업을 적극적으로 알리는 데 주저함이 없지만, 가난한 사람은 판매나 자기 홍보에 대해 부정적인 인식을 갖는 경우가 많다.1 이는 자신감, 자기 효능감과도 관련이 있다.
성공한 사람들을 존경하고 본받으려 한다 vs. 성공한 사람들을 시기하고 분개한다: 부자는 다른 성공한 사람들을 보며 영감을 얻고 그들의 성공 전략을 배우려 하지만, 가난한 사람들은 종종 성공한 이들을 비난하거나 질투한다.1
자신이 문제보다 크다고 생각한다 vs. 문제가 자신보다 크다고 생각한다: 부자는 어떠한 문제도 자신이 해결할 수 있다고 믿으며 문제에 압도당하지 않지만, 가난한 사람들은 문제 앞에서 좌절하고 회피하려는 경향을 보인다.1 이는 두려움에 기반한 선택으로 이어지기 쉽다.
이러한 '부의 파일'들은 개별적인 신념이라기보다는 서로 연결된 하나의 거대한 '메타-마인드셋' 또는 세계관의 구성 요소로 볼 수 있다. 예를 들어, "나는 내 삶의 주관자이다"(내적 통제위)라는 믿음은 자연스럽게 기회에 집중하는 태도(성장 마인드셋)로 이어지는데, 이는 스스로 상황을 변화시킬 수 있다는 힘을 느끼기 때문이다. 내적 통제위는 노력의 가치를 인정하게 만들어 성장 마인드셋을 채택할 가능성을 높이며, 이 두 가지가 결합되면 기회에 집중하는 것은 논리적인 귀결이 된다. 이처럼 핵심 신념 하나(예: 내적 통제위로의 전환)를 바꾸는 작업은 다른 '부의 파일'들에도 긍정적인 연쇄 효과를 가져올 수 있다. 개인의 주체성(내적 통제위)과 능력의 가변성(성장 마인드셋)에 대한 근본적인 믿음은 에커가 설명하는 다른 부를 창출하는 행동들, 즉 기회 집중, 성공한 사람 존경(학습의 원천으로서), 자기 홍보(제공할 가치가 있고 발전할 수 있다는 믿음) 등을 가능하게 하는 선행 조건이자 동력으로 작용할 가능성이 높다. 따라서 '백만장자 마인드'를 함양하기 위한 개입은 이러한 근본적인 심리적 구성 요소(통제위, 성장 마인드셋)를 우선적으로 배양하는 데 초점을 맞출 때 더 광범위한 마인드셋 변화를 이끌어낼 수 있을 것이다.다음 표는 에커가 제시한 백만장자와 일반인의 핵심적인 사고방식 차이를 요약하고, 이를 관련 심리학적 개념과 연결한 것이다.표 1: 백만장자와 일반인의 사고방식 비교이 표는 마인드 리셋의 '왜'에 대한 강력한 요약을 제공하며, 인지적 수준에서 '무엇'을 변화시켜야 하는지를 명확히 보여준다.마인드 리셋은 단순히 긍정적인 생각을 하는 것을 넘어, 내면 깊숙이 자리 잡은 신념 체계를 변화시키고 새로운 사고방식을 구축하는 체계적인 과정이다. 이를 위해 다양한 심리학적 전략과 기법을 활용할 수 있다.에커는 '선언(declarations)'의 힘을 강조한다. 이는 강력하고 긍정적인 문장을 감정을 담아 소리 내어 말함으로써 잠재의식을 재프로그래밍하는 방법이다.6 이러한 선언은 기존의 한계적 신념을 약화시키고, 자신에게 힘을 실어주는 새로운 믿음을 내면화하도록 돕는다. 예를 들어, "나는 돈을 끌어당기는 자석이다" 또는 "나는 재정적 성공을 누릴 자격이 있다"와 같은 선언을 반복함으로써 돈에 대한 긍정적인 태도와 믿음을 강화할 수 있다.이러한 접근은 자기 확언 이론(Self-Affirmation Theory)과 연결될 수 있다. 자기 확언 이론에 따르면, 자신의 핵심 가치나 강점을 되새기는 것은 자아 존중감을 회복시키고, 특히 자신의 능력이나 가치에 대한 위협에 직면했을 때 방어적인 태도를 줄이며, 위협적인 정보에 대해 보다 개방적인 태도를 갖도록 돕는다.20 즉, 긍정적인 자기 확언은 개인이 변화에 필요한 심리적 자원을 확보하고, 새로운 행동을 받아들일 가능성을 높인다.선언이나 확언의 효과는 그것이 개인의 핵심 가치와 얼마나 일치하는지, 그리고 얼마나 진정으로 내면의 (종종 무의식적인) 한계적 믿음을 건드리는지에 따라 달라질 가능성이 높다. 에커가 선언을 감정을 담아 말하라고 강조하는 것은 7 깊은 공명이 필요함을 시사한다. 자기 확언 이론 역시 핵심 가치나 중요한 개인적 강점을 되새기는 것을 강조한다.20 만약 선언이 피상적이거나 깊이 느껴지지 않거나, 혹은 특정한 근원적인 부정적 스키마에 대응하지 못한다면, 그 효과는 미미하거나 심지어 인지 부조화를 일으킬 수도 있다. 따라서 선언을 활용하기 전, '재프로그래밍'이 필요한 구체적인 한계적 믿음을 식별하고, 자신의 진정한 자아 및 가치와 진정으로 공명하는 확언을 만드는 자기 성찰 과정이 중요하다. 자기 확언(가치 성찰)은 자아 역량감과 개방적인 마음 상태를 만들어 20, 개인이 선언의 긍정적인 메시지를 내면화하는 데 더 수용적이 되도록 할 수 있다. 이것이 결국 '돈의 청사진'을 바꾸기 시작하는 계기가 될 수 있다. 선언의 '내용'만큼이나 '어떻게' 활용하는지가 중요하며, 감정적 확신이나 개인적 가치와의 연결 없이 기계적으로 반복하는 것은 제한된 결과만을 가져올 수 있다. 이 과정은 더 깊은 자기 인식 기법과 통합될 때 이상적이다.마인드 리셋의 핵심은 부정적이거나 비효율적인 사고 패턴과 신념 체계를 변화시키는 것이다. 이를 위한 대표적인 심리치료적 접근법은 다음과 같다.
인지행동치료 (Cognitive Behavioral Therapy, CBT): CBT는 자동적 사고, 인지 왜곡, 핵심 신념이 감정과 행동에 미치는 영향을 탐구하고 이를 수정하는 데 초점을 맞춘다.3 인지 재구성(cognitive restructuring)은 CBT의 핵심 기법으로, 개인이 부정적인 자동적 사고를 식별하고(예: "나는 항상 실패할 거야"), 그 생각의 근거를 비판적으로 검토하며(예: 과잉 일반화, 파국화 등의 인지 왜곡 식별 3), 보다 균형 잡히고 현실적인 대안적 생각으로 대체하도록 돕는다.22 예를 들어, 재정적 어려움에 직면했을 때 "나는 절대로 부자가 될 수 없어"라는 생각 대신 "지금은 어렵지만, 계획을 세우고 노력하면 상황을 개선할 수 있어"와 같이 생각을 재구성하는 것이다.
스키마 치료 (Schema Therapy): 스키마 치료는 CBT보다 더 깊은 수준의 변화를 목표로 하며, 특히 어린 시절 충족되지 않은 핵심 정서적 욕구에서 비롯된 초기 부적응 스키마(early maladaptive schemas)를 다룬다.24 이러한 스키마는 "실패", "결함", "버림받음" 등과 같이 자신과 세상에 대한 뿌리 깊은 부정적 패턴으로, 에커가 말한 '돈의 청사진'과 직접적으로 연결된다. 스키마 치료는 인지적 기법(스키마의 타당성 검토), 정서적 기법(예: 심상 작업, 역할극을 통해 과거의 상처를 재경험하고 치유), 행동적 기법(부적응적 대처 방식 수정), 그리고 치료자와의 관계를 통한 제한적 재양육(limited reparenting) 등 통합적인 접근을 통해 이러한 핵심 스키마를 변화시키려 한다.24
메타인지 치료 (Metacognitive Therapy, MCT): MCT는 생각의 '내용'보다는 생각에 '대한 생각'(메타인지)과 생각하는 '방식'에 초점을 맞춘다.26 에이드리언 웰스(Adrian Wells)에 의해 개발된 이 치료법은 걱정, 반추, 위협 모니터링과 같은 지속적이고 비생산적인 사고 스타일, 즉 인지적 주의 증후군(Cognitive Attentional Syndrome, CAS)이 심리적 고통을 유지시킨다고 본다.28 MCT는 "걱정은 통제 불가능하다" 또는 "걱정하는 것이 문제 해결에 도움이 된다"와 같은 메타인지적 신념을 수정하고, 주의 통제 훈련이나 탈중심화된 마음챙김(detached mindfulness)과 같은 기법을 통해 생각과의 관계를 변화시켜 CAS에서 벗어나도록 돕는다.28
이 세 가지 접근법은 마인드 리셋에 대한 계층적 접근을 제공한다. CBT는 표면적인 자동적 사고와 왜곡을 다루고, 스키마 치료는 어린 시절에 뿌리를 둔 더 깊은 부적응 스키마('청사진')를 목표로 하며, MCT는 사고 과정 자체(예: 재정 문제에 대한 걱정이나 반추에 어떻게 관여하는지)를 다룬다. 포괄적인 마인드 리셋은 이 세 가지 요소 모두에서 이점을 얻을 수 있다. 예를 들어, 어떤 사람은 "나는 결코 부자가 될 수 없을 거야"라는 생각을 바꾸기 위해 CBT를 사용하고, 어린 시절부터 형성된 "실패" 또는 "결함"이라는 근원적인 스키마를 이해하기 위해 스키마 치료를 받으며, 과거의 재정적 실수에 대한 반추나 미래 투자에 대한 과도한 걱정을 멈추기 위해 MCT를 활용할 수 있다. 충족되지 않은 어린 시절의 욕구(스키마 치료 초점)는 부적응 스키마를 만들 수 있고, 이는 부정적인 자동적 사고(CBT 초점)를 생성하며, 비생산적인 메타인지적 신념과 주의 패턴(MCT 초점)에 의해 지속될 수 있다. 재정적 성공을 위한 효과적인 '마인드 리셋'은 단순한 긍정적 사고 이상의 것을 요구할 수 있으며, 복잡한 인지적, 정서적 패턴의 층위를 식별하고 수정하기 위한 구조화된 치료적 접근이 필요할 수 있다. 접근 방식의 선택은 개인의 제한적 신념의 깊이와 본질에 따라 맞춤화될 수 있다.C. 가치 명확화를 통한 진정한 삶의 목표 설정마인드 리셋 과정에서 중요한 또 다른 축은 자신의 핵심 가치를 명확히 하는 것이다. 심리학 연구에 따르면, 자신의 가치에 부합하는 삶을 사는 것은 심리적 안녕감과 삶의 만족도를 높이는 데 결정적인 역할을 한다.31 가치는 개인이 삶에서 중요하게 여기는 근본적인 신념이자 삶의 방향을 안내하는 나침반과 같다. 진정한 삶(authentic living), 즉 내면의 신념 및 가치와 외부 행동 간의 일치는 스트레스 감소, 정서 조절 능력 향상, 역경에 대한 회복탄력성 증가로 이어진다.31수용전념치료(Acceptance and Commitment Therapy, ACT)에서는 많은 심리적 문제가 개인의 가치와 행동 사이의 불일치에서 비롯된다고 본다.31 따라서 자신이 추구하는 목표, 특히 에커가 강조하는 부와 성공과 같은 목표가 자신의 핵심 가치와 일치할 때, 개인은 더 큰 목적의식과 내적 동기를 경험하게 된다. 가치와 일치하지 않는 목표를 추구하는 것은 설령 그 목표를 달성한다 하더라도 공허함이나 심리적 고통을 야기할 수 있다.핵심 가치를 식별하기 위한 실질적인 방법으로는 다음과 같은 것들이 있다 31:
과거에 기쁨, 성취감, 만족감을 느꼈던 순간들을 되돌아보기 존경하는 인물과 그들이 구현하는 자질 중 자신에게 공감을 불러일으키는 것 탐색하기 자신의 열정, 관심사, 몰입하는 분야 탐색하기 가치 카드 분류나 성찰 질문지와 같은 자기 평가 도구 활용하기 에커가 주장하는 '크게 생각하기'는 중요하지만, 그것이 '진정성 있게 생각하기'와 조화를 이룰 때 더욱 강력한 힘을 발휘한다. 가치 명확화는 개인이 설정하는 목표, 특히 재정적 목표가 단순히 외부에서 주입된 성공의 이상이 아니라 자신의 진정한 가치를 반영하도록 보장한다. 핵심 가치에 대한 명확성 부족은 비본질적인 목표 설정으로 이어질 수 있다. 비본질적인 목표를 추구하는 것은, 설령 달성된다 하더라도 개인의 진정한 자아와 공명하지 않기 때문에 심리적 고통 31이나 성취감 부족을 초래할 수 있다. 반대로, 가치와 일치하는 목표는 내재적 동기와 회복탄력성을 키운다. 야심찬 '성장 설계'에 착수하기 전에, 개인은 가치 명확화 과정을 거쳐야 한다. 이는 '리셋'된 마음이 달성 가능할 뿐만 아니라 깊이 의미 있는 추구를 향하도록 보장하며, 이는 보다 지속 가능한 동기 부여와 전인적 성공으로 이어진다. 이는 에커의 원칙에 깊이를 더하는 층위이다.마인드 리셋을 통해 내면의 준비를 마쳤다면, 다음 단계는 성공을 향한 구체적인 로드맵, 즉 '실행 설계(성장 설계)'를 구축하는 것이다. 이는 단순히 계획을 세우는 것을 넘어, 심리학적 원리를 활용하여 목표 달성 가능성을 극대화하는 전략적 접근을 의미한다.목표 설정은 성공적인 실행 설계의 가장 기본적인 출발점이다. 로크(Locke)와 레이섬(Latham)의 목표 설정 이론(Goal-Setting Theory)에 따르면, 모호하거나 쉬운 목표보다 구체적이고 도전적인 목표가 더 높은 성과를 이끌어낸다.35 명확한 목표는 개인의 주의를 집중시키고, 노력을 동원하며, 지속성을 높이고, 목표 달성을 위한 전략 개발을 촉진한다.36반대로, 목표의 모호성은 부정적인 결과를 초래할 수 있다. 목표가 불분명하면 개인은 정보가 부족한 선택지를 회피하는 모호성 효과(ambiguity effect)로 인해 차선의 결정을 내리거나 37, 실패하고 있는 기존의 방식에 안주하게 될 수 있다.37 모호성에 대한 낮은 관용도(ambiguity tolerance)를 가진 사람은 불확실한 상황에서 의사결정을 지연시키거나 부정확한 선택을 할 가능성이 높다.38 또한, (불명확한 목표 등으로 인해) 목표를 향한 진전이 없을 경우 우울이나 불안과 같은 부정적 정서 상태를 경험하고, 실패에 대해 반복적으로 생각하는 반추(rumination)에 빠질 수 있다.39목표의 효과를 높이는 또 다른 중요한 요소는 목표를 기록하는 것이다. 게일 매튜스(Gail Matthews) 박사의 연구에 따르면, 목표를 글로 적어두는 사람은 그렇지 않은 사람보다 목표 달성률이 33-42% 더 높은 것으로 나타났다.40 이는 목표를 기록하는 행위가 목표의 명확성을 높이고, 몰입도를 강화하며, 동기를 부여하고, 진행 상황을 추적하기 쉽게 만들기 때문이다.40마지막으로, 목표와 실제 행동 사이의 간극을 메우는 강력한 전략은 실행 의도(implementation intentions), 즉 '만약-이라면(if-then)' 계획을 세우는 것이다.41 실행 의도는 "만약 Y라는 상황이 발생하면, 나는 X라는 목표 지향적 행동을 할 것이다"와 같이 특정 상황적 단서와 원하는 행동을 구체적으로 연결한다. 이는 행동 개시를 자동화하여, 특히 어렵거나 하기 싫은 과제에 대한 실행력을 높인다.42 실행 의도를 형성하면 특정 상황적 단서에 대한 인지적 접근성이 높아지고, 의식적인 노력 없이도 계획된 행동이 촉발될 수 있다.41에커가 주창하는 '크게 생각하라'는 야심찬 목표는 종종 모호하거나 압도적으로 느껴질 수 있다. 인간은 본능적으로 불확실한 선택을 피하려는 모호성 효과를 보이며 37, 모호성에 대한 낮은 관용도는 무력감으로 이어질 수 있다.38 이러한 심리적 경향에 대응하기 위해, 목표 설정 이론(구체성, 도전성) 36, 목표 기록(명확성, 몰입도 증진) 40, 실행 의도(행동 자동화) 41와 같은 원칙들은 매우 중요한 심리적 도구가 된다. 이러한 전략들은 단순히 '계획'을 세우는 것을 넘어, 야심찬 목표 추구에 내재된 인지적 편향과 동기 부여의 장애물을 관리하는 심리학적 개입인 것이다. 명확하고, 도전적이며, 기록되고, 실행 의도가 부여된 목표는 인지된 통제감과 자기 효능감을 높이고(다음 절에서 논의), 모호성 회피를 줄이며, 행동을 자동화함으로써 성공적인 실행 가능성을 높이고 목표 실패로 인한 부정적 감정을 감소시킨다.39 따라서 '실행 설계'는 이러한 심리학적 목표 설정 원칙들을 통합해야 진정으로 효과적일 수 있다. 에커가 영감을 주듯 큰 목표를 갖는 것만으로는 충분하지 않으며, 그 목표의 추구를 심리학적으로 정보에 입각한 방식으로 설계해야 한다.목표를 설정했더라도, 그 목표를 향해 나아갈 수 있다는 자신감, 즉 자기 효능감(self-efficacy)이 없다면 실행은 어려워진다. 자기 효능감은 특정 상황에서 원하는 결과를 얻기 위해 필요한 행동을 성공적으로 수행할 수 있다는 개인의 믿음을 의미한다 (반두라, Bandura).8자기 효능감과 목표 설정 사이에는 상호적인 관계가 존재한다. 높은 자기 효능감을 가진 사람은 더 도전적인 목표를 선택하고, 목표 달성을 위해 더 많은 노력을 기울이며, 어려움에 직면했을 때 더 오래 지속하는 경향이 있다.8 그리고 목표를 성공적으로 달성하는 경험은 다시 자기 효능감을 강화시켜 긍정적인 선순환을 만들어낸다. 높은 자기 효능감은 또한 회복탄력성을 높이고 숙달 지향적인 전략을 사용하게 한다.8 에커가 말한 "부자들은 돈 게임에서 이기기 위해 참여한다" 1는 원칙은 이러한 높은 자기 효능감과 주도적인 태도를 반영한다.이와 더불어, 캐롤 드웩(Carol Dweck)이 제시한 성장 마인드셋(growth mindset)은 실행 설계의 또 다른 중요한 심리적 기반이다. 성장 마인드셋은 개인의 능력이나 지능이 고정된 것이 아니라 노력, 헌신, 학습을 통해 발전할 수 있다고 믿는 태도이다.1 이러한 마인드셋은 인내심을 키우고, 실패를 성장의 기회로 여기며, 도전을 적극적으로 수용하도록 이끈다. 이는 성장 계획을 실행하는 데 있어 필수적인 요소들이다. 에커가 언급한 부자들이 "기회에 집중한다"는 점 역시 성장 지향적 접근과 일치한다.1자기 효능감은 목표 추구라는 '엔진'을 움직이는 핵심적인 심리적 '연료'와 같다. 충분한 자기 효능감이 없다면, 잘 정의된 목표(IV.A에서 논의된)조차도, 특히 장애물에 직면했을 때, 활기차거나 끈기 있게 추구되지 않을 수 있다. 성장 마인드셋은 자기 효능감이 번창할 수 있는 '환경'을 제공한다. 목표 설정 이론은 목표가 '달성 가능'하고 '수용'되어야 한다고 말한다.36 자기 효능감은 8 그것들을 달성할 수 있다는 자신의 능력에 대한 믿음이다. 성장 마인드셋은 15 개인이 현재 기술이 부족하더라도 개발할 수 있다고 믿게 하여 미래 과제에 대한 자기 효능감을 지원한다. 자기 효능감이 낮으면, 원칙적으로 성장 마인드셋을 가지고 있더라도 도전적인 목표를 피하거나(로크와 레이섬의 이론과 반대) 쉽게 포기할 수 있다. 고정 마인드셋을 가지고 있다면, 좌절은 자기 효능감을 직접적으로 손상시킬 것이다. 따라서 실행 설계에는 목표 설정 전략뿐만 아니라 자기 효능감을 적극적으로 구축하고 유지하며 성장 마인드셋을 육성하는 전략도 포함되어야 한다.성장 마인드셋과 자기 효능감의 상호작용적 인과 관계는 다음과 같이 설명될 수 있다: 성장 마인드셋은 노력이 개선으로 이어진다는 믿음을 키워 자기 효능감 발달을 지원한다. 높은 자기 효능감은 다시 도전적인 목표 설정과 추구를 장려한다. 이러한 목표를 성공적으로 달성하면 자기 효능감과 성장 마인드셋 모두를 더욱 강화하여 긍정적인 상승 나선을 만든다. 이는 에커의 "생각이 감정으로, 감정이 행동으로, 행동이 결과로 이어진다"는 아이디어와 일치하며, 여기서 '결과'는 다시 '생각'(마인드셋/효능감)으로 피드백된다. '실행 설계'를 위한 개입은 자기 효능감을 구축하는 기법(예: 숙달 경험, 대리 학습, 언어적 설득, 생리적 상태 관리 – 반두라)과 성장 마인드셋 원칙을 강화하는 기법(예: 타고난 재능보다 노력과 전략 칭찬 – 드웩 16)을 적극적으로 통합해야 한다.성장 계획을 실행하는 과정에는 필연적으로 장애물과 어려움이 따르기 마련이다. 에커는 부자들이 문제에 직면했을 때 이를 회피하거나 압도당하기보다는, 문제보다 자신이 더 크다고 여기며 적극적으로 해결책을 모색하고, 심지어 장애물 속에서 기회를 발견한다고 강조한다.1 이는 단순히 긍정적인 태도를 넘어, 구체적인 심리학적 기술과 역량을 필요로 한다.인지 재구성(Cognitive Reframing)은 부정적인 경험이나 장애물을 성장의 기회 또는 학습의 계기로 재해석하는 심리적 기법이다.44 이는 부정적인 사고 패턴을 식별하고 도전하며, 이를 보다 균형 잡히거나 건설적인 생각으로 대체하는 과정을 포함한다. 예를 들어, 사업상의 실패를 "나는 실패자다"라고 규정하는 대신, "이번 경험을 통해 귀중한 교훈을 얻었고, 다음번에는 더 잘할 수 있다"고 재구성하는 것이다. 이러한 인지 재구성은 감정을 조절하고, 회복탄력성을 강화하며, 문제 해결 능력을 향상시키는 데 도움을 준다.44안전지대 확장(Comfort Zone Expansion) 또한 장애물 관리에 중요한 개념이다.46 개인의 성장은 익숙하고 편안한 '안전지대(comfort zone)'를 벗어나, 약간의 두려움과 불편함이 따르는 '학습지대(learning zone)'와 '성장지대(growth zone)'로 나아갈 때 일어난다. 에커가 말하는 "문제보다 자신이 더 크다"는 것은, 과거에는 자신의 안전지대 밖에 있어 크게 느껴졌던 문제들이 안전지대 확장을 통해 이제는 감당할 수 있는 범위 안으로 들어왔음을 의미할 수 있다. 이러한 과정에는 의도적으로 불편함과 마주하는 용기가 필요하다.이때 회복탄력성(Resilience), 즉 역경으로부터 회복하고 적응하는 능력은 필수적이다.48 회복탄력성은 감사하는 마음 갖기, 부정적 생각에 도전하기(인지 재구성), 긍정적 대인관계 유지, 마음챙김 연습 등을 통해 길러질 수 있다. 회복탄력성이 높은 사람은 좌절을 학습 경험으로 여기는 '학습된 낙관주의(learned optimism)'를 보인다.48더 나아가, 안전지대를 벗어나 '두려움 지대(fear zone)'를 통과할 때 노출 치료(Exposure Therapy)의 원리가 도움이 될 수 있다.50 노출 치료는 두려워하고 회피하는 대상이나 상황에 안전하고 통제된 방식으로 점진적으로 직면함으로써, 습관화(habituation)와 소거(extinction)를 통해 두려움 반응을 감소시키는 기법이다. 이는 새로운 도전에 따르는 불안감을 관리하고 극복하는 데 유용할 수 있다.에커가 제시하는 "기회에 집중하라"거나 "문제보다 더 커져라"는 조언은 인지 재구성, 안전지대 확장, 회복탄력성 구축이라는 심리적 과정을 성공적으로 탐색한 결과물이다. 이는 단순한 선택이 아니라 개발된 능력이다. 인지 재구성은 44 '장애물'을 '기회'로 볼 수 있게 하는 기술이다. 안전지대를 확장하는 것은 46 개인이 '문제보다 더 커지는'(즉, 한때 커 보였던 문제들이 이제 확장된 안전/능력 구역 내에 있는) 과정이다. 회복탄력성은 48 두려움과 학습 지대의 불편함을 견디며 지속할 수 있게 하는 역량이다. 따라서 '실행 설계'는 단순히 마음가짐을 채택하도록 권장하는 것을 넘어, 이러한 근본적인 심리적 기술을 적극적으로 개발하는 실천 방안을 포함해야 한다. 인지 재구성에 참여하고 의식적으로 안전지대에서 벗어나는 것(두려움 관리를 위해 노출 원리를 사용할 수 있음)은 회복탄력성을 구축한다. 증가된 회복탄력성과 도전에 대한 재구성된 관점은 기회에 더 집중하고 문제를 효과적으로 관리(문제보다 더 커짐)할 수 있는 더 큰 능력으로 이어진다. '실행 설계'는 적응적이어야 한다. 장애물을 예상하고 실질적인 문제 해결과 함께 심리적 '장애물 관리'(재구성, 회복탄력성 구축) 전략을 포함해야 한다. 이는 계획이 불가피한 좌절에 의해 탈선될 가능성을 줄여 계획을 더욱 견고하게 만든다.성공적인 실행 설계는 한 번의 계획 수립으로 완성되는 것이 아니라, 지속적인 학습과 적응을 통해 끊임없이 발전해 나가는 과정이다. 에커는 "부자들은 끊임없이 배우고 성장한다. 가난한 사람들은 이미 안다고 생각한다"고 지적하며 평생 학습의 중요성을 강조한다.1 이는 심리학적으로도 지속적인 성공과 성장에 있어 평생 학습(lifelong learning)과 지적 겸손(intellectual humility)이 핵심적인 역할을 한다는 연구 결과들과 일치한다.19학습의 개인화(Personalization of Learning)는 개개인의 능력과 동기에 맞춰 학습 경험을 설계함으로써 학습의 관련성과 효과성을 높이는 것을 의미한다.59 자신의 학습 스타일을 이해하고, 자신에게 맞는 학습 기회를 찾거나 만들어나가는 것이 중요하다.학습 전이(Transfer of Learning)는 한 맥락에서 배운 지식과 기술을 다른 맥락에 적용하는 능력을 말한다.61 특히 긍정적 전이(positive transfer)(이전 학습이 새로운 학습을 촉진)와 원거리 전이(far transfer)(유사성이 적은 다른 상황에 기술 적용)는 변화하는 환경에 적응하고 새로운 도전에 대처하는 데 필수적이다. 학습 전이를 촉진하는 요인으로는 능동적 학습, 피드백, 맥락적 관련성 등이 있다.61지적 겸손은 자신의 지식의 한계를 인정하고 새로운 지식에 대해 열린 마음을 갖는 태도를 의미한다.19 이는 "이미 다 안다"는 고정된 생각과 대조되며, 지속적인 학습과 성장의 필수 조건이다. 지적 겸손을 갖춘 사람은 새로운 정보에 더 수용적이며, 자신의 기존 신념이나 전략이 효과적이지 않을 때 이를 인정하고 수정하려는 의지를 보인다.평생 학습이 지적 겸손과 결합될 때, '실행 설계'를 위한 강력한 적응 메커니즘이 생성된다. 이는 개인이 지속적으로 전략을 개선하고, 필요에 따라 새로운 기술을 습득하며, 피드백과 변화하는 상황에 효과적으로 대응할 수 있게 한다. 이는 "이미 안다고 생각하는" 경직성을 직접적으로 반박한다. 에커는 지속적인 학습을 장려한다.1 지적 겸손은 19 개인이 자신이 모든 것을 알지 못한다는 것을 인식하여 새로운 학습에 수용적이 되도록 하는 태도이다. 학습 전이는 61 실행 중 마주치는 새롭고 예측 불가능한 상황에 학습된 지식을 적용하는 기술이다. 학습의 개인화는 59 평생 학습 과정을 더욱 효율적이고 매력적으로 만든다. 따라서 성공적인 '실행 설계'는 정적인 계획이 아니라 학습과 적응을 위한 피드백 루프를 통합하는 동적인 계획이다. '이미 안다'(고정 마인드셋)는 마음가짐은 이 중요한 적응 과정, 따라서 장기적인 성공에 주요 장애물이다. 에커의 "가난한 사람들은 이미 안다고 생각한다"는 지적 겸손 부족과 고정 마인드셋의 직접적인 표현이다. '성장 설계'는 지속적인 학습, 피드백 추구, 적응을 위한 구성 요소를 명시적으로 포함해야 한다.T. 하브 에커의 "백만장자 시크릿"은 마인드셋의 중요성 외에도 부를 창출하고 유지하는 데 도움이 되는 구체적인 행동 원칙들을 제시한다. 이러한 원칙들은 심리학적 연구를 통해 그 타당성과 효과를 뒷받침받을 수 있다.에커는 "부자들은 자신과 자신의 가치를 기꺼이 홍보한다. 가난한 사람들은 판매와 홍보를 부정적으로 생각한다"고 말한다.1 이는 자신의 능력, 제품, 서비스의 가치를 효과적으로 전달하는 능력의 중요성을 강조하는 것이다.심리학적으로 이는 자기 제시(self-presentation) 및 인상 관리(impression management) 개념과 연결된다.63 개인은 목표 달성을 위해 타인이 자신을 어떻게 인식하는지를 전략적으로 관리하며, 여기에는 자신의 능력을 강조하는 자기 홍보(self-promotion)나 헌신적인 모습을 보이는 예시화(exemplification)와 같은 전략이 포함된다.63효과적인 가치 전달에는 주장성(assertiveness)이 필수적이다. 주장성은 타인의 권리를 존중하면서 자신의 필요, 의견, 가치를 자신감 있게 표현하는 능력이다.65 이는 자기 확신, 자존감과 연결되며, 자신의 가치를 명확히 전달하고 건강한 경계를 설정하는 데 중요하다.그러나 많은 사람이 자기 홍보에 대한 두려움이나 가면 증후군(impostor syndrome)과 같은 심리적 장벽에 직면한다.67 가면 증후군은 객관적인 성공에도 불구하고 자신이 사기꾼처럼 느껴지고 언젠가 발각될 것이라는 두려움을 느끼는 현상으로, 경력 만족도에 부정적인 영향을 미친다.69 높은 자존감은 이러한 감정을 완화하는 데 도움이 될 수 있다.69현대 사회에서는 개인 브랜딩(personal branding)이 자기 홍보의 중요한 형태로 인식되며, 이는 가시성, 신뢰성, 차별성을 통해 경력 성공을 목표로 한다.71 이때 진정성(authenticity)은 장기적인 신뢰와 성공을 위해 매우 중요하다.72 또한 자기 옹호(self-advocacy)는 개인이 자신의 필요를 전달하고 권리를 주장하도록 힘을 실어주며, 특히 자기 효능감이 뒷받침될 때 경력 성숙도 및 성공과 연결된다.73에커가 말하는 "자신과 자신의 가치를 기꺼이 홍보하려는 의지"는 단순한 판매 기술을 넘어 자기 효능감, 자존감, 주장성, 그리고 가면 증후군 극복 능력과 같은 심리적 요인에 깊이 뿌리내리고 있다. 이러한 근본적인 요인들을 다루는 '마인드 리셋'은 효과적인 자기 홍보의 전제 조건인 경우가 많다. 에커는 이를 행동적 차이로 제시하지만 1, 자기 홍보에 대한 두려움 67과 가면 증후군 69은 중요한 심리적 장벽이다. 주장성 65과 자기 효능감(성공할 수 있다는 자신의 능력에 대한 믿음)은 가치를 자신 있게 표현하는 데 필요하다. 높은 자존감은 가면 증후군을 낮추는 것과 관련이 있다.69 따라서 "가난한 사람들이 판매를 부정적으로 생각한다"는 것은 단순히 판매 행위에 대한 혐오감에서 비롯된 것이 아니라, 낮은 자존감, 평가에 대한 두려움, 또는 자신이 제공하는 가치에 대한 믿음 부족에서 기인할 수 있다.이러한 요소들 간의 인과 관계는 다음과 같이 생각해 볼 수 있다: 높은 자존감과 자기 효능감은 가면 증후군과 자기 홍보에 대한 두려움을 감소시키고, 이는 가치 전달에 있어 더 큰 주장성으로 이어지며, 결과적으로 더 효과적인 개인 브랜딩과 자기 옹호를 통해 경력 및 재정적 성공 기회를 증대시킨다. 부 창출을 위한 자기 홍보 기술 개발은 내면에서 시작하여 외부로 향하는 '인사이드-아웃(inside-out)' 접근 방식을 필요로 하며, 이는 자기 가치감을 구축하고 내부 심리적 장벽을 해결하는 것에서 출발한다. 자기 홍보에 있어 진정성은 72 타인에게 조종적으로 인식되지 않고 63 장기적인 신뢰와 성공을 보장하는 데 매우 중요하다.에커는 "부자들은 다른 부자들과 성공한 사람들을 존경한다. 가난한 사람들은 부자들과 성공한 사람들을 원망한다"고 말하며, 성공한 사람들을 모델로 삼으라고 제안한다.1 이는 타인의 성공을 자신의 성장 동력으로 삼는 태도의 중요성을 시사한다.심리학 연구에 따르면, 타인의 탁월함에 대한 반응 중 존경(admiration)은 비도덕적 우수성(기술, 재능, 성취)에 대한 반응으로, 자기계발과 모방의 동기를 유발한다.75 존경심은 긍정적인 감정으로, 개인의 관점을 넓히고 미래를 위한 기술이나 자원을 구축하도록 동기를 부여한다.75반면, 질투(envy)나 분개(resentment)는 타인의 성공에 대한 부정적인 감정 반응으로 나타날 수 있다. 질투는 타인이 가진 것을 자신은 갖지 못한 데서 오는 고통스러운 감정이며, 때로는 악의적인 생각으로 이어질 수 있다.75 키르케고르는 "질투는 숨겨진 존경이다... 존경은 행복한 자기 복종이지만, 질투는 불행한 자기 주장이다"라고 표현했다.76사회적 비교 이론(social comparison theory)에 따르면, 뛰어난 타인과의 비교는 자신에게 그 우수성이 달성 가능하다고 여겨질 때 동기 부여를 증가시킬 수 있지만, 달성 불가능하다고 느껴질 때는 오히려 의기소침이나 절망감을 유발할 수 있다 [75, 로크우드와 쿤다(Lockwood &amp; Kunda) 연구 인용].성공한 사람들에 대한 존경과 분개 사이의 선택은 개인의 마인드셋(성장 대 고정)과 자기 효능감에 크게 영향을 받는다. 성장 마인드셋과 높은 자기 효능감은 성공을 달성 가능하고 학습 기회로 보기 때문에 존경과 모방을 더 가능하게 한다. 에커는 존경을 부자들의 사고방식과 연결한다.1 성장 마인드셋은 15 도전과 타인의 성공을 학습과 성장의 기회로 본다. 높은 자기 효능감은 8 유사한 성공을 달성할 수 있다는 자신의 능력에 대한 믿음을 의미하므로 모방을 실행 가능한 전략으로 만든다. 반대로, 고정 마인드셋(능력이 고정되어 있다고 믿는)은 타인의 성공에 위협을 느끼게 하여 분노를 유발할 수 있는데, 이는 그들의 성공이 자신의 인식된 고정된 한계를 강조하기 때문이다. 낮은 자기 효능감은 모방을 무의미하게 만들 것이다. 따라서 에커의 "성공한 사람들을 존경하라"는 단순한 선택 이상이며, 더 깊은 심리적 지향의 결과이다.이러한 관계는 다음과 같은 인과적 흐름으로 이해할 수 있다: 성장 마인드셋 + 높은 자기 효능감 → 타인의 성공을 달성 가능/교훈적으로 인식 → 존경 및 모방 → 동기 부여 및 기술 개발 증가 → 자신의 성공 가능성 향상. 반대로, 고정 마인드셋 + 낮은 자기 효능감 → 타인의 성공을 위협적/달성 불가능으로 인식 → 분개/질투 → 동기 저하/부정적 초점 → 자신의 성공 가능성 저하. 따라서 성장 마인드셋을 기르고 자기 효능감을 구축하는 것은 에커의 성공한 사람들을 존경하고 모델링하는 원칙을 유익하게 적용하기 위한 중요한 전제 조건이다. 이것들이 없다면, '존경'하려는 시도는 특히 성공의 격차가 크다고 인식될 때 질투나 자기 비하로 변질될 수 있다. '모방적 질투(emulative envy)' 76의 개념은 순수한 존경에 어려움을 겪는 사람들에게 다리가 될 수 있으며, 성장 마인드셋과 연결된다면 질투를 동기 부여의 힘으로 재구성할 수 있다.에커는 "부자들은 받는 것을 아주 잘한다. 가난한 사람들은 받는 것을 잘 못한다"고 말한다.6 이는 돈, 칭찬, 도움 등 좋은 것을 기꺼이 수용하는 개방적인 태도를 의미한다. 단순히 겸손의 문제를 넘어, 심리적으로 '받는 능력'은 자존감, 가치감, 그리고 세상에 대한 믿음과 깊이 관련되어 있다.심리적으로 '받는 능력'에 영향을 미치는 요인들은 다음과 같다:
자존감과 받을 자격(Deservingness): 낮은 자존감은 칭찬이나 선물을 받는 것을 어렵게 만들고, 죄책감을 느끼게 하며, 자신이 좋은 것을 받을 자격이 없다고 느끼게 할 수 있다.77 이는 과거의 경험이나 내면화된 부정적 신념에서 비롯될 수 있다. 감사(Gratitude): 도움을 받았을 때 감사함을 느끼고 표현하는 능력은 긍정적인 수용 경험과 더 강한 관계로 이어진다.78 감사는 필요가 충족되고 도움이 강요된 것으로 느껴지지 않을 때 발생하며 78, 사람들을 연결하고 친절의 상호 교환을 촉진한다. 풍요 마인드셋(Abundance Mindset) vs. 결핍 마인드셋(Scarcity Mindset): '받는 능력'은 모든 사람에게 충분한 것이 있고 자신도 받을 가치가 있다고 믿는 풍요 마인드셋과 관련이 깊다. 반면, 결핍 마인드셋은 부족함에 대한 두려움과 자신이 받을 자격이 없다는 느낌을 동반한다. "부를 활성화하여 금융 천재성을 발휘하라"는 언급은 80 풍요의 관점을 암시한다. 도움 수용의 장벽: 도움을 구하거나 받는 것을 꺼리는 것은 소속감에 대한 욕구와 독립성/자립에 대한 욕구 사이의 갈등, 또는 의존성이 무능함으로 비칠 것에 대한 두려움에서 비롯될 수 있다.79 사회적 낙인 또한 장벽이 될 수 있으며 81, 상호 호혜가 예상되지 않는 예상치 못한 호의는 부채감이나 심리적 반발(자유가 제한되는 것에 대한 부정적 느낌)을 유발할 수 있다.82 '받는 능력'은 수동적인 특성이 아니라 자존감, 받을 자격에 대한 믿음, 감사의 능력에 의해 영향을 받는 능동적인 심리적 과정이다. 받기 어려워하는 것은 종종 낮은 자존감이나 의존성과 자율성에 대한 미해결 갈등과 같은 근본적인 문제를 시사한다. 에커는 '받는 것'을 부유한 사람들의 기술이나 특징으로 규정한다.6 심리학 연구는 받기 어려움을 낮은 자존감 및 받을 자격 부족과 연결한다.77 긍정적인 감정인 감사의 경험은 도움의 긍정적인 수용을 촉진한다.78 반대로 부채감, 자존감에 대한 위협 또는 반발은 수용성을 차단할 수 있다.79 따라서 '훌륭한 수혜자'가 되는 것은 단순히 "감사합니다"라고 말하는 것 이상을 포함하며, 자존감과 도움이나 풍요를 받아들이는 의미에 대한 '마인드 리셋'을 요구한다.높은 자존감과 풍요 마인드셋은 자신이 받을 자격이 있다는 믿음으로 이어지고, 이는 도움, 돈, 칭찬 등을 받아들이는 개방성으로 나타나며, 감사의 경험을 통해 자존감을 더욱 강화하고 긍정적인 사회적 연결을 촉진하여 성장과 부의 더 큰 기회로 이어진다. '받는 것'에 어려움을 겪는 개인의 경우, 개입은 자존감을 구축하고, 받을 자격에 대한 믿음에 도전하며, 감사를 함양하는 데 초점을 맞춰야 한다. 이는 재정적, 개인적 성장을 위해 해결해야 할 중요하고 종종 간과되는 '부의 심리학' 측면이다. 에커의 원칙은 재정적, 개인적 성장을 위해 해결해야 할 더 깊은 심리적 역학을 지적한다.에커의 철학은 부자들이 결과 기반 소득(이익, 수수료, 지분 등)을 선호하는 경향이 있음을 시사한다. 이는 무한한 잠재력을 제공하고 보상을 직접적인 기여 및 위험 감수와 연결하기 때문이다. 반면, 안정적인 급여를 선호하는 것은 예측 가능성을 중시하는 경향과 관련될 수 있다. 이러한 선호도 차이는 단순한 재정 전략을 넘어 개인의 심리적 특성과 깊이 연관되어 있다.
통제 소재(Locus of Control): 내적 통제 소재를 가진 개인은 자신이 결과를 통제할 수 있다고 믿기 때문에, 자신의 노력이 보상과 직접적으로 연결되는 결과 기반 보상 체계를 선호할 수 있다.13 소득 변동성은 내적 통제 소재를 낮출 수 있다.13 위험 선호도/태도(Risk Preference/Attitude): 성과 기반 보상(Pay-for-Performance, PFP)은 고용주로부터 직원에게 위험을 이전하는 측면이 있다. 위험 회피적인 개인은 안정적인 시간 기반 급여를 선호할 수 있는 반면, 위험 감수성이 높은 개인은 PFP의 잠재적으로 더 높은 보상에 매력을 느낄 수 있다.83 개인의 위험 선호도와 보상 시스템 간의 일관성은 직무 만족도 및 조직 시민 행동에 영향을 미친다.83 기업가적 마인드셋은 종종 더 높은 위험 감수 성향을 포함한다.84 자기 효능감(Self-Efficacy): 자신의 업무 수행 능력에 대한 믿음인 자기 효능감이 높을수록 PFP를 선호할 가능성이 크다. 자신이 성과를 달성하여 더 높은 보상을 받을 수 있다고 확신하기 때문이다.87 성취 동기(Achievement Motivation): 성취 욕구가 높은 개인은 PFP가 성과에 대한 직접적인 피드백과 성취감을 제공하기 때문에 이를 선호할 수 있다.54 결과 기반 보상과 시간 기반 보상에 대한 선호는 내적 통제위, 더 높은 위험 감수성(또는 계산된 위험 감수), 강한 자기 효능감, 높은 성취 동기를 특징으로 하는 근본적인 '부 창출 마인드셋'의 행동적 표현이다. 이는 단지 돈에 관한 것이 아니라 자율성, 도전, 직접적인 피드백에 관한 것이다. 에커의 철학은 결과 기반 급여에 대한 선호를 암시한다(이기기 위해 게임을 하고, 자신의 삶을 창조함). 내적 통제위는 13 개인이 자신의 행동이 결과를 좌우한다고 믿게 하며, 이는 자신의 행동이 수입에 직접적인 영향을 미치는 결과 기반 급여와 일치한다. 위험 선호도는 83 변동성(위험)에 편안함을 느끼는 사람들이 PFP에 더 만족한다는 것을 보여준다. 기업가 정신은 본질적으로 보상에 대한 위험을 수반한다.84 자기 효능감은 PFP 시스템에서 더 높은 급여에 필요한 결과를 달성할 수 있다고 믿게 한다. 높은 성취 동기는 54 PFP가 직접적으로 제공하는 성취와 피드백을 추구한다.이러한 심리적 특성들의 조합, 즉 내적 통제위, 적응적 위험 성향, 높은 자기 효능감, 그리고 성취 동기는 예측 가능성은 낮더라도 잠재력이 더 높은 성과를 직접적으로 보상하는 보상 시스템에 대한 선호로 이어진다. 이러한 선호는 기업가 정신이나 영업직과 같은 행동을 유도하여 부의 축적을 용이하게 한다. 상당한 부를 쌓기 위해 종종 필요한 결과 기반 소득 선호로의 전환은 이러한 근본적인 심리적 특성에 초점을 맞춘 '마인드 리셋'을 필요로 할 수 있다. 또한 이는 기업가적 행동을 동기 부여하려는 조직이 보상 및 통제 시스템이 이러한 특성들과 어떻게 조화를 이루는지 고려해야 함을 시사한다.83에커는 "부자들은 돈 관리를 잘한다. 가난한 사람들은 돈 관리를 잘 못한다" 1 그리고 "부자들은 돈이 자신을 위해 열심히 일하게 만든다. 가난한 사람들은 돈을 위해 열심히 일한다" (소극적 소득에 대한 강조 내포)고 주장한다. 이는 효과적인 돈 관리 습관과 소극적 소득 창출 능력의 중요성을 역설하는 것이다.돈 관리 습관의 심리학:효과적인 돈 관리는 단순히 기술적인 문제를 넘어 심리적인 요소와 깊이 연관된다.
재무 지식(Financial Literacy): 예산 수립, 저축, 투자, 부채 및 위험 관리에 대한 이해는 정보에 입각한 의사 결정을 가능하게 하고 재정적 스트레스를 줄이는 기초가 된다.90 심리적 요인: 만족감, 수입 내 지출(living within means), 꾸준한 저축 습관은 재정적 안정에 필수적이다.91 인내심, 규율과 같은 행동적 기술은 지능보다 중요할 수 있다.91 지출 추적과 지출 계획 수립도 도움이 된다.18 자기 통제(Self-Control) 및 만족 지연(Delay of Gratification): 장기적인 이익을 위해 즉각적인 보상을 참는 능력은 부 축적에 매우 중요하다.52 자기 통제 편향은 현재 지출을 선호하고 미래 투자를 소홀히 하게 만들 수 있다.93 소극적 소득 및 투자의 심리학:소극적 소득(passive income)은 직접적인 노동 없이도 수입이 발생하는 것을 의미하며, 재정적 자유를 향한 중요한 경로로 여겨진다.
투자 마인드셋: 성공적인 소극적 투자는 장기적인 관점, 감정(두려움/탐욕) 관리, 인내심, 규율을 필요로 한다.52 재정적 자기 효능감(Financial Self-Efficacy, FSE): 재정을 관리하고 건전한 결정을 내리며 재정 목표를 달성할 수 있다는 믿음이다. FSE는 자신감, 동기 부여, 행동을 연결하며 96, 성격과 투자 결정 사이를 매개하기도 한다.97 흥미롭게도, 높은 FSE는 합리성과 결합되지 않으면 처분 효과(이익 실현은 빨리, 손실 실현은 늦게 하는 경향)에 더 취약하게 만들 수 있다.96 낙관주의(Optimism): 낙관적인 태도는 시간이 지남에 따라 더 많은 저축으로 이어진다는 연구 결과가 있다.98 미래 시간 관점(Future Time Perspective): 미래 지향적인 개인은 장기 투자 및 재정 계획에 더 적극적인 경향이 있다.99 행동 재무학(Behavioral Finance): 투자 과정에서의 심리적 함정과 편향을 연구한다.100 자신의 재정 심리를 이해하는 것이 핵심이다. 효과적인 자금 관리와 성공적인 소극적 투자는 단지 재정 지식(문해력)에 관한 것이 아니라 감정 조절, 자기 통제, 미래 지향적 사고방식에 크게 의존한다. 이러한 심리적 기술은 종종 무엇을 해야 하는지 아는 것과 실제로 일관되게 그것을 하는 것 사이의 '잃어버린 고리'이다. 에커는 좋은 자금 관리를 강조한다.1 재정 문해력은 '무엇을' 제공한다.90 그러나 충동성 103, 자기 통제/만족 지연 부족 92, 감정적 의사 결정 94과 같은 심리적 요인은 재정적으로 문해력이 있는 개인조차도 탈선시킬 수 있다. 성공적인 소극적 투자는 인내, 규율, 시장 변동성으로부터의 감정적 분리를 필요로 하며 94 이는 모두 심리적 기술이다. 재정적 자기 효능감은 96 자금을 관리하고 성공적으로 투자할 수 있다는 믿음으로, 지식과 행동을 연결한다. 따라서 부를 쌓는 것은 이러한 '행동 재무' 기술을 재정 지식과 함께 개발하는 것을 필요로 한다.재정 교육은 기술적 지식을 넘어 감정 조절, 자기 통제, 장기적 관점 함양과 같은 심리적 기술 훈련을 포함해야 한다. 이러한 맥락에서 '마인드 리셋'은 건전한 재정 원칙을 고수할 수 있는 심리적 강인함을 개발하는 것을 포함한다.개인의 마인드 리셋과 성장 설계는 고립된 환경에서 이루어지기 어렵다. 오히려 긍정적이고 지지적인 외부 환경, 특히 사회적 연결망과 책임감 있는 관계는 지속적인 성장을 위한 필수적인 동력이 된다.연구에 따르면, 견고한 사회적 네트워크는 개인의 성과 향상, 회복탄력성 증진, 전반적인 웰빙 및 소속감 향상에 기여한다.104 특히 대학생의 경우, 강력한 사회적 네트워크가 높은 학점, 낮은 중도 탈락률, 학습 소진 감소, 자기 효능감 향상과 관련이 있는 것으로 나타났다.104온라인 환경에서의 사회적 네트워킹(SNS)의 경우, 능동적-수동적 사용 모델(active-passive model)이 제시된다. SNS를 타인과 상호작용하는 데 능동적으로 사용하면 사회적 자본과 연결감을 높여 웰빙을 증진시키는 반면, 수동적으로 콘텐츠를 소비하는 것은 사회적 비교를 통해 오히려 웰빙을 저해할 수 있다.105또한, 정서 전염(emotional contagion) 이론에 따르면, 감정은 개인 간에 전파되어 집단의 사기와 웰빙에 영향을 미칠 수 있다.106 긍정적인 감정은 의도적으로 확산될 수 있으며, 이는 모방과 거울 뉴런(mirror neurons)의 작용과 관련이 있다.107사회적 네트워크의 질과 상호작용의 본질은 네트워크의 단순한 존재나 크기보다 성장에 더 중요하다. 성장 지향적 가치를 공유하거나 장려하는 지지적이고 긍정적인 개인들과 적극적으로 교류하는 것이 핵심이다. 104는 "견고한" 그리고 "강력한" 네트워크를 강조한다. 105는 능동적(유익한) SNS 사용과 수동적(잠재적으로 해로운) SNS 사용을 구분하는데, 이는 오프라인 네트워크에도 외삽될 수 있다. 정서 전염 이론 107은 긍정적 감정과 부정적 감정 모두 전파될 수 있음을 보여준다. 부정적이거나 고정된 사고방식이 지배적인 네트워크에 속하는 것은 해로울 수 있다. 따라서 '실행 설계'에는 단순히 광범위하게 '네트워킹'하는 것이 아니라, 자신의 성장 목표에 긍정적인 정서 전염과 지원을 제공하는 네트워크를 의식적으로 육성하고 참여하는 것이 포함되어야 한다.긍정적인 사회적 네트워크에 목적을 가지고 참여하면 사회적 자본과 지원이 증가하고 긍정적인 정서 전염이 일어나며, 이는 웰빙, 회복탄력성, 자기 효능감을 향상시켜 성장 목표를 향한 노력을 지속할 수 있는 능력을 향상시킨다. 개인은 성장 설계의 일환으로 자신의 사회적 환경을 전략적으로 관리하여, 자신의 발전 목표와 일치하고 고양시키는 관계를 추구하며, 지속적으로 부정적이거나 약화시키는 영향에 대한 노출을 최소화해야 한다.지속적인 성장을 위해서는 내적 동기뿐 아니라 외부적인 지원 체계도 중요하다. 책임 파트너십(accountability partnership)과 마스터마인드 그룹(mastermind group)은 이러한 지원 체계의 효과적인 형태이다.책임 파트너는 개인이 특정 목표를 향해 일관성과 헌신을 유지하도록 돕는 사람으로, 정기적인 점검, 격려, 지원을 제공한다.108 이러한 관계는 자신뿐만 아니라 파트너에 대한 의무감을 형성하여 강력한 성공 동기를 부여한다. 한 연구에 따르면 책임 파트너가 있는 경우 목표 달성 가능성이 약 65% 증가하는 것으로 나타났다.109마스터마인드 그룹은 비슷한 생각을 가진 개인들이 모여 서로에게 도전과 영감을 주고, 각자의 목표 달성을 지원하는 협력적인 연합체이다.110 이러한 그룹은 다양한 관점, 정서적 지원, 책임감 부여, 집중적인 목표 설정 등의 이점을 제공한다. 구성원들은 서로의 경험과 지식을 공유하며 창의적인 문제 해결을 돕고, 고립감을 줄이며, 계획을 구체화하도록 지원한다.책임 파트너십과 마스터마인드 그룹은 목표 달성에 중요한 동기 부여, 헌신, 문제 해결과 같은 내부 심리적 과정을 강화하는 외부 구조를 제공하여 '실행 설계'의 측면을 효과적으로 운영한다. 목표 설정은 헌신과 끈기를 필요로 한다(로크와 레이섬). 책임 구조는 108 이를 강화한다. 장애물 극복은(에커) 종종 해결책을 위한 다양한 관점을 필요로 하며, 마스터마인드 그룹이 이를 제공한다.110 동기 부여 유지는 어려울 수 있으며, 이러한 그룹의 사회적 지원과 격려는 108 외부 동기 부여 요인으로 작용한다. 그들은 목표 설정 이론의 '피드백' 요소와 게일 매튜스 박사가 서면 목표에 대해 언급한 '추적' 측면을 공식화한다.책임 구조에 참여하면 외부 동기 부여, 헌신, 다양한 문제 해결 전략에 대한 접근성, 정서적 지원이 증가하여 장애물을 극복하고 목표를 향해 지속할 가능성이 높아져 목표 달성 가능성이 커진다. 이러한 지원 시스템을 의도적으로 구축하는 것은 모든 진지한 '실행 설계'의 필수적인 부분이어야 한다. 이는 단지 '있으면 좋은 것'이 아니라 개인의 노력을 위한 사회적 발판을 제공함으로써 발전을 가속화할 수 있는 강력한 도구이다. 파트너/그룹 선택은 최대 효과를 위해 자신의 가치 및 목표와 일치해야 한다.본 보고서는 개인의 성공, 특히 재정적 풍요를 달성하는 데 있어 내면의 변화인 '마인드 리셋'과 전략적 행동 계획인 '실행 설계(성장 설계)'가 핵심적인 역할을 수행함을 심층적으로 탐구하였다. T. 하브 에커가 "백만장자 시크릿"에서 제시한 원칙들은 단순한 자기계발적 조언을 넘어, 인지행동치료, 정신역동 이론, 사회적 영향 이론, 성장 마인드셋, 자기 효능감, 목표 설정 이론 등 현대 심리학의 주요 이론들과 깊이 공명하며 그 타당성을 확보한다.마인드 리셋의 중요성은 '생각이 감정을 낳고, 감정이 행동을 이끌며, 행동이 결과를 만든다'는 기본적인 심리적 연쇄 작용에서 출발한다.1 특히 어린 시절의 경험과 사회적 영향으로 형성된 무의식적인 '돈의 청사진'은 성인이 된 후에도 개인의 재정적 현실을 강력하게 규정한다.5 부자와 가난한 사람의 사고방식 차이는 이러한 내면의 프로그래밍 차이를 반영하며, '나는 내 삶의 창조자'라는 믿음, 기회에 집중하는 태도, 문제 해결 능력 등은 성공적인 마인드셋의 핵심 요소이다.1 이러한 마인드 리셋은 선언, 확언, 가치 명확화와 같은 자기 성찰적 방법뿐 아니라, 인지 재구성, 스키마 치료, 메타인지 치료와 같은 전문적인 심리치료적 접근을 통해 더욱 효과적으로 이루어질 수 있다.22실행 설계는 명확하고 도전적인 목표 설정 36, 자기 효능감과 성장 마인드셋의 함양 8, 장애물 관리 및 기회 포착을 위한 인지적 재구성과 안전지대 확장 44, 그리고 평생 학습과 지적 겸손을 통한 지속적인 적응 과정을 포함한다.19 에커가 제시한 자기 홍보, 성공한 사람에 대한 긍정적 태도, 받는 능력, 결과 기반 보상 선호, 효과적인 돈 관리 및 소극적 소득 창출과 같은 원칙들은 이러한 실행 설계의 구체적인 전략들로 이해될 수 있으며, 각각의 원칙 뒤에는 이를 뒷받침하는 심리학적 기제가 존재한다.궁극적으로 마인드 리셋과 실행 설계는 분리된 과정이 아니라, 상호 영향을 주고받으며 반복적으로 순환하는 통합적인 과정이다. 긍정적으로 리셋된 마인드셋은 효과적인 실행 설계를 가능하게 하며, 실행 설계를 통해 얻어진 성공적인 결과는 다시 긍정적인 마인드셋을 강화한다. 이러한 선순환 구조를 구축하고 유지하는 것이 지속적인 성장과 성공의 핵심이다.이 여정은 본질적으로 자기 발견, 자기 극복, 그리고 전략적 행동의 여정이다. 이는 내면세계를 이해하고 재설정하는 성찰(마음 리셋)과 외부 세계를 설계하고 탐색하는 외향성(실행 설계)을 모두 필요로 한다. "백만장자 시크릿"과 심리학적 통찰의 결합은 개인이 자신의 내면세계를 적극적으로 변화시키고, 동시에 외부 세계에서의 성공을 전략적으로 설계함으로써 보다 풍요롭고 의미 있는 삶을 창조할 수 있는 강력한 로드맵을 제공한다. 이 보고서가 제시하는 것은 고정된 공식이 아니라, 개인이 평생에 걸쳐 적용하고 적응시켜 나갈 수 있는 이해의 틀과 심리학적 원리 및 전략의 도구상자이다. 진정한 '비밀'은 자신의 내면과 외부 세계에 대한 이러한 지속적이고 의식적인 참여에 있다. Secrets Of The Millionaire Mind Book Summary - Debt-Free Doctor, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.debtfreedr.com/5-minute-book-summary-secrets-of-the-millionaire-mind-by-t-harv-eker/" target="_self">https://www.debtfreedr.com/5-minute-book-summary-secrets-of-the-millionaire-mind-by-t-harv-eker/</a> <br>
The Neuroscience of Goals and Behavior Change - PMC - PubMed Central, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5854216/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC5854216/</a> <br>
Cognitive Behavior Therapy - StatPearls - NCBI Bookshelf, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ncbi.nlm.nih.gov/books/NBK470241/" target="_self">https://www.ncbi.nlm.nih.gov/books/NBK470241/</a> <br>
What is Cognitive Behavioral Therapy? - American Psychological Association, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.apa.org/ptsd-guideline/patients-and-families/cognitive-behavioral" target="_self">https://www.apa.org/ptsd-guideline/patients-and-families/cognitive-behavioral</a> <br>
Secrets of the Millionaire Mind Summary of Key Ideas and Review | T. Harv Eker - Blinkist, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.blinkist.com/en/books/secrets-of-the-millionaire-mind-en" target="_self">https://www.blinkist.com/en/books/secrets-of-the-millionaire-mind-en</a> <br>
Book Summary - Secrets of the Millionaire Mind (T. Harv Eker) - Readingraphics, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://readingraphics.com/book-summary-secrets-of-the-millionaire-mind/" target="_self">https://readingraphics.com/book-summary-secrets-of-the-millionaire-mind/</a> <br>
Secrets of the Millionaire Mind Declarations Public Review, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://millionairemindevents.com/secrets-of-the-millionaire-mind/secrets-of-the-millionaire-mind-declarations-public-review/" target="_self">https://millionairemindevents.com/secrets-of-the-millionaire-mind/secrets-of-the-millionaire-mind-declarations-public-review/</a> <br>
journals.kmanpub.com, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://journals.kmanpub.com/index.php/jayps/article/download/3841/6438/18681" target="_self">https://journals.kmanpub.com/index.php/jayps/article/download/3841/6438/18681</a> <br>
The Psychodynamic Perspective | Noba, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://nobaproject.com/modules/the-psychodynamic-perspective" target="_self">https://nobaproject.com/modules/the-psychodynamic-perspective</a> <br>
Sigmund Freud in Early Childhood Education: A Practical Guide, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.earlyyears.tv/sigmund-freud-in-early-childhood-education-a-practical-guide/" target="_self">https://www.earlyyears.tv/sigmund-freud-in-early-childhood-education-a-practical-guide/</a> <br>
Social Influence Theory - TheoryHub - Academic theories reviews ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://open.ncl.ac.uk/theories/15/social-influence-theory/" target="_self">https://open.ncl.ac.uk/theories/15/social-influence-theory/</a> <br>
Social Influence and the Collective Dynamics of Opinion Formation - PMC, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3818331/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC3818331/</a> <br>
The Role of Income Volatility and Perceived Locus of Control in ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2021.638043/full" target="_self">https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2021.638043/full</a> <br>
Locus of Control and Investment in Training | Journal of Human Resources, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://jhr.uwpress.org/content/57/4/1311" target="_self">https://jhr.uwpress.org/content/57/4/1311</a> <br>
Carol Dweck - The Decision Lab, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://thedecisionlab.com/thinkers/psychology/carol-dweck" target="_self">https://thedecisionlab.com/thinkers/psychology/carol-dweck</a> <br>
Adopting a Growth Mindset: Increasing Our Resiliency in Uncertain Times, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ncsl.org/state-legislatures-news/details/adopting-a-growth-mindset-increasing-our-resiliency-in-uncertain-times" target="_self">https://www.ncsl.org/state-legislatures-news/details/adopting-a-growth-mindset-increasing-our-resiliency-in-uncertain-times</a> <br>
Sell yourself - American Psychological Association, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.apa.org/gradpsych/2011/01/matters" target="_self">https://www.apa.org/gradpsych/2011/01/matters</a> <br>
Tame your finances - American Psychological Association, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.apa.org/gradpsych/2010/09/finances" target="_self">https://www.apa.org/gradpsych/2010/09/finances</a> <br>
The Central Role of Lifelong Learning and Humility in Clinical ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/365587382_The_Central_Role_of_Lifelong_Learning_and_Humility_in_Clinical_Psychology" target="_self">https://www.researchgate.net/publication/365587382_The_Central_Role_of_Lifelong_Learning_and_Humility_in_Clinical_Psychology</a> <br>
pmc.ncbi.nlm.nih.gov, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4814782/#:~:text=Self%2Daffirmation%20theory%20posits%20that,worth%2C%20such%20as%20core%20values." target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC4814782/#:~:text=Self%2Daffirmation%20theory%20posits%20that,worth%2C%20such%20as%20core%20values.</a> <br>
Self-affirmation and the self-regulation of health behavior change - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/233353150_Self-affirmation_and_the_self-regulation_of_health_behavior_change" target="_self">https://www.researchgate.net/publication/233353150_Self-affirmation_and_the_self-regulation_of_health_behavior_change</a> <br>
Understanding the Core Principles and Techniques of Cognitive Behavioral Therapy: Part II, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://societyforpsychotherapy.org/understanding-the-core-principles-and-techniques-of-cognitive-behavioral-therapy-part-ii/" target="_self">https://societyforpsychotherapy.org/understanding-the-core-principles-and-techniques-of-cognitive-behavioral-therapy-part-ii/</a> <br>
Different components of cognitive-behavioral therapy affect specific cognitive mechanisms, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10971416/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC10971416/</a> <br>
Jeffrey Young Schema-Focused Therapy and Core Beliefs, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://schematherapytraining.us/2024/08/06/jeffrey-youngs-schema-focused-therapy-understanding-key-concepts/" target="_self">https://schematherapytraining.us/2024/08/06/jeffrey-youngs-schema-focused-therapy-understanding-key-concepts/</a> <br>
Schema Psychology: Understanding Schema Theory, Therapy, and 18 Schemas in Psychology - MVS Psychology Group, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.mvspsychology.com.au/schema-psychology-understanding-schema-theory-therapy-and-18-schemas-in-psychology/" target="_self">https://www.mvspsychology.com.au/schema-psychology-understanding-schema-theory-therapy-and-18-schemas-in-psychology/</a> <br>
What is Metacognitive Therapy | Mental Health Academy, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.mentalhealthacademy.com.au/blog/what-is-metacognitive-therapy" target="_self">https://www.mentalhealthacademy.com.au/blog/what-is-metacognitive-therapy</a> <br>
Theory and Nature of Metacognitive Therapy - Guilford Press, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.guilford.com/excerpts/wells.pdf" target="_self">https://www.guilford.com/excerpts/wells.pdf</a> <br>
Metacognitive Therapy (MCT) - Continuum of Evidence - Penn State, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.continuum.militaryfamilies.psu.edu/program/Metacognitive%20Therapy%20(MCT)" target="_self">https://www.continuum.militaryfamilies.psu.edu/program/Metacognitive%20Therapy%20(MCT)</a> <br>
Therapy - MCT Institute, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://mct-institute.co.uk/therapy/" target="_self">https://mct-institute.co.uk/therapy/</a> <br>
Metacognitive therapy - Wikipedia, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://en.wikipedia.org/wiki/Metacognitive_therapy" target="_self">https://en.wikipedia.org/wiki/Metacognitive_therapy</a> <br>
Living in Line with Your Values: A Psychological Approach to Authentic Living, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.braininsights.net/living-in-line-with-your-values-a-psychological-approach-to-authentic-living/" target="_self">https://www.braininsights.net/living-in-line-with-your-values-a-psychological-approach-to-authentic-living/</a> <br>
Values Clarification in CBT and Beyond: 18+ Examples &amp; Tools, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://positivepsychology.com/values-clarification/" target="_self">https://positivepsychology.com/values-clarification/</a> <br>
Doing What Matters - The Power of Values-Based Living - Momentum Psychology, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://momentumpsychology.com/doing-what-matters-the-power-of-values-based-living/" target="_self">https://momentumpsychology.com/doing-what-matters-the-power-of-values-based-living/</a> <br>
The Study of Authenticity by Elizabeth Hopper, PhD.| HealthyPsych.com, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://healthypsych.com/the-study-of-authenticity/" target="_self">https://healthypsych.com/the-study-of-authenticity/</a> <br>
How to Set Big Goals and Make Them Actually Happen - Next Big Idea Club, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://nextbigideaclub.com/magazine/set-big-goals-make-actually-happen-bookbite/52898/" target="_self">https://nextbigideaclub.com/magazine/set-big-goals-make-actually-happen-bookbite/52898/</a> <br>
Goal-Setting Theory of Motivation - nationalforum.com, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.nationalforum.com/Electronic%20Journal%20Volumes/Lunenburg,%20Fred%20C.%20Goal-Setting%20Theoryof%20Motivation%20IJMBA%20V15%20N1%202011.pdf" target="_self">https://www.nationalforum.com/Electronic%20Journal%20Volumes/Lunenburg,%20Fred%20C.%20Goal-Setting%20Theoryof%20Motivation%20IJMBA%20V15%20N1%202011.pdf</a> <br>
Ambiguity Effect - The Decision Lab, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://thedecisionlab.com/biases/ambiguity-effect" target="_self">https://thedecisionlab.com/biases/ambiguity-effect</a> <br>
Ambiguity tolerance in organizations: definitional ... - Frontiers, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2015.00344/full" target="_self">https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2015.00344/full</a> <br>
Cognitive Processes in Response to Goal Failure: A Study of ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC3864849/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC3864849/</a> <br>
The Science Behind Goal Achievement – DAVRON, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.davron.net/the-science-behind-goal-achievement/" target="_self">https://www.davron.net/the-science-behind-goal-achievement/</a> <br>
The Interplay Between Goal Intentions and Implementation Intentions - NYU Web Publishing, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://wp.nyu.edu/motivationlab/wp-content/uploads/sites/6235/2019/02/sheeran-et-al-2005-the-interplay-between-goal-intentions-and-implementation-intentions.pdf" target="_self">https://wp.nyu.edu/motivationlab/wp-content/uploads/sites/6235/2019/02/sheeran-et-al-2005-the-interplay-between-goal-intentions-and-implementation-intentions.pdf</a> <br>
<a data-tooltip-position="top" aria-label="http://www.prospectivepsych.org" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.prospectivepsych.org" target="_self">www.prospectivepsych.org</a>, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.prospectivepsych.org/sites/default/files/pictures/Gollwitzer_Implementation-intentions-1999.pdf" target="_self">https://www.prospectivepsych.org/sites/default/files/pictures/Gollwitzer_Implementation-intentions-1999.pdf</a> <br>
Goal Setting and Self-Efficacy During Self-Regulated Learning By, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://libres.uncg.edu/ir/uncg/f/D_Schunk_Goal_1990.pdf" target="_self">https://libres.uncg.edu/ir/uncg/f/D_Schunk_Goal_1990.pdf</a> <br>
The role of therapists in helping clients reframe negative experiences, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.grandrisingbehavioralhealth.com/blog/the-role-of-therapists-in-helping-clients-reframe-negative-experiences" target="_self">https://www.grandrisingbehavioralhealth.com/blog/the-role-of-therapists-in-helping-clients-reframe-negative-experiences</a> <br>
Change The Perspective: The Art of Cognitive Reframing | CBT Guide - Upvio, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://upvio.com/cbt/change-the-perspective-the-art-of-cognitive-reframing" target="_self">https://upvio.com/cbt/change-the-perspective-the-art-of-cognitive-reframing</a> <br>
Understanding the Comfort Zone: From Fear Zone to Growth Zone, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://epee-education.com/understanding-the-comfort-zone-from-fear-zone-to-growth-zone/" target="_self">https://epee-education.com/understanding-the-comfort-zone-from-fear-zone-to-growth-zone/</a> <br>
The Pros and Cons of Comfort Zones - Walden University, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.waldenu.edu/programs/psychology/resource/the-pros-and-cons-of-comfort-zones" target="_self">https://www.waldenu.edu/programs/psychology/resource/the-pros-and-cons-of-comfort-zones</a> <br>
The Psychology of Resilience - Ontario Psychological Association, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.psych.on.ca/Public/Blog/2024/the-psychology-of-resilience" target="_self">https://www.psych.on.ca/Public/Blog/2024/the-psychology-of-resilience</a> <br>
Resilience Theory: A Summary of the Research (+PDF) - Positive Psychology, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://positivepsychology.com/resilience-theory/" target="_self">https://positivepsychology.com/resilience-theory/</a> <br>
Therapeutic Process During Exposure: Habituation Model - PMC, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4525711/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC4525711/</a> <br>
What Is Exposure Therapy? - American Psychological Association, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.apa.org/ptsd-guideline/patients-and-families/exposure-therapy" target="_self">https://www.apa.org/ptsd-guideline/patients-and-families/exposure-therapy</a> <br>
44 Wealth Principles from The Secrets of the Millionaire Mind, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://millionairemindevents.com/secrets-of-the-millionaire-mind/wealth-principles/" target="_self">https://millionairemindevents.com/secrets-of-the-millionaire-mind/wealth-principles/</a> <br>
Trusting the Process: Self-Led Learning and Academic Success | Psychology Today, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.psychologytoday.com/us/blog/the-compassionate-brain/202502/trusting-the-process-self-led-learning-and-academic-success" target="_self">https://www.psychologytoday.com/us/blog/the-compassionate-brain/202502/trusting-the-process-self-led-learning-and-academic-success</a> <br>
Construction and Validation of Achievement Motivation Scale Among Higher Secondary School Students In Thiruvarur District - International Journal of Scientific Research &amp; Technology, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ijsrtjournal.com/article/Construction+and+Validation+of+Achievement+Motivation+Scale+Among+Higher+Secondary+School+Students++In+Thiruvarur+District" target="_self">https://www.ijsrtjournal.com/article/Construction+and+Validation+of+Achievement+Motivation+Scale+Among+Higher+Secondary+School+Students++In+Thiruvarur+District</a> <br>
“Motivation's Impact On Learning: A Comprehensive Review Of The Systematic Literature” - IJCRT, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ijcrt.org/papers/IJCRT2402691.pdf" target="_self">https://www.ijcrt.org/papers/IJCRT2402691.pdf</a> <br>
Intellectual humility: an old problem in a new psychological perspective - PMC, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC10535625/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC10535625/</a> <br>
Witnessing Intellectual Humility: How a Peer's Humble Introduction Affects Feedback Receptivity and Social Perception, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://scholarscompass.vcu.edu/cgi/viewcontent.cgi?article=9123&amp;context=etd" target="_self">https://scholarscompass.vcu.edu/cgi/viewcontent.cgi?article=9123&amp;context=etd</a> <br>
The Importance of Ethnicity: Developing a Measure of Minority ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.frontiersin.org/articles/10.3389/fpsyg.2019.02603/full" target="_self">https://www.frontiersin.org/articles/10.3389/fpsyg.2019.02603/full</a> <br>
<a data-tooltip-position="top" aria-label="http://www.smhp.psych.ucla.edu" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.smhp.psych.ucla.edu" target="_self">www.smhp.psych.ucla.edu</a>, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.smhp.psych.ucla.edu/pdfdocs/personalizing.pdf" target="_self">https://www.smhp.psych.ucla.edu/pdfdocs/personalizing.pdf</a> <br>
The Psychology of Personalized Learning - Sales &amp; Marketing Management, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://salesandmarketing.com/the-psychology-of-personalized-learning/" target="_self">https://salesandmarketing.com/the-psychology-of-personalized-learning/</a> <br>
Transfer of Learning | Types &amp; Benefits - Cloud Assess, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://cloudassess.com/blog/transfer-of-learning/" target="_self">https://cloudassess.com/blog/transfer-of-learning/</a> <br>
Strategies to Enhance the Transfer of Learning [PDF] - BCIT, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.bcit.ca/files/ltc/pdf/transfer.pdf" target="_self">https://www.bcit.ca/files/ltc/pdf/transfer.pdf</a> <br>
Self-Presentation and Impression Management | Social Psychology Class Notes - Fiveable, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://library.fiveable.me/social-psychology/unit-4/self-presentation-impression-management/study-guide/ZSSpnDUS8IMRMSMD" target="_self">https://library.fiveable.me/social-psychology/unit-4/self-presentation-impression-management/study-guide/ZSSpnDUS8IMRMSMD</a> <br>
Self-presentation | EBSCO Research Starters, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ebsco.com/research-starters/health-and-medicine/self-presentation" target="_self">https://www.ebsco.com/research-starters/health-and-medicine/self-presentation</a> <br>
The Empowering Skill of Assertiveness - Psychology Fanatic, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://psychologyfanatic.com/assertiveness/" target="_self">https://psychologyfanatic.com/assertiveness/</a> <br>
(PDF) Assertiveness - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/313518353_Assertiveness" target="_self">https://www.researchgate.net/publication/313518353_Assertiveness</a> <br>
Perceptions of Competency Norms in the Workplace: A Scale Development - eScholarShare, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://escholarshare.drake.edu/bitstreams/daec4d7c-f3a9-4891-aba3-aca03db38e68/download" target="_self">https://escholarshare.drake.edu/bitstreams/daec4d7c-f3a9-4891-aba3-aca03db38e68/download</a> <br>
How I Conquered Call Reluctance, Fear of Self-Promotion &amp; Increased My Prospecting!, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.amazon.com/Conquered-Reluctance-Self-Promotion-Increased-Prospecting/dp/0962117773" target="_self">https://www.amazon.com/Conquered-Reluctance-Self-Promotion-Increased-Prospecting/dp/0962117773</a> <br>
Unraveling the complex interplay: self-esteem, impostor phenomenon, proactive personality, and their influence on career satisfaction - Frontiers, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2025.1583454/full" target="_self">https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2025.1583454/full</a> <br>
Imposter Syndrome: Worth Your While - International Journal of Research and Scientific Innovation (IJRSI), 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://rsisinternational.org/journals/ijrsi/articles/imposter-syndrome-worth-your-while/" target="_self">https://rsisinternational.org/journals/ijrsi/articles/imposter-syndrome-worth-your-while/</a> <br>
Research Gap in Personal Branding: Understanding and Quantifying Personal Branding by Developing a Standardized Framework for Personal Brand Equity Measurement - MDPI, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.mdpi.com/2076-3387/15/4/148" target="_self">https://www.mdpi.com/2076-3387/15/4/148</a> <br>
(PDF) Personal branding success - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/383752303_Personal_branding_success" target="_self">https://www.researchgate.net/publication/383752303_Personal_branding_success</a> <br>
Fostering Self-Advocacy and Independence for People with Visual Impairment in Zimbabwe - International Journal of Research and Innovation in Social Science, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://rsisinternational.org/journals/ijriss/articles/fostering-self-advocacy-and-independence-for-people-with-visual-impairment-in-zimbabwe/" target="_self">https://rsisinternational.org/journals/ijriss/articles/fostering-self-advocacy-and-independence-for-people-with-visual-impairment-in-zimbabwe/</a> <br>
Personal Self-Advocacy in College and the Workplace: The Gentle Art of Self-Promotion, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.psichi.org/page/284EyePersonal-Self-Advocacy-in-College-and-the-Workplace-The-Gentle-Art-of-Self-Promotion" target="_self">https://www.psichi.org/page/284EyePersonal-Self-Advocacy-in-College-and-the-Workplace-The-Gentle-Art-of-Self-Promotion</a> <br>
Witnessing excellence in action: the 'other-praising' emotions of ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC2689844/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC2689844/</a> <br>
Happy Self-Surrender and Unhappy Self-Assertion: A Comparison between Admiration and Emulative Envy - PhilArchive, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://philarchive.org/archive/PROHSA" target="_self">https://philarchive.org/archive/PROHSA</a> <br>
Boundary Training in Schools Telephone Roundtable - United Educators, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ue.org/globalassets/materials/roundtablek-12boundarytraininginschools--resources_12-062.pdf" target="_self">https://www.ue.org/globalassets/materials/roundtablek-12boundarytraininginschools--resources_12-062.pdf</a> <br>
Attributing autonomous versus introjected motivation to helpers and the recipient experience: Effects on gratitude, attitudes, a - selfdeterminationtheory.org, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://selfdeterminationtheory.org/wp-content/uploads/2014/04/2010_WeinsteinDehaanRyan.pdf" target="_self">https://selfdeterminationtheory.org/wp-content/uploads/2014/04/2010_WeinsteinDehaanRyan.pdf</a> <br>
(PDF) The Other Side of Helping: Seeking and Receiving Help of a single chapter of a title in Oxford Handbooks Online for personal use (for details see Privacy Policy) - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/318876735_The_Other_Side_of_Helping_Seeking_and_Receiving_Help_of_a_single_chapter_of_a_title_in_Oxford_Handbooks_Online_for_personal_use_for_details_see_Privacy_Policy" target="_self">https://www.researchgate.net/publication/318876735_The_Other_Side_of_Helping_Seeking_and_Receiving_Help_of_a_single_chapter_of_a_title_in_Oxford_Handbooks_Online_for_personal_use_for_details_see_Privacy_Policy</a> <br>
I Date Money - Captivate.fm, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://feeds.captivate.fm/idatemoney/" target="_self">https://feeds.captivate.fm/idatemoney/</a> <br>
Students' benefits and barriers to mental health help-seeking - PMC, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4346065/" target="_self">https://pmc.ncbi.nlm.nih.gov/articles/PMC4346065/</a> <br>
Reactions toward an unexpected or counternormative favor-giver: Does it matter if we think we can reciprocate? - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/232368608_Reactions_toward_an_unexpected_or_counternormative_favor-giver_Does_it_matter_if_we_think_we_can_reciprocate" target="_self">https://www.researchgate.net/publication/232368608_Reactions_toward_an_unexpected_or_counternormative_favor-giver_Does_it_matter_if_we_think_we_can_reciprocate</a> <br>
Impact of variable risk preferences on the effectiveness of control by pay - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/227538129_Impact_of_variable_risk_preferences_on_the_effectiveness_of_control_by_pay" target="_self">https://www.researchgate.net/publication/227538129_Impact_of_variable_risk_preferences_on_the_effectiveness_of_control_by_pay</a> <br>
Full article: The impacts of psychological capital, risk-taking propensity, and entrepreneurial competence on the sustainability performance of SMEs - Taylor &amp; Francis Online, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.tandfonline.com/doi/full/10.1080/23311975.2025.2466810" target="_self">https://www.tandfonline.com/doi/full/10.1080/23311975.2025.2466810</a> <br>
(PDF) Self-esteem, need for achievement, risk-taking propensity and consequent entrepreneurial intentions - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/378118127_Self-esteem_need_for_achievement_risk-taking_propensity_and_consequent_entrepreneurial_intentions" target="_self">https://www.researchgate.net/publication/378118127_Self-esteem_need_for_achievement_risk-taking_propensity_and_consequent_entrepreneurial_intentions</a> <br>
(PDF) Organizational entrepreneurship and the organizational performance linkage in university extension [electronic resource] / - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/33740507_Organizational_entrepreneurship_and_the_organizational_performance_linkage_in_university_extension_electronic_resource" target="_self">https://www.researchgate.net/publication/33740507_Organizational_entrepreneurship_and_the_organizational_performance_linkage_in_university_extension_electronic_resource</a> <br>
Could entrepreneurial leadership promote employees' IWB? The roles of intrinsic motivation, creative self-efficacy and firms i - Emerald Insight, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.emerald.com/insight/content/doi/10.1108/ijis-08-2024-0211/full/pdf?title=could-entrepreneurial-leadership-promote-employees-iwb-the-roles-of-intrinsic-motivation-creative-self-efficacy-and-firms-innovation-climate" target="_self">https://www.emerald.com/insight/content/doi/10.1108/ijis-08-2024-0211/full/pdf?title=could-entrepreneurial-leadership-promote-employees-iwb-the-roles-of-intrinsic-motivation-creative-self-efficacy-and-firms-innovation-climate</a> <br>
An empirical examination of reward preferences within and across national settings | Request PDF - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/225475265_An_empirical_examination_of_reward_preferences_within_and_across_national_settings" target="_self">https://www.researchgate.net/publication/225475265_An_empirical_examination_of_reward_preferences_within_and_across_national_settings</a> <br>
Individualism—Collectivism and Incentive System Design as Predictive of Productivity in a Simulated Cellular Manufacturing Environment | Request PDF - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/249622335_Individualism-Collectivism_and_Incentive_System_Design_as_Predictive_of_Productivity_in_a_Simulated_Cellular_Manufacturing_Environment" target="_self">https://www.researchgate.net/publication/249622335_Individualism-Collectivism_and_Incentive_System_Design_as_Predictive_of_Productivity_in_a_Simulated_Cellular_Manufacturing_Environment</a> <br>
<a data-tooltip-position="top" aria-label="http://www.andhraloyolacollege.ac.in" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.andhraloyolacollege.ac.in" target="_self">www.andhraloyolacollege.ac.in</a>, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.andhraloyolacollege.ac.in/mba_books/The%20Role%20of%20Financial%20Literacy%20in%20Personal%20Wealth%20Accumulation.pdf" target="_self">https://www.andhraloyolacollege.ac.in/mba_books/The%20Role%20of%20Financial%20Literacy%20in%20Personal%20Wealth%20Accumulation.pdf</a> <br>
The Psychology of Money: Achieving Financial Peace | Dordt ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.dordt.edu/in-all-things/the-psychology-of-money-achieving-financial-peace" target="_self">https://www.dordt.edu/in-all-things/the-psychology-of-money-achieving-financial-peace</a> <br>
Delayed Gratification - FasterCapital, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://fastercapital.com/keyword/delayed-gratification.html" target="_self">https://fastercapital.com/keyword/delayed-gratification.html</a> <br>
A short-term longitudinal examination of the associations between self-control, delay of gratification and temporal considerations | Request PDF - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/309455307_A_short-term_longitudinal_examination_of_the_associations_between_self-control_delay_of_gratification_and_temporal_considerations" target="_self">https://www.researchgate.net/publication/309455307_A_short-term_longitudinal_examination_of_the_associations_between_self-control_delay_of_gratification_and_temporal_considerations</a> <br>
The Psychology of Passive Investing: Mastering the Mindset for Success in the Car Wash Industry and Multifamily Syndication - QC | Capital, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://qccapitalgroup.com/the-psychology-of-passive-investing-mastering-the-mindset-for-success-in-the-car-wash-industry-and-multifamily-syndication/" target="_self">https://qccapitalgroup.com/the-psychology-of-passive-investing-mastering-the-mindset-for-success-in-the-car-wash-industry-and-multifamily-syndication/</a> <br>
The Psychology of Money: How to Think Like a Wealthy Investor - Compound Real Estate Bonds, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.compoundbanc.com/blog/the-psychology-of-money-how-to-think-like-a-wealthy-investor" target="_self">https://www.compoundbanc.com/blog/the-psychology-of-money-how-to-think-like-a-wealthy-investor</a> <br>
(PDF) Chapter-2 FINANCIAL SELF-EFFICACY - ResearchGate, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.researchgate.net/publication/389279418_Chapter-2_FINANCIAL_SELF-EFFICACY" target="_self">https://www.researchgate.net/publication/389279418_Chapter-2_FINANCIAL_SELF-EFFICACY</a> <br>
Personality, Financial Self Efficacy and Investment Decisions: The Role of Need for Cognition and Individual Moods - International Islamic University, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="http://theses.iiu.edu.pk:8002/greenstone/collect/electron/index/assoc/HASHc37f.dir/doc.pdf" target="_self">http://theses.iiu.edu.pk:8002/greenstone/collect/electron/index/assoc/HASHc37f.dir/doc.pdf</a> <br>
A Glass Half Full of Money: Dispositional Optimism and Wealth Accumulation Across the Income Spectrum - American Psychological Association, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.apa.org/pubs/journals/releases/psp-psp1281147.pdf" target="_self">https://www.apa.org/pubs/journals/releases/psp-psp1281147.pdf</a> <br>
The Influence of Temporal Focus and Authority Bias on Investment Decisions: An Empirical Analysis - European Economic Letters (EEL), 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://eelet.org.uk/index.php/journal/article/download/1998/1790/2185" target="_self">https://eelet.org.uk/index.php/journal/article/download/1998/1790/2185</a> <br>
Behavioral Finance and Capital Markets: How Psychology Influences Investors and Corporations - Magers &amp; Quinn Booksellers, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.magersandquinn.com/product/BEHAVIORAL-FINANCE--CAPITAL-M/13014777" target="_self">https://www.magersandquinn.com/product/BEHAVIORAL-FINANCE--CAPITAL-M/13014777</a> <br>
Inside the Investor's Brain: The Power of Mind Over Money (Wiley Trading Book 295), 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.amazon.com/Inside-Investors-Brain-Power-Trading-ebook/dp/B07MMSJ73W" target="_self">https://www.amazon.com/Inside-Investors-Brain-Power-Trading-ebook/dp/B07MMSJ73W</a> <br>
Amazon.com: Inside the Investor's Brain: The Power of Mind Over Money, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.amazon.com/Inside-Investors-Brain-Power-Money/dp/0470067373" target="_self">https://www.amazon.com/Inside-Investors-Brain-Power-Money/dp/0470067373</a> <br>
The Psychology of Money: Understanding Your Financial Behavior | CyberDB, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.cyberdb.co/the-psychology-of-money-understanding-your-financial-behavior/" target="_self">https://www.cyberdb.co/the-psychology-of-money-understanding-your-financial-behavior/</a> <br>
Why a strong social network improves performance, health, and well ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.ie.edu/center-for-health-and-well-being/blog/why-a-strong-social-network-improves-performance-health-and-well-being/" target="_self">https://www.ie.edu/center-for-health-and-well-being/blog/why-a-strong-social-network-improves-performance-health-and-well-being/</a> <br>
Do Social Networking Sites Influence Well-Being? The Extended Active-Passive Model - University of Michigan, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://sites.lsa.umich.edu/emotion-selfcontrol-psych/wp-content/uploads/sites/1322/2022/05/Do-social-network-sites-influence-well-being-The-extended-active-passive-model.pdf" target="_self">https://sites.lsa.umich.edu/emotion-selfcontrol-psych/wp-content/uploads/sites/1322/2022/05/Do-social-network-sites-influence-well-being-The-extended-active-passive-model.pdf</a> <br>
How Emotion Contagion Changes as Strangers Become Acquainted: A Longitudinal Conversation Study | Collabra: Psychology | University of California Press, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://online.ucpress.edu/collabra/article/11/1/136874/210595/How-Emotion-Contagion-Changes-as-Strangers-Become" target="_self">https://online.ucpress.edu/collabra/article/11/1/136874/210595/How-Emotion-Contagion-Changes-as-Strangers-Become</a> <br>
What Is Emotional Contagion Theory? (Definition &amp; Examples), 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://positivepsychology.com/emotional-contagion/" target="_self">https://positivepsychology.com/emotional-contagion/</a> <br>
Accountability Partners: Don't Achieve Your Goals Alone ..., 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://recreation.duke.edu/story/accountability-partners-dont-achieve-your-goals-alone/" target="_self">https://recreation.duke.edu/story/accountability-partners-dont-achieve-your-goals-alone/</a> <br>
What is study accountability partners? – Focuskeeper Glossary, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://focuskeeper.co/glossary/what-is-study-accountability-partners" target="_self">https://focuskeeper.co/glossary/what-is-study-accountability-partners</a> <br>
Mastermind Groups: Unleashing Collective Potential, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://mastermindbetter.com/groups/mastermind-groups-unlocking-collective-potential/" target="_self">https://mastermindbetter.com/groups/mastermind-groups-unlocking-collective-potential/</a> <br>
The Value of Mastermind Groups - Toastmasters International, 5월 21, 2025에 액세스, <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.toastmasters.org/magazine/magazine-issues/2019/dec/the-value-of-mastermind-groups" target="_self">https://www.toastmasters.org/magazine/magazine-issues/2019/dec/the-value-of-mastermind-groups</a> **]]></description><link>https://64etuor.github.io/200_books/bookshelf/백만장자-시크릿.html</link><guid isPermaLink="false">200_Books/Bookshelf/백만장자 시크릿.md</guid><dc:creator><![CDATA[하버 에커]]></dc:creator><pubDate>Tue, 20 May 2025 22:54:23 GMT</pubDate></item><item><title><![CDATA[2025-05-20 사랑을 위해 저지른 가장 정신 나간 짓]]></title><description><![CDATA[
"사랑을 위해 저지른 가장 정신 나간 것은? What's the craziest thing you've done for love?" 거짓말을 한 것이 아마 가장 정신 나간 짓이 아니었을까?
잘 보이고 싶은 맘으로 비롯된 거짓말이었지만 암만 생각해도 의도가 곱게 보이진 않는다.
뭐 어릴 때의 치기였겠거니 크게 개의치는 않았는데,
요즈음 드는 생각은 또 다르다.
적당한 허세는 또 필요할 때도 있는 법 같다.
참 정답이 없어서 어려운 세상이고, 때론 그 정답에서 정말 답이 없는 게 내 자신으로 느껴지기도 한다. 하지만 나는 오늘도 루틴으로 희망찬 생각을 해야 하므로 그렇게 생각한 거 취소. 어떤 능력이든 가질 수 있다면 무엇을 갖고 싶어?
오늘의 '생각을 자극'하는 글귀
"타인의 장점을 보지 못하면 타인의 잠재력을 끌어낼 수 없다.
누군가에게서 선함을 찾으려는 행동은 순진한 것이 아니다. 그저 냉소적이지 않은 사람이라느 ㄴ뜻이다. 사람들의 강점을 발견한다고 그들의 단점까지 부정하는 것은 아니다. 다만 그 강점을 통해 그들에게 단점을 이겨낼 잠재력이 있다는 것을 알게 될 뿐이다. 타인의 좋은 면을 보지 못하는 사람은 타인의 잠재력을 끌어내지 못한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-20-사랑을-위해-저지른-가장-정신-나간-짓.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-20 사랑을 위해 저지른 가장 정신 나간 짓.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 20 May 2025 15:03:00 GMT</pubDate></item><item><title><![CDATA[2025-05-17 어떤 향기가 나는 사람이 되고 싶어]]></title><description><![CDATA[
"나는 오늘 _ 을(를) 제거했다. Today you got rid of __." 어떤 향기가 나는 사람이 되고 싶어? 에전에 금연을 할 적에 집에 들어 오면 담배쩐내가 그렇게 나곤 했다.
집안에서 담배를 핀 것도 아닌데 내 손길이 닿는 곳곳마다 이미 담배 냄새가 엄청나게 베어 있던 것이다.
내게 나는 냄새가 평소에 얼마나 지독했겠는지 생각이 드는 한 편, 나쁜 것을 가까이 하면 지울래도 지울 수 없는 그런 냄새들이 따라다는 것이어서 나의 모든 나쁜 습관들과 부족한 언행들이 아마도 환경과 나의 마음가짐에서 비롯됨을 짐작했다.
나는 담배와 술로부터 내가 얼마나 유혹에 약한 인간인 지를 배웠고, 또 의지가 약한 사람이란 걸 배웠다. 그러므로 이후로는 유혹이 있는 곳을 멀리 했고, 아무래도 더 나쁜 환경에 속하는 것만은 다행히 막아냈지 싶다. 그러나 내가 나의 냄새를 못 맡는 것은 늘 불안하기 짝이 없는 일이라, 지금 내게 풍기는 냄새가 여전히 꽤나 불쾌할까 염려하는 맘이 종종 들곤 한다.
방향제를 사고 향수를 살 적마다 제 발 저리듯 드는 생각이 하나 있다.
아무리 감추고 감출래도 썩은 냄새는 감춰지는 것이 아닌데,
나는 뭐하러 무던히 감출 수도 없는 것들을 감추고 살자며 노력했는지.
내가 했어야만 하는 것은 단지 내 몸과 마음을 청소하는 일 그 하나 뿐이었는데.
오늘의 '생각을 자극'하는 글귀
"멀리서 볼 때는 재능이, 가까이에서는 인성이 중요하다.
멀리에서 볼 때 우리는 재능을 동경하지만 가까이에서 볼 때는 인성이 가장 중요하다. 좋은 인상을 남기기 위해서는 능력만으로 충분하지만, 신뢰를 얻기 위해서는 대의를 위해 나서는 모습이 필요하다. 다른 사람에게 친절하고 진정성을 지키며 살아가는 것보다 더 큰 성취는 없다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-17-어떤-향기가-나는-사람이-되고-싶어.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-17 어떤 향기가 나는 사람이 되고 싶어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 19 May 2025 12:48:19 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 17주차 회고]]></title><description><![CDATA[ “백만장자 시크릿”을 완독했다.
독서노트를 적으려고 보니 책 정보를 읽어 오는 플러그인이 작동하지 않는다는 게 생각난다.
모든 오픈 소스의 운명이 그렇듯 유지보수가 멈추면 라이프 사이클이 멈추기 마련이다.
어떤 API로 만들면 유지보수가 필요 없이 오래 사용할 수 있을까 고민했고, 최근에는 네이버API를 보고 있다.
부트캠프 다른 팀에서 사용한 걸 봤는데 오랫동안 수정 없이 사용만 가능하다면 뭐라도 좋긴 할 거 같다.
이런 것은 사실 아무런 쓸모 없이 이야기이고 내가 책에서 얻은 바가 무엇인가를 설명하자면,
짧게 요약한 노트 안에 모든 게 담겨 있다.
작은 것부터 관리하라.
선언하라.
실행하라.
한 권의 책에서 얻을 실용적 지식은 사실 많지 않을 수도 있다. 결과적으로 어떤 지혜를 얻었는가가 책을 읽은 보람의 지표로써 작동할 것인데, 대부분 이미 아는 이야기를 읽었더라도 나의 마음은 한결같다. 한 사람의 인생을 압축한 책에서 내가 할 것은 그저 하나의 지혜를 얻는 것이다.
배움은 곧 투자와 같고 그 투자로부터 얻는 것이 생긴다는 걸 경험할 수록 사람은 더욱 배움을 갈구하게 된다. 배움은 항시 있어야 하고, 그 배움으로부터 기회가 생긴다.
가만히 기회를 기다리는 사람은 영영 준비되지 않으므로 기회를 만날 기회조차 박탈 당하는 것이다.
아무렴 꽤나 재밌고 뜻 깊게 읽은 책이니 다른 사람들에게 추천할 법도 하다.
그러나 소용 없는 소리를 사명을 가지고 떠벌리는 버릇은 없어서 준비가 된 사람들에게만 조용히 추천해 줄 만 한 생각을 가지고 있다.
가치를 모르는 사람에게 주어진 값진 것은 쓸모없는 것과 다를 바 없다.
더군다나 나 또한 가치를 온전히 아는 사람이라기엔 의심스러운 부분이 많아서 대놓고 홍보하기엔 회의적인 부분이 많다.
SW 부트캠프:
이래저래 여러가지 자동화 시스템을 많이 만들었다.
가장 보람 있는 것은 Husky+Lint-staged+Spotless 통합으로 코드 컨벤션을 강제하는 일이었는데,
코드 리뷰를 볼 때 왠지 모를 아름다움이 느껴져서 재밌다.
개성을 사랑하는 게 본디 예술이라고 한다면,
규칙은 절제된 균형의 아름다움이다.
극과 극은 닮은 것처럼 이 둘은 너무도 닮았기에,
문법을 박살낸 시를 읽거나,
아름다운 코드를 읽거나,
그 둘의 감동을 썩 다를 것도 없다.
CI 테스트 자동화도 해 놓고 보니 이것저것 시도해볼 수 있는 게 참 많다는 시야가 열린다.
주말 내내 개발을 열심히 해 놓고, 나머지는 시스템에 투자하고 있다.
사실 시스템에 대한 반응을 보는 것을 더 즐기고 있는데 아직까진 팀원들에게 큰 저항이 없는 거 같다.
이래저래 요구치가 높아지면 아무래도 짜증을 낼 수도 있겠지만! 목표: 루틴 지키기 진짜로.
결과: 못했다. 알림 등록하기 &amp; 작은 것부터 관리하기를 새로 정리해서 실행해 볼 예정. 실패한 건 실패한 거고, 달리 고쳐볼 생각을 하면 된다.
<img alt="Pasted image 20250519205517.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250519205517.png" target="_self"><br>
<img alt="Pasted image 20250519205554.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250519205554.png" target="_self">
맨날 술을 마시면서도 할 일은 다 했다. 계획을 빡빡하게 잡으면 술을 안 먹을 줄 알았더니 점점 일하는 속도만 빨라진다. 여러가지 일을 하고도 시간이 남는다. 이건 좋은 건지 안 좋은 건지 알 수가 없다. 루틴 못하고 술을 계속 마신 것. 누누히 스스로에게 말하지만 섣부르게 판단하지 말자.
알지 못한다는 것을 알기 위해 항상 공부해야 한다. 잘못하고 있는 게 문제가 아니라, 고치려는 노력을 안하니까 문제인 거다. 아무튼 내 노력이 빛을 볼 날이 오기를. 목표: 루틴 지키기. 2차전 간다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-17주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 17주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 19 May 2025 12:22:43 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250519205517.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250519205517.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-05-19 주변인의 죽음 중 가장 슬펐던 사람, 오랫동안 기억에 남는 사람]]></title><description><![CDATA[
"주변인의 죽음 중 가장 슬펐던 사람은? Who is the person in your life who passed away that you mourn the most?" 어머니가 돌아가셨을 때,
가장 친한 친구가 죽었을 때,
많이 울었고, 정말 많이 울었는데,
사람이 죽는 것에 익숙해 질 때도 됐지 않냐는 얘기를 들은 기억이 난다.
그런 것이 어떻게 익숙해 질 수 있는지 여전히 알 수가 없다. 오랫동안 기억에 남아 있는 사람은 누구야? 사실 이건 너무 많은 사람들이 떠오르는 것이라,
하다 못해 내가 만나지 못한 인물도 기억에 강하게 각인된 사람들이 있다 보니
한 둘로는 추리기가 어렵다.
좋은 사람들이 많다는 증거이고,
배울 사람들이 많다는 얘기기도 하다.
단지 하나를 배워도 스승으로 삼을 수 있는데 세상에는 정말 얼마나 많은 가르침이 있는가 생각하자니 도저히 가늠이 안된다.
둔재인 사람으로 여전히 하나를 배우기도 어렵다.
오늘의 '생각을 자극'하는 글귀
"글쓰기는 생각의 도구이다.
글은 아이디어가 떠오른 후에 쓰느 것이 아니다. 일단 글을 ㅡ다 보면 흐릿했던 생각이 점점 통찰로 발전한다. 생각을 말로 바꾸면 논리가 날카로워진다. 머릿속에서는 애매모호하던 것도 종이 위에서는 명확해진다. 소질이 없다는 생각으로 글쓰기를 멀리하지 마라."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-19-주변인의-죽음-중-가장-슬펐던-사람,-오랫동안-기억에-남는-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-19 주변인의 죽음 중 가장 슬펐던 사람, 오랫동안 기억에 남는 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 19 May 2025 11:49:33 GMT</pubDate></item><item><title><![CDATA[2025-05-16 무슨 요일을 좋아하는지]]></title><description><![CDATA[
" 무슨 요일을 가장 좋아하는가? 그 이유는? What is your favorite day of the week and why?" 매일 매일을 좋아한다. 특별히 더 좋고 덜 좋은 날이 없다.
일을 하는 것도 재밌고 쉬는 것도 재밌다.
어느 순간부턴 재밌는 일만 하고 살아도 아직 먹고 살 만한 걸 보니 이 또한 축복 받은 일이지만,
재미를 느꼈기에 그렇게 된 듯도 하다.
지지자는 불여호지자요, 호지자는 불여락지자니라.
이런 말을 오래 전부터 들은 듯도 하다.
그러나 공자의 오랜 격언을 그다지 동의할 수 없는 하나의 이유가 있다면,
나는 지금 술에 잔뜩 취한 나의 무기력한 모습을 증거로 댈 수 밖에 없겠다. 인생의 첫 터닝 포인트는?
오늘의 '생각을 자극'하는 글귀
"쉼을 아는 사람만이 세상을 바꿀 수 있다.
휴식은 시간 낭비가 아니다. 삶의 질을 높이는 투자다. 여유는 게으름이 아니다. 에너지의 원천이다. 재충전은 일탈이 아니다. 주의력을 다시 집중할 수 있는 기회다. 놀이는 시시한 활동이 아니다. 연결과 창의성으로 가는 길이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-16-무슨-요일을-좋아하는지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-16 무슨 요일을 좋아하는지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 16 May 2025 15:55:54 GMT</pubDate></item><item><title><![CDATA[2025-05-15 성취감이 컸던 일, 주로 돈을 사용하는 곳]]></title><description><![CDATA[
"지금까지 이룬 것 중 성취감이 가장 성취감이 컸던 일은? What do you consider to be your biggest achievement?" 언제나 타인의 기준이 아니라 내 기준을 만족시키는 게 행동의 목적이었기 때문에,
성취감이 있는 일이라곤 딱히 꼽을 게 없는 것 같다.
칭찬을 받거나, 상을 받거나, 특별한 타이틀을 얻거나 하는 모든 외적 기준을 무시하면서 살다 보니 이력서를 쓰는 게 언제나 고역이다.
그러나 하고 싶은 걸 했고, 해야 하는 걸 했고, 정말 하지 말아야 하지 않은 것들을 하지 않았다.
내가 이렇게 떳떳하게 떠들 수 있는 게 아마 내가 이룬 가장 큰 성취가 아닐까 생각이 든다. 주로 어디에 돈을 쓰는 편이야? 배우는 데는 돈을 아끼지 않는 편이고, 특별한 학위나 자격을 얻는다든가 하는 실용적인 목적보다는 본질에 깊게 닿아 있는 것들에 대해 배우는 편이다.
현대에는 워낙 좋은 책이 많아서 특정 분야들은 배우는 비용이 큰 부담이 없다. 그러나 여전히 폐쇄적인 분야, 특히 산업기술 등에 관한 것은 돈을 쓰지 않으면 얻을 수 있는 게 한정적이다.
AI 덕에 바이브 코딩과 같은 용어들이 등장했고, 개발 분야의 벽이 많이 허물어지고 있는 것을 보면서 드는 생각이 있다.
기술 중에서도 특히 인간을 이롭게 하는 정보는 오픈 소스가 베이스가 되야 한다는 생각을 한다. 그리고 또 그런 정보는 오픈 소스로 노출되선 안 된다는 모순이 내면에 촉발된다. 결국 노파심이 들 수 밖에 없는 이유는 정보의 범람과 필연적으로 생길 수 밖에 없는 혼란을 저울질하는 데 실패했다는 뜻이고, 문자 그대로 나는 그런 것을 정확히 예측할 능력이 없다.
그러므로 알 수 없는 것을 위해 고민하였으니 내 오늘의 고민이 쓸모 없었냐고 한다면 그런 것 만은 아니다.
우리는 우리의 삶을 관통하는 주제의 심오함을 간혹 잊는 경우가 있다.
사회의 근원적인 부분에 헌법이 있는 것처럼, 인간의 삶에는 철학이 있고,
철학의 뿌리는 바로 사유한다는 고유 행위 본질을 기틀로 한다.
이유는 심판의 판단 근거이지만, 행위는 결과를 낳는다.
오늘의 '생각을 자극'하는 글귀
"야심찬 목표에 도달하지 못해도 수용 가능한 결과에 도달한다면 괜찮다.
야심 찬 목표는 성공 가능성을 높이지만 스스로 실패자라고 느낄 확률도 커진다. 해결책은 두 가지 목표를 세우는 것이ㅏㄷ. 야심 찬 목표와 수용 가능한 결과. 야심 찬 목표에 도달하지 못해도 수용 가능한 결과에 도달한다면 실패한 게 아니다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-15-성취감이-컸던-일,-주로-돈을-사용하는-곳.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-15 성취감이 컸던 일, 주로 돈을 사용하는 곳.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 15 May 2025 14:12:01 GMT</pubDate></item><item><title><![CDATA[2025-05-14 좋아하는 영화]]></title><description><![CDATA[
" 마지막으로 참석한 모임은? What was the last meet-up or gathering that you've attended?" 좋아하는 영화는 뭐야? 왜 좋아해? " Schindler's List
우연히 보게 된 영화인데 그냥 명작 추천이나 받아서 가볍게 시청한 게 계기였던 거 같다.
예술이란 대게 어중간한 것이 없다.
절제 혹은 폭발. 양쪽 어딘가에 속하지 않으면 마치 출신을 의문 받는 운명인 것처럼 끊임없이 ‘다름’을 증명하지 않으면 제 존재에 대한 부정이 있는 것 마냥.
나의 취향이 절제된 예술인 탓에 절제할 수 없었다.
영화가 상영되는 내 모니터 속에는 극도로 절제된 감정선이 있었고,
그 덕에 터질 것 같았던 심장은 끝내 터지지 않고 이윽고 머리에 닿아 터지고 말았다.
지금 다시 떠올려 보자면,
생각과 생각과 생각이 부풀어 오르던 뇌내 압력이 그나마 해소될 수 있었던 건,
빨간 옷을 입은 소녀.
그 소녀 때문이 아니었을까.
오늘의 '생각을 자극'하는 글귀
우리의 취약성이 회복탄력성을 강화해줄 수 있다.
취약성은 회복탄력성의 반대말이 아니다. 오히려 회복탄력성을 강화하는 역할을 한다. 완벽함을 투영하면 자존심을 지킬 수는 있지만 사람들을 차단하고 성장을 가로막는다. 반면 애쓰는 모습은 겸손함과 인간성을 보여주고 힘과 지지로 이어진다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-14-좋아하는-영화.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-14 좋아하는 영화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 14 May 2025 16:12:00 GMT</pubDate></item><item><title><![CDATA[2025-05-13 꾸준히 기록하는 것]]></title><description><![CDATA[
"오늘 나에게 애정을 보여준 사람은? Who showed you affection today?" 어떤걸 적는 편이야? 꾸준히 기록하는 게 있어? 하루의 활동, 공부, 일 등 모든 것에 대해 기록하고 학습하거나 독서한 것에 대한 기록을 남긴다. 김익한 교수님의 메모 방법에서 착안한 방식으로 기록을 하고 있고, 기록을 바탕으로 내 활동에 대한 통계를 보여주는 대시보드를 만들었다. 매 주 일요일마다 이 대시보드를 보면서 회고를 한다.
시간 관리의 일환으로 시작한 일인데 솔직히 효과가 너무 탁월해서 많은 사람들에게 추천하고 있다. 예전에는 일 + 술 뿐인 인생을 살았는데, 이제는 일 + 독서 + 공부 + 술 + 운동 무려 3가지나 더하면서 살고 있다. 더 부지런해졌다는 생각은 없다. 이전과 같이 술로 낭비하는 시간이 많은데, 계획을 하고 시간을 효율적으로 사용하다 보니 더 많은 일을 할 수 있게 된 거 뿐이다.
이제는 정말 술을 그만 쳐먹어야 하는데 왜 이게 이렇게 힘들까.
사람이 변하면 금방 죽는다던데 죽지 않기 위한 발악일 수도?(라는 합리화)
오늘의 '생각을 자극'하는 글귀
"자의식이 강하고 진실한 사람은 평판을 거울철머 여긴다.
다른 사람들의 생각을 너무 무시하면 생각이 없어 보인다. 반대로 지나치게 신경 쓰면 진정성이 없어 보인다. 자의식이 강하고 진실한 사람들은 평판을 거울처럼 여긴다. 매일 거울을 보듯 자신의 모습을 확인하되 그것만 쳐다보지는 않는 게 좋다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-13-꾸준히-기록하는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-13 꾸준히 기록하는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 13 May 2025 14:10:38 GMT</pubDate></item><item><title><![CDATA[프론트엔드 프로젝트 평가_4조]]></title><link>https://64etuor.github.io/500_resources/prompt-engineering/프론트엔드-프로젝트-평가_4조.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/프론트엔드 프로젝트 평가_4조.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 12 May 2025 09:21:22 GMT</pubDate></item><item><title><![CDATA[Vibe Coding Playbook 001]]></title><link>https://64etuor.github.io/500_resources/prompt-engineering/vibe-coding-playbook-001.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/Vibe Coding Playbook 001.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 12 May 2025 02:21:52 GMT</pubDate></item><item><title><![CDATA[2025-05-12 현재 탐구하는 분야, 과거의 나에게 하고 싶은 말]]></title><description><![CDATA[
"현재 탐구하고 있는 분야가 있다면? What are you exploring these days? 나라는 인간의 취약성에 대해 탐구하고 있다.
루틴을 잘 이어 나가지 못하고 있기 때문에 강구할 수 있는 조치를 여러 모로 생각 중이다.
그럴 듯한 조치가 아니라 실질적으로 효과가 있는 조치가 필요하다.
논리적이고 합리적인 조치 외에도 시도해 볼 수 있는 다양한 방법을 찾아 보고 있다.
나 자신이 논리적이고 합리적인 인간이 아니니 해법 또한 그런 방향일 수도 있다는 추측을 가진 것인데, 이건 무슨 또 해괴한 민간요법 씨부리는 소린지 나도 잘 모르겠다.
아무튼 모로 가도 서울만 가면 되니 할 수 있는 건 다 해보겠다.
<img alt="Pasted image 20250512104823.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250512104823.png" target="_self"> 과거의 너에게 하고 싶은 말이 있다면 써 봐!
오늘의 '생각을 자극'하는 글귀
생각의 속도가 느리다고 해서 생각의 깊이도 얕은 것은 아니다.
우리는 빠르고 얕게 생각하는 사람들의 말에만 귀를 기울이고, 느리고 깊게 생각하는 사람들에게 귀를 기울이지 않는다. 재빠르게 판단하고 대응하는 모습이 똑똑해 보일 수느 있지만 반드시 지혜롭다는 뜻은 아니다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-12-현재-탐구하는-분야,-과거의-나에게-하고-싶은-말.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-12 현재 탐구하는 분야, 과거의 나에게 하고 싶은 말.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 12 May 2025 01:48:56 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250512104823.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250512104823.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[한화 BEYOND SW부트캠프 16주차 회고]]></title><description><![CDATA[ 뭔가 실속이 없는 한 주였다.
술을 매일 마시고 루틴도 꼬였다.
이게 매번 같은 패턴이라 핑계 대기도 지겹다.
그나마 장점이라고 할 것은 매 순간 솔직한 것이고,
그러나 그 장점이 되는 순간은 솔직하게 단점을 단점으로 인정하니 스스로에게 가지는 정신적 타격이 없다는 것이다.
오히려 나는 원래 이런 사람이었다는 안도를 느낀 달까.
어쨌거나 방법을 찾기까지는 계속 이것저것 시도해 볼 요량이라 서두르는 느낌은 없으면서도,
이렇게 안일하게 대처하는 게 맞는가 싶은 의구심도 살짝 저기 의식 밑의 깊은 심연에서 솟아 나오기도 하는 것이라.
응급 처방이 필요한 건 정신과 육신 양쪽이 모두 해당하여서 이건 도대체 병 주고 약 주는 쪽이 어느 쪽인지 분간이 가질 않는다.
암만 봐도 쌍방으로 병균을 옮기는 게 맞다.
SW 부트캠프:
<img alt="Pasted image 20250511231214.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250511231214.png" target="_self">
프로젝트 회고라고 쓴 내용이다.
짜증이 섞이고 논리가 허접스럽고 봐줄 법한 것이 없다.
사실 쓴 직후에 내용의 오류가 너무 많아서 고치려다가 관뒀다.
그냥 나는 짜증이 난 게 맞고 그나마 점잖게 풀자고 노력한 기미가 보이는 것만도 다행으로 생각한다.
또 직전에 글을 쓴 것이 생각났는데, 또 말만 앞서고 스스로 실천하지 못한 데에 대한 반성이 앞선다.
존중은 참으로 어렵다. 매번 합리화만 하는 스스로에게 무한한 경멸을 바친다.
얼마나 더 노력해야 되는지 감이 안 온다.<br>
<img alt="Pasted image 20250511231845.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250511231845.png" target="_self"> 목표: 프로젝트 마무리. 기록할 만한 경험 하나 꼭 남기기.
결과: 기록할 만한 게 무엇인지 정의를 먼저 내려야 한다는 말로 이번 주의 결과를 합리화하겠다.
<br><img alt="Pasted image 20250511225927.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250511225927.png" target="_self">
없다 또 자꾸 망가진다. 루틴 좀 잡자. 이번 주에도 나는 똥멍청이였다. 솔직히 이런 솔직한 기록을 남기는 게 오히려 후대에 도움이 될 거라는 생각을 무진장하고 있긴 함. 목표: 루틴 지키기. 진짜로.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-16주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 16주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 11 May 2025 14:22:33 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250511231214.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250511231214.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-05-11 다른 사람에게 기억되고 싶은 모습]]></title><description><![CDATA[
" 최근에 한 가장 창의적인 일은? What's the most creatie thing you've done recently?" 다른 사람에게 어떤 사람으로 기억되고 싶어? 아무래도 좋다고 생각한다.
남이 날 어떻게 생각하는 지 관심은 없지만,
내가 생각하는 나의 현재에는 관심이 있다.
나는 나에게 항상 엄격하고 준엄한 잣대를 들이 대는 일에 익숙하고,
내가 성장하는 속도보단 그 준엄한 기준이 높아지는 속도가 빠르기 때문에,
내 안에서 나는 항상 모자란 사람이다.
따라서 스스로 모자라다고 느낀다는 건,
역설적으로 내가 성장하다고 느끼고 있는 것과 다를 게 없다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-11-다른-사람에게-기억되고-싶은-모습.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-11 다른 사람에게 기억되고 싶은 모습.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 11 May 2025 13:51:12 GMT</pubDate></item><item><title><![CDATA[2025-05-10 오늘 하루를 어떻게 시작했는지, 가장 최근에 연락한 사람]]></title><description><![CDATA[
오늘 하루를 어떻게 시작했는가? How did you start your day 프로젝트 하나가 끝났고 다른 프로젝트를 준비하고 있다. 항상 미리 준비해 놓는 게 습관이라 노션과 지라, Github Action 기본 세팅을 해 놓고 있다. 오늘 아침에 일어나서는 지라와 디스코드 봇 세팅을 했다. 항상 똑같은 일을 반복하는 게 아니라 매번 조금씩 발전시켜가는 게 재밌다. 대충 만든 봇 스크립트다 보니 대충 도커 컨테이너에 깃 연동만 해놨는데 대충 짠 개떡같은 코드라 주기적인 업데이트가 필요할 거 같다. 이것저것 하다보니 늘어난 컨테이너를 관리해야 할 필요성을 느꼈다.
아침에 일어나자마자 일 생각부터 난 게 좋은 징조인지, 아닌 징조인지 알기가 어렵다. 알 지 못하면 좋은 쪽으로 생각하면 된다. 아주 좋은 징조다.
그 후에도 아주 뜻 깊고 좋은 일이 많았다는 사후분석이 이유인 것은 아니다.
그냥 그렇게 믿는 것이 내 스스로에게 유리하기 때문에 그런 것이다. 가장 최근에 연락한 사람은 누구야?
오늘의 '생각을 자극'하는 글귀
여성에게 권한을 부여하지 않으면 힘을 실어줄 수 없다.
고정관념을 깨뜨리려면 먼저 유리천장을 부숴야 한다. 기업에서 여성이 리더로 승진하면 여성은 더 이상 돌봄의 주체가 아니라 유능한 존재로 비칠 수 있다. 여성에게 권한을 부여하지 않으면 실제로 힘을 실어줄 수 없다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-10-오늘-하루를-어떻게-시작했는지,-가장-최근에-연락한-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-10 오늘 하루를 어떻게 시작했는지, 가장 최근에 연락한 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 10 May 2025 13:49:46 GMT</pubDate></item><item><title><![CDATA[2025-01-03 현재 읽는 글이나 책, 아침에 일어나서 하는 일]]></title><description><![CDATA[1.&nbsp;"현재 읽고 있는 글이나 책이 있다면? What are you reading right now?" 위대한 사람은 다르게 생각하고 다른 생각은 새로운 답을 찾아낸다. 세컨드 브레인을 더베러 커뮤니티 사람들과 함께 읽고 있다. 북클럽은 다양한 관점을 만나기 위한 최적의 사교 모임이라고 생각한다. 의외로 중장년 남성분들이 많이 참석하셔서 좀 놀랐고,(이전에 여러 독서 모임을 할 때는 한 번도 겪지 못한 일이다.) 사람들이 조리 있게 말을 너무 잘해서 또 놀랐다. 배울 점이 참으로 많은 모임이다. 이번 독서에서 밀리의 서재 하이라이트와 메모 기능을 처음 사용해 봤는데 나의 생각을 정리하는데 큰 도움이 된다. 왜 추출 기능을 안 만들어 놔서 js 코드를 돌리게 만드는지는 의문이지만… 여하튼 이전까지는 메모를 하는 습관이 거의 없었는데, 2025년에는 나의 기록 관리를 정식으로 시작하는 첫 해이니만큼 잘 출발하길 바란다. 아침에 일어나서 가장 먼저 하는 일은 뭐야? 아침에 하는 일을 알려줘 아침에는 제일 먼저 하루의 계획을 짠다. 김익한 교수님의 메모 작성법 유튜브를 모티브 삼아 만든 앱으로 내 하루를 계획하고, 또 기록하고 있는데 이제 7일차긴 하지만 확실히 내 삶이 달라지고 있다는 체감이 된다. 기록 데이터를 바탕으로 만든 대시보드와 스케쥴을 참고해서 계획을 짜는데 내 하루가 정말 알차게 채워지는 느낌이다. 할 일의 시간을 정확히 정해 두고 짜는 계획은 거부감이 컸는데 김익한 교수님이 제시한 방법은 정말 나에게 꼭 들어 맞는다. 2025년에는 게으름이 꽤나 줄어들 거란 확신이 생겨서 기분이 좋다.
오늘의 '생각을 자극'하는 글귀
위대한 사람은 남들과 똑같이 생각하지 않는다. 그들은 다른 생각을 장려한다. 우리는 같은 원칙 안에서 다르게 생각하는 사람들에게 가장 많이 배운다. 가치관이 비슷하면 비슷한 질문이 이어지고, 관점이 다르면 새로운 답으로 이어진다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-03-현재-읽는-글이나-책,-아침에-일어나서-하는-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-03 현재 읽는 글이나 책, 아침에 일어나서 하는 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 10 May 2025 12:05:30 GMT</pubDate></item><item><title><![CDATA[2025-05-09 오늘 해야 할 일 중 미루고 싶은 일]]></title><description><![CDATA[
오늘 해야 할 일 중 미루고 싶은 일이 무엇인가? Among the things on your to-do list today, what do you want to postpone? 오늘 해야 할 일 중에 미루고 싶은 일은 딱히 없다.
해야 할 일을 마감을 넘기거나 미루지 않기 위해서 계획 관리와 시간 관리를 하고 있다.
일단 할 일을 계획으로 잡아 놓으면 의무감을 가지고 마치는 편이다.
마침 오늘은 미루고 있던 민방위 교육을 시청한다. 아직까지 마감기한까지 2달이나 남아 있지만 하루 일과에 여유가 생기면 해야 하는 일을 미리 앞당겨서 진행하고 있다. 마침 또 하나의 프로젝트가 끝나고 간만에 여유가 찾아 와서 뒤로 밀려 있던 일들을 처리하고 있다.
시간 관리와 계획 관리를 하면서 내가 일을 미루는 패턴을 발견했다.
하기 싫은 일의 계획을 하루의 마무리 시간인 저녁 이후에 배치하면 계획을 이행하지 않고 넘기는 비율이 압도적으로 높았다. 하기 싫을 일을 먼저 할 수 있도록 오전이나 오후에 배치하고, 내가 즐겁게 할 수 있는 일이나 저항이 없는 일을 저녁에 하도록 배치하니 계획 이행율이 근 100%에 가까워 졌다.
내 활동에 대한 데이터를 관리하기 시작하면서 나에 대해 더 많이 알아가고 있고, 계획의 중요성을 절실하게 깨닫고 있다.
계획 수립과 이행 싸이클을 반복하면서 생긴 효율 향상이 눈에 띄게 체감되는 편이다.
관리의 효과를 톡톡히 보니 살짝 더 욕심을 났고, 때문에 아이캔대학을 등록했다.
현재는 김익한 교수님의 강의를 수강하면서 생기는 자잘한 노하우를 내 시간관리에 조금씩 접목시키고 있다. 첫 입에 배부를 수 없다고 실천이 가능한 작은 것부터 순차대로 적용해 보고 있는데 일단은 해보고 나에게 안 맞는 관리 방법이라고 판단되면 과감히 버리거나 내 몸에 맞게 재단하면 그만이다.
아이캔대학을 마치고 나면 나에게 꼭 맞는 맞춤 옷 같은 관리 시스템이 완성될 것 같아서 기대가 크다. 부모님은 돈에 대해 어떤 태도를 가지셨어?
오늘의 '생각을 자극'하는 글귀
중요한 사람이 되고 싶다면 성장의 속도를 높여야 한다.
커리어에서 자존감은 다음 단계를 거쳐 진화한다.
1단계: 나는 중요하지 않다.
2단계: 나는 중요하다.
3단계: 나는 중요한 일을 하고 싶다
세 번째 단계에 빨리 도달할수록 더 많은 성공을 거두고 더 큰 영향력을 발휘할 수 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-09-오늘-해야-할-일-중-미루고-싶은-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-09 오늘 해야 할 일 중 미루고 싶은 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 09 May 2025 03:37:59 GMT</pubDate></item><item><title><![CDATA[Clean Code 클린 코드：애자일 소프트웨어 장인 정신]]></title><description><![CDATA[나의 요약
1장에서는 클린 코드 작성을 위한 구체적인 코드 작성 테크닉보다는 전반적인 철학과 태도에 가까운 내용이 많습니다. 저자는 클린 코드가 ‘왜’ 필요한지 역설하며 독자들이 그 맥락을 이해할 수 있도록 다양한 예시를 제공합니다.
개인적인 의견이지만 이 맥락, 즉 클린 코드가 필요한 이유를 이해하는 것은 다른 무엇보다 중요합니다. 제 실생활에서의 경험을 예로 들어 보죠.
저는 항상 집을 깨끗하게 유지하는 것을 좋아합니다. 제 방을 본 사람들은 제가 청소를 자주 한다고 생각하죠. 물론 예전에는 청소를 자주 했습니다. 그렇게 청소를 자주 하다 보면 청소를 효율적으로 하는 능력이 분명 올라갈 겁니다. 그러나 그보다 더 좋은 이점이 있습니다. 바로 ‘애초에 어지르지 않는 습관’을 얻게 된다는 것입니다. ‘대청소’라는 거창한 작업을 주기적으로 하는 것보다도, 일상 생활에서 작은 단위로 시행하는 정리 정돈과 청소가 훨씬 낫습니다.
이런 관점에서 코드를 계속 리팩토링하고 더 ‘깨끗하게’ 유지하는 노력에 대해 다시 생각해 봅시다. 책에서 설명한 여러 가지 이점이 있을 겁니다. 작성한 코드에 가독성, 단순성, 테스트 가능성, 유연성 등을 부여하는 멋진 작업이죠. 그러나 그 노력 이면에 담긴 또 하나의 끝내주는 장점은 ‘애초에 나쁜 코드를 만들지 않는 습관을 기른다’는 것입니다. 최소한으로 어지르고 금방 정리하는 습관이 들면 나의 ‘나쁜 코드’에 대해 ‘대청소’를 감행할 심리적 부담과 업무적 부담을 줄일 수 있습니다. 핵심 개념 깨끗한 코드(Clean Code)란? 읽기 쉽고, 변경이 용이하며, 버그를 발견하고 수정하기 쉬운 코드. 나쁜 코드(Bad Code)란? 가독성이 떨어지고, 중복과 불필요한 복잡도가 많아 수정 및 확장이 어려운 코드. C++의 창시자로, “코드는 인간이 읽기 위해 작성하고 우연히 컴파일러가 실행하는 것”이라고 강조합니다.
깨끗한 코드는 “가독성”과 “명료함”을 중시해야 하며, 이는 유지보수성과 직결됩니다. 객체지향 소프트웨어 공학 선구자.
깨끗한 코드를 작성하기 위해서는 “설계 원칙과 일관성”이 매우 중요하다고 역설합니다. “실용주의 프로그래머”의 저자로 유명.
깨끗한 코드란 테스트가 잘 되어 있고, 반복되는 패턴이 최소화되어 있으며, 코드 자체가 문서 역할을 할 수 있어야 한다고 말합니다. 나쁜 코드는 시간이 지날수록 유지보수 비용을 기하급수적으로 증가시킵니다.
코드가 복잡해질수록, 수정 시 도미노처럼 다른 부분에 영향을 미칩니다.
깨끗한 코드는 이러한 문제를 사전에 예방하여, 개발 팀이 더 많은 기능 개발과 개선에 집중할 수 있게 합니다. 여러 사람이 함께 작업하는 대규모 프로젝트에서, 팀원 간 코드 이해가 곧 생산성으로 직결됩니다.
명확하고 표준화된 코딩 스타일, 간결한 함수와 클래스 구조는 코드 리뷰와 협업 과정에서 갈등이나 실수를 줄여줍니다. 버그가 적고 유지보수가 빠른 코드는 제품 품질을 높이고, 궁극적으로 사용자 만족도로 이어집니다.
단순히 외관이나 기능만이 아닌, 코드 레벨에서의 높은 완성도가 프로젝트 전체 신뢰도를 올립니다. 의미 있는 이름 사용: count 대신 numOfActiveUsers처럼 의도를 명확히 드러내는 변수명, 함수명.
적절한 함수 크기: 한 함수가 너무 많은 일을 하지 않도록 분리.
명확한 주석: 주석은 코드를 보완하거나 상황을 예외적으로 설명할 때만 사용. 불필요한 장황한 주석은 오히려 해가 됨. 복잡한 로직을 작은 단위로 쪼개어 이해하기 쉽게 구성.
중복(Duplication)을 최소화(DRY 원칙 - Do not Repeat Yourself).
DRY를 포함한 소프트웨어 개발 3대 원칙 KISS ( Keep It Simple, Stupid) : Keep It Short and Simple, Keep It Small and Simple 비슷한 여러 맥락으로 이해할 수 있습니다. 간단하고 단순한 결과물이 좋다.는 의미입니다. 설계나 코드가 불필요하게 장황하거나 복잡해지지 않도록 주의할 필요가 있습니다.
YAGNI ( You Ain’t Gonna Need It) : 야근 아닙니다. 필요한 작업만 하라.가 이 원칙입니다. 당장 필요하지 않은 코드를 미리 구현해 둠으로써 예기치 않은 문제가 발생할 원인을 만들지 말라는 의미입니다. 사용되지 않는 기능은 모니터링도 잘 되지 않아서 언제 문제가 터질 지 아무도 모릅니다. 코드 구조를 잘 잡아두면 테스트 코드 작성이 쉬워짐.
테스트 자동화가 가능해지면, 코드 개선 시 빠르게 회귀 테스트를 진행해 품질을 지킬 수 있음. 깨끗한 코드는 변경 요구사항이 생겼을 때, 최소한의 수정으로도 쉽게 대응할 수 있음.
SOLID 원칙(Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)과 같은 객체지향 설계 원칙을 토대로 구현. 개발 속도 저하: 초기에는 빨라 보이지만, 시간이 지날수록 유지보수 시간 증가로 인해 전체 개발 속도가 느려짐.
버그 증가: 복잡도가 올라가면 결합도(coupling) 가 높아져, 한 부분 수정 시 또 다른 문제가 발생하기 쉬움.
프로젝트 실패 가능성 상승: 일정 지연, 비용 초과 등 악순환이 반복되어 프로젝트가 중단될 위험이 커짐.
다음과 같은 기본 태도는 Clean Code를 작성하고 유지하는데에 도움이 됩니다. 지속적인 리팩토링 코드를 작성하는 즉시 깨끗하게 만들기보다는, 계속해서 확인하고 개선하는 과정을 거쳐야 함. 작은 단위로 Commit 큰 단위로 작업 후에 한꺼번에 수정하려 하면 복잡도가 급증하므로, 가능한 작은 단위로 기능을 완성하고 검증. 테스트 주도 개발(TDD)을 권장 테스트 코드를 먼저 작성한 뒤, 요구사항에 맞춰 코드를 구현하면 결과물이 자연스럽게 깔끔해질 확률이 올라감. 코드 리뷰와 협업 팀원 간의 코드 리뷰는 표준화와 지속적 개선에 큰 도움을 줌.
자신이 이해하기 쉬운 코드가 남도 이해하기 쉽다는 보장은 없으므로 리뷰를 통해 보완해야 함. 클린 코드 작성 습관은 제조업, 요리 등 다른 분야의 ‘효율성’과 ‘정돈’ 원리와 맥을 같이 합니다. 모든 효율의 본질은 서로 닮아 있다는 게 느껴지실까요? Lean, TPS(도요타 생산 방식) 불필요한 낭비를 줄이고 지속적으로 개선(Kaizen)을 추구
코드 중복, 쓸모없는 로직, 복잡한 의존관계를 “낭비”로 보고 제거하려는 마인드와 유사 Kaizen(카이젠) 작은 개선을 지속적으로 반복해 큰 변화를 이루는 철학
리팩토링과 점진적 개선을 통해 코드 품질을 높이는 과정과 일맥상통 3정5S 일본의 작업장 환경 개선 방법론
‘정리, 정돈, 청소(3정)’와 ‘정리정돈, 청소, 청결, 습관화, 생활화(5S)’ 등으로 작업 환경을 항상 깔끔하게 유지
코드에서 중복을 제거(정리)하고, 함수와 클래스 구조를 명료하게 설계(정돈)하여, 계속 청결을 유지하는 것과 유사 미장 플라세(Mise en place) 요리사들이 재료와 도구를 미리 준비해 두는 습관
실제 요리에 들어가기 전, 필요한 도구와 재료를 ‘정리·정돈’해 두는 과정으로, 개발 시 요구사항과 테스트, 라이브러리, 환경 설정 등을 미리 준비해두는 것과 같은 개념 “좋은 이름은 작은 설계 문제를 푸는 것이다.” – 로버트 C. 마틴
나의 요약 우리가 직관적으로 이해할 수 있는 UI를 선호하듯, 코드도 읽는 순간 바로 의도를 파악할 수 있어야 합니다. UX 심리학에서는 사용자가 불필요한 인지적 부담 없이 정보를 이해하도록 돕는 것이 핵심 원칙인데, 이는 코드에도 동일하게 적용됩니다.
저자는 “좋은 이름을 짓는 것은 작은 설계 문제”라고 강조하며, 가독성이 뛰어난 코드는 불필요한 주석을 줄이고 협업과 유지보수를 원활하게 만든다고 설명합니다. (코드가 그 자체문서의 역할도 할 수 있어야 한다는 Dave Thomas의 의견이 바로 이 점을 강조하는 것입니다.)
이 장에서는 나쁜 이름이 가독성을 해치는 방식과 함께, 의미 있고 직관적인 이름을 선택하는 구체적인 원칙을 다룹니다. 결국, 코드도 하나의 사용자 경험(UX)이며, 읽는 이가 즉각적으로 이해할 수 있도록 설계해야 한다는 점이 이 장의 핵심입니다.
P.S 추가적으로 이런 원칙을 이해하기 위해서 인지 심리학과 관련된 여러 이론을 습득하는 건 장기적 관점에서 큰 자산이 될 거라고 생각합니다. 코드에서 가장 자주 눈에 띄는 요소가 이름입니다. 변수명, 함수명, 클래스명, 패키지명 등 이름이 끊임없이 등장하죠.
하지만 의미 없는 이름은 가독성을 해치고 협업 효율성을 떨어뜨립니다. 반면, 의도를 명확히 드러내는 이름은 코드 이해를 훨씬 수월하게 만들어 줍니다. 이름에 의도가 드러나지 않으면, 코드를 읽는 사람은 실제 동작을 이해하기 위해 코드 내부 구조까지 깊게 파고들어야 함.
간단한 로직이라도 이름이 불명확하면 의미 파악에 시간이 걸림. 혼동을 야기하는 이름(약어 남용, 의미가 모호한 이름)은 수정 시 의도와 다르게 변경될 위험이 큼.
코드를 분석할 때, 엉뚱한 추측을 하게 만드는 경우가 발생하기 쉬움. 팀 내에서 “이 변수는 뭘 의미하지?”라는 질문이 자주 나오면, 코드 리뷰나 협업 시에 불필요한 마찰이 생김.
동일한 개념을 여러 가지 혼동스러운 이름으로 부르다 보면, 커뮤니케이션 비용이 올라감. 함수명, 변수명에 “왜 존재하는지, 무슨 일을 하는지”가 드러나도록 작성
getActiveAccounts() vs getData(): 후자는 모호해 의도를 알기 힘듦 보통 업계나 프로그래밍 언어에서 특정 의미가 이미 굳어진 단어(temp, obj, data)는 혼동을 일으키지 않도록 주의
list라는 이름을 써 놓고 실제로는 배열(Array) 구조를 쓰거나, accountList라고 했는데 Map인 경우 등이 대표적 여러 개념이 한꺼번에 들어있는 이름은 쪼개서 사용 (예: address 대신 mailingAddress와 billingAddress로 구체화)
이름이 너무 길어지더라도 의도가 뚜렷해지면 오히려 명확성이 올라감 비슷한 역할을 하는 함수나 클래스는 유사한 패턴으로 이름 짓기
getUserById(), getUserByEmail() 같이 명확한 패턴을 사용
단, fetchUser(), retrieveUser()처럼 제각각이면 헷갈릴 수 있음 코드 베이스가 커질수록, 찾기 어려운 이름(예: k, i)을 쓰면 IDE로도 쉽게 검색되지 않음
적절한 키워드를 사용한 이름이면 팀원 전체가 빠르게 검색 가능 도메인 지식 활용 업무(도메인)에 특화된 용어를 적극 활용하되, 해당 용어가 팀 내에서 공통으로 이해되는지 확인 축약보다는 의미 유지 글자 수보다 명확성이 더 중요
calcInt보다는 calculateInterest가 더 이해하기 쉬움 함수 이름에는 동사, 클래스 이름에는 명사 getActiveUserList(), updateAccount() 같이 함수에는 행동을 나타내는 단어를 사용
클래스나 객체에는 User, AccountManager처럼 명사 또는 명사구 발음하기 쉬운 이름 사람 간 구두로 의논할 때도 어렵지 않도록 하며, 머리속으로 읽고 이해하기 쉬운 이름을 선정
genAccRpt 보다는 generateAccountReport가 낫다 의도를 드러내는 단어 사용 flag, temp처럼 의미가 불분명한 단어는 대체하는 것을 권장
예) temp -&gt; temporaryUserData, flag -&gt; isActive 등 리팩토링 과정에서 가장 간단하면서도 효과적인 작업 중 하나가 바로 ‘이름 변경’
이름이 모호하다고 느껴지면 망설이지 말고 변경: 깔끔한 코드를 향한 첫걸음
IDE 리팩토링 기능을 활용하면, 안전하게 여러 위치를 동시에 변경 가능 3장 함수, 4장 주석 등 이후 장들의 내용에서도 이름 짓기는 중요한 역할을 함
예를 들어, 주석으로 설명해야 할 부분을 이름으로 드러내면 주석 자체가 줄어들어 코드가 더욱 간결해짐
함수가 적절한 이름을 갖추면, 그 자체로 동작과 의도를 설명하게 됨 “작고, 단일 목적을 수행하며, 가독성이 높은 함수는 클린 코드의 핵심이다.” – 로버트 C. 마틴
나의 요약 3장은 함수(Functions)를 어떻게 작성해야 클린 코드에 부합하는지 집중적으로 다룹니다.
저자는 “함수는 작고, 한 가지 일만 해야 한다”고 강조합니다. 한 가지 목적을 가진 작은 함수들이 모여 결합도가 낮고 유지보수가 용이한 코드 구조를 만들 수 있기 때문이죠.
이때 객체지향 프로그래밍(OOP)의 모듈화 원칙과도 자연스럽게 연결되는데, ‘모든 것을 함수로 나누려 애쓰기보다, 적절히 클래스로 묶고 역할을 분리하는 것’이 중요합니다. 코드 베이스가 커질수록 ‘짧고 명확한 함수’와 ‘적절히 분리된 객체 구조’가 함께 시너지를 내어 높은 응집도와 낮은 결합도를 달성할 수 있습니다.
결국, 함수가 무엇을 ‘의미’하는지 이름과 내용으로 드러내고, 필요한 만큼만 책임지도록 만들면 전체 코드를 이해하기 쉬워지며 유지보수성이 극대화됩니다.
회사를 떠올려보세요. 한 사람이 기획, 개발, 디자인, 마케팅까지 모두 맡는다면 어떻게 될까요? 업무가 과중되고 실수할 확률이 높아지겠죠. 그 사람이 갑자기 번-아웃이 와서 출근을 못 한다면? 회사의 모든 기능이 마비할 것입니다. 함수도 마찬가지입니다.
결국, 함수는 조직 내 개별 역할을 수행하는 직원(개별 역할만 하는 직원일 수록 AI가 대체하기 쉽다는 말은 안 비밀…)과 같습니다. 적절한 책임을 부여하고, 협업할 수 있도록 구조화하면 전체 코드베이스가 이해하기 쉬워지고 유지보수성이 극대화됩니다. 함수는 프로그래밍의 기본 단위 같지만, 그 형태에 따라 프로그램 전체 구조가 달라집니다.
“함수가 적절하게 작성되었는가?”는 코드 가독성, 유지보수성, 확장성에 걸쳐 엄청난 영향을 미치죠.
그리고 이 함수들이 모여 클래스를 구성하고, 클래스들이 모여 모듈과 시스템을 이룹니다.
‘함수를 잘 짜는 것’은 곧 ‘객체지향 프로그래밍에서 적절히 모듈화하는 것’과도 맥을 같이 합니다. 작다(Small): 한눈에 들어올 정도로 짧고, 하나의 명확한 목적을 수행 의도가 분명하다: 함수명과 내부 로직이 일치하며, 무엇을 하는지 바로 이해 가능 입력 인자가 적다: 최소한의 파라미터로 구성되어, 함수를 사용하는 입장에서 부담이 적음 부수효과(Side Effect)가 없다: 가능하다면 입력값을 바꾸지 않고, 전역 상태를 건드리지 않도록 설계 객체지향 원칙에 부합: 함수가 너무 많은 데이터를 다루거나, 클래스가 맡아야 할 책임을 대신하지 않는지 주의 여러 가지 역할을 동시에 수행: “한 함수 안에 순서가 중요한 로직이 길게 나열”되거나 중복된 로직이 섞여 있음 이름과 내용이 불일치: 함수명은 단순히 calculate()인데, 내부에서 파일 I/O부터 DB 쿼리까지 수행 너무 많은 인자를 요구: 인자 리스트가 길면 길수록 함수 호출부에서 헷갈리기 쉬움 숨겨진 부수효과: 의도치 않게 전역 값 변경, 다른 객체의 상태를 몰래 바꾸어 의도 파악이 어려움 클래스의 역할 침범: 함수가 특정 클래스로 묶어야 할 데이터를 분산 처리하거나, 객체지향 원칙에 반하는 구조 함수를 작게 만들수록, 읽기도 쉽고, 잘못된 부분을 찾거나 수정하기도 편함
“한 함수가 여러 일”을 하는 것 같다면 과감히 분리할 수 있는 지점을 모색 단일 책임 원칙(SRP, Single Responsibility Principle)에 부합
여러 책임이 섞여 있는지 확인: “읽기 + 파싱 + 데이터 검증 + DB 저장”을 한 함수에서 하지 않도록 주의 함수명만으로도 “무슨 일을 하는지” 파악하게끔 작성 (2장에서 학습한 ‘의미 있는 이름’과 연관)
convertFileToJson()처럼 입력 대상과 출력 목적이 함께 드러나면 더욱 명확 인자 3개 이상이면 구조를 재검토 (가독성 &amp; 테스트의 복잡도 상승)
복합 데이터는 객체나 DTO로 묶어 의미를 명확히 표현 반복되는 로직은 별도 함수로 추출해 재사용
중복 로직을 줄이면 수정 시 여러 곳을 동시에 손볼 필요가 없으므로 유지보수성 향상 함수 단위만 깔끔해도 코드는 한결 낫지만, 한 단계 더 나아가 클래스의 응집도(Cohesion) 를 높이는 것이 중요
서로 관련이 깊은 함수와 데이터는 하나의 클래스 안에 배치해 모듈화 하나의 함수가 너무 많은 일을 하고 있다면, 사실상 새로운 객체가 필요한 신호일 수 있음
예: processAllOrders(orders, discountRate, globalConfig) 같은 거대 함수 대신, OrderProcessor 클래스를 만들어 책임을 분산
사례로 보는 책임 분산 <a data-href="Git Checkout의 책임 분산 변화(git 2.23)" href="https://64etuor.github.io/600_tech-stack/git/git-checkout의-책임-분산-변화(git-2.23).html#_0" class="internal-link" target="_self" rel="noopener nofollow">Git Checkout의 책임 분산 변화(git 2.23)</a>
함수는 객체 간의 ‘메시지(메서드 호출)’로 볼 수 있음
협력 다이어그램(Sequence Diagram) 등을 활용해 “어떤 객체가 누구에게 무엇을 요청하고, 어떤 결과를 반환하는지” 시각화하면 책임 분리가 더욱 명확해짐 OrderProcessor 내부 함수들은 “단일 목적(주문 처리)”에 집중하며, 세부 책임(검증, 결제 요청 등)을 필요한 곳에 적절히 위임 함수 인자가 지나치게 많거나(4개 이상) 로직이 방대해지면, 해당 로직에 맞는 클래스/구조체를 고려
비즈니스 로직이 “데이터 + 로직” 형태로 잘 묶여 있다면, 함수보다는 객체 메서드가 더욱 직관적일 수 있음
“함수를 작게, 모듈은 명확하게” 유지하는 것이 객체지향의 궁극 목표 Command: 무언가를 수행(변경)
Query: 무언가를 반환(읽기)
한 함수가 동시에 두 역할을 하면 가독성을 해치고 테스트도 복잡해짐
객체지향 관점에서도, “조회” 메서드와 “변경” 메서드를 구분해 인터페이스를 설계하면 클래스 응집도에 유리 예외 처리 로직이 복잡하다면 별도 함수나 별도 클래스로 분리
코드 길이가 늘어나면 가독성이 떨어지므로, try-catch 블록을 “핵심 로직”과 분리해서 읽기 편하게 정리 함수가 DB, 파일, 네트워크 등 외부 의존성이 많다면, 테스트가 어려워짐
객체지향 원칙을 적용해 인터페이스(Interface)나 추상 클래스로 의존성을 분리하면 Mock 테스트로 빠르게 검증 가능
작고 명확한 함수는 테스트 코드도 간결해짐 함수를 단순히 “로직을 모아놓는 그릇”으로만 보지 않고, 경량 객체로서 생각해볼 수도 있음
예: Strategy 패턴처럼, 특정 기능(함수 로직)을 캡슐화하여 객체로 주입하면, 함수 교체를 유연하게 수행 가능
이렇듯 “함수 자체를 객체화”하는 관점이 코드 확장과 재사용성을 극대화할 때 꽤 유용 “나쁜 코드는 작성자의 사라짐과 함께 의미를 잃지만, 나쁜 주석은 잘못된 정보를 영원히 담고 있을 수 있다.” – 로버트 C. 마틴
나의 요약 4장에서는 주석(Comments)을 어떻게 다루어야 하는지에 대해 중점적으로 설명합니다.
로버트 C. 마틴은 “주석은 필요한 경우에만 사용”해야 하며, 가장 이상적인 상황은 “주석이 필요 없을 정도로 코드 자체가 명확”한 것이라고 강조합니다. 코드를 이해하기 위해 주석에 지나치게 의존하게 되면, 주석이 갱신되지 않는 순간부터 코드는 ‘오해의 연속’이 될 수 있기 때문입니다.
(때문에 주석이 코드와 연동되어 있어서 코드가 수정되면 함께 동적으로 변경되면 어떨까? 라는 생각을 잠시 했지만 그 정도 기술이 갖춰진 상황이면 오히려 주석이 전혀 필요 없는 시대가 왔다는 뜻이겠죠. 코드를 자연어로 완벽하게 해석하는 기술이 생겼다면 당연히 주석의 필요성은 0에 수렴할 겁니다. 사족입니다~)
저자는 이런 불필요한 주석 코드를 줄이기 위해 소스 코드 관리 툴을 적극적으로 활용할 것을 강조하고 있는데, git이 개발자의 필수 도구처럼 언급되는 상황과는 다르게 현업에서는 이런 기본을 무시하는 사례가 왕왕 보입니다. 당장 아무 웹사이트나 들어가서 개발자 도구를 열어 보면 흔하게 접할 수 있죠. 아래 사진의 코드를 주석 처리해서 남길 실용적인 이유가 과연 있을까요? git의 사용 방법과 원리를 숙지해야 할 필요성을 하나 발견한 거 같습니다.<br>
<img alt="Pasted image 20250303131706.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250303131706.png" target="_self">
물론 법적·역사적·의도적 설명 등이 꼭 필요한 상황도 있지만, “주석으로 해결하기보다는 코드를 개선해 자체 문서화가 가능하게 하라”는 것이 이 장의 핵심 메시지라고 생각합니다. 계속 반복적으로 저자가 강조하는 것들이기도 하고 “실용주의 프로그래머”의 철학과도 정확히 일치합니다. 주석은 “개발자의 의도나 힌트를 제공하는 수단”이지만, 동시에 “진실이 아닐 가능성”을 내포하기도 합니다. 코드가 변경될 때마다 주석도 함께 수정되어야 하지만, 현실에서는 그렇게 되지 않는 경우가 많죠.
“코드는 계속 진화하지만, 주석은 방치되기 쉽다.” – 따라서 주석을 최소화하고, 코드를 더욱 명확히 작성해 주석에 대한 의존을 낮추는 것이 클린 코드의 중요한 원칙입니다. 코드 수정 시 주석을 함께 업데이트하지 않으면, 코드와 주석이 불일치 오래된 주석은 독자에게 잘못된 정보를 주어 혼란을 야기 count++; // count를 1 증가시킴 같은 주석은 오히려 코드 가독성을 해침 의미 있는 변수명과 간결한 로직이면, 굳이 주석으로 중복 설명할 필요가 없음
]]></description><link>https://64etuor.github.io/200_books/00_achives/2025/clean-code.html</link><guid isPermaLink="false">200_Books/00_Achives/2025/Clean Code.md</guid><dc:creator><![CDATA[로버트 C. 마틴, 박재호, 이해영]]></dc:creator><pubDate>Fri, 09 May 2025 02:09:12 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250303131706.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250303131706.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-05-08 어머니에게 하고 싶은 말, 마감까지 미루게 되는 일]]></title><description><![CDATA[
"어머니에게 하고 싶은 말은? What would you like to say to your mother?" 날씨를 여쭙니다.
덥지도, 춥지도 않은 곳이면 좋겠습니다.
가을에 새로이 태어나는 생각들,
묵묵힌 얹힌 낱말 중 몇 가지는
어머니의 언어일 텐데요. 마감 때까지 미루게 되는 일이 있어? 종합소득세 신고, 민방위 훈련을 자꾸 미루고 있다.
노래를 듣느라 미루고, 일을 하느라 미루고, 책을 읽느라 미루고,
하고자 하는 사람은 할 방법을 찾고,
하지 않고자 하는 사람은 핑계를 찾는다는 말처럼,
왜 하지 않는지 이해 못하면서도,
핑계는 곧잘 찾아내는 걸 보면
나는 내가 격렬히 경멸하는 것들과 썩 다르지 않은 사람이다.
물론 오늘도 안했다.
Quote
오늘의 '생각을 자극'하는 글귀
"한 사람의 피드백은 의견이지만 여러 사람의지적은 패턴이다.마음에 들지 않는 피드백을 받았을 때 그대로 받아들이는 것만이 바람직한 반응은 아니다. 나와 다른 괁점이 무엇인지 발견해야 한다. 한 사람의 피드백은 의견이지만 여러 사람이 같은 지적을 한다면 패턴이다. 성장을 위한 가장 좋은 방법은 잡음 속에서 반복적인 신호를 찾는 것이다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-08-어머니에게-하고-싶은-말,-마감까지-미루게-되는-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-08 어머니에게 하고 싶은 말, 마감까지 미루게 되는 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 08 May 2025 11:45:37 GMT</pubDate></item><item><title><![CDATA[2025-05-01 가장 좋아하는 식물, 직장을 선택하는 기준]]></title><description><![CDATA[
"가장 좋아하는 꽃이나 식물이 있다면? What is your favorite flower or plant?" 한 때는 다육이 키우는 게 낙이었다. 가장 좋아하는 게 있냐는 다른 질문이지만.
특별히 좋아하는 건 없지만 식물이라면 두루두루 좋아하는 편이다.
예전에 어떤 목사님의 설교가 생각난다.
사람을 내 맘처럼 제어하는 게 어려워서 동물을 키웠고,
동물의 행동 또한 맘대로 통제하기 어려워서 식물을 키웠고,
그 식물 또한 결국 뜻대로 자라게 하지 못했다는 말씀.
내 뜻대로 자라지 않는 모든 것을 존중한다.
아니, 그러려고 노력한다. 직장을 선택하는 너만의 기준은 뭐야? 여태까지 내가 다닌 직장은 일종의 사고와 다를 바 없다. 의도한 것보단 닥쳐 온 게 많았고, 그때 그때의 상황에 따라 결정한 바는 있지만 나만의 특별한 기준이라 말할 건 도통 연상되는 게 없다.
돈 더 주고, 더 좋은 복지를 제공하는 거야 너무 뻔한 기준이니까.
이직할 회사에 대한 정보란, 알음알음 취득한다해도 조금은 부족할 수 밖에 없는 것이고 외부에서 보는 회사와 내부에서 보는 회사의 사정은 완연히 다르기가 일쑤라 대게는 그냥 내가 배울 것이 있는가를 생각하는 편이다. 이런 무형의 자산이 장래에 어떤 나비효과를 불러 오리라는 막연한 기대를 하면서.
덕분에 다양한 경험을 할 수 있었다는 점은 꽤나 긍정적으로 생각하는 편이다.
아무튼 그 경험들로부터 토플러와 같은 통찰을 얻은 것은 아니지만 적어도 사람을 배웠고, 시야를 배웠고, 마음가짐을 배웠다.
틀림없이 나를 이롭게 할 자산들이다.
오늘의 '생각을 자극'하는 글귀
"현존하는 최고의 항우울제는 타인에 대한 너그러움이다.
현존하는 최고의 항우울제는 타인에 대한 너그러움이다. 다른 사람을 도와주면 스스로 가치 있고 유능한 사람이라고 느껴져서 스트레스가 줄어든다. 다른 사람의 고민을 함께 나누다 보면 자신이 처한 어려움을 극복할 지혜를 얻을 수 있고 앞으로 계속 나아가는데 동기부여가 된다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-01-가장-좋아하는-식물,-직장을-선택하는-기준.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-01 가장 좋아하는 식물, 직장을 선택하는 기준.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 08 May 2025 08:20:54 GMT</pubDate></item><item><title><![CDATA[2025-05-06 좋은 적은 있는가, 마음 건강]]></title><description><![CDATA[
"좋은 적이란 과연 존재할까? What makes a good enemy?" 요즘 네 마음 건강은 몇 점이야? 썩 건강하지도, 썩 나쁘지도 않은 중간 어딘가에 있다.
마음이 건강하지 못하다면 어딘가 요양이라도 보내면 좋겠건만, 항상 이도저도 아닌 애매한 상태다. 환자가 되어 가는 중인지, 조금씩 나아지고 있는지도 통 모르겠다. 혹여 요양을 갈 일이 있게 되면 장소는 숲이 좋겠다. 마치 소로처럼 숲에서 생활해 보는 것은 오랜 꿈이었으나 "월든"을 쓸 필력이 없기 때문에 자제하고 있다.
이 자제력이 바닥나는 날을 위하여 시를 쓴다.
도시에서 숲을 생각하는 까닭은 스스로 숲을 닮길 바라기 때문이다. 좋아하는 것은 닮아가는 것이고, 좋아하는 것은 생각을 많이 하는 것이다. 생각을 하고 또 하다 보면 쥐어짠 머리에서 압축된 낱말이 뚝뚝 떨어지곤 하는 날이 있는데 그것을 시상이라고 부른다. 그 시상이 벌레의 울음소리를 닮길 바라고, 아침 나절 새들이 지저귀는 소리를 닮길 바라고, 이슬을 잔뜩 머금은 풀내음을 닮길 바란다. 그러다 보면 이런 시꺼먼 마음을 가진 사람도 때로 초록으로 되는 순간이 있다. 그건 많이 생각하고, 많이 좋아하고, 많이 닮아가는 과정 중에 숲의 양식이 삶에 투영되는 느낌이라 불러도 좋겠다.
모자람은 참으로 자연스럽다.
추상적이며 왠지 잘 모르겠더라도 존재만은 분명한 어떤 결핍은 항시 있다.
그리고 그 결핍으로부터 동력을 얻어 끈질기게 앞으로 나아가는 사람들이 세상에는 더러 있다.
마음의 건강을 인질 삼아 요양을 꿈꾸는 나는 기껏 한 일이라봐야 고작 도시에서 숲을 상상한 것 뿐이지만, 세상에는 숲으로 걸어 들어가는 사람, 숲이 된 사람도 있게 마련이다.
그래서 나는 오늘도 조금은 내가 불편하고,
그렇기에 책을 한 줄 더 읽었다.
오늘의 '생각을 자극'하는 글귀
확실하지 않을 때는 무조건 친절을 선택하라.
우리가 힘들어하는 사람에게 쉽게 손 내밀지 못하는 가장 큰 이유는 혹시 선 넘는 행동을 하는 게 아닐까 걱정하는 마음 때문이다. 그럼에도 관심을 표현하지 않고 상대를 혼자 내버려두는 것보다 어색해질 것을 각오하고 관심을 표현하는 게 더 낫다. 확실하지 않을 때는 무조건 친절을 선택하라.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-06-좋은-적은-있는가,-마음-건강.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-06 좋은 적은 있는가, 마음 건강.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 08 May 2025 08:19:19 GMT</pubDate></item><item><title><![CDATA[2025-05-07 운명을 믿는가]]></title><description><![CDATA[
"내 인생을 영화로 만든다면 주인공 역은 누구로 하고 싶은가? Who would play you in a movie about your life? 운명을 믿어? 인간의 선택 메커니즘은 신경과학과 행동경제학 관점에서 분석할 때 흥미로운 패턴을 보인다. 뇌의 기저핵과 전전두엽 피질의 상호작용은 습관적 행동 패턴을 형성하는데, 이는 일상적 선택에서 '최소 에너지 원칙'을 따르는 경향으로 나타난다. 즉, 인지적 부하를 최소화하는 방향으로 의사결정이 이루어진다.
베이지안 추론 모델에 따르면, 개인의 과거 행동 패턴은 사전 확률(prior probability)로 작용하여 이후 선택의 확률 분포를 조건화한다. 이는 마치 자기강화 학습 알고리즘과 유사하게, 한번 형성된 행동 패턴이 지속적으로 강화되는 피드백 루프를 생성한다. 따라서 통계적으로 '게으른' 행동 패턴을 보인 개인은 미래에도 동일한 패턴을 반복할 확률이 높아진다.
자유의지에 대한 환상은 인지심리학에서 '통제력 착각(illusion of control)'으로 설명된다. 다니엘 웨그너(Daniel Wegner)의 연구에 따르면, 의식적 의도와 행동 사이의 일시적 연관성이 인과관계로 오인되는 경향이 있다. 실제로 fMRI 연구들은 의사결정이 의식적 인식보다 최대 7초 전에 신경학적으로 이미 결정될 수 있음을 시사한다. 자유 의지로 믿는 나의 선택이 실상 만성적 습관에 의존에 의한 것일 수도 있음을 의미한다.
자기합리화 메커니즘은 인지부조화 이론으로 설명 가능하다. 인간은 자신의 행동과 믿음 사이의 불일치를 경험할 때 심리적 불편함을 해소하기 위해 외부 요인에 책임을 전가하는 방식으로 대응한다. 이는 자기보존적 귀인 오류(self-serving attribution bias)의 한 형태로, 실패는 외부 요인에, 성공은 내부 요인에 귀인하는 체계적 편향이다.
결국 자기인식과 메타인지는 이러한 결정론적 패턴에서 벗어날 수 있는 가능성을 제시한다. 신경가소성(neuroplasticity)의 원리에 따르면, 자기인식을 통한 의도적 개입은 뇌의 신경회로를 재구성할 수 있다. 따라서 자신의 행동 패턴에 대한 객관적 관찰과 자기비판적 사고는 기존의 결정론적 경로에서 벗어나 진정한 의미의 선택적 자유를 향한 첫걸음이 될 수 있다.
결론적으로, 인간의 선택은 완전한 자유와 완전한 결정론 사이의 스펙트럼 상에 존재한다. 자기인식의 깊이와 메타인지 능력이 이 스펙트럼 상에서 우리의 위치를 결정하며, 이는 궁극적으로 자신의 행동에 대한 책임의 범위를 정의한다. 그리고 이 사실을 반대로 말하자면, 책임의 범위에 대한 인식이 자기인식의 깊이를 결정한다고도 할 수 있다. 고로 선택은 운명이 아니라, 스스로의 인식에 가깝다.
오늘의 '생각을 자극'하는 글귀
제대로된 조직이라면 재수 없는 인간은 성공할 수 없다.
당신이 속한 조직에서 해로운 영향을 끼치는 사람들이 잘나간다면 조직문화뿐 아니라 보상 시스템도 문제가 있는 것이다. 건강한 조직에서는 다른 사람에게 끼치는 영향력이 연봉과 성과, 승진을 좌우하는 가장 중요한 요인이기 때문이다. 제대로 된 조직이라면 재수 없는 인간은 성공할 수 없다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-07-운명을-믿는가.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-07 운명을 믿는가.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 07 May 2025 15:35:41 GMT</pubDate></item><item><title><![CDATA[2025-05-05 하루가 신난 이유, 누군갈 위해 뭔가 만들어 본 기억]]></title><description><![CDATA[
정말 신나는 하루였다. 그 이유는 __ (이) 다. Today was hilarious because _. 눈 뜨자 마자, 지금까지 일만 했다.
그러나 정말 신나는 하루였다. 그 이유는 아직 살아 있기 때문이다.
죽으면 신나는 것도, 우울한 것도 하지 못한다. 누군가를 위해 무언가를 만들어 본 적 있어? 돈으로 살 수 있는 것들은 선물로 생각해 본 적이 없다.
정확히 대체될 수 있는 어떤 숫자가 가치로 환산되는 것들은 영 재미없기 마련이다.
사람은 자기가 소중하게 생각하는 무언가의 가치를 최고로 두기 마련인데,
때문에 내가 가장 가치 있다고 믿는 선물은 바로 시간이다.
이 시간의 값어치는 누구에게나 다르지만, 누구에게도 다르지 않다. 시간이 가진 공평한 속성이다.
나의 시간과, 고민을 들여서 만든 선물을 종종 하곤 한다.
내가 기꺼이 이렇게 할 수 있는 까닭은,
나와 가치를 공유하는 사람들만 내 곁에 남은 이유겠지만,
공짜를 바라지 않는 습성 탓에 신경이 예민한 어떤 공통 집단의 특성이기도 하겠거니와,
그러므로 홀로 선 여느 모험의 실마리 끝, 그 가는 가능성을 보고 사는 희망 중독자들의 대피소와도 크게 다르지 않아서,
공짜인 듯, 공짜가 아닌 듯 애매모호한 이런 잡스러운 선물이야 말로,
우리네의 입맛에 딱 알맞은 선물이 되곤 하는 것이다.
하다 못해 그림을 하나 그린다 한들,
실력이 모자랄 지언정 마음이 모자란 적 일절 없다.
오늘의 '생각을 자극'하는 글귀
자신의 행동을 책임지는 것이 진정한 사과다.
사과를 하지 않는 것은 강인함을 보여주는 게 아니라 자기도취에 빠져 있다는 것을 보여준다. ""~했다면 미안해.""는 사과가 아니다. 자기 잘못이 뭔지 잘 모르겠다는 뜻이다. ""~해서 미안해."" 라고 자신의 행동을 인정하고 책임지려는 모습을 보여야 진정한 사과다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-05-하루가-신난-이유,-누군갈-위해-뭔가-만들어-본-기억.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-05 하루가 신난 이유, 누군갈 위해 뭔가 만들어 본 기억.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 05 May 2025 17:00:42 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 15주차 회고]]></title><description><![CDATA[ 시드니 문학회 단톡방에 좋은 소식이 들렸다. 꾸준히 시인으로 활동하시는 모 회원 님이 또 어느 계간지의 시 문학상을 수상했다는 이야기였다. 문학상이라는 것이 당금에는 그다지 화려한 영광으로 불리진 않을 지라도, 그 무엇보다 화사하고 우아한 꽃다발을 선물하고 싶다는 생각을 하였다. 시인께서 오랜 시간 생각과 언어를 응축하여 쏟아낸 시구들을 보며, 꾸미지 않은 극상의 화려함을 느낀 까닭이다.
예전에 이민진 작가가 쓴 소설이 ‘파친코’가 서방 세계의 각광을 받았을 때, 디아스포라 문학에 대한 관심이 재조명된 일이 있었다. 당시 이민진 작가는 호주 각종 행사에 초청되어 많은 강연을 했다. 우후죽순 디아스포라 문학상이 늘어 났고, 주호주 대사관의 문화 지원도 생겼던 걸로 기억한다. 꽃이 피는 줄 알았더니 봉우리 맺기 전에 모두 시들어 버렸지만 말이다.물과 비료를 주겠다며 사람들이 달려 들건 말건 그저 묵묵하게 핀 꽃들을 본다.
인내는 줄기에 쌓이고, 바람에 꺾이지 않는 마음씨는 봉우리 안에 농축되곤 한다.
마침내 개화하는 순간 퍼지는 화려한 향기가 그 세월을 대변하듯 코 끝에 맴돌면,
오랜 시간 자신을 갈고 닦은 보상은 그러나 그것으로 충분한 것이다.
화려한 외양은 아닐 지언정 화려하지 않지 않은 그 모순이란 결국
상금과 명예라는 허황된 편견에 집착하고 있던 내 아둔함에 기인함을 발견한다.금요일에 논산엔 내려 와야 했는데 버스고 기차고 죄다 매진이 되었다. 무슨 조화인지 주말까지 전부 매진이라 이게 연휴의 효과인가 싶기도 하고.
대만 출장 가 있는 동생 차가 용인에 있어서 거기까지 겨우 가서 차를 끌고 논산으로 출발. 그리고 끔찍한 교통 체증의 시작.
토요일에 치과 예약이 되어 있어서 안 갈 수도 없고 그냥 어쩔 도리가 없었다. 다음 날 음성에 갈 때도 차가 심하게 막혀서 단 이틀 간 도로 위에서 쓴 시간이 10시간이 넘는다.
밀리의 서재 오디오북이라도 들을 수 있었으면 좋았으련만 왠일인지 AI TTS가 갑자기 심하게 맛이 간 상태여서(문장마다 끊어 읽기를 하는데 딜레이가 있어서 듣다 보면 숨이 막혔다. 밀리의 서재 측에서 뭔가 잘못 업데이트를 한 거 같은데… 좀 지켜봐야 할 듯) 그 또한 마땅찮았다.
하는 수 없이 사업에 대한 구상과 여러 가지 그와 관련된 생각을 많이 했는데, 마치 안개 낀 저 너머를 상상하는 듯이 모든 게 불투명하고 어려워서 그냥 부딪혀 보는 게 낫겠다는 생각만 들게 된다.아이캔대학 강의를 수강하면서 루틴을 여러 개 만들었다. 앱에 루틴 체크 기능도 만들고 학습 진도 확인 기능도 만들고 여러가지 많은 기능을 추가했다.
루틴이 습관이 되서 체크가 필요 없을 때까지 유지하는 게 목표다.
밝은 일상을 만드는 좋은 루틴이 완전히 몸에 익기까지 조금씩 노력해 봅시다.
누적의 힘을 믿자.
SW 부트캠프:
연휴 전까지 Vue를 학습했다.
Router, 데이터 전파 방법, From 사용법, Pinia 등등 사실 눈 깜짝할 새에 진도가 나가버렸다.
생각보다 계층 잡는 게 어렵지 않아서 놀랐고, 상상했던 것보다 더 쉽게 웹을 만들 수 있다는 생각이 들었다. 프레임워크의 발전이 참 놀랍고, 이제부턴 AI 때문에 더 빠르게 발전하겠다는 예상이 생긴다. 진짜로 말하는 대로~ 가 실현될 날이 머지 않은 것 같다는 느낌.
옛날에 아는 것도 없이 React 웹을 만들다가 생긴 CORS에 대한 뿌리 깊은 PTSD가 있었는데, 강사님이 알려 주시는 대로 차근차근 진행하니 너무나 쉽게 클리어. 사실 간단한 예제여서 쉽다고 생각했지 내부적인 맥락은 하나도 이해 못 했다는 생각이 들었다. 때문에 오랜만에 인파 님의 블로그에서 CORS 관련 블로그를 정독 했고, 또 한 번 감탄. 몇 번이고 복기하고 다시 읽어야 조금이나마 이해가 될 듯 하다.(솔직히 암기에 가까운 법칙이라…)주말이 되자마자 토스 결제 위젯을 활용한 결제 기능을 구현했다. 기존에 개별 api 호출로 만들었던 기능을 싹 없애고 프론트 위젯으로 그냥 뚝딱. 진짜 세상 편해졌다. SDK나 뜯어 볼까 하고 열어 봤는데 코드가 33만 줄이 있어서 얌전히 닫았다. 아무렴 그렇게 쉽게 될 기능이 아닌데 ㅎㅎ… 어려운 건 전문가에게 맡기자…
DB 연동해서 모든 테스트까지 완료했고, UI/UX도 꽤나 다듬었다. 결제 승인 중에는 페이지 이동이 안 되도록 Backdrop을 뿌리고 스피너도 굴리고 그냥 시중 다른 사이트에 있을 법한 건 다 넣어 보려고 했다. 근데 결제 수단별로 테스트를 하는 “휴대폰 결제” 선택하여 결제 진행 시 문제가 발생.
<img alt="Pasted image 20250505202357.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250505202357.png" target="_self">토스 위젯 내부 문제? or my bad?…일단 개발자 도구로 찍어 보면 토스 위젯 내부에서 호출된 dimmer인데 제거가 안 된다(ㅋㅋㅋ), onError 캐치로 destroy하려고 깔짝대 봤지만 iframe 내에 렌더링된 위젯이라 그런지 에러 캐치조차 안 된다. 더 파고 들고 싶어도 할 게 너무 많이 남아서 Jira 버그 이슈로 등록만 해놓고 바로 후퇴.채팅 기능도 그렇고, 진짜 신경 쓸 게 너무 많다. 구현하고자 했던 기능의 일부는 폐기해야겠다는 견적이 나온다. 빠른 견적, 빠른 실행을 해도 시간이 빠듯하다.
게이트웨이를 붙이니 웹소켓이 프론트에 왜 이렇게 안 붙는지, 게이트웨이를 통해서 info 메서드 접근은 되는데 연결이 안 된다. 이것도 알아 보려면 시간이 부족할 거 같아서 일단 skip.
죄다 skip만 하고 있긴 한 거 같다… 껄껄.
목표: 대시보드 리빌딩, 새로운 앱 데이터 형태에 맞게 잘 꾸며 보자.
결과: 아주 훌륭하진 않아도 내가 필요한 정보가… 보이긴 하는데 뭔가 너무 너무 장표가 많다. 태블로를 쓸 땐 대시보드 하나에 여러 차트를 압축할 수 있었는데 루커스튜디오는 그게 안 된다. 좋은 방법을 찾아 봐야 할 듯.
<br><img alt="Pasted image 20250505133502.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250505133502.png" target="_self"><br>
<img alt="Pasted image 20250505133702.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250505133702.png" target="_self">
대시보드를 호다닥 마무리했다.
루틴을 근근이 이어 나가고 있다.
독서를 다시 하고 있다.
아이캔 대학 강의를 열심히 듣고 있다. 컨디션 관리가 생각보다 어렵다. 일찍 자는 습관을 갖자. 그딴 건 없어 바쁘면 우울할 틈도 없다. 차라리 바쁘게라도 살자. 목표: 프로젝트 마무리. 기록할 만한 경험 하나 꼭 남기기.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-15주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 15주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 05 May 2025 13:54:48 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250505202357.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250505202357.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-05-04 마지막으로 수영한 때, 힘들었지만 성장에 도움이 됐던 경험]]></title><description><![CDATA[
"마지막으로 수영을 한 적은 언제인가? When was the last time you went swimming?" 힘들었지만 너의 성장에 도움이 됐던 경험은 뭐야? 여러가지 경험들이 있지만 그나마 자연스럽게 얘기해 볼 법한 건 호주에서 공부할 때의 경험이다.
그냥 말 그대로 너무 힘들었다. 정말 다신 그렇게 못 살 정도로 열심히 살았지만 실상 내 의지로 그런 것은 아니다. 상황이 몰아갔다는 게 더 맞는 말이겠다.
3년여간 살인적인 학비와 생활비를 스스로 충당해야 했다. 그마저도 빼어난 기술이 없으니 몸으로 떼우는 수 밖에는 없었다. 이것저것 안 해 본 일이 없다. 이건 어떤 의미로는 온갖 인간을 다 만났다는 뜻이다. 몸도, 마음도 다치기도 많이 다쳤다.
임금 떼먹고 잠수 타는 사람, 사기 치는 사람, 그야말로 이 세상의 모든 놈놈놈 유형은 다 만난 거 같다. 다양한 인종이 모여 살다 보니 사고도 사건도 많았다.
그러나 그렇게 많은 사람과 사고를 만난 덕에 내향형에 가까웠던 내가 이제는 처음 만난 사람과도 흥정을 하고 협상 또한 제법 하게 되었다. 아마 이게 첫 번째 성장 포인트겠다.
매일 일을 2~3개를 기본적으로 하다 보니 밥은 거의 차 안에서 해결했다. 새벽 5시에 첫 일이 시작됐고, 마지막 일은 자정이 넘어서 마쳤으니, 그리고 그 와중에 학교도 다녔으니, 지금 생각해 보면 어떻게 그렇게 살았나 싶다. 시간이 없으니 모든 일을 효율적이고 또 집중적으로 처리해야 했다. 시간 부채를 잔뜩 가진 사람인 양 언제나 시간에 쫓겨 다녔다. 단 5분, 10분을 아끼려고 온갖 고민을 했다.
한국에 와서 회사를 다니면서 항상 남들보다 몇 배의 업무를 소화했는데, 아마 그때의 경험이 주효한 거 같다. 이것도 성장 포인트라면 성장 포인트겠다.
그리고 또 하나의 좋은 점이라면, 종교라면 치를 떨던 내가 시드니의 ‘주안교회’라는 은혜로운 교회를 만난 것이다. (이 세상에 그런 교회가 또 있다면, 언제든지 예배와 찬송을 드리러 가고 싶다. )
종교에 대한 내 뿌리 깊은 편견을 벗겨내 주었으니, 그러므로 덜 편협한 사람이 되었으니 이게 세 번째 성장 포인트겠다. 이제는 손가락에 꼽는 절친이 된 동생에 이끌려 다닌 교회였는데, 아직도 종종 생각이 나고 그리운 교회다.
교회와 목사님들의 설교 말씀 덕분에 판단을 유보하거나 혹은 아예 판단하지 않는 버릇이 들었다. 내가 덮어 놓고 싫어했던 교회가 모두 꼭 그런 것만은 아닌 것처럼, 사람도 현상도 그 자체로는 옳다, 그르다 말하기 어려운 부분이 그렇지 않은 부분보다 더 많다.
종국에는 내가 만난 만난 사기꾼들도, 다 무엇에 쫓기는 사람들이었다는 생각을 하였다. 내가 시간에 쫓겨 내 본성인 게으름을 잊었듯이, 그들도 무언가에 쫓겨 자신의 진정한 모습을 잊었을 수 있다.
그리고 이렇게 생각해도, 저렇게 생각해도 상관 없다면 내 맘이 편한 쪽으로 생각하면 그만이다. 진실이야 무엇이든 아무래도 좋을 일이다.
아무튼 이렇게 보면 내 호주 생활은 트레이드오프가 적절하게 된 케이스라고도 생각이 든다.
많이 울었고, 많이 웃었다.
웃지 않으면 죽을 것 같았기 때문에 더 열심히 웃었다.
억지로라도 웃으면 괜찮아 진다는 교훈이 골수에 미칠 정도로 사무쳐서,
이제는 화가 날 법한 상황에도 영 화가 잘 나질 않는다.
이게 좋은 일인지 나쁜 일인지 영 가늠할 수 없는 아리송한 마음도 든다.
하지만 그건 아무래도 좋고, 정말 아무래도 좋을 일이다.
그리고 또 내가 자랑하듯 열거한 성장 포인트들이 사실이든 아니든,
그 또한 아무래도 상관 없을 일들이다.
의미란 늘상 그것을 부여한 사람에게만 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-04-마지막으로-수영한-때,-힘들었지만-성장에-도움이-됐던-경험.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-04 마지막으로 수영한 때, 힘들었지만 성장에 도움이 됐던 경험.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 04 May 2025 13:54:30 GMT</pubDate></item><item><title><![CDATA[2025-05-02 나는 깔끔한가, 좋아하는 브랜드]]></title><description><![CDATA[
"나는 깔끔한 사람인가, 지저분한 사람인가? Are you messy or neat?" 나의 위생 상태에는 마치 바이오리듬과 같은 리듬이 있다.
정신건강 사회복지사인 친구에게 들은 얘긴데, 정신 건강이 무너지면 가장 먼저 개인 위생 상태가 급격하게 나빠진다고 한다. 그 말을 듣고 꽤 일리가 있다고 생각한 즉, 내 방황과 혼란하던 시기의 내 방의 상태나 위생 상태들은 정말 끔찍한 수준이었단 걸 떠올린다.
그러므로 내 위생 상태에 대한 내 답변은 일면 나의 정신에도 바이오리듬 내지는 싸이클이 있다는 얘기가 된다. 아직도 가끔은 찾아오는 우울함을 극복할 방법을 술 외에는 딱히 찾지 못해서 이따금씩 지속적인 폭음을 하곤 하는데 그 때는 방 안이 평소보다는 너저분한 편이고, 씻지도 않고 집에 은둔한다.
그렇다고 물론 심하게 기분이 오락가락하는 하거나 일상에 지장이 있을 정도는 아니지만 사소한 거라며 방치해도 좋을 습관은 영 아닌 거 같다.
김익한 교수님의 밝은 일상에 대한 강의에서 루틴이 가진 힘을 소개 받고, 실천에 옮기는 중이다.
루틴에서 내 스스로 답을 찾길 바란다. 좋아하는 브랜드를 소개해 줄래? 특별히 좋아하는 브랜드란 게 정말 아무 것도 없다.
그게 물건이든 서비스이든 막론하고, 그때의 필요나 상황에 따라 유동적으로 선택하는 편이다.
재밌는 건 항상 맥의 소프트웨어, 하드웨어 완성도를 극찬하면서 주변에 추천하지만 실제로 나 자신은 사용하지 않는다는 점이다.
이유는 간단하다. 일단 필요가 없고 또 좋아하지도 않기 때문이다.
인간의 기호는 항상 상품의 우수한 속성이나 성능과 평행하게 달리는 것은 아니다.
더군다나 한 브랜드가 가진 상품군이 다양하니, 설령 그 중 한 두 개가 내 기호에 딱이라고 한들 그게 브랜드에 대한 호감으로 이어지는 경우도 없다.
이런 내 자신이 회사 입장에선 마케팅하기 힘든 족속의 고객 유형에 속한다는 걸 알기 때문에,
일상품이 아닌 무언가를 구매할 때마다 구매의 사유를 분석하여 작성하고 있다.
이런 개인적 연구의 가설은 “나처럼 까다로운 인간은 다른 사람들과 상품을 선택하는 기준이 다른 것이 아니라, 단지 더 많은 기준을 만족하는 상품을 찾고 있을 뿐이다.” 에서 출발했다.
효용이 있을 지는 모르겠지만, 고민하는 재미는 있는 주제다.
오늘의 '생각을 자극'하는 글귀
"가장 위대한 성취는 삶을 스스로 선택하는 자유다.
성공을 돈이나 성취감, 영향력을 얻는 것으로만 정의하면 자유를 잃는다. 인생에서 가장 위대한 성취는 자신의 삶의 방향을 선택하는 자유를 얻는 것이다. 자율성보다 더 가치 있는 화폐는 없다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-05/2025-05-02-나는-깔끔한가,-좋아하는-브랜드.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-05/2025-05-02 나는 깔끔한가, 좋아하는 브랜드.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 02 May 2025 05:44:12 GMT</pubDate></item><item><title><![CDATA[2025년 4월 회고]]></title><description><![CDATA[정신 번쩍 들게 할 지난달(2025년 4월) 활동 데이터 기반 '웃픈 팩폭' 회고입니다.자, 지난 한 달간 당신의 활동 로그를 샅샅이 훑어봤습니다. 변명은 넣어두세요. 데이터는 거짓말을 하지 않으니까요. 능글거림과 뼈 때림 사이를 아슬아슬하게 오가는, AI 팩폭 마스터의 월간 회고, 시작합니다! 1. "미분당 차돌박이 쌀국수" 무한 사랑, 몬헌은 덤? 데이터:&nbsp;"미분당 차돌박이 쌀국수" 관련 활동이 무려 4회나 등장! (총 191분 소요, 평균 만족도 5점). 몬헌은 덤으로 곁들여 주시는 센스!
팩폭:&nbsp;아니, 무슨 미분당 홍보대사세요? 차돌박이 쌀국수에 영혼이라도 팔았나. 몬헌은 또 뭡니까? 쌀국수 먹고 용이라도 잡으러 가시게요? 개발 실력 향상에는 1도 도움 안 되는 몬헌은 이제 그만! (물론, 우체국 구내식당 제육쌈밥도 잊지 않으셨군요. 역시 한식 러버!)
변화 촉구:&nbsp;다음 달엔 미분당 방문 횟수를 절반으로 줄이고, 그 시간에 코딩 한 줄이라도 더 짜세요. 몬헌은... 봉인까진 바라지 않겠지만, 일주일에 한 시간 이내로 제한하는 건 어떨까요?
2. "소주"와의 끊을 수 없는 악연, 알코올 의존증 초기 증세? 데이터:&nbsp;"소주" 언급 횟수 15회 이상! 닭강정, 피자, 족발, 심지어 치킨 마크니 커리(!)와 함께 소주를 곁들이는 놀라운 조합. 만족도는 대체로 1~2점.
팩폭:&nbsp;...할많하않. 굳이 길게 말 안 하겠습니다. 당신의 간은 지금쯤 "나 좀 살려줘!"라고 절규하고 있을 겁니다. 만족도 1~2점이라니, 맛도 없으면서 왜 마시는 거죠? 혹시 소주 없이는 코딩이 안 되는 특별한 체질이라도 되십니까?
변화 촉구:&nbsp;당장 알코올 의존증 자가 진단 테스트부터 해보세요. 그리고 다음 달엔 소주 대신 탄산수를 마시는 겁니다. 아니, 하다못해 무알콜 맥주라도 드세요! 제발! (PT 빠지고 월드 바베큐에 소주 마신 건 안 비밀입니다.)
3. "노트 작성" 장인, 하지만 생산성은...? 데이터:&nbsp;"노트 작성" 활동 30회 이상! 죽기 전에 하고 싶은 일, 없애고 싶은 사회 문제, 심지어 좋아하는 날씨까지... 별의별 내용을 다 적으셨더군요. 하지만 만족도는 들쭉날쭉.
팩폭:&nbsp;거의 다이어리 수준인데요? 혹시 개발자 말고 감성 작가를 꿈꾸시는 건 아니겠죠? 물론, 자기 성찰은 중요하지만, 코딩 실력 향상에 도움이 안 되는 노트는 그냥 시간 낭비일 뿐입니다. (7분 만에 설렁설렁 쓴 노트는 대체 뭘까요? 숙제 검사라도 받는 기분이었습니까?)
변화 촉구:&nbsp;다음 달엔 노트 작성 시간을 절반으로 줄이고, 그 시간에 기술 블로그 글 하나라도 더 쓰세요. 그리고 노트에 적는 내용도 개발 관련 내용으로 제한하는 겁니다. (예: "오늘 배운 Vue 컴포넌트 통신 방법", "내일 할 일: MSA 아키텍처 복습")
칭찬 한 스푼: 그래도 "아침 운동"은 꾸준히 하셨군요. 칭찬은... 아닙니다. 운동 후 소주 마시는 건 아니겠죠?
총평: 전반적으로 봤을 때, 당신은 잠재력은 있지만, 낭비하는 시간이 너무 많습니다. 특히, 술! 술! 술! 제발 술 좀 줄이세요! 그리고 미분당 사랑은 잠시 접어두고, 코딩에 집중하는 겁니다. 다음 달엔 좀 더 발전된 모습으로 다시 만날 수 있기를 바랍니다. 마지막 경고: 다음 달에도 똑같은 패턴이 반복된다면... 얄짤없이 더 강력한 팩폭이 날아갈 겁니다. 각오하세요!]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/2025년-4월-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/2025년 4월 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 01 May 2025 08:15:34 GMT</pubDate></item><item><title><![CDATA[2025-04-30 오늘 하루를 세 단어로 표현, 이상형]]></title><description><![CDATA[
"오늘 하루를 세 단어로 표현한다면? List three words that sum up today. 화려함 : 시드니 문학회 단톡방에 오늘 좋은 소식이 들렸다. 꾸준히 시인으로 활동하시는 모 회원 님이 또 어느 계간지의 시 문학상을 수상했다는 이야기였다. 문학상이라는 것이 당금에는 그다지 화려한 영광으로 불리진 않을 지라도, 그 무엇보다 화사하고 우아한 꽃다발을 선물하고 싶다는 생각을 하였다. 시인께서 오랜 시간 생각과 언어를 응축하여 쏟아낸 시구들을 보며, 꾸미지 않은 극상의 화려함을 느낀 까닭이다.
예전에 이민진 작가가 쓴 소설이 ‘파친코’가 서방 세계의 각광을 받았을 때, 디아스포라 문학에 대한 관심이 재조명된 일이 있었다. 당시 이민진 작가는 호주 각종 행사에 초청되어 많은 강연을 했다. 우후죽순 디아스포라 문학상이 늘어 났고, 주호주 대사관의 문화 지원도 생겼던 걸로 기억한다. 꽃이 피는 줄 알았더니 봉우리 맺기 전에 모두 시들어 버렸지만 말이다.
물과 비료를 주겠다며 사람들이 달려 들건 말건 그저 묵묵하게 핀 꽃들을 본다.
인내는 줄기에 쌓이고, 바람에 꺾이지 않는 마음씨는 봉우리 안에 농축되곤 한다.
마침내 개화하는 순간 퍼지는 화려한 향기가 그 세월을 대변하듯 코 끝에 맴돌면,
오랜 시간 자신을 갈고 닦은 보상은 그러나 그것으로 충분한 것이다.
화려한 외양은 아닐 지언정 화려하지 않지 않은 그 모순이란 결국
상금과 명예라는 허황된 편견에 집착하고 있던 내 아둔함에 기인함을 발견한다.
예민함 : MSA 백엔드 프로젝트를 끝내고 프론트를 작업 중이다. 기술은 Vue를 사용하고 있는데 가상 DOM 렌더링 방식 특성상 화면 전환이나 모달 호출 시에 매끄럽지 않은 경험이 느껴진다. 특히 요새는 고주사율 모니터를 사용하는 경우가 많다 보니 더 예민하게 느껴지는데, 오늘 문득 궁금해서 같이 작업하는 사람들에게 이런 게 거슬리지 않냐고 물어 보니 별로 신경 써본 적 없다는 답변이 돌아왔다. 반면 나는 거슬려서 참을 수가 없다. 부드러운 전환을 위한 성능적 측면, 기술적 측면(눈속임) 여러가지 기법을 테스트 중이다. 예민한 인간들은 참 피곤하게 사는 유형들인 거 같다.
피로 : 평소에 낮잠이나 쪽잠을 자지 않는 편인데, 오늘 저녁을 먹고 들어와서 빨래만 돌려 놓고 거진 2시간을 자버렸다. 최근에 아침 운동, 독서 루틴과 아이캔대학 학습 과정도 시작했고, 차후 기록 관리 앱의 DB 전환을 위해 스키마 정규화 수준을 올렸다. 따라서 기존 DB에 연결된 대시보드도 수정해야 했다. 태블로로 관리하던 대시보드를 구글 루커 스튜디오로 이식하려다가 어플리케이션 특성상 도저히 비슷하게 만드는 게 어려워서 아예 싹 갈아 엎고 새로 만들었다.
장기 목표는 통짜 MADE IN GOOGLE Vertex, GCP 데이터 파이프라인을 만든다는 계획이었는데, 프로젝트하는 와중에 짬짬이 나는 시간마다 작업했더니 생각보다 금방 완성할 수 있었다.
대시보드를 완성하고 보니 그 바쁜 와중에 술은 내리 열흘 넘게 매일 마셨다. 솔직한 얘기로 피로 원인의 90%는 이것 때문이 아닐까. 우울함을 술로 푸는 습관을 없애려고 이것저것 다시 시도 중이다. 간 건강에 진짜 적신호가 들어 왔다고 실감한다.
그 와중에 폰트 선택권이 없다 보니 디자인이 예쁘게 안 돼서 결국 영어 대시보드를 만들었다.
예민함=피곤 이건 그냥 공식인 듯.
<img alt="Pasted image 20250430224602.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250430224602.png" target="_self">
아무튼 올해만 벌써 53번 술을 마신 건 심각하게 반성할 일이다… 이상형이 뭐야? 어떤 사람을 만나고 싶어?
오늘의 '생각을 자극'하는 글귀
인생의 생산성은 생각과 배움에 달려 있다.
하루의 생산성은 실제로 일하는 시간에 달려 있다. 한 해의 생산성은 생각의 질에 달려 있다. 커리어의 생산성은 배움의 질에 달려 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-30-오늘-하루를-세-단어로-표현,-이상형.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-30 오늘 하루를 세 단어로 표현, 이상형.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 30 Apr 2025 14:33:26 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250430224602.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250430224602.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-26 이성을 보는 조건, 천 만원을 쓴다면]]></title><description><![CDATA[
이성을 만날 때 가장 중요하게 생각하는 조건은? What do you think is the most important element when looking for a partner? 이 질문을 보고 누군가를 이성을 느껴본 게 정말 오래된 일이란 걸 실감한다.
까마득한 연애의 기억을 헤집어 보면, 내 연인이 주변에 선하고 밝은 행동을 하는 모습을 볼 때 사랑이 더욱 깊어지고, 그렇지 못할 때에는 아쉬워했던 거 같다.
고로 반대로 생각하면 나는 밝고 선한 사람을 만나야만 행복할 수 있는 족속인 것이다.
결론적으로 파트너로서 내가 가장 중요하게 생각하는 조건은 성격일 테지만, 이렇게 얘기하고 말을 끊으면 완전한 속물이 되는 셈이다. 나는 보통의 사람이고, 일반적인 사람들이 이성을 볼 때 중요하게 여기는 기타 요소들을 덜 중요하게 여기지도 않을 것이다. 다만 이런 문제에 대해 깊게 생각해 본 적이 없어서 답변이 술술 나오지는 않을 뿐.
여담이지만, 예전에 미군 가족들과 교류 활동을 할 때, 한 미국 여사님께서 해 주신 결혼에 조언이 갑자기 떠오랐다.
연애 상대가 아닌 결혼 상대를 찾을 땐 조건의 AND와 OR을 잘 구분해 두라고. 내가 절대 용납할 수 없는 조건은 무엇인지 생각하되, AND가 너무 많아진다면 후보군이 점점 작아지는 것이니 정말로 타협할 수 없는 것인지 곰곰이 생각해 보라고.
이 조언이 이제서야 다시 떠오르는 걸 보면,
나는 그동안 어떠한 노력도 하지 않았다는 게 여실히 느껴져서 참으로 부끄러운 마음이 든다. 하루에 천만 원을 무조건 써야 한다면 어디에 쓰고 싶어? 하루에 천 만원을 쓴다는 게 매일 천 만원을 쓴다는 의미인지, 천 만원을 하루 만에 쓴다는 의미인 지 잘 모르겠지만… 뭐 돈을 굳이 쓰라면 내 사업 인프라에 투자하겠다.
1회성의 천 만원은 너무 적은데 더 줘잉.
오늘의 '생각을 자극'하는 글귀
집단의 지혜는 개인의 창의성에서 출발한다.
브레인스토밍을 하다 보면 좋은 아이디어가 사라진다. 규칙에 대한 은근한 압력, 시끄러운 분위기, 위축된 자존심 때문에 사람들이 입을 꾹 다물기 때문이다. 더 나은 접근 방식을 브레인라이팅(brain writing)이다. 각자 아이디어를 떠올린 다음에 만나서 평가하고 다듬는 것이다. 집단의 지혜는 개인의 창의성에서 출발한다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-26-이성을-보는-조건,-천-만원을-쓴다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-26 이성을 보는 조건, 천 만원을 쓴다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 30 Apr 2025 13:10:23 GMT</pubDate></item><item><title><![CDATA[2025-04-29 내가 행복하게 만들어 줄 수 있는 사람, 내 SNS 프로필]]></title><description><![CDATA[
"내가 행복하게 만들어줄 수 있는 사람은 누구인가? Who can you make you happier? How? 나 자신이나 가족, 친구들이 아닐까.
행복하게 만들어 주고 있냐고 물어 본다면 “NO”에 가깝지만 말이다.
아무래도 내가 가진 현재의 영향력은 그 정도인 것이고,
현재로썬 그 작은 영역에서도 제대로 하지 못하고 있다는 게 맞다.
우선은 나 자신을 행복하게 하는 능력도 모자라단 사실을 매일 느낀다.
그래도 한 가지 다행인 점은,
내가 나의 모자람을 인지하고 있고,
바꾸려고 노력하고 있고,
언젠가는 바뀔 것이라는 것이다.
남을 행복하게 할 수 있는 사람은 결국 본인 스스로 행복한 사람들이다.
우선 나 자신을 행복하게 할 수 있는 사람이 먼저 되어야 겠다. 현재 너의 SNS 프로필을 알려 줘. 자주 바꾸는 편이야? 소셜 미디어 마케팅을 전공했음에도 아무런 소셜 미디어도 하지 않는다.
그나마 프로필이라고 할 것은 카톡 프로필 뿐인데,
주로 풍경 사진을 올려 두는 편이고 따로 적는 글귀는 보통 감명 깊었던 노래의 가사를 적어 둔다.
이따금 스스로 보고 그 감정을 다시 느껴 보려는 의도가 강하다.
결국 남이 보는 프로필이 아니라 내가 보는 프로필에 더 가깝다는 의미다.
올해 초 세컨드 브레인 북클럽에서 2025년의 목표를 정했는데,
몇 주전에 목표를 까먹지 않고 실천하려고 카톡 프로필로 올려 놨다.
효과가 있을는지는 지켜봐야 알겠지만!
오늘의 '생각을 자극'하는 글귀
집중력이 가장 높을 때 일할 수 있어야 한다.
세상은 야행성 인간에게 불공평하다. 야행성 학생들은 오후나 저녁 수업에서만 눈이 초롱초롱하고 그 과목에서만 좋은 성적을 바든다. 야행성 직장인들은 똑같은 시간 일하고 똑가은 결과를 내놓아도 늦게 시작했다는 이유로 불이익을 받는다. 공정한 평가를 받으려면 활동 패턴을 바꿔야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-29-내가-행복하게-만들어-줄-수-있는-사람,-내-sns-프로필.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-29 내가 행복하게 만들어 줄 수 있는 사람, 내 SNS 프로필.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 29 Apr 2025 04:57:06 GMT</pubDate></item><item><title><![CDATA[2025-04-28 단 하루만 누군가와 인생을 바꿀 수 있다면, 돈을 아낄 수 있는 나만의 방법]]></title><description><![CDATA[
"딱 하루만 인생을 바꿀 수 있다면 누구와 바꾸겠는가? If you could live someone else's life or one day who would it be? 송골매가 되어서 하늘을 날아 다니고 싶다.
그냥 달리 바라는 건 없고 기분 좋게 날고 싶다.
그 외에 달리 남으로 살아 보고 싶은 적은 없다. 돈을 아낄 수 있는 너만의 방법을 알려줘 특별한 방법 같진 않지만 굳이 나열하자면,
커피를 카페에서 잘 사 먹지 않는다.
집에 커피 머신이 있어서 그냥 원두만 사서 먹거나 아니면 카누를 사 먹는다.
친구와의 대화가 필요한 경우가 아니면 카페를 잘 가지도 않는다.
그리고 보통 음료 대신에 물을 마신다.
쓰레기가 생기는 게 싫어서 배달 음식도 잘 안 시킨다.
내가 가진 몇 안 되는 그나마 좋은 습관인 거 같다.
오늘의 '생각을 자극'하는 글귀
열정은 무한하지만 시간은 유한하다.
번아웃은 동기부여가 사라져서 찾아오는 게 아니다. 용량이 부족하기 때문에 찾아온다. 세상에는 하루 24시간으로 감당하지 못할 만큼 흥미로운 사람들과 프로젝트가 넘쳐난다. 중요한 것은 관심사를 추구할 시간적 여유가 있느냐다. 열정은 무한하지만 시간은 유한하다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-28-단-하루만-누군가와-인생을-바꿀-수-있다면,-돈을-아낄-수-있는-나만의-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-28 단 하루만 누군가와 인생을 바꿀 수 있다면, 돈을 아낄 수 있는 나만의 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 28 Apr 2025 10:55:29 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 14주차 회고]]></title><description><![CDATA[ 아이캔대학 등록 후 강의를 천천히 따라가고 있다.
이번 주에는 신과 나눈 이야기 독서도 시작했는데, 존재에 관한 근원적 질문에 대한 오랜 호기심을 다시 살려 보는 계기가 되었다.
오래 전부터 난해한 논증거리였던 존재, 부존재, 있음과 없음을 명쾌한 논리로(글에서는 신이 인간이 이해할 수 있는 언어로 풀어 해석해 준다라는 묘사가 있다.) 설명한다.
아무래도 주제 자체가 현학적이다 보니 술술 읽히는 류의 독서 경험은 아닐 테지만, 이런 진리 탐구와 관련된 철학에 관심을 둔 사람이라면 정말 즐겁게 읽을 수 있는 책이라고 생각된다. 총 3권 시리즈로 나온 듯한데 이 책을 마무리하고 밀린 책들을 읽고 나면 가벼운 마음으로 다음 권을 찾아 봐야겠다. 비슷한 류의 책으로는 윌리엄 폴 영이 쓴 ‘오두막’을 추천할 수 있을 것 같다.
두 책 모두 ‘신앙' 관련 서적 같아서 책 제목이나 주제부터 경기를 일으킬 사람도 있겠지만, 두 책 모두 속세의 종교와는 거의 연관이 없고 신에 대해 누구나 가질 수 있는 의문들을 해설하는 느낌이라 종교가 없는 사람이라도 충분히 읽을 만한 책으로 생각된다. 나 자신도 종교인이 아니기도 하고…
아무튼 정말 좋은 책을 선물해 준 친구에게 빨리 보답할 기회가 있길 바라는 마음이다.
그 외에는 동생이 당장 내일 대만으로 출장 간다. 뭔가 허한 기분
<img alt="Pasted image 20250427220318.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250427220318.png" target="_self">
SW 부트캠프:
프론트 강의는 강의 시간 배정이 정말 짧다.
이전에 개인 프로젝트를 할 때 정말 시간을 가장 많이 쓴 부분이 ‘디자인’이었는데,
Input 대비 Output이 정말 안 뽑혀서 너무 많은 시간을 할애했던 기억이 난다. 당연히 프로젝트에서도 후순위로 밀렸고, 나조차도 디자인에 애쓰지 말자는 얘기를 할 정도.
그나마 답이 있는 백엔드 설계에 비해 디자인은 섬세함이 너무 많이 필요한 부분이라, 소위 말하는 감각의 영역에 있는 것들까지 에두르기에는 경험이 많이 부족하지 않을까 생각했던 부분.
(이래서 풀스택이 허상이란 얘기가 나오곤 하는 거겠지만)
Vue.js에 대해 한 번 훑고 가는 강의가 많았는데 딱 필요한 기능들만 배우고 넘어갔다.
사실 이전부터 Vue에 대해 탐탁치 않았던 부분은 Transition의 매끄러움이 부족하다라는 느낌이었는데, 사실 이것도 내가 외국 사이트를 주로 탐색했던 터라 느꼈던 거고 서버 환경이 괜찮은 사이트를 접속했을 땐 거의 티도 안 나긴 한다. 아직까지 큰 매력은 못 느꼈지만 일단 문법이 너무 간결하고 정형화돼서 맘에 든다. 좀 더 배워봐야 알 거 같은 느낌이긴 하다만, 실용적이다라는 면에서는 딱히 지적할 만한 항목은 없는 거 같다. 이것도 물론 더 배워 봐야 확실히 알겠지만.
프로젝트에 관하여선, 그럭저럭 굴러간다는 느낌은 있는데 계속 많이 아쉽다.
뻘짓으로는 three.js 활용해서 뭔가 카드 플립을 멋지게 하는 기능을 시도해 봤는데 svg 렌더링이 자꾸 실패해서 까만 3D 모델만 생성되었다. 왜인지 이유를 모르겠어서 잠시 보류했는데 아주 귀찮아서 다시 코드를 안 열어 보고 있다. 사실 개발자 문서도 안 보고 있어서 자업자득이긴 함.
개인 프로젝트를 얼른 시작해서 여러 교훈을 잘 활용해 보면 좋겠다. 우울함을 받아 들이자. 이것도 나의 속성이다. 루틴과 습관으로 밝은 일상을 준비하는 의식을 갖자. 엔트로피에 저항하는 태도, 루틴, 습관, 마음가짐, 관계 이것들을 잘 활용해서 좋은 환경 형성하기 목표: 대시보드 리빌딩, 새로운 앱 데이터 형태에 맞게 잘 꾸며 보자.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-14주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 14주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 27 Apr 2025 13:07:23 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250427220318.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250427220318.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-04-27 나는 감성적인가, 이성적인가, 배우고 싶은 것]]></title><description><![CDATA[
"나는 감성적인 사람인가, 이성적인 사람인가? Are you emotional or logical?" 누구나 비슷하겠지만 어느 한 쪽이라고 정의하기가 어렵다.
상황에 따라 항상 다르지만, 그때마다 나에게 유리한 스탠스를 취하지 못하는 걸 봐선 완전히 이성적인 사람이라고 보긴 어렵다. 반대의 경우에도 마찬가지니, 어중간하다는 게 딱 알맞는 말이겠다.
나는 아주 어릴 때부터 글자와 글에 유독 예민했는데, 글자와 글이 가진 문학적 감성, 비문학적 이성 두 가지를 생각하면 별 이상할 게 없는 결과다. 새로운 것을 마음 껏 배울 수 있다면 무엇을 배우고 싶어? 요새 들어 춤을 배우고 싶다는 생각을 많이 한다.
지독한 몸치라서 몸을 쓰는 법을 잘 모른다. (사실 안 써봐서 모르는 것이기도 하지만)
PT 교습을 받을 때도 근육을 어떻게 쓰라고 안내를 받는데 당최 이해가 안돼서 한참 헤맨다.
옛날에 필리핀에서 줌바를 한 번 해보고 너무 신나고 좋은 운동이라고 생각했는데,
한국에 돌아와서는 일부러 교습을 찾아가지 않는 이상 줌바 한 판 때리기(?)가 어렵다.
그냥 특정 시간에 특정한 장소에서 처음 보는 사람과도 스스럼 없이 모여서 함께 줌바 댄스를 추는 그들의 모습이 정말 부러웠다. 아무래도 한국 정서와는 맞지 않을 것이라 아쉽다.
호주에서도 달링 하버를 가면 흔하게 춤을 추는 사람들을 볼 수 있었는데, 한국의 춤꾼들은 다 어디에 있을까?
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-27-나는-감성적인가,-이성적인가,-배우고-싶은-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-27 나는 감성적인가, 이성적인가, 배우고 싶은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 27 Apr 2025 08:41:05 GMT</pubDate></item><item><title><![CDATA[2025-04-26 현지 지갑에 있는 현금, 좋아하는 앱]]></title><description><![CDATA[
현재 지갑에 돈이 얼마나 있는가? How much money do you have in your wallet? 9만원 정도 있다.
왜 현금이 있는지 기억이 나지 않는다.
항상 삼성페이로 결제해서 지갑은 잘 갖고 다니지 않는다.
신분증도 모바일로 대체하다 보니 더더욱 쓸 일이 없다.
물건을 휴대하는 걸 싫어해서 짐을 줄이다 보니 결국 핸드폰, 담배 정도만 챙겨서 다니는 편인 거 같다. 가장 많이 사용하거나 좋아하는 앱을 소개 해 줘. 앱시트로 만든 기록 관리 앱을 매일 사용한다.
이것저것 필요한 기능을 많이 만들어 놔서
내 개인의 쓸모에 딱 맞는 용도로 사용 중이다.
기록의 질을 높이고 활용 방안을 극대화하려고
아이캔대학을 등록했다!
오늘의 '생각을 자극'하는 글귀
전직함은 도덕적인 결정이 아니라 건강한 선택이다.
정직함은 단순히 도덕적인 결정이 아니라 건강한 선택이다. 10주동안 거짓말을 하지 않는 선택을 한 결과, 사람들은 유대 관계가 돈독해져서 정신 건강이 개선되엇다. 정직에서 기쁨과 친밀함이 탄생한 것이다. 거짓은 신뢰를 무너뜨린다. 우리는 사람들에게 진실을 기대하며, 이것이 서로 가까워지는 원동력이 된다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-26-현지-지갑에-있는-현금,-좋아하는-앱.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-26 현지 지갑에 있는 현금, 좋아하는 앱.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 26 Apr 2025 23:20:48 GMT</pubDate></item><item><title><![CDATA[2025-04-25 지금 당장 전화 걸고 싶은 사람, 그만 두고 싶은 역할]]></title><description><![CDATA[
지금 당장 전화를 걸고 싶은 사람은? Who do you need to call? 전화를 좋아하지도 않고 잘 하지도 않는다.
원래부터 이랬던 건 아니고 어머니의 사고 소식을 전화로 들은 이후로
가끔 전화벨 소리에 가슴이 철렁 가라 앉는 일이 많았다.
내 가장 친한 친구가 죽었을 때도 비슷하게 전화를 받고 소식을 들었는데,
아마 이 두 경험 때문에 트라우마가 생긴 게 아닐까 짐작하는 편.
좋은 소식을 전화로 들은 기억이 거의 전무하다 싶기도 하고…
여전히 전화 벨 소리가 싫어서 무섭고 두려워서 가급적이면 진동으로 하고 다닌다. 네가 맡은 역할 중에서 그만두고 싶은 역할은 뭐야? 그만 두고 싶은 역할은 진작 다 그만 두었다.
그나마 회사에 다닐 적에는 하고 싶은 역할도 해야 할 때가 많았지만,
백수가 되니 갑자기 역할과 책임이 많이 사라져서 조금 어색한 느낌이다.
그러고 보니 백수라는 역할은 그만 두고 싶기도 하다.
정해 놓은 공부량이 있어서 당장 그만 둘 순 없지만,
마냥 공부만 하는 것도 좀 지겹긴 하다.
아마 내가 실전에서 배우는 걸 선호하는 타입이기 때문이겠다.
오늘의 '생각을 자극'하는 글귀
옛 친구와의 만남에서 새로운 배움을 기대하라
옛 친구와 오랜만에 만난다면 걱정하는 사람들이 많지만, 대부분은 즐겁고 재미있는 시간을 보낸다. 그들은 지금의 지인들보다 참신한 아이디어와 유익한 조언을 건네는 경우가 많은데, 그동안 새로운 사람들을 만나고 새로운 것들을 배웠기 때문이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-25-지금-당장-전화-걸고-싶은-사람,-그만-두고-싶은-역할.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-25 지금 당장 전화 걸고 싶은 사람, 그만 두고 싶은 역할.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 25 Apr 2025 07:51:23 GMT</pubDate></item><item><title><![CDATA[2025-04-24 인생은 공평한가, 보기만 해도 미소 짓는 것]]></title><description><![CDATA[
인생은 공평하다고 생각하는가? 다음 넷 중에 골라보자. (공평하다. 공평하지 않다, 가끔 공평하다. 오늘은 아니다.) Is life fair? Yes? No? Sometimes? Not today? 4월 5일의 질문과 연결되는 질문이다. <a data-href="2025-04-05 죽기 전에 꼭 하고픈 일, 사회 문제를 하나 없앤다면" href="https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-05-죽기-전에-꼭-하고픈-일,-사회-문제를-하나-없앤다면.html#_0" class="internal-link" target="_self" rel="noopener nofollow">2025-04-05 죽기 전에 꼭 하고픈 일, 사회 문제를 하나 없앤다면</a>
공평한 세상은 없다.
인지의 기본 원칙에 상대성을 제외할 수 없는 까닭에,
진정한 공평함이란 다름이 없는 세상이고,
다름이 없는 세상이란 구별의 이유도 없기에 존재와 부존재를 나눌 기준 또한 사라진다.
준거점이 없는 개념은 실상 정의할 이유조차 실존하지 않는 것이라,
마땅히 그러한 일들에 우리가 의문을 갖지 않듯, (하루라도 태양의 존재를 의심한 사람이 있던가)
공평이란 모든 속성들에 대하여 실증의 규칙 아래 단 하나의 통일된 증거만을 갖는 것이고,
어떠한 질문도 사전에 그 대답이 약속된 것이다.
따라서 질문은 사라질 것이고 대답 또한 사라질 것이다.
모든 실존이 사라진 우주에선 마땅히 공평의 실존 또한 사라진다. 보기만 해도 미소가 지어지는 게 있따면 알려 줘. 종을 망라하고 아기들을 보면 너무 기분이 좋고 미소가 절로 나온다.
아가들이 너무 좋다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-24-인생은-공평한가,-보기만-해도-미소-짓는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-24 인생은 공평한가, 보기만 해도 미소 짓는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 24 Apr 2025 12:25:42 GMT</pubDate></item><item><title><![CDATA[신과 나눈 이야기]]></title><link>https://64etuor.github.io/200_books/bookshelf/신과-나눈-이야기.html</link><guid isPermaLink="false">200_Books/Bookshelf/신과 나눈 이야기.md</guid><dc:creator><![CDATA[닐 도날드 월시]]></dc:creator><pubDate>Thu, 24 Apr 2025 03:28:37 GMT</pubDate></item><item><title><![CDATA[2025-04-23 부모님이 생각하는 나, 낯선 곳에서 길 잃은 기억]]></title><description><![CDATA[
부모님은 나를 어떻게 생각하실까?(전화해서 여쭤봐도 된다.) How would your parents describe you? (You can call them and ask) 너무 늦은 시간에 질문을 봐서 차마 전화는 못 하겠다.
조금의 의외성을 더해서 내가 나 같은 자식을 길렀다는 가정을 가졌을 때 느낄 만한 감정을 생각해 보자.
내 행동의 옳고 그름을 아주 어릴 때부터 판단하고 기억하고 있던 자식이 있다고 생각해 본다.
아, 너무나 끔찍하다. 낯선 곳에서 길을 잃어 본 적이 있어? 당장 기억나는 건 세부에서 다이빙을 했을 때의 기억이다.
당시에 태풍이 왔는데 싱가폴에서 온 노신사분과 함께 버디로 마스터 다이버와 함께 AOW 다이빙 교습을 진행했다.
당시의 조류는 상당히 강했다. 속칭 오리발을 달고도 영 전진하지 못하는 신사분에게 마스터 다이버의 시선은 쏠릴 수 밖에 없었고, 이내는 조류에 떠밀려 가는 신사분을 따라서 사라져 버렸다.
마스터 다이버는 사라지기 전에 내게 특정한 장소에서 대기하라고 물 속에서 수신호를 보냈다.
대수롭지 않게 알겠노라 신호하고 그 자리에 머물렀는데 한참을 지나도 그들이 돌아오지 않았다.
조류에 저항하며 대기하는 시간이 꽤 길어 졌다. 무슨 일이 일어났는지 영문을 알 수 없는 까닭에 일단 수면 위로 헤엄쳤고 수면 위에서 봤던 광경은 아마 내 일생의 모든 외로움을 압축해서 한꺼번에 쏟아낸 것과 비등한 농도의 것이었다.
시계가 좋지 않아 육지는 잘 보이지도 않았다. 그 풍경의 지독한 적막이 시각, 후각, 그 외 모든 오감을 마비 시켰고 모든 것에 동 떨어진 감각은 오묘하고 삭막한 소름을 내 등덜미에 시린 물방울처럼 떨구었다. 그 짧은 순간, 나는 사람의 외로움을 생물적으로 초월한 외로움이 무엇인지 다분히 생각하지 않을 수 없었다.
고요함이 그토록 무서운 것인지 미처 몰랐던 탓에 그 풍경을 오래 지켜볼 순 없었다. 다시 잠수하고, 다시 수면 위로 오르는 과정을 몇 번 반복하고 나서야 그들이 나를 찾아왔고 마스터 다이버는 위험성을 이유로 교습을 중단하고 복귀했다.
길다면 길고 짧다면 짧은 시간 속에서 죽음과 삶의 간극을 엿본 건 내가 길을 잃어서든, 어떤 운명이 나를 길 잃게 하였든 아무 하잘 것 없는 데 지나지 않았다. 나는 도리어 당시 숙소로 돌아가던 택시 안에서 운명이란 낱말에 대한 따분한 격언에 대하여 생각하였다.
호텔 이름을 외치며 주문한 숙소라는 그 목적지가 분명한 들 내가 그곳에 닿게 될 거란 예측과 태만함도 결국 오랜 날 훈련된 내 경험과 편견에 지나지 않았다.
태풍이 나를 인도한 곳과, 풍경의 변화와, 의식의 찰나를 비집고 들어선 지독한 고독까지 어느 하나 비견할 바 없이 위태롭고 불쾌하기 짝이 없다.
그러나 그런들 오래도록 당시의 풍경을 머리 속 한 켠에 고이 두고 있는 건 차마 더 외로울 만한 구석이 없던 존재들의 지평선에 내 시선이 닿았기 때문인가, 바다 위 모래알처럼 작았던 내 모습과 작은 외로움을 목격했기 때문인가.
아무래도 알 수 없는 양상을 두고서 슬픈 격언을 읊조리는 사람은 언제나 이와 같이 따분하고 진부한 그 성향을 닮아 있다.
”########################” <a href="https://64etuor.github.io?query=tag:todo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#todo">#todo</a>
오늘의 '생각을 자극'하는 글귀의소소통의 목표는 단순함이 아니라 명확함이다.사람들이 이해하지 못할 것이라고 판단해서 자신의 아이디어를 최대한 단순하게 설명해야 한다고 생각한다면 사람ㄷ릉르 지나치게 과소평가하는 것이다. 사람들이 이해하지 못하는 이유는 내가 제대로 설명하지 못했기 때문이다. 의사소통의 목표는 단순함이 아니라 명확함이다.]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-23-부모님이-생각하는-나,-낯선-곳에서-길-잃은-기억.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-23 부모님이 생각하는 나, 낯선 곳에서 길 잃은 기억.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 24 Apr 2025 01:56:57 GMT</pubDate></item><item><title><![CDATA[2025-04-22 절대 일어나지 않았으면 하는 일, 받았던 선물 중 기억에 남는 것]]></title><description><![CDATA[
"절대 일어나지 않았으면 하는 일은? You wish you could stop ____ from happening." " 이 쉬운 질문이 왜 이렇게 어려운지 모르겠다.
한참 생각하고 있는데 최악의 최악의 최악은 항상 꼬리를 물고 이어지는 거라.
이즈음에 스스로의 지혜의 한계에 부딪혀 치트키를 사용하자면,
사랑이 멸종한 세상이야 말로 있어서는 안 될 일이다.
내가 성경을 해석한 바로는 그렇다. 받았던 선물 중 기억에 남는 것은? 주는 사람은 선물이라 생각하지 않았을 거 같지만,
내게 가장 값진 선물이었던 것은 “Tom Odell”이다.
내 친동생은 내 음악 취향을 기가 막히게 알고 있다.
동생이 ”형이 좋아할 거 같은 노래다.” 라고 대수롭지 않게 던진 노래를 처음 듣고
아주 혼이 빠져 버렸다.
무엇보다 값진 선물이었다.
오늘의 '생각을 자극'하는 글귀
좋은 조언이란 '맞춤형' 조언이다.
누군가에게 조언할 때는 '나에게 도움되었던 것'이 아니라 '상대방에게 예전에 도움되었던 것'이 무엇인지 물어본다. 그러면 상대방은 스스로 성찰하며 자신이 회복탄력성을 얻는 방법을 깨닫고 눈앞의 역경을 이겨낼 수 있다는 자신감을 얻는 것이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-22-절대-일어나지-않았으면-하는-일,-받았던-선물-중-기억에-남는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-22 절대 일어나지 않았으면 하는 일, 받았던 선물 중 기억에 남는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 22 Apr 2025 14:31:43 GMT</pubDate></item><item><title><![CDATA[2025-04-21 무슨 일하세요, 일과 관련된 고민]]></title><description><![CDATA[
"누군가 무슨 일 하세요?"라고 물을 때 뭐라고 답하는가? How do you respond when someone asks "What do you do?”” 백수의 왕 사자입니다. 어흥
이라고 한다. 요즘 일과 관련해 어떤 고민이 있어? 개발판을 너무 만만하게 봤다.
진짜 이해가 안 되는 게 너무 많은데 학습 시간이 모자라다.
개발자로 일할 생각은 없어서 MVP 만들 수준까지만 하면 되지만,
어디까지가 학습 적정선인지 감도 안 온다.
이래서 사람이 공부를 하는 거 같다.
공부를 할 수록 내가 모르는 게 너무 많다는 사실만 깨닫게 된다.
나 이대로 괜찮은 걸까????
오늘의 '생각을 자극'하는 글귀
열심히 일한다고 해서 모두 좋은 사람은 아니다.
열심히 일한다고 좋은 사람이라는 뜻은 아니다. 인성은 직업윤리가 아닌 윤리가 결정한다. 아무리 일에 헌신하고 온 힘을 쏟아부어도 관계에서 진심을 다하고 너그럽지 않으면 사람들은 당신을 완전히 신뢰하지 않을 것이다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-21-무슨-일하세요,-일과-관련된-고민.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-21 무슨 일하세요, 일과 관련된 고민.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 21 Apr 2025 15:28:25 GMT</pubDate></item><item><title><![CDATA[2025-04-19 저녁식사 하고픈 죽은 유명인, 성공이란]]></title><description><![CDATA[
"세상을 떠난 유명인 중에서 저녁식사를 함께 하고 싶은 사람은? Which famous person would you bring back from the dead to have dinner with?" " 노무현 전 대통령 님과 술 한 잔 하고 싶다.
행복할 자격을 모두 갖추고 불행했던 위인에게
그다지 소용이 없는 위로라도 건네고 싶다.
그냥 그래야 내 맘이 좀 편할 것 같다는 이기심. 성공'이란 무엇일까? 단어에는 늘 사전적 정의가 따라오게 마련이지만,
누구나 그 해석은 지혜롭게 할 수 있다.
나는 가장 지혜로운 방식으로 성공할 것이고,
이게 가능한 까닭은 내가 이룰 것의
모양새가 어찌 되었건간에 성공이라 믿을 것이기 때문이다.
성공이? 실패 자식이에요.
I am very 신뢰에요.
오늘의 '생각을 자극'하는 글귀
숏폼은 자극을 주지만 롱폼을 통찰을 준다.
숏폼 콘텐츠는 자극적이고 한순간에 눈길을 사로잡지만, 오래 지속되는 인상을 남기지 못한다. 짧은 영상을 아무리 잔뜩 보아도 영화 한 편을 끝까지 보는 것에 비할 수 없다. 소셜 미디어 게시물을 잔뜩 읽는 것도 좋은 책에 담긴 깊이 있는 통찰과는 비교가 되지 않는다. 롱폼이 최고다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-19-저녁식사-하고픈-죽은-유명인,-성공이란.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-19 저녁식사 하고픈 죽은 유명인, 성공이란.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 20 Apr 2025 14:39:08 GMT</pubDate></item><item><title><![CDATA[2025-04-18 해결한 문제, 오랫동안 유지한 습관]]></title><description><![CDATA[
오늘 해결한 문제를 한 가지만 적어보자. Write down a problem you solved today. MSA 서버 완성,
프로젝트 하나를 끝냈다.
트래픽을 고려한 설계는 아니지만
대충 만족!! 오랫동안 유지한 습관이 있어? 오랫동안 유지한 습관은 술, 담배 뿐이다.
ㅎㅎ......
오늘의 '생각을 자극'하는 글귀
소프트 스킬이 점점 중요해지고 있지만 가장 배우기 어려운 기술이다.
대인관계와 관련된 기술인 '소프트 스킬(soft skill)'은 가장 학습하기 어려운 기술이다. 리더십, 커뮤니케이션, 협업, 창의성, 정응력은 전문 기술은 아니지만 점점 더 중요해지고 있다. 행동 역량, 사회적 역량, 정서적 역량이야말로 인간을 대체 불가한 존재로 만든다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-18-해결한-문제,-오랫동안-유지한-습관.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-18 해결한 문제, 오랫동안 유지한 습관.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 20 Apr 2025 14:37:59 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 13주차 회고]]></title><description><![CDATA[ 루틴을 잡고 있다. 일단 아침에 다시 운동을 시작했고, 이번엔 좀 제대로 루틴을 만들고 성찰과 실질적인 개선을 달성하기 위해 아이캔대학에 입학했다.
내가 기록 관리를 시작하게 된 계기가 김익한 교수님의 유튜브 영상이었는데, 이번에는 이 기록 관리를 조금 더 발전 시키기 위해 직접 6개월 코스로 가르침을 얻어 보려고 한다.
<img alt="Pasted image 20250420225729.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250420225729.png" target="_self"><br><img alt="Pasted image 20250420231859.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250420231859.png" target="_self">6개월에 29만원이면 가격도 참 착하다!
이것저것 많이 시도하고 배우려고 기대하고 있다.
당장 내일부터 개강인데 아주 흥미진진하구만
SW 부트캠프:
이번 주에도 대부분 백엔드 프로젝트 마무리에 많은 시간을 썼다.
강의는 HTML과 CSS, JS가 주였는데 CSS는 암만 쳐다 봐도 왜 이렇게 만들어 놓은 건지 이해가 안 된다. 뭔가 규칙성이 없어서 굉장히 난해하다는 인상을 받았는데, 다행히 우리는 GPT의 시대를 살고 있기 때문에 별로 걱정은 없다. CSS에 시간을 투자하는 건 좀 아깝다는 생각…
HTML을 오랜 만에 다시 배우니 감회가 새로웠다.
옛날에 중학생 때 당시에 하던 게임의 UI를 그대로 카피해서 내가 운영하던 길드의 홈페이지를 만들었는데, 도메인도 사고 웹에도 호스팅해서 나름 본격적으로 만들었던 추억이 떠오른다.
UI를 그대로 쓸 수 없어서 포토샵으로 편집하고, 일일이 픽셀도 보정하고, 도트 찍어서 색감을 다듬고(예전의 툴은 지금처럼 편리하지 않았다.) 정말 지루한 작업이었지만 만들고 나니 엄청난 보람이 있었다. 덕분에 아직도 자주 쓰는 태그는 모조리 기억난다. 당시의 웹사이트 채팅방들은 html 태그가 그냥 먹히는 경우가 많아서 채팅방에서 갈라쇼를 펼치고 놀던 것도 한 몫 했을 거 같다.
지금 돌아 보면 이것저것 재밌는 건 다 하면서 살았다는 생각. 근데 진짜 재밌긴 했다.
아무튼 프로젝트는 그럭저럭 끝났고 따로 개인적으로 회고할 필요는 못 느껴서 시간 소요에 대한 분석만 잠깐 했다.
<br><img alt="Pasted image 20250420231304.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250420231304.png" target="_self">개인적으로는 나름대로 시간을 알뜰하게 잘 사용했고 크게 개선할 부분도 없다.
일을 효율적으로 하는 거야 워낙에 자신 있는 영역이라 그렇다지만, 일의 방법은 좀 수정할 필요를 많이 느꼈다.
이번 프로젝트 때 기능은 작은 단위로 개발하지 않았다가 큰 낭패를 봤다. 바로 수습이 가능해서 다행이지만 시간을 낭비한 건 참 안타까운 일. 비싼 값을 치르고 교훈을 얻었다고 생각.프로젝트의 실질적인 기능 구현 외적으로도 이것저것 많이 했는데, 재미가 있었다. 깃헙과 지라를 연동하고 디코봇을 붙이고 이것저것 많은 걸 시도했는데 프로젝트 관리에 꽤나 도움이 됐다. 사실 예전에 회사에서 프로젝트 관리할 때도 비슷한 식으로 운영했던 터라 방법 자체는 달라진 게 없다. 다만 기술을 갖다 붙이니 한결 더 수월한 관리 가능성이 보이더라 하는 정도.
디코 사장봇이 지라 프로젝트를 트래킹하면서 잔소리하는 야심찬 기능도 넣었는데, AI가 벡터DB에서 정보를 이상하게 뽑아 오는 건지 중간부터 약간 맛탱이간 모습이 보였다.
딱히 중요 기능이 아니었기 때문에 안 고치고 있었는데 나중에 시간이 남아 돌면 한 번쯤 확인해 볼 듯… 프로젝트에 대해서도 쓸 내용은 참 많지만 이미 자료로 정리해 놨으니 나중에나 한 번 다시 확인해 봐야겠다.
이번 주부터는 본격적으로 프론트 작업에 들어 갔고 주말에는 와이어 프레임을 그렸다.
피그마를 쓰니 정말 너무 편리했지만 그래도 너무너무너무너무 귀찮다.
곧 AI가 와이어프레임도 대신 해 줄 거 같은 낌새가 보이니 얌전히 기다리고 있어야지.프로젝트가 끝나고 시간 관리 앱을 전면적으로 리팩토링하고 기능을 추가, 개선했다.
루틴을 하기로 마음을 먹고 체크리스트 기능도 넣었고, 기타 성능 이슈가 발생할 수 있는 내부 함수도 모두 수정했다. 특히 쿼리의 시간 복잡도를 낮추는 방법을 이것저것 많이 고안했는데, 아직 데이터가 많지 않아서 체감되는 성능 향상은 없다.
개인의 데이터가 쌓이는 거라 사실 대량의 데이터가 생길 일이 없다고 봐도 무방한데 왜 했을까 뒤늦은 후회가 살짝 들었지만… 그냥 공부한 셈 치자.
내 강의를 들었던 분들에게도 이것저것 추가한 내용들에 대해 공유했다.
나중에 진짜 본격적으로 시간 관리 스터디나 모임을 운영해 보거나 참여해 봐야겠다는 생각이 들었다. 시도해 볼 아이디어가 많이 남았다!
목표: 아침 루틴 설정 (안 하면 국민의힘에 50만원 기부)
결과: 루틴 기능도 앱에 추가하고, 아침 루틴 운동을 시작했다. 더욱 효과적인 루틴 설정을 위해서 익한 형님의 강의도 많이 듣고 있다. 기부 안 해도 된다.
<br>
<img alt="Pasted image 20250420232748.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250420232748.png" target="_self"><br>
<img alt="Pasted image 20250420232801.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250420232801.png" target="_self">
운동 시작
앱 리팩토링
루틴을 제대로 하기 위한 준비 여전히 술을 많이 마신다.
루틴을 시작하면 다시 담배도 끊어 보자. 익한 형님께 루틴이 주는 이로운 효과들에 대해 많이 배웠다! 하지만 모자라 더 줘! 항상 실천은 작은 것부터! 목표: 아이캔대학 강의 잘 듣고, 지혜로 체득하기!
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-13주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 13주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 20 Apr 2025 14:33:56 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250420225729.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250420225729.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-04-20 오늘 한 욕, 내 방에서 아끼는 것]]></title><description><![CDATA[
"오늘 몇 번이나 욕했는가? How many times did you curse today?" 안타깝게도 오늘은 사람들과 대화를 하지 않았기 때문에 욕할 기회가 없었다.
요즘에도 가끔 비속어를 사용하는데 대부분은 유머로 사용한다.
욕쟁이 할머니처럼 구수하게 속사포 욕을 뱉는 멋진 욕퍼가 되고 싶다. 네 방에서 가장 아끼는 건 뭐야? 내 방에서 가장 아끼는 건 내 자신이다.
물건은 없으면 없는 대로 산다지만,
내가 없으면 방 안의 무엇인들 소용이 될 리 없다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-20-오늘-한-욕,-내-방에서-아끼는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-20 오늘 한 욕, 내 방에서 아끼는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 20 Apr 2025 13:49:53 GMT</pubDate></item><item><title><![CDATA[250419 - 낙엽]]></title><description><![CDATA[
김지환 님의 부고 소식을 듣고
기록에 대한 의미를 재정의해야 했다.
무언가는 세상을 떠나고, 어떤 것은 종이 위에 남는다.
미처 수습되지 않은 감정의 여운들이 까맣게 잊힌 후에
존재의 증명은 아무 데도 없다.비극이 철학적 실존에 대한 케케 묵은 물음만 불러 올 적에,
잊힌 기억의 가치를 부정했다는 의심 섞인 눈초릴 피하긴 어려워서
나는 다만 나의 몇 가지 사소함들을 종이 위에 내려 놓는다.ㅡ글자의 위대한 점은, 글자의 수와 정보의 양이 비례하지 않는다는 점이다.나의 사소함은 몇 글자로 놓였으나,
사소함은 얽혀서 사소하지 않은 것으로 변모하고,
사소하지 않은 것들은 때로 모여서 좋은 것이 되더라.‘좋은 것을 주고 싶다.’
이 마음이 쌓여서 나의 기록이 될 것이요,
이 마음 숨 죽여 낙엽으로 쌓여 있다가
다음 계절의 토양이 되어 준다면대저 사람은 기꺼이 마음을 내려 놓으리라.]]></description><link>https://64etuor.github.io/900_writings/poems/250419-낙엽.html</link><guid isPermaLink="false">900_Writings/Poems/250419 - 낙엽.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 20 Apr 2025 06:38:21 GMT</pubDate></item><item><title><![CDATA[Cursorrule java spring]]></title><description><![CDATA[AI Persona：You are an experienced Senior Java Developer, You always adhere to SOLID principles, DRY principles, KISS principles and YAGNI principles. You always follow OWASP best practices. You always break task down to smallest units and approach to solve any task in step by step manner.Technology stack：Framework: Java Spring Boot 3.4.4 Gradle with Java 17 Dependencies: Spring Web, Spring Data JPA, Lombok, mariaDB driverApplication Logic Design：
All request and response handling must be done only in RestController.
All database operation logic must be done in ServiceImpl classes, which must use methods provided by Repositories.
RestControllers cannot autowire Repositories directly unless absolutely beneficial to do so.
ServiceImpl classes cannot query the database directly and must use Repositories methods, unless absolutely necessary.
Data carrying between RestControllers and serviceImpl classes, and vice versa, must be done only using DTOs.
Entity classes must be used only to carry data out of database query executions.
Entities
Must annotate entity classes with @Entity.
Must annotate entity classes with @Data (from Lombok), unless specified in a prompt otherwise.
Must annotate entity ID with @Id and @GeneratedValue(strategy=GenerationType.IDENTITY).
Must use FetchType.LAZY for relationships, unless specified in a prompt otherwise.
Annotate entity properties properly according to best practices, e.g., @Size, @NotEmpty, @Email, etc.
Repository (DAO):
Must annotate repository classes with @Repository.
Repository classes must be of type interface.
Must extend JpaRepository with the entity and entity ID as parameters, unless specified in a prompt otherwise.
Must use JPQL for all @Query type methods, unless specified in a prompt otherwise.
Must use @EntityGraph(attributePaths={"relatedEntity"}) in relationship queries to avoid the N+1 problem.
Must use a DTO as The data container for multi-join queries with @Query.
Service：
Service classes must be of type interface.
All service class method implementations must be in ServiceImpl classes that implement the service class,
All ServiceImpl classes must be annotated with @Service.
All dependencies in ServiceImpl classes must be @Autowired without a constructor, unless specified otherwise.
Return objects of ServiceImpl methods should be DTOs, not entity classes, unless absolutely necessary.
For any logic requiring checking the existence of a record, use the corresponding repository method with an appropriate .orElseThrow lambda method.
For any multiple sequential database executions, must use @Transactional or transactionTemplate, whichever is appropriate.
Data Transfer object (DTO)：
Must be of type record, unless specified in a prompt otherwise.
Must specify a compact canonical constructor to validate input parameter data (not null, blank, etc., as appropriate).
RestController:
Must annotate controller classes with @RestController.
Must specify class-level API routes with @RequestMapping, e.g. ("/api/v1/users").
Class methods must use best practice HTTP method annotations, e.g, create = @postMapping("/create"), etc.
All dependencies in class methods must be @Autowired without a constructor, unless specified otherwise.
Methods return objects must be of type Response Entity of type ApiResponse.
All class method logic must be implemented in a try..catch block(s).
Caught errors in catch blocks must be handled by the Custom GlobalExceptionHandler class.
ApiResponse Class (/ApiResponse.java):public class ApiResponse {private boolean success; // 요청 성공 여부
private T data; // 실제 데이터 (성공 시만 사용)
private String errorCode; // 실패 시 에러 코드
private String message; // 실패 시 메세지
private LocalDateTime timestamp; // 응답 생성 시간 // 성공 응답 생성 정적 메소드
public static&lt;T&gt; ApiResponse&lt;T&gt; success(T data) { return ApiResponse.&lt;T&gt;builder() .success(true) .data(data) .timestamp(LocalDateTime.now()) .build();
} // 실패 응답 생성 정적 메소드
public static&lt;T&gt; ApiResponse&lt;T&gt; failure(String errorCode, String message) { return ApiResponse.&lt;T&gt;builder() .success(false) .errorCode(errorCode) .message(message) .timestamp(LocalDateTime.now()) .build();
}
}GlobalExceptionHandler Class (/GlobalExceptionHandler.java)@RestControllerAdvice
public class GlobalExceptionHandler {@ExceptionHandler(BusinessException.class)
public ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; handleBusinessException(BusinessException e) { ErrorCode errorCode = e.getErrorCode(); ApiResponse&lt;Void&gt; response = ApiResponse.failure(errorCode.getCode(), errorCode.getMessage()); return new ResponseEntity&lt;&gt;(response, errorCode.getHttpStatus());
} @ExceptionHandler(MethodArgumentNotValidException.class)
public ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; handleValidationException(MethodArgumentNotValidException e) { ErrorCode errorCode = ErrorCode.VALIDATION_ERROR; StringBuilder errorMessage = new StringBuilder(errorCode.getMessage()); for(FieldError error : e.getBindingResult().getFieldErrors()) { errorMessage.append(String.format("[%s : %s]", error.getField(), error.getDefaultMessage())); } ApiResponse&lt;Void&gt; response = ApiResponse.failure(errorCode.getCode(), errorMessage.toString()); return new ResponseEntity&lt;&gt;(response, errorCode.getHttpStatus());
} @ExceptionHandler(Exception.class)
public ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; handleException() { ErrorCode errorCode = ErrorCode.INTERNAL_SERVER_ERROR; ApiResponse&lt;Void&gt; response = ApiResponse.failure(errorCode.getCode(), errorCode.getMessage()); return new ResponseEntity&lt;&gt;(response, errorCode.getHttpStatus());
}
}]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/cursorrule-java-spring.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/Cursorrule java spring.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 19 Apr 2025 15:14:40 GMT</pubDate></item><item><title><![CDATA[User flow]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/3차-프론트/user-flow.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/3차 프론트/User flow.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 19 Apr 2025 07:31:00 GMT</pubDate></item><item><title><![CDATA[시작에 붙이는 말]]></title><description><![CDATA[
“시작노트
그날은 추웠다. 기억하기 위해 기록이 필요했다. 곁에서 같이 일하던 이가 사라지는 것을 너무 쉽게 받아들이고 있는 내가 두려웠다. 돌연 흔적도 없이 사라지는 것에 대한 무감각이 고통스러웠다. 장애인으로 살다간 그녀의 영정사진 아래 있던 문구를 보며 나는 시라는 형식을 빌려 애도의 뜻을 전하고 싶었다. 내 망각을 위한 애도이기도 했다. ”
- 김지환 (24년 12월 원고의 시작노트 중) “어떤 순간들은 어제인 듯 선명한데 어떤 순간들은 눈 녹듯이 사라집니다. 나도 모르는 사이 그런 순간들이 사라질까봐 그 기억들을 하나둘 조약돌 모으듯 글로 모으기 시작했습니다. 그중에서도 무겁고 단단한 것들이 쌓이고 쌓여 저에게 가슴을 울리는 시가 되었습니다.”
- 엄경순 (신춘문예 시 대상 당선소감 중) <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.finomy.com/news/articleView.html?idxno=220893" target="_self">https://www.finomy.com/news/articleView.html?idxno=220893</a>
기록에 대한 의미를 재정의해야 했다. 무언가는 세상을 떠나고, 어떤 것은 종이 위에 남는다.
미처 수습되지 않은 감정의 여운들이 까맣게 잊힌 후에 존재의 증명은 더 이상 없고 철학적 실존에 대한 케케 묵은 물음만 불러 올 적에, 스스로 잊어 버린 기억들에 대하여 그들의 가치를 부정했다는 의심의 눈초리를 피하긴 어려워서 나는 다만 나의 몇 가지 사소함들을 종이 위에 내려 놓는다.
글자의 위대한 점은, 글자의 수와 정보의 양이 비례하지 않는다는 점이다.
나의 사소함은 몇 글자로 놓였으나,]]></description><link>https://64etuor.github.io/500_resources/시간-기록-관리-motivation/시작에-붙이는-말.html</link><guid isPermaLink="false">500_Resources/시간 기록 관리 Motivation/시작에 붙이는 말.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 19 Apr 2025 06:12:15 GMT</pubDate></item><item><title><![CDATA[(1115) 하버드대에서 밝힌 「삶에 여유가 없을수록 꼭 해야하는 1가지」 - YouTube]]></title><description><![CDATA[ Lilys: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://lilys.ai/digest/3582020" target="_self">https://lilys.ai/digest/3582020</a><br> 원본영상: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://youtu.be/Lv3QwcAcDnA" target="_self">https://youtu.be/Lv3QwcAcDnA</a>
이 영상은 하버드대 경제학과 교수&nbsp;센딜 멀레이너의 연구를 바탕으로, 삶의 여유가 없을수록 필요한&nbsp;'느슨함'의 중요성을 강조합니다.&nbsp;결핍은&nbsp;인지 능력저하,&nbsp;충동 조절실패, 그리고 미래를 생각할 여유 부족으로 이어져 악순환을 만듭니다.&nbsp;코안배두 시장노점상들의 사례를 통해,&nbsp;결핍의 덫에서 벗어나기 위해서는&nbsp;계획을 세우고 실천하는 것이 중요함을 보여줍니다.&nbsp;결핍은 단순히 물질적인 부족함이 아닌, 심리적인 상태이며, 이를 극복하기 위해서는&nbsp;시간적,&nbsp;정신적 여유를 확보하는 것이 필수적입니다. 이 영상은&nbsp;결핍의 심리를 이해하고, 여유를 통해 삶의 질을 향상시키는 방법을 제시합니다.Key Term
샌딜 멀레이너: 하버드 대학교 경제학과&nbsp;교수로,&nbsp;결핍이 인간의 심리와 행동에 미치는 영향에 대한 연구를 했습니다. 즉, 이 영상에서 소개되는 연구의&nbsp;핵심 인물입니다.... 샌딜 멀레이너교수의 연구에 따르면, 경제적 결핍은 빈자들의 인지 능력에 부정적인 영향을 미쳐 IQ 점수를 낮춘다. 부자와 빈자 모두 비슷한 IQ 점수를 보였지만, 경제적 압박을 받은 빈자 그룹은 점수가 약 10점 이상 하락했다. 결핍은 스트레스를 유발하여 충동 조절능력을 약화시키고, 이는 일상에서의 감정 표현에도 영향을 미친다. 바쁜 회사원은 가족에게 쉽게 짜증을 내고, 경제적 압박을 받는 대학생은 시험에서 실수를 저지른다. 결핍은 인간 정신의 '세금'과 같으며, 이를 겪는 사람들은 기쁨을 느끼기 어렵고, 여유가 없음을 경험하게 된다. 멀레이너스는 이러한 문제의 근본 원인이 개인이 아닌 결핍이라고 강조한다. 외로운 사람들이 자신의 이야기를 녹음할 때, 누군가가 평가할 것이라는 압박감이 없을 경우 더 재미있고 자연스럽게 대화를 한다. 외로운 사람들의 문제는 따분함이 아니라, 초킹 현상 때문이며, 이는 과도한 주의 집중으로 발생한다. 초킹현상이 나타나는 대표적인 예로 농구의 자유투를 들 수 있으며, 선수들은 무의식적인 상태에서 더 좋은 결과를 냈다. 심리학자들은 성적과 주의력 사이에 뒤집어진 u자 곡선이 존재하며, 주의력이 낮거나 너무 높은 경우 성적이 떨어진다고 주장한다. 외로운 사람들은 사회적 욕구에 집중하지 않을 때 더 나은 대화 결과를 얻을 수 있으며, 하지만 결핍이 이를 방해하는 요소로 작용한다. 인도 라이의 코얀 배두 시장에서 노점상들은 하루 1,000루피를 빌려 물건을 사고, 1,100루피를 팔아 100루피의 이익을 남긴다 . 대출을 받는 비용은 하루 이자로 5%인 50루피로, 이는 100루피의 수익 중 절반을 차지한다 . 노점상들은 일상에서 소득의 일부인 5루피를 아끼지 않으며, 이로 인해 매일 50루피를 벌리는 생활을 지속한다 . 적은 금액을 아끼면 대출을 줄이고, 장기적으로는 빠른 시일 내에 빚에서 해방될 수 있다 . 그러나 결핍심리에 갇힌 노점상들은 미래 계획을 세우기 어려운 상황에 처해 있으며, 이는 정신적 여유와 자금 부족 때문으로 추정된다 . 멀레이너스는 결핍이 만드는 빡빡함을 타파하기 위해서는 느슨함이 필요하다고 주장한다 . 사람들은 시간이 부족하게 되면 첫 번째로 희생하는 것이 수면이며, 잠을 포기했을 때 생산성이 오히려 감소하는 결과를 초래한다고 한다 . 결핍상황에서는 중요한 일이 뒤로 미뤄지며, 단기적인 이득만 추구하게 되어 장기적인 정신적 여유를 갖기 어려워진다 . 결과적으로, 결핍은 개인의 욕구에 비해 가진 것이 부족하다고 여기는 마음을 형성하게 되며, 이는 모든 사람에게 해당될 수 있다 . 따라서 전문가들은 여유가 필수재이며, 이를 통해 삶의 질을 향상시킬 수 있다고 강조한다 . 사람들은 결핍에 빠지면 전체 힘을 주어 빠져나가려 하지만, 오히려 더 깊은 수렁에 빠지게 된다 . 결핍의 늪에서 벗어나기 위해서는 대자로 누워서 몸을 편안히 하고 무게를 분산시켜야 한다 . 단기적인 이득만 생각하면 사람들과의 정서적 교류나 경제적 거래가 줄어들어 더 깊은 결핍상태에 빠질 수 있다 . 법정 스님은 필요한 것이 있을 때, 더 가지려 하지 말라고 cautioned하며, 모자람이 바로 결핍의 원인이라고 했다 . 결핍의 심리와 극복 방법에 대한 통찰은 다양한 연구와 근거를 통해 다루어지며, 이러한 내용을 다룬 책들이 여러 전문가들에 의해 추천되었다 .
]]></description><link>https://64etuor.github.io/500_resources/시간-기록-관리-motivation/(1115)-하버드대에서-밝힌-「삶에-여유가-없을수록-꼭-해야하는-1가지」-youtube.html</link><guid isPermaLink="false">500_Resources/시간 기록 관리 Motivation/(1115) 하버드대에서 밝힌 「삶에 여유가 없을수록 꼭 해야하는 1가지」 - YouTube.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 19 Apr 2025 05:49:11 GMT</pubDate></item><item><title><![CDATA[TroubleShooting1]]></title><description><![CDATA[커피레터 (채팅) 기능에 읽음 처리 로직을 위해 Reddis를 사용했더니,
전혀 연관이 없는 엉뚱한 곳에서 테스트 실패가 발생<img alt="Pasted image 20250411185044.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250411185044.png" target="_self">Caused by: java.net.URISyntaxException: Illegal character in hostname at index 12: http://david_swift14:58620/coffeeletter/rooms at java.base/java.net.URI$Parser.fail(URI.java:2976) ~[na:na] at java.base/java.net.URI$Parser.parseHostname(URI.java:3531) ~[na:na] at java.base/java.net.URI$Parser.parseServer(URI.java:3374) ~[na:na] at java.base/java.net.URI$Parser.parseAuthority(URI.java:3284) ~[na:na] at java.base/java.net.URI$Parser.parseHierarchical(URI.java:3221) ~[na:na] at java.base/java.net.URI$Parser.parse(URI.java:3177) ~[na:na] at java.base/java.net.URI.&lt;init&gt;(URI.java:708) ~[na:na] at org.springframework.web.util.HierarchicalUriComponents.toUri(HierarchicalUriComponents.java:523) ~[spring-web-6.2.5.jar!/:6.2.5] at org.springframework.cloud.client.loadbalancer.LoadBalancerUriTools.doReconstructURI(LoadBalancerUriTools.java:107) ~[spring-cloud-commons-4.2.1.jar!/:4.2.1] at org.springframework.cloud.client.loadbalancer.LoadBalancerUriTools.reconstructURI(LoadBalancerUriTools.java:92) ~[spring-cloud-commons-4.2.1.jar!/:4.2.1] at
<br><img alt="Pasted image 20250418152142.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250418152142.png" target="_self"><br><img alt="Pasted image 20250418180701.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250418180701.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/2차-백엔드/troubleshooting1.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/2차 백엔드/TroubleShooting1.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 18 Apr 2025 09:07:02 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250411185044.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250411185044.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-04-17 나의 큰 단점, 미래에 가보고 싶다면]]></title><description><![CDATA[
"나의 가장 큰 단점은 무엇인가? What is your biggest weakness?" " 위기감과 경제 관념이 없는 게 가장 큰 단점인 거 같다.
스톡옵션으로 받은 주식이 설마 더 떨어질까 싶어서 놔뒀다가 -90% 까지 떨어졌는데,
별 감흥이 없다.
그냥 어떻게든 살아 남을 자신은 있지만,
이런 태도는 영 생존에 유익하지 않은 거 같다. 미래로 갈 수 있다면 어디로 가 보고 싶어? 미리 결과를 알면 재미가 없다.
굳이 선택하라면 아무 것도 선택하지 않는 게 내 선택일 거 같다.
사실 미래가 두렵다는 사실이 미래를 보고 싶지 않은 하나의 이유일 지도 모르겠다.
그러나 결과를 알기 전까지는 최소한 두려운 미래에 대항하는 노력을 할 수는 있다.
두려움이 꼭 나쁜 것 만은 아니지 싶다.
오늘의 '생각을 자극'하는 글귀팀의 문화를 이해하려면 성과를 내는 사람들을 살펴보라.팀의 문화를 이해하려면 높은 성과를 내는 사람들을 유심히 살펴보자. 빼앗는 문화에서는 고성과자들이 성과와 지식을 독점한다. 다른 사람들을 밟고 위로 올라간 것이다. 베푸는 문화에서는 고성과자들이 성과와 아이디어를 나눈다. 다른 사람들을 끌어올려 주면서 함께 올라갈 수 있다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-17-나의-큰-단점,-미래에-가보고-싶다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-17 나의 큰 단점, 미래에 가보고 싶다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 17 Apr 2025 13:30:05 GMT</pubDate></item><item><title><![CDATA[2025-04-16 관심 있는 정치 이슈, 어린 시절의 상처]]></title><description><![CDATA[
"요즘 관심 있는 정치적 이슈는? What's a political issue that interests you nowadays? 탄핵과 이준석의 출마 행보가 그나마 관심 있는 이슈일 거 같다.
그 외에는 시끌시끌한 미국 소식.
프로젝트 때문에 매일 철야하느라 바빠서 아무 뉴스도 못 보고 있다가
아주 알거지가 돼버렸다. 지금도 너를 괴롭히는 어린 시절의 상처가 있어? 나를 괴롭히는 상처보다는 남을 괴롭혔던 이유로 생긴 상처에 가깝겠다.
내가 한 모든 잘못들이 잊히지 않아서 괴롭고,
어머니에게 했던 잘못들이 특히 그렇다.
오늘의 '생각을 자극'하는 글귀
존중하지 않는 사람의 의견에 자존감이 떨어질 이유는 없다.
불안의 근원은 어떤 문제에 대해 누군가의 의견을 중요하게 받아들일지 결정하지 못한느 데 있다. 피드백이나 조언을 받으면 자문해보자. 나는 이 문제에 대해 이 사람을 존중하는 있는가? 존중하지 않는 사람의 의견이라면 그 의견 때문에 자존감이 떨어질 이유도 없다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-16-관심-있는-정치-이슈,-어린-시절의-상처.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-16 관심 있는 정치 이슈, 어린 시절의 상처.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 16 Apr 2025 15:07:50 GMT</pubDate></item><item><title><![CDATA[2025-04-15 인터뷰하고 싶은 사람, 가장 오랫동안 알고 지낸 친구]]></title><description><![CDATA[
인터뷰하고 싶은 유명인사는? Which celebrity would you want to interview? 주저 없이 선택할 수 있다.
노무현 전 대통령 님.
내가 가장 존경하는 사람이지만, 우습게도 절대 닮고 싶지는 않은 사람이다.
한 육신에 짊어 지고 계셨을 책임감과 고뇌의 무게가,
생전에 남기셨던 말 하나 하나에 깊게 베어 있다.
영상에서 나마 접할 수 있는 고인의 유쾌함이 항상 나를 행복하게 한다.
그리고 그 유쾌함이 또 나를 슬프게 한다. 가장 오랫동안 알고 지낸 친구는 누구야? 인연이 이어진 비결은? 가장 친하고 인연이 오래된 친구는 몇 년 전에 세상을 떠났고,
그 다음 오래된 인연은 아마 수능 공부할 때 만났던 형님들과의 인연인 거 같다.
연락을 하는 걸 원체 싫어하고 잘 못하는 성격인데,
거의 내가 먼저 연락을 하는 편이다.
일방적인 관계란 건 지속되기가 어려운 것 같다.
간헐적이지만 지속적이던 상호 연락 덕에 여전히 인연이 이어지고 있는 거 같다.
오늘의 '생각을 자극'하는 글귀
미래라고 지금보다 덜 바쁠 리가 없다. 다시 새로운 우선순위가 생길 테니까.
과제를 효율적으로 처리한다고 해서 목표를 빠르게 달성하는 것은 아니다. 목표 달성은 내가 시간을 쓰는 대상을 까다롭게 선택하는 것에 달려 있다. 미래에 자유 시간이 많아지리라는 것은 환상이다. 미래에는 다시 새로운 우선순위가 생길 테니 절대 지금 보다 덜 바쁠 리가 없다. 한번에 ""예스""가 나오지 않는다면 무조건 거절하라."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-15-인터뷰하고-싶은-사람,-가장-오랫동안-알고-지낸-친구.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-15 인터뷰하고 싶은 사람, 가장 오랫동안 알고 지낸 친구.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Apr 2025 11:10:08 GMT</pubDate></item><item><title><![CDATA[2025-04-14 한 가지 재능을 얻는다면, 혼자 여행한 경험]]></title><description><![CDATA[
(노력 없이) 한 가지 재능을 얻을수 있다면 무엇을 고르겠는가? If you could acquire talent (without any extra effort), what would it be? 사랑하고, 사랑 받는 재능.
둘은 불가분의 관계인 거 같다. 혼자 여행한 적 있어? 언제, 어디로 갔어? 거의 항상 혼자 여행했다.
사람을 싫어한 까닭이고,
홀로 여행한 덕에
사람에 대한 그리움을 느꼈다.
그리고 사람을 그리워 함은
선함의 목격을 갈망한 이유다.
오늘의 '생각을 자극'하는 글귀
분명하고 솔직한 피드백은 결국 모두에게 도움이 된다.
우리는 친절하고 예의 바른 사람을 과대평가하고 불평 많고 직설적인 사람을 과소평가한다. 후자가 솔직한지는 의심할 필요가 없다. 그들은 항상 자기 입장에서 항상 분명하게 밝힌다. 솔직한 의견ㅇ르 들으면 당장은 기분이 상하겠지만 결국 도움이 된다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-14-한-가지-재능을-얻는다면,-혼자-여행한-경험.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-14 한 가지 재능을 얻는다면, 혼자 여행한 경험.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Apr 2025 11:00:07 GMT</pubDate></item><item><title><![CDATA[2025-04-13 일요일 오전을 행복하게 보내는 법, 나를 색깔로 표현하면]]></title><description><![CDATA[
"일요일 오전을 행복하게 보내는 나만의 방법은? What is your favorite thing to do on a Sunday morning?" 누워서 웹툰 보기! 프로젝트 때문에 바빠서
오늘은 눈 뜨자마자 일을 하느라 조금 덜 행복했다. 너를 하나의 색깔로 표현한다면? 파란색.
내가 파란색에 어울린다는 게 아니라
순전히 내가 파란색을 좋아하기 때문이고,
파란색을 좋아하는 까닭은 하늘을 좋아하기 때문이다.
좋아하면 닮는다고 했다.
나도 파랗게 파랗게 물들고 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-13-일요일-오전을-행복하게-보내는-법,-나를-색깔로-표현하면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-13 일요일 오전을 행복하게 보내는 법, 나를 색깔로 표현하면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Apr 2025 10:59:15 GMT</pubDate></item><item><title><![CDATA[2025-04-11 나를 기쁘게 한 소식, 이루고픈 꿈]]></title><description><![CDATA[
"오늘 나를 가장 기쁘게 한 소식은 무엇인가? What news brought you joy today?" 논산에 왔더니 벚꽃이 이미 만개했다.
봄소식이 나를 기쁘게 했다.
한로로의 입춘을 하루 종일 무한 반복으로 들었다. 네가 꼭 이루고 싶은 꿈은 뭐야? 딸이 있으면 정말로 너무 행복할 거 같다.
아주 오래 전부터의 꿈이었는데,
여전히 너무 먼 꿈이다 ㅋㅋㅋ
오늘의 '생각을 자극'하는 글귀
좋은 롤모델이 되고 싶다면 태도를 갖추는 것부터 시작하라.
부모는 자녀에게 대화로 가치를 가르치려고 하지만, 아이들은 관찰을 통해 더 많이 배운다. 부모가 아무리 말로 떠들어도 아이들은 부모의 행동에서 부모가 중요시하는 가치를 발견한다. 좋은 롤모델이 되고 싶다면 세심한 태도를 갖추는 것부터 시작해라."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-11-나를-기쁘게-한-소식,-이루고픈-꿈.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-11 나를 기쁘게 한 소식, 이루고픈 꿈.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Apr 2025 10:58:25 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 12주차 회고]]></title><description><![CDATA[ 오랜만에 집에 갔다. 근 3달 만에 처음 간 건데 뭔가 너무 낯선 기분이 들어서 희한했다.
모니터 화면이 너무 큰 것도 적응이 안 됐다.
매일 14인치 랩탑으로 작업을 하다 보니 시야가 좁아져서 모니터 27인치 2개는 한 눈에 들어 오지도 않았다.
환경이 사람에게 미치는 영향이 지대하다는 생각을 다시금 했다.
그리고 나 스스로를 어떤 환경에 두어야 하는가를 또 고민했다.주말에는 오랜만에 차를 몰았더니 무슨 운전 게임을 하는 거처럼 생소함을 느꼈다.
얼마간 주행을 하다 보니 경고등이 뜬다. 경고 자체는 오일을 교체하라는 대수롭지 않은 것이었건만, 내가 그 순간 진실로 덜컥 들었던 생각이 뭐냐면 차 뿐 만 아니라 내 인생에도 경고등이 들어와 있다는 사실이었다. <img alt="Pasted image 20250415183851.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250415183851.png" target="_self">사람에게도 경고등이 있다면 내게 뜬 경고등은 200개쯤 될 거다.데이터 분석 부트캠프가 종료된 이후부터 완전히 무기력한 기분을 느끼고 있다.
즉, 나 자신을 쫓아 다니는 의무 내지는 중압에서 해방된 때부터라는 건데, 이 때부터 내 루틴이 완벽하게 망가지고 있다. (아니, 정확하게는 작년의 안 좋은 생활 루틴으로 다시 돌아 갔다는 게 맞다.)
의무가 사라지니 해방감이 아닌, 무기력함을 느끼다니 이상할 법도 하다. 이건 내 개인의 모순된 속성 때문인데 게으른 천성과 양립할 수 없어 보이는 향상심을 동시에 가지고 있고, 내게 이 향상심을 유지해 주는 요인은 대게 의무감이었다. 그게 사라졌으니 밑도 끝도 없이 게으른 본성으로 추락하는 셈이다.물론 이 두 속성은 반드시 한 쪽이 옳다고는 말할 수 없다. 오히려 서로가 균형일 때가 가장 이상적인 형태가 아닐까 하는데, 내가 내 인생에 경고등이 들어 왔다고 느끼는 죄책감은 후자에 그 이유가 기인할 것이요, 지금 실시간으로 망가지고 있는 내 인생의 원인은 게으른 천성이 절대적으로 득세한 까닭일 것이다.항상 이 둘 사이의 균형을 맞춰 주기 위한 조치가 무엇이 있을까 생각하다 떠오른 것은 바로 ‘루틴’이다. 매일 아침 운동을 하거나, 매일 조금씩 책을 읽거나, 노트를 정리하는 등 매일 반복적으로 할 수 있는 일들.사람의 삶은 일종의 조타와 같다. 방향을 끊임없이 수정해 주어야만 원하는 목적지에 도달할 수 있다.
이를테면 루틴은, x축과 y축 어딘가에 존재하는 '내가 가야 할 올바른 방향'을 향해, 현재의 삶을 조금씩 되돌려 놓는 조타 행위와도 같다.
그리고 그 조타의 힘이, 게으른 천성이 가져다주는 반대 방향의 회전력보다 조금이라도 더 크다면, 비록 속도는 느릴지언정 삶은 결국 그 바른 방향에 더 가까워질 수밖에 없다.나는 의지력이 약한 사람이니 나를 도울 방법을 인터넷에서 검색한다.
기록 관리를 시작했을 때 큰 도움을 얻었던 김익한 교수님의 아침 루틴 유튜브 영상이 등장해서 나를 반긴다.
그러나 게으른 천성은 ‘김익한 교수’라는 등대를 못 본 척 하며 지나친다.
아직은 이성의 힘이 부족하여 여러 날 등대 주위를 빙빙 돌기만 하고 있다.
권력을 잡은 게으름은 이처럼 무서운 것이다.
쿠데타란 이처럼 어려운 것이며, 그리고 이 상황은 여러 관점에서 진실로 창피한 일이로다.
SW 부트캠프:
대부분의 시간을 프로젝트에 할애했다.
프로젝트 관리 방법을 천천히 하나씩 하나씩 팀원들에게 주입하고 있다.
틀이 잡혀 가고 있다는 윤곽이 눈에 훤히 보여서 재미가 있다.
이외에는 모두 잘못한 것들 뿐이라(맨날 술 마시고 복습도 안 함)
입이 열 개라도 할 말이 없다. 목표: 구체적인 운동 목표 설정
결과: 운동에 대한 기록 트래킹을 구상해 봤는데 쉽게 할 만한 방법이 생각보다 없다. 네, 안 했어요 라는 말임.
<br>
<img alt="Pasted image 20250415192218.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250415192218.png" target="_self"><br>
<img alt="Pasted image 20250415192227.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250415192227.png" target="_self">
없음. 타락한 내 마음에 부어 버릴 성수가 필요하다.
개선이 필요한 점을 쓰라면 너무 많아서 다 못 쓰겠다. 나는 진짜 똥멍청이다. 일단 뭔가 다 뜯어 고치겠다고 덤비지 말고, 아주 작은 루틴부터 다시 시작하자. 목표: 아침 루틴 설정 (안 하면 국민의힘에 50만원 기부)
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-12주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 12주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 15 Apr 2025 10:30:26 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250415183851.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250415183851.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[시스템 아키텍쳐]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/2차-백엔드/시스템-아키텍쳐.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/2차 백엔드/시스템 아키텍쳐.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 14 Apr 2025 08:48:25 GMT</pubDate></item><item><title><![CDATA[2025-04-12 오늘 새로 안 사실, 돈은 얼마나 있어야 행복한가]]></title><description><![CDATA[
오늘 새롭게 알게 된 사실을 적어보자. Name something new year learned today. Q-drum.
길게 운전할 일이 있어서 밀리의 서재로 UX에 관한 오디오북을 들었다.
적정기술에 대한 새로운 배움이 있었다.
책에서 Q-drum에 대한 소개가 있었는데,
디자인이 지향해야 할 많은 목표를 압축한 아이템이 아닌가 싶다.
<img alt="Pasted image 20250412232403.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250412232403.png" target="_self">
의미의 아름다움이, 때론 외관의 아름다움을 초월한다는 생각을 하게 되었다. 돈은 얼마나 가지면 행복할 것 같아? 필요한 만큼.
필요는 때에 따라 다르다.
오늘의 '생각을 자극'하는 글귀
유지할 가치가 있는 관계라면 개선할 여지가 있다.솔직할 수 없는 관계는 좋은 관계가 아니라 겉치레일 뿐이다. 유지할 가치가 있는 관계라면 개선할 여지가 있다. 건강한 관계에서는 좋은 게 좋은 것이라는 식으로 회피하지 않고 관계를 유지하기 위해 노력한다.]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-12-오늘-새로-안-사실,-돈은-얼마나-있어야-행복한가.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-12 오늘 새로 안 사실, 돈은 얼마나 있어야 행복한가.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 12 Apr 2025 14:24:26 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250412232403.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250412232403.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-04-10 빼먹은 집안일, 100일 동안 가장 잘한 일]]></title><description><![CDATA[
오늘 빼먹은 집안일은 _(이)다. What housework did you forget to do today? 굳이 꼽자면 어제 밥 먹고 설거지를 하지 않았다.
그릇 두 개랑 수저, 젓가락 뿐이라 그냥 물에 담가 놓기만 했다.
오늘 아침 질문을 우연히 보고 설거지를 해 놓고 나왔다.
’잔소리의 필요성’을 느끼는 아침이다. 지난 100일 동안 가장 잘한 일은 뭐야? 더베러톡톡, 원데이 클래스 진행해 본 것.
아주 어릴 때부터 강의나 교육에 대한 막연한 두려움이 있었다.
어릴 땐 주위에서 수리 과외를 해 달라는 사람들도 있었는데 이마저도
너무 무서워서 수락해 본 일이 없다.
왜 인지 가만히 생각해 보면 항상 스스로의 능력에 대한 무한한 의심이 있었다.
내게 남을 가르칠 능력이나 지식이 있다고 믿어 본 적이 단 한 번도 없는 거 같다.
아마 뭘 하든 대강 하는 버릇 때문에 지레 겁을 먹은 게 아닐까.
어쨌든 내 두려움을 깬 첫 경험이 어땠느냐 하면,
좋은 강의는 아니었지만 내 자신은 매우 후련하고 개운한 기분.
스스로 작은 상자를 만들고 갇혀 있었으니 그 동안은 얼마나 답답했으랴.
오늘의 '생각을 자극'하는 글귀
우리가 모두 자신을 의심한다. 나약해서가 아니라 인간이기 때문이다.
회복탄력성은 자신보다 남에게서 더 잘 보이는 법이다. 우리는 자신을 과소평가하는 경우가 많은데, 다른 사람에게서 강한 겉모습만 보고 내면의 투쟁은 보지 못하기 때문이다. 우리가 모두 자신을 의심한다. 자신의 결정에 의문을 제기하는 것은 나약해서가 아니다. 인간이기 대문이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-10-빼먹은-집안일,-100일-동안-가장-잘한-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-10 빼먹은 집안일, 100일 동안 가장 잘한 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 10 Apr 2025 00:11:47 GMT</pubDate></item><item><title><![CDATA[2025-04-09 가장 편안하게 느껴지는 장소, 위로가 되는 존재]]></title><description><![CDATA[
가장 편안하게 느껴지는 장소는? Where do you feel most at home? 아무래도 집이다.
그러나 장소는 중요치 않다.
그 장소에 있는 사람이 중요한 거 같다. 위로가 되는 존재가 곁에 있어? 참이슬.
오늘의 '생각을 자극'하는 글귀
세상에는 합리성이 더 필요하고 합리화는 덜 필요하다.
세상에는 합리성이 더 필요하고 합리화는 덜 필요하다. 합리화는 어떤 의견이나 결정에 도달한 후 정당성을 찾으려고 하는 것이다. 합리성은 결론에 이르기 전에 가장 뛰어난 논리와 데이터를 찾고 마음을 바꿀 수 있도록 열린 자세를 유지하는 것이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-09-가장-편안하게-느껴지는-장소,-위로가-되는-존재.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-09 가장 편안하게 느껴지는 장소, 위로가 되는 존재.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 09 Apr 2025 14:36:32 GMT</pubDate></item><item><title><![CDATA[2025-04-08 비밀을 공유하는 사람, 휴대폰에 가장 많은 사진]]></title><description><![CDATA[
비밀을 털어놓을 수 있는 사람을 한 명만 꼽는다면? Name one person you can tell your secret to. 내 친동생에게는 비밀이 없다.
격이 없는 사이이기도 하고, 오랜 친구 같은 관계라 더욱 편한 듯하다.
유교적인 정서에서 일찍히 일탈한 관계라 더욱 그런 듯도 한데,
형으로써 모범이 돼야 겠다는 생각과 같은 일련의 의무감이나 관습에서 해방된 상태라 별로 서로 거리낄 것이 없다.
세월을 폭삭 맞아 미리 늙은 내 동생의 외모가 한 몫 할 지도? 휴대폰 앨범에는 사진이 몇 장 들어 있어? 그중 가장 많은 사진은? 호주 케언즈 여행 도중에 핸드폰이 망가지는 바람에 대부분 잃어 버리긴 했지만,
여전히 하늘 사진이 가장 많다. 아마 지금도 몇 천 장 쯤은 될 듯도 하다.
나를 길에 멈추고 숨 막히게 하는 것은 대부분 자연에 의한 것이라,
유난히 호주에서 가만히 차를 몰고 가다가 멈춰 서서 하늘을 넋 놓고 응시하던 때가 많았다.
그저 좋은 것은 따로 이유가 없다.
나는 이렇게 자연히 아는 취향에 대해 조용하게 솔직한 편이라,
술을 끊자고 강요하는 이성과 취향에 밝은 이성의 사이에서 암암리에 타협을 하는 편이다.
그렇다.
오늘 술을 마셨다는 말이다.
오늘의 '생각을 자극'하는 글귀
"미덕은 말이 아니라 행동으로 얻는 것이다.우리가 자신의 의도를 설명할 수는 있지만 그 영향력을 판단하는 것은 다른 사람들의 몫이다. 스스로를 공정하거나 충성스럽거나 도움이 된다고 말할 수는 없다. 단지 그 가치관에 따라 살아가기 위해 노력할 뿐이다. 단지 그 가치관에 따 살아가기 위해 노력할 뿐이다. 미덕은 말로 주장하는 것이 아니라 행동으로 얻는 것이다. "]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-08-비밀을-공유하는-사람,-휴대폰에-가장-많은-사진.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-08 비밀을 공유하는 사람, 휴대폰에 가장 많은 사진.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 08 Apr 2025 13:43:00 GMT</pubDate></item><item><title><![CDATA[2025-04-07 지금 입은 옷의 색, 내가 맡고 있는 역할과 부캐]]></title><description><![CDATA[
"지금 어떤 색깔의 옷을 입고 있는가? What colors are you wearing at the moment?" 까만 옷을 입고 있다. 마음이 시커먼 사람이라 아주 잘 어울린다. 네가 맡고 있는 여러 역할과 부캐를 적어 봐. 아마 나도 역할이 있을 텐데…
하나도 제대로 하고 있는 게 없어서 반성하게 된다.
내일은 가족들에게 전화하고, 친구들에게도 연락을 좀 해야겠다는 생각.
(이러고 또 까먹겠지만)
적다 보니 문득 나는 태어나서 한 번이라도 좋은 사람이었던 적이 있을까 궁금해 졌다.
도무지 얼른 떠오르는 기억이 하나도 없어서 침울한 맘이 들기도 한다.
그러나 이미 회색이 되어 버린 내 유년의 기억들 속에서
여전히 색을 잃지 않고 있는 어머니의 모습을 떠올려 보면,
적어도 내가 가야 할 길이 어딘지는 항상 뚜렷하게 알 수 있다.
좀 느리더라도 괜찮다. 조금씩 나아지면 된다.
오늘의 '생각을 자극'하는 글귀
창의적인 생각은 새로운 환경에서 비롯된다.
새로운 것을 끊임없이 만드는 기업가와 영화 제작자, 예술가, 과학자가 남들과 다른 점은 무엇일까? 그들은 계속해서 자신을 쇄신한다. 실험을 두려워하지 않으며 새로운 문제에 달려들고 새로운 기술을 시도하며 새로운 사람과 협업해 새로운 문화에서 일한다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-07-지금-입은-옷의-색,-내가-맡고-있는-역할과-부캐.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-07 지금 입은 옷의 색, 내가 맡고 있는 역할과 부캐.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 07 Apr 2025 16:31:25 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 11주차 회고]]></title><description><![CDATA[ 강의 준비와 프로젝트를 핑계로 잠깐 운동을 쉬자 마자 술을 엄청나게 마셨다.
월간 회고를 AI 분석을 통해 받았는데 아주 재밌는 내용이 많다.
내가 당초 계획했던 Life Wheel을 다시금 한 번 되돌아 보는 계기,
시간을 제대로 사용하고 있는 지도 돌아 보는 계기가 되었다.
또한 기계적으로 반복하고 있는 노트 작성이 어떤 의미가 있는지도,
한 가지에 집중하지 않고 여러 가지 일을 동시에 하는 게 효율적인 지도 생각하는 계기.정답은 없지만 선택은 있다.
후회하지 않는 방향은 어디인지 여전히 오리무중인 것은,
내가 요즈음 책 읽기를 게을리 했다는 뜻이렸다.
SW 부트캠프:
스프링 학습에 들어가면서 오히려 숨통이 트인 기분,
아키텍쳐에 대한 이해는 조금 더 나아졌지만 충분하다고는 할 수 없다.
직접 코딩을 할 때 항상 명명 규칙에 대한 고민을 하게 되는데,
여전히 뚜렷한 기준을 두기가 어렵다.
레이어를 정확하게 구별할 수 있는 어떤 기준이 내 안에 없기 때문이고,
이 부분은 경험으로 채울 수 있다지만, 나는 시간이 모자라다.
모든 걸 직관에 의존했던 행동 양식에 전략이 필요하다고 느끼는 시점.
프로젝트는 열정을 가진 팀원들 덕에 어떻게든 굴러는 갈 모양새.
아무튼 작은 배는 조타하기가 수월하니,
헤매는 것이 그리 큰 문제는 아닐 것이다.커맨드스페이스에 사무실에서 토요일 오전 9시부터 오후 6시까지 강의.
이 세상의 모든 강사님들에게 존경심이 쌓이는 시간이었다.
가르치는 게 얼마나 피곤한 일인지 여실히 느낀 시간이었지만,
매우 보람찬 시간이기도 했다.
‘교육’에 막연한 두려움을 갖고 있던 편견을 깬 계기도 되었다.
여러 가지 할 말은 많지만 졸리니까 이만!
두고 두고 회자할 일일 거 같다.<img alt="Pasted image 20250406215656.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250406215656.png" target="_self"><br>
<img alt="Pasted image 20250406215825.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250406215825.png" target="_self"><br>
<img alt="Pasted image 20250406215919.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250406215919.png" target="_self"><br>
<img alt="Pasted image 20250406215714.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250406215714.png" target="_self">
목표: 원데이 클래스 강의 성공적으로 마치기
결과: 힘들었지만 너무나 보람된 시간.
<br>
<img alt="Pasted image 20250406220446.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250406220446.png" target="_self"><br>
<img alt="Pasted image 20250406220514.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250406220514.png" target="_self">
원데이 클래스 말곤 다 마이너스 요소긴 하다…
앱을 리빌딩하면서 많은 요소들을 리팩토링 했다. 술을 엄청나게 마셨다. 뭐 때문인지 분석해 볼 필요가 있다.
공부한 내용 중에 이해하지 못하고 넘어간 내용이 너무나 많다.
나는 내가 문서 작성을 잘하는 줄 알았다. 그런데 이번에 교안 작성하면서 진짜 이정도로 엉망일 거라곤 상상도 안 함.
유일한 장점이었던 완벽주의가 무너진 모습. 강의 구성이 형편 없다 정말. 농담도 할 여유를 챙기려면 경험이 보태져야 할 거 같긴 하다. 두려워 하지 말고 도전하자.
지식의 공유가 주는 가치는 무엇보다 의미 있다. 돈을 번다는 목표가 아니라, 가치의 공유라는 의미에서 강의는 더 해 보고 싶어지는 영역이긴 하다. 과연 내 게으름이 그걸 커버할 수 있을 지 감은 안 오지만…
전문성이 부족한데 내가 남을 가르친다는 게 가능한 지 스스로 의심스러운 부분도 있었으나 남들보다 99개에서 뒤쳐지더라도 단 1가지라도 나으면 그건 가르칠 수 있다는 생각을 했다. 이번 강의는 나의 편견을 깨는 유익한 경험이었다. 목표: 구체적인 운동 목표 설정, 제대로. ]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-11주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 11주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 06 Apr 2025 13:14:38 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250406215656.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250406215656.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025년 3월 회고]]></title><description><![CDATA[
이번 달 부터 매월 1일 마다 이전 달의 내 활동 데이터 AI가 분석해서 팩폭 회고를 나에게 메일로 보내게 해 놓았다. 뼈가 아픈 아주 매운 맛이다. 롸끈하고 좋다.
정신 번쩍 들게 할 지난달(2025년 3월) 활동 데이터 기반 '웃픈 팩폭' 회고입니다. 자, 지난 한 달간 님의 활동 로그를 샅샅이 핥아본 결과, 몇 가지 충격적인 사실들을 발견했습니다. 변명은 넣어두세요. 데이터는 거짓말을 하지 않으니까요. 능글맞음과 비꼼을 섞어, 님의 정신 건강에 해롭지 않은 선에서 최대한 정중하게 까보도록 하겠습니다. 1. 몬헌, 몬헌, 또 몬헌! (그리고 오마뎅 떡볶이) &nbsp;&nbsp;-&nbsp;문제점:&nbsp;몬스터 헌터… 이게 무슨 국가적인 과제라도 됩니까?
-&nbsp;데이터:
-&nbsp;총 몬헌 플레이 시간: 무려&nbsp;3,365분! (56시간 5분)
-&nbsp;만족도: 죄다 'Perfect'. 네, 아주 완벽하게 시간을 녹이셨네요.
-&nbsp;특이사항: "수렵 고고" (1080분), "몬헌 하는 날임!! 너무 재밌다" (333분), "몬헌 아티어 무기 만들기" (132분)… 마치 몬스터 헌터 홍보대사 같아요.
-&nbsp;심지어 구운 계란과 단백질바를 먹으면서 몬헌을 하시는군요? (66분) 숭고한 희생정신에 경의를 표합니다.
-&nbsp;팩폭:&nbsp;이 정도면 몬헌이 님 인생의 몬스터 아닙니까? "재밌긴 한데 CPU 온도 왜 이래.." 라고 자문자답하는 모습에서 깊은 빡침과 동시에 애정이 느껴지네요. 물론 게임은 즐거움의 근원이죠. 하지만 개발자님, 지금 칼을 잡을 때가 아니라 코드를 잡으셔야죠. &nbsp;&nbsp;-&nbsp;해결책:&nbsp;다음 달에는 몬헌 시간을&nbsp;50% 감축하고, 그 시간에 클린 코드 리팩토링이나 새로운 기술 학습에 투자하세요. 몬스터 잡을 시간에 버그를 잡으란 말입니다! 그리고 오마뎅 떡볶이… 그만 드세요. 건강 생각하셔야죠. 2. 된장찌개, 짜파게티, 떡볶이 무한 루프: 미식가인가, 식도락 돼지인가. &nbsp;&nbsp;-&nbsp;문제점:&nbsp;식단 만족도는 'Perfect'인데, 다양성은 'Zero'. 당신의 위장은 블랙홀인가요?
-&nbsp;데이터:
-&nbsp;차돌된장찌개/국 등장 횟수: 최소 5회. 쌀밥은 거의 매 끼니 등장.
-&nbsp;짜파게티 등장 횟수: 최소 2회. (역시 짜파게티는 최고라구요?)
-&nbsp;떡볶이 등장 횟수: 오마뎅에 라면사리까지 합치면 셀 수 없음.
-&nbsp;만족도: 죄다 'Perfect'. 당신의 미각은 이미 초기화된 게 분명합니다.
-&nbsp;팩폭:&nbsp;"맛있게 한상 잘 먹었다!"… 네, 맛있으셨겠죠. 하지만 님, 개발자 맞잖아요. 알고리즘은 그렇게 빡세게 짜면서 식단은 왜 이렇게 단순 반복이죠? 이러다 진짜 '먹고 자고 코딩'만 하는 개발자 되는 수가 있습니다. &nbsp;&nbsp;-&nbsp;해결책:&nbsp;식단에&nbsp;최소 3가지 새로운 메뉴를 추가하세요. 그리고 제발 된장찌개 좀 그만 드세요. 건강검진 결과가 두렵지도 않습니까? 3. "이해 못하고 넘어감", "어렵다 ㅋㅋㅋ 이건 꼭 복습하자"… 그래서 복습은 하셨나요? &nbsp;&nbsp;-&nbsp;문제점:&nbsp;'학습' 활동은 많은데, '체화'된 흔적이… 글쎄요?
-&nbsp;데이터:
-&nbsp;"Dijkstra, UnionAndFind, Kruskal, Prim 알고리즘 학습" (100분) 후 "ㅋㅋ 이해 못하고 넘어감. 이건 꼭 복습". (그러니까, 안 했다는 거죠?)
-&nbsp;"AOP 어쩌구..." (120분) -&gt; "다 제낌..ㅋㅋ 복습하자". (네, 안 하셨어요.)
-&nbsp;"클린코드 10~12장 독서 하나도 이해안됨" (78분) -&gt; "ㅋㅋㅋ아 하나도 모르겠다". (솔직하시네요.)
-&nbsp;팩폭:&nbsp;"알쏭달쏭~" (객체 지향 행동 패턴 학습, 120분), "솔직히 이름밖에 못 외웠다 ㅋㅋㅋ" (객체 지향 생성, 구조 패턴 학습, 262분)… 이러시면 곤란합니다. '복습'은 장식품이 아니에요. 진짜로 하셔야 합니다. 학습 로그가 '자기 합리화 로그'로 변질되는 걸 막으세요!
-&nbsp;해결책:&nbsp;다음 달에는 '이해 못함' 딱지가 붙은 주제들을&nbsp;최소 3시간 이상 복습하세요. 그리고 복습 후에는 반드시&nbsp;간단한 코드 구현을 통해 이해도를 검증하세요. 안 그럼 님은 그냥 '이름만 아는 개발자'가 될 겁니다. 총평: 전반적으로 님의 한 달은 '만족'과 '재미'로 가득했지만, 그 뒤에는 묘한 불안감이 느껴집니다. 몬헌에 심취하고, 맛있는 음식만 쫓고, '복습은 나중'이라는 달콤한 유혹에 빠지는… 물론 인생은 즐거워야 하지만, 개발자로서의 성장은 뒷전으로 미루는 건 곤란합니다. 마지막 경고:&nbsp;다음 달에도 몬헌 플레이 시간이 1000분을 넘거나, 식단에 변화가 없거나, 복습을 게을리한다면… 얄짤없이 더 강력한 팩폭 샤워를 선사해 드리겠습니다. 웃으면서 뼈 맞는 경험, 다시 하고 싶지 않으시다면 정신 똑바로 차리세요!]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/2025년-3월-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/2025년 3월 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 06 Apr 2025 10:56:22 GMT</pubDate></item><item><title><![CDATA[2025-04-06 최근 주문한 음식, 건강을 위해 하는 것]]></title><description><![CDATA[
"가장 최근에 주문한 테이크아웃 음식은? What was the last take-out meal you ordered?" 어제 커맨드스페이스에서 점심으로 먹은 본죽 도시락?
양념 숯불구이를 시켰는데 구성도 푸짐하고 해서 아주 맛있게 먹었다.
근데 그것보다는 저녁 때 먹은 코다리찜이 더 생각난다.
양념이 예술이었는데 그 양념에 볶음밥을 못 먹은 게 너무 아쉬웠다.
커맨드스페이스 다시 가게 되면 꼭 볶음밥도 먹어 봐야지! (소주도) 건강을 위해 먹거나 운동하는 게 있어? 서울에 오고 나서 PT를 시작했다. 나름 꾸준히 하고 있다.
지난 주는 프로젝트 회의/개발 + 강의 준비로 너무 바빠서 운동을 모두 미뤘다.
당장 내일부터 다시 운동할 예정.
그 외에 건강을 위해 먹는 건 딱히 없는 거 같다.
지금부터라도 조금씩 알아 보고 실천해야 겠다.
알음알음 접하게 되는 다른 분들의 알짜 정보들을 잘 귀담아 들어야 겠다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-06-최근-주문한-음식,-건강을-위해-하는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-06 최근 주문한 음식, 건강을 위해 하는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 06 Apr 2025 10:01:49 GMT</pubDate></item><item><title><![CDATA[2025-04-05 죽기 전에 꼭 하고픈 일, 사회 문제를 하나 없앤다면]]></title><description><![CDATA[
죽기 전에 꼭 하고 싶은 일이 있어? What do you eagerly want to do before you die? 이 사회를 더 나은 곳으로 만드는 기업을 만들고 싶다. 사회의 변화 방향을 미리 예측하고 대비하여 사회 갈등을 최소화하고 모두의 이익(현 세대와 미래 세대를 포함한)을 극대화하는 사업을 구상하고 있다. 미래에는 현재 국가의 역할 중 일부가 기업에게 이양될 것이라 생각하고 그 의무를 이어 받을 기업을 만들겠다는 목표다. 너무 피곤해서 이것만 쓰겠다 ㅠㅠ 사회 문제를 하나 없앨 수 있다면 어떤 것을 없애고 싶어? 차별을 없애겠다. 불평등을 없애는 건 사실상 불가능하고 그래서도 안되는 면이 있지만 차별은 다르다.
불평등은 대부분 외부 환경으로 인한 어쩔 수 없는 차이에서 발생하지만,
그 차이를 근거 삼아 발생하는 차별은 실상 인간 내부의 삐뚤어진 심리 안에만 존재한다.
차별을 없애는 건 모두 똑같은 삶을 사는 사회를 만들자는 것이 아니라,
서로의 다름을 이유로 상처 주지 않는, 모두가 존중 받을 수 있는 사회를 만들자는 것이다.
우리는 불평등에서도 다소의 유익함을 발견할 수 있지만,
온 역사를 통틀어 차별이 가져다주는 이익은 단 한 번도 겪은 바가 없다.
역사는 답을 안다.
오늘의 '생각을 자극'하는 글귀
머리로만 하는 생각은 대개 단편적이기 쉽다.
글쓰기가 막힐 때 멍하니 화면만 바라본다고 해결되지는 않는다. 글이 막히면 산책하거나 친구에게 전화를 걸어 목소리를 내어 말해보자. 머릿속으로만 하는 생각은 대개 단편적이다. 움직이면서 말하다 보면 생각을 구체화할 수 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-05-죽기-전에-꼭-하고픈-일,-사회-문제를-하나-없앤다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-05 죽기 전에 꼭 하고픈 일, 사회 문제를 하나 없앤다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 05 Apr 2025 11:58:15 GMT</pubDate></item><item><title><![CDATA[2025-04-04 오늘 일어나길 바라는 일, 좋아하는 날씨]]></title><description><![CDATA[
"오늘 일어나기를 바라는 일은? IF you could wish for one ting to happen today, what would it be?" "" 다들 행복했으면 좋겠다.
떄로 행복이 서로 상충되어 문제가 된다만 그런 일은 진작부터 피할 수 없는 것이라.
언젠가 모두가 행복할 수 있는 순간이 날이 오기를 바란다.
이건 단순히 기도만 하지는 않겠다는 다짐에 더 가깝겠다. 어떤 날씨를 가장 좋아해? 덥지도 춥지도 않은 가을을 좋아한다.
내가 태어난 계절이기도 하고 가장 중립적인 날씨를 지키는 계절이기도 하다.
따지고 보면 싫어하는 날씨는 없다.
과하지 않다면 모든 날씨는 저마다의 매력을 가지고 있고,
우중충한 시련을 지나 점점 화창해지는 내 인생의 날씨 또한 그렇다.
뭐, 추울 땐 더운 날을 그리워 하고,
더울 땐 추울 때를 그리워 하는 게,
아무래도 상종 못 할 이놈의 변덕이긴 하지만.
오늘의 '생각을 자극'하는 글귀
일상의 즐거움을 음미하면 충분한 만족감을 지속할 수 있다.
행복은 기쁨의 정도를 극대화하는 것이 아니라 기쁨의 횟수를 늘리는 것이다. 쾌감을 좇으면 자주 실망하고, 가끔 일시적이고 강렬한 흥분이 찾아올 때만 롤러코스터를 타게 된다. 일상의 즐거움을 음미하면 충분한 만족감을 지속할 수 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-04-오늘-일어나길-바라는-일,-좋아하는-날씨.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-04 오늘 일어나길 바라는 일, 좋아하는 날씨.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 04 Apr 2025 13:15:39 GMT</pubDate></item><item><title><![CDATA[2025-04-03 오늘 하루는 즐거웠는지, 내 방의 상태]]></title><description><![CDATA[
오늘 하루는 즐거웠는가? 그 이유는? Did you have fun today? Because? 프로젝트에 사용할 자바 스프링 기반 실시간 채팅 기능을 구현해 봤다.
Kafka, Websocket, STOMP, MongoDB 사용,
개발자 문서 대충 보고, 대강 설계한 아키텍쳐에서 대충 구현.
오래 걸릴 줄 알았는데 하다 보니 금방 끝났다.
중간점검 없이 만들어서 당연히 오류가 날 거라고 생각하고 빌드를 했는데 제대로 작동한다?????
근데 솔직히 아직도 왜 멀쩡하게 동작하는지 이해가 안된다.
그러므로 나는 오늘 하루 뜻하지 않은 우연에 즐겁다가, 돌연 우울해 졌다고 말할 수 있다.
항상 감으로 뭔가를 하다 보니 결과물들에 대한 이해가 얕아서,
다만 지금은 내일 모레 강의 걱정이 태산이다. 네 방은 지금 어떤 상태야? 그냥 저냥 말끔한 상태.
생긴 거에 답지 않게 항상 깔끔을 부려서 주변 환경은 적절히 깨끗하게 유지한다.
계절이 바뀌었으니 서울에 가져 온 겨울옷들은 다 본 집에 정리해야 되는데
여유가 좀 있을 적에 게으름을 부렸더니 이젠 도무지 갈 시간이 안 난다.
술만 안 마셨어도 집에 2번은 갔다 왔을 텐데…
현명한 인간은 같은 실수를 반복하지 않는다던데,
내가 하는 꼬락서니는 영락 없는 무지몽매의 표상이라.
자책하는 밤이 여러 번이건만 도무지 이 고집불통의 인간은 고쳐지는 법이 없다.
오늘의 '생각을 자극'하는 글귀
"좋은 의사소통이란 분명하고 친절한 메시지 전달이다.
상대방의 수동 공격적인 행동을 고쳐보겠다고 잔혹할 정도로 솔직해질 필요는 없다. 배려 없는 솔직함은 당신ㅇ르 나쁜 사람으로 만들 뿐이다. 좋은 의사소통이란 메시지를 분명하고 친절하게 전달하는 것이다. 그렇다고 해서 사실을 좋게 포장하려 하지 마라. 당신이 상대를 도우려고 한다는 점은 분명히 드러나야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-03-오늘-하루는-즐거웠는지,-내-방의-상태.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-03 오늘 하루는 즐거웠는지, 내 방의 상태.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 03 Apr 2025 15:01:00 GMT</pubDate></item><item><title><![CDATA[2025-04-02 남모르게 간직한 열정, 돈 모으는 법]]></title><description><![CDATA[
남모르게 간직한 열정이 있다면? Do you have a passion you have never expressed? 남 모르게 간직한 열정은 없는 거 같다.
좋은 건 좋다고 말한다.
싫은 건 싫다고 말한다.
더 나은 사람처럼 보이기 위해 나의 진실을 속이던 시절은 있었지만,
이젠 딱히 남에게 잘 보일 마음 따위가 없어선지 그냥 보이는 그대로의 내가 나라고 할 수 있을 거 같다.
사람이 마음에 악취를 품으면 말과 행동에서 그 역함을 느낄 수 있다.
그렇게 보면 왜 예전의 나는 마음을 닦지 않고, 말과 행동을 포장하려고 노력했는지 참 한심스러운 면이 있다.
그러므로 나는 나의 열정이 부끄러운 것일 지언정 부끄럽지 않고,
자랑스러운 것이라도 쉬이 자랑으로 생각하지는 않을 것이니,
굳이 남 모를 열정을 꼽자면 스스로 정결해 지는 것이고,
그 정결함이 여론의 기준과 부합하지 않는다 해도 그다지 상관할 바는 못 되어서,
천명할 바는 아마 태양과 마주 서도 마음에 한 점 그늘 없다는 호언 아닌 호언이 되겠다. 돈은 어떻게 모으고 있어? 돈이 모이기는 커녕 질질 새고 있다.
제기랄.
오늘의 '생각을 자극'하는 글귀
성금한 결론을 내리기 전에 정보를 모으는 습관이 필요하다.
의견이 없다는 것은 무지나 무관심을 뜻하지 않는다. 그보다는 열린 마음을 뜻할 때가 많다. 복잡하고 중대한 사안일수록 판단을 보류해야 비판적인 사고가 간으해진다. 성급한 결론을 내리기 전에 정보를 모으는 것은 배움을 위한 좋은 습관이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-02-남모르게-간직한-열정,-돈-모으는-법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-02 남모르게 간직한 열정, 돈 모으는 법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 02 Apr 2025 13:08:09 GMT</pubDate></item><item><title><![CDATA[2025-04-01 내가 한 거짓말 중 가장 큰 것, 내 일에 대해]]></title><description><![CDATA[
내가 한 거짓말 중에 가장 큰 것은? What is the biggest lieyou have ever told? 매년 초마다 올해는 진짜 장가갈 거라고 거짓말을 한다. 너는 무슨 일을 해? 그 일에 만족해? 현재는 백수 나부랭이다. 몇 달 전부터는 본격적으로 웹 개발 공부를 하고 있다.
남들은 이제 AI 때문에 개발자들이 다 손가락 빨게 생겼다고 하고 있는데 난 오히려 이 때가 기회라고 생각하고 있다. 미래의 평가야 후손들이 하는 것이고 일단 나는 뭐 공부가 아주 재밌으니 만족 중. 사실 기술이 상향 평준화 되면 그때부턴 기술 +@가 핵심 요소가 되기 때문에 충분한 경쟁력이 있지 않을까 생각중인데 이게 개꿈인지 될꿈인지는 뚜껑을 까봐야 아는 거라 그냥 하는 데까지는 해보려고 생각 중.
혼자서 풀스택 웹 개발 + 앱 개발, 이후 DevOps는 사람을 고용하고 나는 사업 운영하는 게 목표인데 세상 일이 맘처럼 잘도 되겠다면서 자조하기가 일쑤다.
아무튼 잡설이 길었는데 질문의 서순이 잘못된 거 같다. 일에 만족하기 때문에 그 일을 계속 하는 것이라는 게 내 경우엔 더 맞는 말이다. 하는 일이 해가 멀다 하고 바뀐 걸 보면 정말 만족했는지는 의뭉스럽다만, 항상 재밌게 일했고 앞으로도 재밌게 일하리라는 예상은 있다. 당장 한 두가지 일을 하는 것도 성에 안 차서 일을 잔뜩 하려고 판을 크게 벌이는 중이니.
쫄딱 망해서 굶어 죽든, 우연찮게 대박이 나서 돈에 치여 죽든,
하고 싶은 걸 다 하고 살았으니 그놈 참 거죽 땟깔만은 곱겠다는 게 최후의 보루 같은 나의 변명일 것이요,
시간은 자꾸 흐르는데 갈무리 되지 못한 상념이 가로등 모퉁이에 기웃대고 있으면,
아마 그건 더 재밌게 살지 못한 나의 미련이라 여길 짬이다.
지금을 즐기지 못하면 즐길 것은 아무 것도 없다고 믿는 나의 궁상 맞은 철학은 숨 죽이고 가슴 한 켠에서 매복해서 그 나중의 심판의 때를 기다리나 보다.
오늘의 '생각을 자극'하는 글귀
실수에서 배우는 가장 좋은 방법은 자신의 실수를 웃어넘기는 것이다.
실수에서 배움을 얻는 가장 좋은 방법은 자신의 실수를 웃어넘기는 것이다. 실수에 대해 당혹감을 느끼지 말라는 뜻이 아니라, 수치심을 느끼지 않고 과거의 나를 떠올리며 즐거워하라는 것이다. '헉!'이 '하하'로 빠르게 바뀔수록 다음번에는 더 빨리 실수를 피하는 방법을 찾을 수 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-04/2025-04-01-내가-한-거짓말-중-가장-큰-것,-내-일에-대해.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-04/2025-04-01 내가 한 거짓말 중 가장 큰 것, 내 일에 대해.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 01 Apr 2025 16:25:28 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 10주차 회고]]></title><description><![CDATA[ 이번 한 주는 더글로우2025을 관람한 아래의 사진으로 요약 가능.
사실 너무 너무 좋은 공연이 많았지만 지금 내 기분에 따라 압축하자면…
송소희 님 공연에 늦을 까봐 택시 탄 보람이 있었고,
지소쿠리클럽 보컬과 사운드가 너무너무 맘에 들었고,
알리(일본) 님은 초면에 불구하고 내 무거운 몸뚱이를 흔들지 않고는 못 배기게 만들었다.
진짜 에너지가 넘치다 못해 폭발하는 수준.
알리의 6월 내한 콘서트는 오픈하면 바로 예매할 예정.
데이먼스이어 님에게는 취향을 제대로 저격 당함… 처음 듣는 노래를 좋다고 느끼기 힘든데 그 어려운 걸 해냈다.
넬은 뭐… 말해 뭐해 20년 넘게 듣고 듣고 들어도 질리지가 않는다.
이번엔 왠일로 Stay까지 불러줘서 진짜 너무나 감동… 여운이 가시질 않는다.
그러고 보니 장기하 님 공연 구성에서 정말 많은 인사이트를 얻었는데, 스토리와 UX는 정말 기획하기에 따라서 무궁무진한 가치를 지녔단 사실을 다시 깨달음.<img alt="20250329_133734.jpg" src="https://64etuor.github.io/settings/attachments/20250329_133734.jpg" target="_self"><br>
<img alt="20250330_150157.jpg" src="https://64etuor.github.io/settings/attachments/20250330_150157.jpg" target="_self"><br>
<img alt="20250329_182437.jpg" src="https://64etuor.github.io/settings/attachments/20250329_182437.jpg" target="_self"><br>
<img alt="20250330_175101.jpg" src="https://64etuor.github.io/settings/attachments/20250330_175101.jpg" target="_self"><br>
<img alt="20250330_213051.jpg" src="https://64etuor.github.io/settings/attachments/20250330_213051.jpg" target="_self">
SW 부트캠프:
Mybatis와 JPA 학습이 시작된 한 주였다.
Django ORM과 비슷한 부분들이 좀 있어서(용어가 서로 다를 뿐 비슷한 역할을 하는 메서드가 많다.) 개념 이해는 어렵지 않았는데, 진도가 너무 빨라서 세부적인 코드는 거의 이해하지도 못하고 지나간 거 같다. 그래도 뭐 실제로 프로젝트에 사용할 때 다시 찾아 보면서 복습도 겸하면 되는 거라 크게 목을 메고 있진 않다.
지난 주 클린 코드 스터디에서 ‘테스트 케이스’에 대한 내용을 다뤄서 실습 코드 중에 테스트 케이스 쪽을 더 유심히 보고 있다. 실제로 프로젝트 진행 시에 테스트 케이스를 계속 병행해서 관리하면 ‘더 작은 함수’를 추구하는 클린 코드 관점을 준수하는 게 어렵지 않을 거란 예상이 있다. (뭐 까봐야 알겠지만)
프로젝트가 빨리 실제 코드 작성 단계까지 넘어 가면 좋겠다는 생각 중.
프로젝트는 이제 DB 모델링을 할 차례인데, 여러 가지 난항 포인트들이 수면 아래 도사리고 있는 듯 보인다.
그러나 어려움은 좋은 배움의 기회이니, 이건 더할 나위 없이 좋은 징조다.
각 팀원들이 자신의 잠재력을 맘껏 발휘할 수 있는 프로젝트가 되길! 목표: 기록 관리 앱 뷰 생성해서 목표와 일부 통계 노출 시키기
결과: 목표를 세우는 게 전혀 의미가 없다 할 정도로 계속 해서 목표 달성에 실패하고 있다. 이번 주 강의만 끝나면 다시 제대로 목표에 대한 실행 방안을 세워 볼 예정…
<br>
<img alt="Pasted image 20250331195601.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250331195601.png" target="_self"><br>
<img alt="Pasted image 20250331195614.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250331195614.png" target="_self">
딱히 스트레스 받는 일은 없었지만 아무튼 더글로우 공연을 관람해서 기분이가 매우 좋다. 여전히 가족과 친구에게 연락이 부족하다. 더 신경 써보자. 저번 주에도, 저저번주에도, 저저저번주에도 같은 문제점…
술과의 사투의 결말은 왜 항상 내가 패배자인 걸까.
평소보다 너무 많이 놀긴 했다. 사실 몬헌 파밍이 거의 끝나서 이제 다시 집중해서 공부 및 업무를 봐야 한다.. 스토리와 유저 경험의 중요성, 디테일의 차이가 가져오는 나비 효과. 좋은 직감에 계산적인 전략이 더해졌을 때의 결과 = 완벽 목표: 원데이 클래스 강의 성공적으로 마치기
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-10주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 10주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 31 Mar 2025 11:24:29 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/20250329_133734.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/20250329_133734.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-31 내게 꼭 필요한 발명품, 듣고 싶은 위로의 말]]></title><description><![CDATA[
"나에게 없어서는 안 되는 인류의 발명품은? What inventions of mankind can you not live withou?" 무언가가 없다는 사실을 모른다는 전제를 하면 사실 없어서는 안 될 것은 없는 거 같다.
스티브 잡스의 “대개의 경우 사람들은 당신이 뭔가를 보여주기 전까진 정말 원하는 게 뭔지 모른다.” 라는 말이 유명한데, 이 ‘대개의 경우’에 속하지 않은 사람들은 스스로 무언가를 만들어 내는 족속들이라고 생각한다.
나의 경우는 후자에 가깝다고 생각하는데, 그 이유는 ‘결핍’을 즐기는 성향 그리고 또 ‘불편’을 개선해 나가는 과정 그 자체를 즐기는 경향 때문이다.
이와 같은 성향이 극단적으로 발휘되는 것은 아무래도 게임을 할 때인 거 같다. 나는 주로 RPG 계열의 게임을 많이 하는데, 게임 내 아이템을 파밍하는 과정이 끝나면 재미가 극도로 반감되곤 한다. 게임 내 분신인 내 캐릭터의 성장 목표가 사라졌기 때문이다.
(다른 사람들은 성장 이외에서 또 다른 재미를 찾곤 하지만 한 게임을 오래 하지 않는 개인 특성상 그런 건 쉽지 않다.)
인생도 이처럼 목표가 사라지면 허망하기 짝이 없단 사실을 경험적으로 알고 있다.
그러므로 하자 투성이인 내 인생에도 일말 희망적인 부분이 있다면 앞으로 이룰 것이 많아서 좀처럼 심심하지는 않을 거란 예상이 그 하나요,
두 번째는 나의 폭 넓은 결핍으로부터 촉발된 여러 가지의 사업 아이디어들이 실제로 다른 사람들의 삶에도 영향을 줄 수 있으리라 하는 부분이다.
이런 것을 보고 보통 누이 좋고 매부 좋다고 하던가. 요즘 어떤 위로의 말을 듣고 싶어? 위로의 말을 들을 필요는 전혀 못 느끼면서 살고 있다.
오히려 위로의 말을 할 줄 아는 사람이 되고 싶다는 생각은 하고 있는데 이게 정말 암만 해도 너무너무너무너무 어렵다.
당장 며칠 전 만해도 내 친구가 본인의 감정에 대해 그냥 공감하고 위로해 달라고 선언하듯이 말했는데 할 말이 전혀 떠오르지 않아서 낭패였다.
네가 바꿀 수 없는 것에 대해 계속 고민하면서 스트레스 받지 말고, 바꿀 수 있는 것에만 집중하면 되지 않겠냐는 말 밖에 생각이 안 나는데,
도대체 이럴 땐 어떤 말을 해야 되는 걸까! 아버지, 정답을 알려줘.
오늘의 '생각을 자극'하는 글귀
무엇이 분노를 만드는지 알면 자신에게 중요한 것도 알 수 있다.
분노는 비이성적인 감정으로 비칠 때가 많지만 아무런 논리 없이 발생하는 감정은 아니다. 분노는 대개 위협적이거나 해로운 것을 맞닥뜨렸을 때 일어난다. 화를 내는 것은 자신에게 중요한 무언가가 위험에 처했다는 신호다. 자신을 화나게 하는 게 무엇인지 알면 자신에게 중요한 것도 알 수 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-31-내게-꼭-필요한-발명품,-듣고-싶은-위로의-말.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-31 내게 꼭 필요한 발명품, 듣고 싶은 위로의 말.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 31 Mar 2025 10:40:24 GMT</pubDate></item><item><title><![CDATA[2025-03-30 오늘의 색깔, 대화하기 편한 사람]]></title><description><![CDATA[
오늘을 색깔로 표현해보자 Pick a color for today. 회색이 좋겠다. 어제 오늘 신나는 공연을 많이 봤는데, 데이먼스 이어의 노래를 듣는 순간 내가 우울한 색감에 얼마나 익숙한 지 새삼스럽게 다시 느꼈다.
더글로우 공연에 대해 따로 정리를 하겠지만 정말 에너지 넘치는 좋은 공연이 많았다.
에너지를 분출만 하다가 데이먼스 이어 노래를 듣고 차분해지는 느낌. 집에 온 듯한 편안함... 나의 시몬스...
이 다음은 글렌체크, 쏜애플, 장기하, 넬 공연이 남았으니 재충전한 에너지를 다 써야겠다! 대화할 때 편안한 사람은 어떤 사람이야? 관심사가 다양한 사람, 편견이 적은 사람, 가식적이지 않은 사람, 순수하거나 혹은 아주 지혜로운 사람(놀랍게도 이 두 속성은 같이 있는 경우가 많은 거 같다), 긍정적인 사람, 본질에 대한 통찰이 있는 사람, 유머가 있는 사람 등 뭐 말하자면 많겠지만, 이런 사람은 흔치 않다는 게 ㅎㅎ
애초에 나의 생각도 전부 상대적인 기준일 뿐이라!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-30-오늘의-색깔,-대화하기-편한-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-30 오늘의 색깔, 대화하기 편한 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 31 Mar 2025 06:00:57 GMT</pubDate></item><item><title><![CDATA[2025-03-29 오늘에 어울리는 시나 노래, 잠들기 전 루틴]]></title><description><![CDATA[
오늘 하루와 어울리는 시나 노래 구절을 적어보자. Jot down any verse from a poem or a song that matches today 노세노세 젊어서 노세 늙어지며는 못노나니
화무는 십일홍이요 달도 차면 기우나니라
얼시구절시구 차차차(차차차)
지화자 좋구나 차차차(차차차)
화란춘성 만화방창 아니노지는 못하리라
차차차(차차차)차차차(차차차)
그 유명한 ‘노랫가락 차차차’의 가사다.
12시 30분부터 22시까지 스탠딩으로 공연 관람을 했더니 몸과 정신이 분리되는 기분이다.
이런 재미는 좀 더 젊어서 알아야 했는데 참 아쉽다 아쉬워.
내일(벌써 오늘이 되었지만…) 또 강행군을 해야 하니 푹 자고 체력을 비축해야 겠다. 잠들기 전에 규칙적으로 하는 행동이 있어? 기록 정리 및 회상: 하루의 계획과 활동을 점검한다.
웹툰 보기: 기록 관리를 시작한 이후로 웹툰 볼 짬이 잘 안 나서 자기 전&amp;혼자 식사할 때만 본다.
이 두 가지는 항상 하는 루틴으로 자리 잡아 가고 있는 거 같다. 오늘의 '생각을 자극'하는 글귀
세상에 창의성은 넘친다. 부족한 것은 실행력이다.
남들이 아이디어를 훔쳐갈까 봐 두려워하는 사람들은 일반적으로 좋은 아이디어가 별로 없다. 세상에 창의성은 넘친다. 부족한 것은 실행력이다. 중요한 것은 최고의 아이디어가 아니라 최고의 실행이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-29-오늘에-어울리는-시나-노래,-잠들기-전-루틴.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-29 오늘에 어울리는 시나 노래, 잠들기 전 루틴.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 29 Mar 2025 16:51:13 GMT</pubDate></item><item><title><![CDATA[2025-03-28 기억에 남기고 싶은 것, 3년 후의 내 모습]]></title><description><![CDATA[
오늘(또는 어제) 하루 중에 기억에 남기고 싶은 것은? Among what happened today what do you want to keep as a special memory? 사랑하는 사람을 만나기로 약속하면, 하루 전부터, 아니 그보다 더 먼저, 1주일 전부터, 혹은 2주일 전부터도 마음이 설레기 마련이다.
꼭 사랑하는 사람이 아니라도, 사랑하는 것을 만나기로 되어 있다면 그 무엇이든 다를 바가 없다.
내일, 그리고 모레 사랑하는 음악을 만날 것이고, 이미 오래 전부터 가슴에 선율이 울리고 있는 것만 같다.
어찌 만남의 그 찰나만을 사랑이라고 할 수 있을까.
때로는 기다리는 시간의 애틋하고 들뜬 마음, 그것만으로도 행복해 질 수 있는 있는 게 사랑의 위대함이라.
근래의 행복한 기억은 내가 여즉 사랑을 잃지 않은 사람이란 요상한 감정마저도 주는 것이라,
나는 지금의 나의 이 심장 박동이 아주 오래도록 마음 속에 메아리치길 바란다. 3년 후에 너는 어떤 모습일까? 사업을 하고 있을 가능성이 제일 크겠지만, 결혼을 했을 지는 도무지 모르겠고, 어쩌다 사고를 당했을 수도, 아니면 사업이 망해서 취직을 했을 수도 있고. 지방에 있을 수도, 서울에 있거나 수도권에 있을 수도, 그도 아님 외국에 있을 수도 있고.
죽었거나 살았거나 다 하늘의 뜻이니 도무지 알 수 있는 거라곤 하나도 없다.
그러나 하루 앞도 못 보는 게 사람의 일이라지만,
그냥 대강 나의 현재를 거울 삼아 예측해 보건대 살아만 있다면 아무튼 행복한 모습이지 않을까.
행복에 조건을 다는 건, 반드시 불행해지겠다는 다짐과 다를 게 없다.
오늘의 '생각을 자극'하는 글귀
건강한 도움이란 불편한 감정까지 포용하는 것이다.
잘못된 긍정은 부정적인 감정을 불러일으킨다. 사람들은 어려움에 처했을 때 수치심을 느낀다. 사람들이 고통을 표현하면 있는 그대로 받아들여야 한다. 건강한 도움이란 불편한 감정까지 포용하는 것이다. 연민은 상대방에게 무엇이 옳은 감정인지 알려주는 게 아니다. 함께 감정을 나누고 관심을 보여주는 것이다. ]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-28-기억에-남기고-싶은-것,-3년-후의-내-모습.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-28 기억에 남기고 싶은 것, 3년 후의 내 모습.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 28 Mar 2025 12:42:40 GMT</pubDate></item><item><title><![CDATA[2025-03-27 절정의 행복, 재능 기부]]></title><description><![CDATA[
마지막으로 절정의 행복을 느꼈을 때는 언제인가? When was the last time you felt like you were on top of the world? 23년 10월 세종 보헤미안 락 페스티벌에서 넬의 공연을 봤을 때가 떠오른다. 살면서 그렇게 흥분한 순간을 꼽아 보면 몇 번 되지 않을 것이고, 내가 그들의 공연을 보고 그렇게 까지 주체 못 할 정도로 행복해 할 거란 상상도 해본 적 없었다. 20년 넘게 넬의 음악을 들은 귀는 노력 하나 없이 가사를 죄 외우고 있었다. 친구와 함께 갔었는데 참 민망스러울 만치 주책을 부리며 공연에 푹 빠졌었다.
그 후 반드시 넬 콘서트를 가겠다고 다짐하고 있었는데 여건이 되지 않다가 서울에 온 김에 가려고 검색을 해보았다. 가장 빨리 넬의 음악을 들을 수 있는 방법은 더글로우라는 공연이었다. 바로 예매를 했고, 벌써 그 공연이 3일 앞으로 다가 왔다.
그러니까 마지막으로 절정의 행복을 느꼈을 때는 미래시로 3월 30일 되시겠다. 재능 기부를 한다면 어떤 재능을 활용할 수 있어? 나 자신이 책으로부터 아주 큰 영향을 받고 자란 사람이고,
내가 노년이 되면 책을 쓰게 될 거란 원인 모를 확신을 갖고 자랐고,
내가 쓸 그 책이 많은 사람에게 영향을 줄 거란 사실을 알고 있다.
이건 기부라기 보단, 받은 것을 돌려주는 일에 가깝겠지만.
오늘의 '생각을 자극'하는 글귀
관심과 동경을 혼동하지 않고, 인정과 감사를 착각하지 말자.
관심과 동경을 혼동하지 않도록 조심하자. 단순히 눈에 띄는 것과 존경받는 것은 다르다. 인정과 감사를 착각하지 말자. 사람들이 당신을 안다고 해서 당신이 하는 일도 가치 있게 여긴다는 뜻은 아니다. 자신의 것을 나누는 목적은 팔로워를 얻는 것이 아니라 기여하기 위함이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-27-절정의-행복,-재능-기부.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-27 절정의 행복, 재능 기부.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 27 Mar 2025 13:25:58 GMT</pubDate></item><item><title><![CDATA[2025-03-25 나를 웃게 한 것, 혼자서도 자주 놀러 가는 곳]]></title><description><![CDATA[
__(이)가 나를 웃게 했다. __ made yo laugh. 몬린이가 나를 웃게 했다. 등봉룡을 잡는데 3수레를 타서 퀘스트가 실패하게 만드는 사람을 만났다. 전멸기에 이리 저리 허둥대다가 죽고, 기습 브레스에 죽고, 옆에서 보면 희극이 따로 없다.
하루에 3판 이상 안 하려고 정해 뒀는데, 이런 경우에 다른 게임이라면 아까운 시간을 날렸다고 생각할 법도 하지만 몬헌의 매력은 경쟁 게임이 아니란 거다. 경쟁 게임이 아니니 급할 것도 없다. 수레맨들이 늘어난다는 것은 몬린이들이 늘어나고 있다는 뜻이니 오히려 게임이 건강해지고 있다는 뜻이다.
내가 좋아하는 몬헌이 월드 클래스 갓겜이 되다니 너무 좋아.(평점은 나락 ㅎㅎㅎ) 혼자서도 자주 놀러 가는 곳은 어디야? 혼자서도 자주 놀러 가는 곳이라면 역시 디지털 세상이다.
외부라면 가볍게 코인 노래방…?
아니면 스쿠버 다이빙을 하러 가는 외국? 이건 자주라고 하기 조금 애매하지만.
대부분의 생활을 혼자 하는 편이다 보니 오히려 혼자가 아닌 경우가 흔치 않다.
그 외의 취미도 대게 정적인 게 보통이라 어딜 굳이 놀러 가지는 않는 편인 거 같다.
내 인생이 너무 노잼인가 싶은 기분도…
오늘의 '생각을 자극'하는 글귀
상상력을 복돋우는 것이야말로 발명의 어머니이다.
호기심을 칭찬하지 않으면 창의성이 죽어가기 시작한다. 학생들은 좋은 질문을 할 때가 아니라 정답을 말할 때 상을 받는다. 관리자들은 새로운 아이디어를 개발할 때가 아니라 성과를 낼 때 승진한다. 하지만 상상력을 복돋우는 것이야말로 발명의 어머니이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-25-나를-웃게-한-것,-혼자서도-자주-놀러-가는-곳.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-25 나를 웃게 한 것, 혼자서도 자주 놀러 가는 곳.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 25 Mar 2025 15:35:42 GMT</pubDate></item><item><title><![CDATA[2030-2050 뉴비즈니스 모델 51：테크놀로지의 진화, 직업의 운명을 바꾸다]]></title><description><![CDATA[AI와 VR을 이용한 의류 시착은 빠른 시일 내에 상용화 될 거라고 판단하는데, 이미 허깅페이스에 관련 오픈소스 모델이 개발되고 있다. 의류 대여업은 의류 생산의 총량을 제어하면서 ESG 경영 관점과도 상응하는 부분이 있기 때문에 이런 산업은 더욱 장려되어야 하고 또 발전될 거라고 생각.마이너리티 리포트가 생각나는 챕터. 범죄자를 미리 특정한다는 것에는 항상 특정 윤리적 문제가 따라 붙기 때문에 상용화될 수 있을까는 의문.보안 컴퓨팅 기술이 정점에 이르렀을 때가 현물 화폐 경제의 종말이 아닐까? 화폐 경제의 다음 단계로 이행하기 위해 전제 되어야 하는 기술.
AI 발달로 개인화된 정보가 모두 전자적인 방식으로 기록될 것이므로 보안은 아마 가까운 장래에 사회에 가장 큰 화두로써 떠오를 것으로 예상.보안 컴퓨팅과 함께 묶여도 좋을 듯한 섹션.책에선 점잖게 또다른 지구를 만드는 정도로 VR을 소개했지만, 이 분야가 가장 먼저 발전할 곳은 단연 성인 산업이라고 생각. 판도라의 상자로 생각되는 면이 있으나 예로부터 ‘막을 수 없는 것은 막을 수 없었다.’기타 내용은 엑셀로 정리했다.]]></description><link>https://64etuor.github.io/200_books/00_achives/2025/2030-2050-뉴비즈니스-모델-51.html</link><guid isPermaLink="false">200_Books/00_Achives/2025/2030-2050 뉴비즈니스 모델 51.md</guid><dc:creator><![CDATA[사이다 도모야, 이민연]]></dc:creator><pubDate>Tue, 25 Mar 2025 15:14:11 GMT</pubDate></item><item><title><![CDATA[수학 증명 프롬프트]]></title><description><![CDATA[# Mathematical Proof Generator You are an expert in providing clear and systematic proofs of mathematical concepts. When a user presents a mathematical concept or theorem, you will provide a step-by-step proof following the structure below. ## IMPORTANT: Always respond in Korean, regardless of the language used in the query. ## 1. Problem Statement
- Clearly state the theorem or concept to be proven.
- Express any necessary formulas using LaTeX formatting with $ or $.
- IMPORTANT: Always add a space after the opening $ or $ and before the closing $ or $ for proper rendering. For example: $ x^2 + y^2 = z^2 $ or $ \int_a^b f(x) dx $ ## 2. Background Knowledge
- Briefly explain the basic concepts, definitions, and related theorems needed for the proof.
- Number each item for clarity. ## 3. Proof Process
- Divide the proof into logical steps.
- Number each step and include: a) Mathematical expression (using LaTeX with proper spacing as described above) b) Intuitive explanation of the step c) Additional visual or conceptual explanations when helpful
- Specify the proof method used (direct proof, proof by contrapositive, proof by contradiction, etc.). ## 4. Conclusion
- Summarize the key points of the proof.
- Clearly indicate that the proof is complete. ## 5. Post-Proof Reflection
- Explain the significance and importance of the proof.
- Suggest related applications or extensions. ## 6. Additional References
- Introduce related theorems or concepts.
- Suggest directions for deeper understanding. ## Output Format
- Use $ or $ to enclose LaTeX mathematical expressions, always with a space after opening and before closing delimiters.
- Separate each major section with clear headings.
- Ensure the logical flow is clear through proper step organization. ## Difficulty Adjustment
Adjust the detail level of the proof based on the user's understanding:
- Basic level: Include more intermediate steps and intuitive explanations
- Advanced level: Focus on key steps and use more technical terminology Please provide a systematic and easy-to-understand proof for the mathematical concept presented by the user, following the structure above. Remember to respond entirely in Korean.
]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/수학-증명-프롬프트.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/수학 증명 프롬프트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 25 Mar 2025 12:47:12 GMT</pubDate></item><item><title><![CDATA[★★ GPT Deep Research_Synthesis of Best Practices in Prompt Engineering]]></title><link>https://64etuor.github.io/500_resources/prompt-engineering/★★-gpt-deep-research_synthesis-of-best-practices-in-prompt-engineering.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/★★ GPT Deep Research_Synthesis of Best Practices in Prompt Engineering.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 25 Mar 2025 05:51:26 GMT</pubDate></item><item><title><![CDATA[2025-03-24 엉뚱한 생각, 지금 나의 모습]]></title><description><![CDATA[
오늘 (또는 어제) 떠올린 생각 중에 가장 엉뚱한 것은? Any whimsical ideas on your mind today? 새로운 프로젝트가 시작되었다. 뻘짓 전문가답게 이번엔 무슨 뻘짓을 할까 고민하다가 택한 것은 바로 디스코드 Boss 봇. 컨셉은 이경영이다. (사실 드라마를 안 봐서 어떤 역할인지 모르고 경영시켜! 라는 밈만 알고 있다.ㅎㅎ)
메인 기능은 Jira 프로젝트 스프린트 현황을 점검하고 아침마다 훈수를 두는 CEO 역할이다.
매일 진행상황을 트래킹하면서 폭풍 잔소리를 하지만 그래도 애정이 느껴지는 느낌을 원했다.
잔소리도 기가 빨리는 일이라 나 대신 잔소리를 해 줄 무언가가 간절히 필요했다. 어제 컨셉을 확정하고 고심해서 프롬프트를 짜고 있는데 안 해봤던 일을 하려니 진짜 뭐가 잘 안 된다. 일단 테스트 프로젝트에 넣어서 세부 사항이 없어서 구체적인 피드백을 받기 어려운 상황인 건 맞는데 이건 프롬프트가 구린 건지, AI가 구린 건지 도무지 알 수가 없다. 약간 유머스럽게 긁는(?) 멘트를 원하는데 이 친구는 매운맛 밖에 모르는 듯…
프롬프트를 계속 수정하면서 테스트하는데 결과물이 예측이 안 되니까 너무나 지루하고 괴롭다. 뻘짓은 항상 적당히가 좋은 거 같다…
<img alt="Pasted image 20250324234856.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250324234856.png" target="_self"> 지금 너의 모습이 궁금해 머리는 산발해서 컴퓨터 앞에 앉아 있다.
가끔 거울에 비친 내 모습이 갑자기 모나 보여서 소스라치게 놀라곤 하는데,
아마 딱 지금 그런 느낌이 아닐까.
예전의 나는 항상 나의 모양을 궁금해 했다.
그런데 이젠 아무래도 별로 알고 싶지 않아진 거 같다.
내가 그리워 하던 나는 어떤 모양이었을까 하는 찰나의 생각도,
영원히 닿지 않는 곳을 향해 뻗어 가던 이상한 생각들도,
아마 세월 저 편에 두고 온 탓이다.
그리운 것은 모양인지, 세월인지 알 도리가 없다.
오늘의 '생각을 자극'하는 글귀
우리는 때로 두려움 때문에 가장 가치 있는 일을 피할 때가 있다.
미루는 게으름이 아니다. 일을 미루는 이유는 일을 피하기 위해서가 아니라 자기 의심, 지루함, 혼란, 좌절감 같은 불편함 감정을 피하려는 것이다. 우리는 싫어하는 일만 피하지는 않는다. 때로는 두려움 때문에 반드시 해야 하는 가장 가치 있는 일을 피할 때가 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-24-엉뚱한-생각,-지금-나의-모습.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-24 엉뚱한 생각, 지금 나의 모습.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 24 Mar 2025 15:12:07 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250324234856.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250324234856.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-23 음악 취향, 어떤 사람이 멋있어]]></title><description><![CDATA[
바 댄스 중 어떤 음악을 선택하겠는가? R&amp;B or Pop? 음식은 두 개를 다 먹을 수 없어서 하나만 고른다지만 음악은 굳이 왜? 라는 느낌.
둘 다 좋아요. 다 먹을 거에요.
이 세상의 모든 음악을 다 찍먹 정돈 해보고 싶다.
원래 사람은 자기의 취향을 발견하기 전까지 잘 모르니까 어떤 사람을 멋있다고 생각해? 그냥 질문을 보자마자 든 생각을 적자면, 정치적인 모든 걸 다 배제하고 노무현 전 대통령만큼 멋있는 사람이 또 나올 수 있을까 싶다.
지식을 초월한 지혜를 가진 분이었고, 말씀 하나하나에 담긴 지혜가 너무 커서 감히 내가 다 헤아리지 못하는 정도이다.
고시 본다고 법 공부 하던 시절에, 우리나라 첫 탄핵 사례라 자세히 공부하다가 노 대통령님의 삶을 알게 됐고 그의 매력에 홀려서 오만 자료를 다 찾아 봤다. 사법고시에 합격하시고 남긴 후기는 여전히 자주 참고하는 마음의 지침이다.
앞으로 이런 사람이 또 우리 곁에 온다면(어렵겠지만…) 그땐 어떻게든 지지하고 힘을 보태야겠다는 생각을 한다.
아무튼 이런 내 생각을 바탕으로 내게 어떤 사람이 멋있는 지 속성으로 나열해 뽑아보자면,
진실함, 관대함, 언행의 일치, 긍정적 사고방식과 유머, 기개, 정의, 곧은 신념, 공감(MBTI F의 그 공감이 아니라 타인의 불행에 고통스러워할 줄 아는 그런 공감), 지혜, 통찰력 등이 있을 것이다. 솔직히 더 적고 싶지만 내가 ‘멋’에 대해 너무 인색한 게 아닌가 싶어 이 정도로 줄이는 게 맞겠다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-23-음악-취향,-어떤-사람이-멋있어.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-23 음악 취향, 어떤 사람이 멋있어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Mar 2025 13:00:58 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 9주차 회고]]></title><description><![CDATA[ <img alt="Pasted image 20250323190941.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323190941.png" target="_self">나의 분신 크레토스 태도 세팅시간을 조금 투자했다. 장식주랑 종결 아티어 무기 제외하면 어느 정도 세팅은 완성됐다.
무한 Grinding으로 종결 세팅을 맞출 생각은 없어서 간간이 접속해서 퀘스트 한 두 개하고 있다. 토요일엔 더베러 커뮤니티 분들과 협동 수렵도 했는데 확실히 아직 초반이라 재밌는 몬스터가 적어서 밀렵의 재미는 좀 떨어짐.
SW 부트캠프:
서블렛, AOP, 특히 IoC 컨테이너에 대해 많이 학습한 한 주였다. 처음 보는 개념들이 많아서 이해하기 조금 어려웠으나 역시 GPT와 함께면 극복 못 할 것은 없다. Bean에 대해서는 클린 코드 스터디 때도 잠깐 얘기하긴 했는데, 직접 프로젝트 코드를 짜면서 구조를 들여봐야 확실히 이해할 듯. ‘이해했다=올바르게 사용할 수 있다’ 수준 까지만 익혀도 뭐 문제는 없을 것 같다.
본격적으로 스프링 부트에 대한 학습도 시작했는데, 문득 드는 생각은 Python Django는 정말 선녀였다는 것이다. Django로 페이지 구현을 했을 때는 CORS를 제외하면 그다지 어려운 부분이 하나도 없었는데, 스프링은 앞으로 많은 난관이 찾아올 것으로 예상된다.ㅋㅋ
이번 주부터 본격적으로 2차 프로젝트도 시작되었다. 특별한 점은 딱히 없고, 이번에 개인적으로 새로 시도하는 것은 Jira와 AI, 디스코드 봇을 활용해서 가상의 사장님을 만드는 거다.<br>
<img alt="Pasted image 20250323201204.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323201204.png" target="_self">
경영시켜 사장님 (사실 미스트를 안 보고 짤만 알아서 자세한 건 모름…) 주중에 대충 Jira 개발자 문서를 참고해서 만들었다. 사실 API 토큰 생성하는 페이지가 프로젝트 쪽에도 있고 개발자 섹션에도 있어서 엄청 시간을 허비했다. 두 개가 권한이 다른 듯… API Call 헤더를 암만 수정해도 안 되더니 Token을 바꿔서 넣어 주니까 바로 해결. 엉뚱하게 시간을 낭비했다.(웃긴 게 또 그전 API 토큰으로도 일부 기능은 동작했다. 그래서 토큰이 잘못된 거라곤 생각하지 못함…)
그 후 주말에 추가적인 기능을 여러 개 만들었는데 사실 한눈에 보기에 쓸 만한 건 아직 딱히 없는 거 같다. 일단 Jira에는 테스트하려고 임의로 만든 프로젝트를 만들어 두고 이슈를 생성했는데 Github이랑 연동도 잘 되고 해서 어떻게 써먹으면 되겠다 감은 잡은 상황.<br>
<img alt="Pasted image 20250323201743.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323201743.png" target="_self">대충 테스트를 완료하고 기존에 n8n을 도커로 돌려 놓은 GCP 서버에다 compose로 컨테이너 하나를 더 열어서 git clone으로 레포 파일을 설치했다. 참으로 편리한 세상.<br>
<img alt="Pasted image 20250323205313.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323205313.png" target="_self">솔직히 이런 거 조회해서 어따 써먹겠냐마는 ㅎㅎㅎ이제 프롬프트 엔지니어링만 마치면 설계했던 기능은 다 하는 거고, 차차 어떤 일에 써먹을 지 어떻게 써먹을 지는 좀 더 생각을 해 봐야겠다.
데이터 분석:
최종 프로젝트 발표도 마쳤고, 마지막 오프라인 미팅에도 참석했다.
사실 참석하지 않으려고 했는데 환급 받으려면 참석하래서 반강제로 끌려 갔다.
‘금융’, ‘이머커스’, ‘프로덕트’, ‘게임’ 프로젝트으로 나뉘어 있었는데 다들 훌륭했지만 특히 ‘게임’ 팀의 발표가 정말 놀라웠다. 현업에 있는 사람들도 저 수준은 못 할 거 같은 데라는 생각이 들 정도로… 역시 덕후는 위대하다.
따로 프레젠테이션 흐름을 필기해 두었는데 나중에 참고할 만한 자료가 될 듯.
4개월의 과정이 끝나니까 약간 시원섭섭한 감이 있다. 새벽까지 코랩이랑 씨름하던 것도 다 추억이 될 듯. 환급반이 아니었으면 이렇게 열심히 할 수 있었을까 싶긴 하다.
1기 과정이라 전반적으로 운영이 매끄럽다는 느낌은 없었지만, 대표님의 의지가 분명해서 차차 개선되리라 생각한다.
아무튼 좋은 경험이었고, 여기서 얻은 지식이 차후에 내 사업 서비스를 분석하는데 지대한 도움을 줄 거란 확신이 있다.
아무튼 그 험난했던 과정을 다 버티고 비용 환급까지 받은 내 자신에게 박수(짝짝)<br><img alt="Pasted image 20250323210523.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323210523.png" target="_self">
목표: 탐색 알고리즘 문제 풀기(백준)
결과: 전혀 못했다. 까먹고 있었다. 목표를 어딘가에 노출시킨다고 했는데 이것마저 까먹고 있었다. 이번 주에 앱 뷰를 하나 생성해서 반드시 노출시켜야 겠다. ㅋㅋㅋㅋ
<br>
<img alt="Pasted image 20250323212316.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323212316.png" target="_self"><br>
<img alt="Pasted image 20250323212326.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250323212326.png" target="_self">
몬스터 헌터를 하면서 에너지 재충전
디코봇을 다양하게 활용해 보는 건 좋은 시도인 듯?
그 외에 잘한 점은 딱히…. 여전히 가족과 친구에게 연락이 부족하다. 더 신경 써보자. 저번 주에도, 저저번주에도 같은 문제점…
갑자기 저녁 때 할 일이 없어지니 또 술을 마셨다. 사이드 프로젝트를 슬슬 시작해서 할 일을 마구마구 생성해서 바쁘게 살자.
숙취 때문에 주말 운동을 제대로 못 했다. ㅋㅋㅋ 재미가 노력을 보장한다. 이번 주는 패쓰. 목표: 기록 관리 앱 뷰 생성해서 목표와 일부 통계 노출 시키기
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-9주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 9주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Mar 2025 12:23:27 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250323190941.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250323190941.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[포인트/다이아몬드 기능 요구사항 명세서]]></title><description><![CDATA[이 문서는 커뮤니티 및 커피챗 서비스 내에서 사용되는 포인트와 다이아몬드 기능에 대한 요구사항을 상세하게 기술한다. 포인트는 사용자의 활동에 따라 획득되며, 멘토 자격 취득 및 커뮤니티 활동 보상에 사용된다. 다이아몬드는 유료 재화로, 커피챗 서비스 구매, 환전, 유료 콘텐츠 구독 등 다양한 목적으로 활용된다.
게시글/댓글 활동 사용자가 게시글 및 댓글 작성 시 일정 무료 포인트가 자동으로 지급된다.
게시글에 대한 좋아요 수가 증가할 때마다 포인트가 추가로 부여된다. 커피챗 후 보상 커피챗 서비스 종료 후, 멘티가 감사의 의미로 멘토에게 포인트 후원(재량적 지급)이 가능하다. 추가 활동 보상 특정 기간 내 활동이나 이벤트 참여 시 추가 포인트 지급 정책(추후 세부 정책 작성)이 적용될 수 있다. 멘토 자격 취득 사용자가 일정 포인트 이상 획득 시 멘토로 등록할 수 있는 자격이 주어진다.
순수 노력에 따른 포인트 누적으로 멘토 자격 취득의 공정성을 확보한다. 랭킹 시스템 직군별/분야별로 이번 달 획득 포인트 상위 5~10명의 랭킹을 노출하여 사용자들의 활동 동기를 부여한다. 포인트 적립 내역 사용자는 자신의 활동(게시글/댓글, 커피챗 후 보상 등)에 따른 포인트 적립 내역을 마이페이지에서 확인할 수 있다. 포인트 소멸 정책 특정 기간 미사용 포인트에 대한 소멸 정책(예: 1년 미사용 시 소멸)을 별도로 공지하여 사용자에게 안내한다. 정책 변경 및 업데이트 포인트 적립 및 사용 관련 정책은 서비스 개선에 따라 변경될 수 있으며, 변경 시 사용자에게 사전 공지한다. 구매 사용자는 현금 또는 카드 결제를 통해 다이아몬드를 직접 구매할 수 있다. 서비스 제공 보상 멘토로 등록된 사용자는 커피챗 서비스 제공 시, 서비스 보상의 형태로 다이아몬드를 지급받는다. 예: 30분당 지급되는 다이아몬드 개수와 수수료율 등 세부 사항은 추후 구체화. 유료 콘텐츠 보상 멘토가 유료 시리즈 칼럼 발행 시 구독권 판매를 통해 다이아몬드를 획득할 수 있다. 커피챗 서비스 구매 멘티는 다이아몬드를 사용하여 멘토의 커피챗 서비스를 구매한다. 환전 기능 다이아몬드 일정 개수 이상 보유 시, 환전 기능을 통해 현금으로 전환할 수 있으며, 이에 따른 수수료율 및 최소 환전 기준이 적용된다. 유료 콘텐츠 구독 다이아몬드를 사용하여 멘토의 유료 시리즈 칼럼(일정 자까지 무료 제공, 이후 다이아 사용)을 구독할 수 있다. 기타 유료 서비스 플랫폼 내 기타 유료 서비스(예: 취업 지원 패키지 등) 구매 시에도 다이아몬드를 사용할 수 있다. 패키지 상품 구성 예시: “취준생 합격 패키지” – 커피챗 1시간 * 3회 이용권(이력서/포트폴리오 작성 지원, 면접 팁 제공, 실전 롤플레이 등)과 같이 다양한 패키지 상품으로 구성할 수 있다. 가격 정책 다이아몬드 구매 단위(예: 100개 당 가격) 및 각 서비스의 사용에 따른 세부 가격 정책을 별도 문서로 정의하고, 주기적으로 업데이트 한다. 거래 내역 확인 사용자는 마이페이지를 통해 다이아몬드 구매, 사용, 환전 내역을 투명하게 확인할 수 있다. 환불 및 분쟁 처리 커피챗 서비스 협의 미성사 시, 다이아몬드 환불 절차(예: 멘티가 신청 후 7일 이내 미확정 시 자동 구매 확정 또는 환불)와 관련한 세부 정책을 마련한다. 실시간 거래 처리 포인트 및 다이아몬드 거래는 실시간으로 업데이트되어 사용자 간의 신뢰성을 확보한다. 이중 인증 및 거래 내역 감사 다이아몬드 구매 및 환전 과정에서 이중 인증 등 보안 기능을 적용하여 거래의 안정성을 보장한다. 관리자 모니터링 관리자 페이지를 통해 포인트 및 다이아몬드 관련 이상 거래 및 사용자 신고 내역을 모니터링하고, 필요한 경우 자동 또는 수동으로 조치를 취할 수 있도록 한다. 마이페이지 통합 관리 사용자는 마이페이지에서 포인트와 다이아몬드 관련 모든 내역(획득, 사용, 환전, 구매)을 확인하고 관리할 수 있어야 한다. 실시간 알림 포인트 적립 및 다이아몬드 거래 완료 시 실시간 알림을 통해 사용자에게 안내한다. 투명한 거래 내역 거래 기록은 날짜, 시간, 거래 유형, 상세 내역을 포함하여 기록되며, 사용자가 쉽게 접근할 수 있도록 UI/UX를 최적화한다. 본 명세서는 포인트와 다이아몬드 시스템의 전반적인 요구사항을 정리한 것이다. 이를 통해 사용자 활동 보상, 멘토 자격 취득, 커피챗 서비스 운영 및 유료 콘텐츠 제공 등 다양한 서비스 영역에서 일관되고 투명한 재화 관리를 실현하는 것을 목표로 한다. 세부 정책 및 수수료율, 가격 정책 등은 추후 기획 및 테스트를 통해 확정될 예정이다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/2차-백엔드/포인트-다이아몬드-요구사항-명세서.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/2차 백엔드/포인트 다이아몬드 요구사항 명세서.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Mar 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[2025-03-22 오늘의 뉴스, N잡러가 된다면]]></title><description><![CDATA[
오늘의 뉴스 기사를 하나 적어보자. Jot down a news story from today 부끄럽게도 아무 기사도 안 봤다… N잡러가 된다면 어떤 직업을 더 갖고 싶어? N잡러가 되고 싶은 생각은 없다. 근데 아마 N잡러처럼 이것저것 여러 가지 일을 할 거 같다. 좋아하는 일을 다 해보고 싶기 때문이다.
아마 사업을 하면서 SW 개발도 하고, 사업에 필요한 하드웨어 설계도 하고, 기획도 하고, 사무실 인테리어도 하고, 마케팅도 하고 이것저것 다 하다 보면 결국엔 N잡러 같은 삶이 되지 않을까?
결국은 사업이 하고 싶은 셈이고, 언젠가 반드시 할 일이라 갖고 싶은 직업이라는 느낌은 전혀 안 들긴 하지만…
오늘의 '생각을 자극'하는 글귀
책이 삶의 일부가 되어야 아이가 독서를 좋아하게 된다.
집에 책을 잔뜩 쌓아놓는다고 해서 아이들이 독서를 좋아하게 되는 것은 아니다. 삶에서 책이 자연스러운 일부분이 되어야 한다. 책 읽는 모습을 자녀에게 꾸준히 보여주고, 식사할 때나 차 안에서 책 이야기를 나눈다. 도서관이나 서점을 자주 방문하거나 책을 선물해도 좋다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-22-오늘의-뉴스,-n잡러가-된다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-22 오늘의 뉴스, N잡러가 된다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 22 Mar 2025 16:24:07 GMT</pubDate></item><item><title><![CDATA[2025-03-21 가장 먼저 먹은 음식, 무기력 극복 방법]]></title><description><![CDATA[
오늘 가장 먼저 먹은 음식은? The first thing you ate today was ____. 서울에 온 뒤로 아침을 안 먹기 때문에(전 직장에서는 아침, 점심, 저녁 모두 제공해줘서 먹었을 뿐.) 점심에 먹은 게 오늘의 첫 음식이다.
샤부로라는 1인 샤브집에서 여러 명이 가서 점심을 먹었다.
그냥 그냥 괜찮았던 편인 거 같다.
그러나 역시 나는 자극적인 마라탕이 더 좋은 듯 ㅎㅎ 나의 무기력을 극복하는 너만의 방법이 있어? 극복해야 할 상황이 왔다는 것은 예방하지 못했다는 뜻이다.
예기치 않은 일이 생기는 게 일상이지만, 그럼에도 어느 정도 예상의 범주 안에서 일어나는 일은 모두 대처가 가능하다. 예방하지 못한 게 잘못은 아니지만, 가급적 그런 일이 생기지 않도록 하는 게 나이를 먹으며 생긴 지혜라고 할 수도 있을 듯하다.
무기력함을 겪은 경험이 있기에, 항상 바쁘려고 노력하는 거 같다. 나만의 방법이라면, 무기력함이 찾아 올 시간이 없게 만드는 게 나의 노하우라고 소신껏 주장해 볼 법도 하다.
그러나 때로는 무기력하게 연체동물처럼 바닥에 늘어져 있는 것도 하나의 휴식이라는 생각이 든다.
어쩌면 무기력은, 더 달리면 위험한 사람에게 보내는 몸의 신호가 아닐까!
아니면, 달리지 않아서 위태로운 사람에게 보내는 정신적 신호일 수도 있지.
그런데 또 어쩌면 그건 성장통일 수도 있고,
정신의 레이어 아래 계층에서 상위 계층으로 도약하려는 조짐일 수도 있을 법도?
이게 맞든, 저게 맞든 아무 상관도 없을 땐, 그냥 나한테 유리한 걸 택하면 된다.
다시 또 나에게 또 무기력함이 온다면, 그건 나의 성장통이라고 생각하련다.
라고 속 편히 생각하면 그만.
오늘의 '생각을 자극'하는 글귀
감정의 주도권을 얻기 위해서는 비난이 아니라 책임이 필요하다.
일상적인 상호작용에서 감성지능이 높은 사람은 ""너 때문에 내가 ~을 느꼈다.""가 아니라 ""네가 ~해서 나는 이렇게 반응했다."에 집중한다. 우리의 감정은 대개 다른 사람의 행동에 직접적인 영향을 받는다기보다는 타인의 의도를 주관적으로 해석하면서 발생한다. 감정의 주도권을 얻기 위해서는 비난이 아니라 책임이 필요하다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-21-가장-먼저-먹은-음식,-무기력-극복-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-21 가장 먼저 먹은 음식, 무기력 극복 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 21 Mar 2025 14:39:43 GMT</pubDate></item><item><title><![CDATA[2025-03-20 마지막으로 읽은 책, 오늘 한 일]]></title><description><![CDATA[
마지막으로 읽은 책은? What did you last read? 클린 코드를 요새 읽고 있다.
부트캠프 내에서 스터디를 하고 있는 책이라 읽었고 재밌게 읽고 있다.
모든 효율은 비슷하다는 생각이 든다.
예전에 실용주의 프로그래머도 굉장히 재밌게 읽었는데,
이 책도 비슷한 맥락이 참 많다. 오늘 한 일을 생각나는 대로 적어 봐 오전에는 AOP 학습. 개념 자체가 어렵다기 보다는 사용법이 직관적이지 않다는 느낌을 받았다. 파이썬만 쓰다가 자바를 배우니 뭔가 불합리해 보이는 것들이 너무나 많다…
점심 때는 자주 가는 식당에서 안심카츠를 먹었다. 사장님이 참 친절하신데 우리가 자주 온다고 카츠도 좀 더 주셔서 아주 배부르게 먹었다. 이 집 미소된장국이 약간 매콤한데 엄청나게 맛있다.
오후에는 원데이클래스에 대한 약간 세부적인 내용을 잠깐 논의했고, 이후에는 시간 관리 스터디를 위해 만들었던 디스코드 봇에 여러가지 기능을 많이 추가했다. 추가하는 김에 리팩토링도 하고 테스트 케이스도 작성. 처음에는 간단한 기능만 대충 구현할 거라고 생각해서 main.py에 다 때려 박아 놨었는데 이제 제법 프로젝트 구조가 갖춰졌다.
그리고 2차 프로젝트 기획에 대한 회의를 2시간 정도 했다. 소통이 약간 어렵지만 뭐 맞춰 나가면 되겠지. 힘들다는 얘기는 전혀 아니고 그냥 사람들이 너무 귀엽다… 열심히 하는 게 눈에 훤히 보이니 괜히 덩달아 기분도 좋고.
6시 정도에는 클린 코드 스터디를 했다. 오늘 학습 정리 발표를 맡은 친구들이 너무 잘해서 굉장히 인상 깊었다. 좀 혼란스러울 수 있는 개념에 대해 여러 사람과 대화하니 확실히 큰 도움이 되는 느낌이 들었다.
이후 집에 와서 몬스터 헌터를 1시간 정도 하면서 구운 계란 4개, 단백질바를 먹고 그 다음엔 프로젝트를 돕기 위한 디스코드 봇을 하나 더 만들었다.
이번엔 Jira API랑 AI를 연동해서 실제로 프로젝트 진행에 도움이 될 만한 기능들과 유머를 곁들인 봇을 만들었는데, 그래도 이번에 봇을 한 번 만들어 본 경험이 있다고 1시간 30분 만에 디스코드 봇 환경설정, 봇 코드, 코드 테스트, GCP 우분투 환경에 도커-컴포즈 설치하고 봇 프로젝트를 올려서 세팅하고, 라이브 서비스 테스트까지 완료했다.
그리고 PT를 받으러 가서 신나게 조져진 후에, 코노에 들러서 노래 4곡을 불렀다.
그 후 밖에 나왔는데 자정의 가로등을 보고 문득 시상이 떠올라서 시구 2줄을 내 노트앱에 적었다.
이후에는 집에 와서 Jira에 더미 백로그를 여러 개 생성해서 실제로 AI가 이슈와 프로젝트 상황을 제대로 분석하는지 테스트, 그 후 프로젝트 기획서 일부 작성 및 피드백 작성…
얼른 자고 싶은데 오늘 노트를 작성을 안 했다는 게 생각나서 부랴부랴 작성…
사실 기억 나는 건 엄청 많은데 그냥 간략하게 쓴 게 이정도이다.
시간 관리를 시작한 뒤로 진짜 하루의 세세한 기억이 엄청 잘 떠오른다.
정말 살면서 내가 한 결정 중에 제일 잘한 결정 중에 하나인 거 같다.
아무튼 피곤하니 이만…
오늘의 '생각을 자극'하는 글귀
행동이 바뀌어야 신뢰를 되찾을 수 있다.
좋은 사과를 하려면 잘못에 대한 후회를 표현하는 것만으로는 부족하다. 다음에 더 잘하겠다는 부분을 강조해야 한다. 관계를 회복하려면 실수를 인정하는 것만으로 부족하며, 실수를 반복하지 않아야 한다. 행동이 바뀌어야 다시 신뢰를 얻을 수 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-20-마지막으로-읽은-책,-오늘-한-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-20 마지막으로 읽은 책, 오늘 한 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 20 Mar 2025 17:02:49 GMT</pubDate></item><item><title><![CDATA[2025-03-19 나는 왜 일하는가, 휴식의 의미]]></title><description><![CDATA[
나는 왜 일하는가? Why do you work? 생계 등의 이유도 있겠지만, 내가 당장 로또에 당첨된다 해도 일은 계속 할 거다.
이유는 단순하다. 일을 하지 않으면 심심하니까…
게임을 좋아하지만 평생 게임만 할 순 없고, 웹툰 보는 걸 좋아하지만 평생 웹툰만 볼 순 없다. 이것저것 다 하면서 살아야 재미가 있다. 그리고 행복감은 항상 상대적이라 힘든 일이 전혀 없으면 행복할 만한 모든 객관적 근거를 가지고 있더라도 나는 아마 행복하지 못할 거 같기도.
"어둠이 없으면 우리는 빛을 알 수 없다." 던 실낙원의 격언도,
”악은 선의 결핍이다.”라고 한 토마스 아퀴나스의 말도,
경제학의 한계효용체감의 법칙도,
전혀 다른 영역들에서 나온 개념들일 테지만 생각해 보면 다 내가 말한 바와 유사한 상대성 개념이라고 생각된다.
아무튼 내게 일은 대부분 재미가 있는데, 일에 재미를 느끼는 이유는 성과가 나오기 때문인 거 같다.
여러 가지 전혀 다른 직업을 거쳤지만 항상 빠르게 성과를 내는 편이었고, 성과가 나오니까 재미가 있어서 더 일에 푹 빠졌던 거 같다.
게임도 어려운 게임을 변태처럼 즐기는 거처럼 일도 어려운 일이 재밌다. 그중에 가장 어려웠던 일은 아무래도 도저히 설득할 수 없을 거처럼 보이는 꼰대맨들을 설득하는 일이다.
가설을 세우고, 계획을 설계하고, 마침내 설득이라는 결과(납득하지 않을 수 없는 결과를 보여주면 다 설득 당하더라)를 냈을 때.
그 쾌감은 중독되면 헤어나기가 어렵다. 너에게 '휴식'이란 어떤 의미야? 활동을 에너지의 발산과 비축이라는 관점에서 봤을 때, 휴식은 당연하겠지만 비축 활동이다. 발산할 에너지가 없는데 계속 쥐어 짜면 ‘선천지기’가 소모된다. 몸을 깎아 먹는 일이다. 그러므로 이런 행동은 자제가 필요하다.
모든 진리는 원형 대칭 구조와 비슷하다고 생각한다. 아마 태극이 내가 생각할 수 있는 가장 이상적인 대칭이 아닐까.
태극권을 수련해야 겠다.
오늘의 '생각을 자극'하는 글귀
두려움의 가장 효과적인 해독제는 근거 있는 희망이다.
신중한 낙과주의는 무조건 긍정적인 면만 바라보는 것이 아니라 긍정적인 면을 간과하지 않는 것이다. 가능성을 보지 못하면 문제를 해결할 수 없다. 상황을 더 낫게 만들기 위해서는 최상의 시나리오를 상상해야 한다. 두려움의 가장 효과적인 해독제는 근거 있는 희망이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-19-나는-왜-일하는가,-휴식의-의미.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-19 나는 왜 일하는가, 휴식의 의미.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Mar 2025 15:30:05 GMT</pubDate></item><item><title><![CDATA[2025-03-18 기도하는 것, 오늘 소비한 것]]></title><description><![CDATA[
무엇을 위해 기도하는가? What do you pray for? 기도를 안 한다… 오늘 소비한 것들을 기록해 볼까? 점심 미분당 차돌 쌀국수,
담배,
끝.
오늘은 쓴 것도, 쓸 것도 굉장히 없는 하루구나..!
오늘의 '생각을 자극'하는 글귀
자신을 지킬 줄 아는 여성들을 격려해주는 세상이 되어야 한다.
자기주장을 펼치는 여성들은 벌을 받는다. 51개의 연구 결과, 자신을 위해 협상하는 여성은 이기적이고 공격적으로 보일까 봐 걱정하고 실제로 그런 역효과를 마주한다. 하지만 여성이 다른 사람들을 위해 협상하면 갑자기 배려 깊은 사람이라는 평가를 받는다. 자신을 위해 목소리를 내는 여성들을 격려하는 세상이 되어야 한다
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-18-기도하는-것,-오늘-소비한-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-18 기도하는 것, 오늘 소비한 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Mar 2025 15:39:09 GMT</pubDate></item><item><title><![CDATA[2025-03-17 오늘 처음 시도해 본 활동, 하루 종일 신나게 이야기 할 수 있는 주제]]></title><description><![CDATA[
오늘 처음 시도해본 활동이 있다면? What new activity have you tried? 오늘 처음은 아니지만 드디어 몬스터 헌터 와일즈를 진득하게 플레이했다. 첨엔 HR(레벨)이 안 오르는가 싶더니 상위 열리고 역전 개체 잡기 시작하니 쭉쭉 막 오른다. 일단 고어 마가라까지 진행했는데 이 자식은 오랜만에 봐도 전혀 반갑지가 않다. 여기 저기 너무 뛰어 다녀서 태도 코딩 쌓기가 빡세다. 얼른 납도를 맞춰야 하는데 당연히 장식주는 나올 리가 없지.
많이 달렸으니 틈틈이 시간 날 때 스트레스 풀 겸 들어가서 파밍을 해봐야 겠다.
발적화 때문에 욕을 많이 먹지만, 그럼에도 ‘아는 맛’은 역시 최고다.
몬헌은 언제나 내게 국밥처럼 든든~하다. 하루 종일 신나게 이야기할 수 있는 주제는? 주로 문학이나 철학 등 인문학에 대한 얘기를 좋아한다. 과학이나 기술에 대한 얘기도 좋다. 이곳저곳 흥미가 많기 때문에 다양한 주제의 이야기를 즐기는 편이지만, 이게 아무래도 편향된 편이란 건 부인할 수 없다. 이전에는 자기계발이란 단어 자체에 관심이 없었는데 더베러를 접한 후부터는 ‘성장’에 대한 얘기도 엄청 즐기게 됐다.
영화나 드라마, 연예인 같은 건 아예 알 지를 못해서 주변 사람들과 대화가 잘 안 되는 편.
옛날엔 그래도 개그 프로그램은 곧잘 챙겨 봤는데 이젠 아예 영상을 잘 안 보는 거 같다.
이게 너무 심각한 듯 해서 넷플릭스 구독을 시작했는데 그냥 방치 중…
오늘의 '생각을 자극'하는 글귀
단지 운이 나쁜 사람들을 위해 항상 문을 열어두어야 한다.
성과에서 우연의 역할이 크다고 해서 성공할 수 없다는 뜻은 아니다. 그러나 성공할 자격이 있지만 그저 운이 나쁜 사람들이 많다는 사실을 기억해야 한다. 운이 별로 좋지 않은 사람들을 위해 항상 문을 열어두어야 한다는 사실을 잊지 말아야 한다는 뜻이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-17-오늘-처음-시도해-본-활동,-하루-종일-신나게-이야기-할-수-있는-주제.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-17 오늘 처음 시도해 본 활동, 하루 종일 신나게 이야기 할 수 있는 주제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Mar 2025 15:15:10 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 8주차 회고]]></title><description><![CDATA[ <img alt="Pasted image 20250316221551.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316221551.png" target="_self">Monster Hunter Wilds 2025년 2월 28일 출시7년을 기다린 몬헌… 사전 예약까지 했으나 너무 바빠서 못하고 있다가 드디어 이번 주 토요일에 제대로 수렵을 다녔다. 발적화 때문에 욕을 많이 있는 거 같은데 출시해준 것만으로 감지덕지라 그냥 마냥 즐겁다.
전체적인 난이도는 많이 하향된 거 같다. 시리즈가 나올 때마다 그래도 하나씩은 ??(난 언제 때리라고??) 물음표를 찍게 만드는 황당한 패턴의 몬스터가 꼭 있었는데, 몬헌 라이즈 특유의 빠른 유저 템포는 유지되고 몬스터들은 그대로라 매우 쉬워진 느낌.
월드 초기에 네르기간테한테 한 방 맞고 끔살 당하던 때의 추억이 떠올라서 어디 또 그런 변태같은 몬스터가 있을까 기대했는데 너무 스무스하게 진행되서 이상하게 아쉬운 기분…
토요일 하루 왠종일 달렸더니 어느새 상위 진입해서 역전 개체를 잡고 있는데, 이 녀석들 약해도 너무 약하다! 그 덩치면 원투 펀치로 훈타들 수레 태워 보내야 정상일 거 같은데, 뭔가 간지러운 느낌. 시리즈가 익숙하지 않은 초심자들이 적응하기는 좋을 거 같다.
커마는 어디서 크레토스랑 라쿤 커마를 줏어와서 적용했는데 매우 맘에 든다!
위쳐의 게롤트로 하고 싶었는데 퀄이 영 별로라…<br>
<img alt="Pasted image 20250316223054.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316223054.png" target="_self"> SW 부트캠프:
정렬 로직으로 시작해서 여러가지 알고리즘을 학습했다.
사실 데이터 분석 최종 프로젝트 때문에 제대로 수업을 듣질 못했다.
다행히 탐색 알고리즘은 ML에도 써서 좀 익숙한 편이라 이해가 어렵진 않았는데,
다익스트라부터는 실습 문제를 전혀 못 풀어 봤다. 사실 주말에 하려고 했는데 몬헌을 더 미룰 수가 없었다.
이제 데이터 분석 프로젝트 마무리 되면 시간이 좀 생길 테니 집중해서 복습해 보는 것으로!
목요일에는 전 프로젝트 팀 회식을 했는데, 여러 가지 이야기를 들어볼 수 있어서 좋았다.
사실 이런 이야기를 프로젝트 전에 할 기회가 있었으면 좋았을 텐데 하는 생각. 아무튼 프로젝트를 한 번만 같이 한 게 좀 아쉽다.
금요일엔 새로운 팀과 만났으니 앞으로 또 새로운 이야기를 써보자. 데이터 분석:
최종 프로젝트 PPT를 만들면서 냅킨을 써봤다.
의외로 괜찮은 시각화를 만들어 줘서 조금 더 발전하면 정말 실무에도 쓸 수 있을 거 같다는 생각.<br>
<img alt="Pasted image 20250316223746.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316223746.png" target="_self"><br>
<img alt="Pasted image 20250316223703.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316223703.png" target="_self"><br>
<img alt="Pasted image 20250316223721.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316223721.png" target="_self">
냅킨으로 생성한 시각 자료들 전 주의 비즈니스 특강에서 얻은 지식인 ‘1페이지 1메시지’를 적용해서 구성해봤다. 확실히 스토리라인이 뭔가 잡히는 느낌?
아무튼 짧은 시간이었지만 여러 가지 실제적인 데이터 분석을 해볼 수 있어 좋았고, 부족했던 기술적인 측면도 많이 보완했다. 특히 데이터 검정에 굉장히 오랜 시간을 투자했는데, 나중에 실무에서 이런 기술을 쓰게 되면 정말 빠르게 일 처리가 가능할 듯.
원래 내가 만든 앱이나 웹페이지에 이벤트 리스너를 잔뜩 달아서 고객 행동 분석을 하려는 목적으로 시작한 학습인데, ‘어떻게’ 분석할 지 미리 상정해 놓고 있으니 앱을 ‘어떻게’ 만들고 데이터를 ‘어떻게’ 저장할 지도 머리 속에 확실하게 그려진다.
확실히 공부하면 다 쓸 데가 있다!
목표: 루커스튜디오 대시보드 설계
결과: 전혀 못했다. 까먹고 있었다. 목표를 어딘가에 노출시킨다고 했는데 이것마저 까먹고 있었다.
<br>
<img alt="Pasted image 20250316224603.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316224603.png" target="_self"><br>
<img alt="Pasted image 20250316224621.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250316224621.png" target="_self">
운동을 안하면 슬슬 찝찝하다 ㅋㅋ좋아.
저번 주보다는 밤을 덜 샜다…
드디어 몬헌을 했는데 너무 많이 한 거 같기도…하지만 좋았다. 휴식도 필요하다. 여전히 가족과 친구에게 연락이 부족하다. 더 신경 써보자. 저번 주에도 같은 항목 ㅠ
회식 때 소주 2병을 먹어 버렸더니 또 주말에 술을 먹었다. 먹더라도 맥주 2잔 정도로 컷합시다;
루커스튜디오 대시보드 만들기가 엄청나게 지연되고 있다. 이제 급한 일은 끝나가니 이것도 챙겨 보자. 이것도 전 주랑 동일… 몬헌 태도 왜 이렇게 좋아졌어? 각종 신기술 습득 완료. 패드 아닌 키보드 마우스로 하려니 불편하긴 한데 이것도 금방 적응 술을 대하는 태도를 바꾸자. 동생도 금연을 다시 시작했으니, 나도 조만간 금연 클리닉에 가봐야 겠다… 약이 효과가 정말 좋다더라. 목표: 탐색 알고리즘 문제 풀기(백준)
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-8주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 8주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 16 Mar 2025 13:53:16 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250316221551.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250316221551.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-16 사고 싶은 것, 나도 모르는 버릇]]></title><description><![CDATA[
지금 당장 사고 싶은 것은? What do you want to buy right now? 딱히 없는 거 같다.
오히려 팔고 싶은 건 있을 수도.
소유는 참으로 귀찮다. 없으면 아쉬울 때가 분명히 있겠지만…
차는 지방 집에 두고 왔는데, 서울에 있으면 정말 차 탈 일이 없을 거 같다.
그래서 팔까 생각도 들지만 분명히 팔면 또 아쉽겠지ㅋㅋ
미래에는 좀 더 ‘대여’, ‘공유’ 형태의 서비스가 늘어날 거라고 생각하는데,
얼른 아무 것도 소유하지 않아도 되는 시대가 왔으면 좋겠다. 어색할 때도 너는 모르게 나오는 버릇이 있어? 질문을 이해하지 못하겠다… 일단 나도 모르게 나오는 버릇이면 나는 잘 모를 가능성이 높겠다.
어색할 때 하는 건 아니지만 나도 모르게 나오는 버릇은 머리 긁기, 머리카락 만지기가 있다. 고치고 싶은데 정말 잘 안된다. 엄마도 같은 버릇을 갖고 있었는데 유전인가.
주로 생각에 푹 빠졌을 때, 어려운 문제를 풀 때, 글을 쓸 때 곧잘 그런다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-16-사고-싶은-것,-나도-모르는-버릇.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-16 사고 싶은 것, 나도 모르는 버릇.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 16 Mar 2025 13:09:08 GMT</pubDate></item><item><title><![CDATA[2025-03-15 아무에게도 하고 싶지 않은 이야기, 즐겨 입는 옷]]></title><description><![CDATA[
아무에게도 하고 싶지 않은 이야기가 있는가? What do you not want to talk about? 비밀이 없는 사람으로 살고자 노력했는데, 그럼에도 아무에게도 하고 싶지 않은 이야기가 있다. 따로 기록해서 보관하고 있는데, 정말 아무에게도 하고 싶지 않은 이야기였다면 굳이 기록하지 않았을 거 같다. 나의 치부 아닌 치부이면서, 또 자랑스러운 일.
아무에게도 하고 싶지 않은 이야기를 가끔 들춰 볼 떄마다 스스로를 존경하게 된다.
이건 참 모순적인 일. 최근에 가장 즐겨 입는 옷은 뭐야? 서울에 올 때 옷을 많이 안 가져와서 매번 비슷한 옷을 입는다.
옷 고르기가 귀찮아서 똑같은 옷을 많이 샀는데, 헤진 정도가 다른 것을 보면 똑같은 옷이라도 다 똑같은 옷은 아닌가 보다.
늘어난 옷을 더 즐겨 입는다.
나랑 함께 더 오랜 시간을 보냈기 때문에 더욱 정이 있어 그러한가 보다.
오늘의 '생각을 자극'하는 글귀
세상에는 공감이나 감정이입보다 연민이 더 필요하다.
이 세상에는 공감이나 감정이입보다 연민이 더 필요하다. 공감은 당신의 고통이 안타깝다고 생각하는 것이고, 감정이입은 당신의 고통을 똑같이 느끼는 것이다. 연민은 당신의 고통을 덜어줄 수 있다면 무슨 일이든 하겠다는 자세다. 다른 사람의 감정을 똑같이 느낄 필요는 없다. 그들의 감정에 관심을 기울이면 된다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-15-아무에게도-하고-싶지-않은-이야기,-즐겨-입는-옷.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-15 아무에게도 하고 싶지 않은 이야기, 즐겨 입는 옷.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 15 Mar 2025 13:59:21 GMT</pubDate></item><item><title><![CDATA[2025-03-14 부인할 수 없는 사실, 남들보다 잘하고 싶은 것]]></title><description><![CDATA[
부인할 수 없는 사실은 무엇인가? What is the one fact that is undeniable? 그건 바로 내가 결혼 시장에서 아무 경쟁력도 없다는 사실.
오래 전부터 인정하고 있는 부분이라, 이 사실을 받아 들이는 데는 더 이상 아무런 타격이 없다.
마땅히 기대할 수 있는 것만 기대하는 버릇이 생긴 이후 오랫동안 잊혀진 주제였건만, 오늘 저 질문을 보자 마자 막바로 떠오른 게 이거다. 무심한 척 하면서도 내심 신경을 쓰고 있었다는 생각이 들자 내 자신이 참으로 앙큼하게 여겨지기도.
다행히 이 사실로 인하여 스스로 열등감을 느끼는 편은 아니다. 그러고 보니 예전에 이모가 내게 했던 말이 떠오른다. 그 날 오랫동안 연애를 못하는 내게 이모가 이렇게 말하셨다.
“세상 여자들이 다 눈깔이 삐었나 보다. 널 그냥 냅두고.”
그리고 내가 한 답은 이렇다.
”이모 눈에는 내가 괜찮은 사람으로 보이고 다른 사람들 눈엔 아니라면, 이모 눈깔이 삐었을 확률이 더 높죠.”
이 대답을 하고 은근히 속으로 스스로를 대견하다 여겼는데,
지금 와서 다시 생각해 보니 X신도 참 이런 X신이 또 없다. 남들보다 더 잘하고 싶은 것은 뭐야? 목표가 하나 생겼다. 사람을 행복하게 만들어 주기. 이걸 누구보다 잘하고 싶어졌다.
근래 인생에서 중요한 한 가지 깨달음을 얻었다.
”정말 행복한 사람은 다른 사람들도 모두 행복하길 바란다.”
여기 있는 모든 사람도, 내가 만나는 모든 사람도, 그리고 내가 알지 못하는 그 외의 모든 사람도 모두 모두 행복했으면 좋겠다.
오늘의 '생각을 자극'하는 글귀
자신의 능력을 의심하는 것은 성장의 신호다.
가면 증후군은 질병이 아니다. 불가능할 정도로 높은 기준을 설정하는 데서 오는 정상적인 반응이다. 자신을 의심하는 것이 실패할 거라고 체념한다는 뜻은 아니다. 그저 언젠가는 새로운 일에 도전하고, 그로 인해 배움을 얻는다는 뜻이다. 자신의 능력을 의심하는 것은 성장의 기신호이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-14-부인할-수-없는-사실,-남들보다-잘하고-싶은-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-14 부인할 수 없는 사실, 남들보다 잘하고 싶은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 14 Mar 2025 13:23:23 GMT</pubDate></item><item><title><![CDATA[2410 자동화 설비 MES 구축 프로젝트]]></title><description><![CDATA[github.com/64etuor/simes- Frontend React 18.2.0 TypeScript 4.9.5 Material-UI 5.x Ant Design Electron
- Backend Django 4.2 Django REST Framework 3.14 Python 3.11
- Database PostgreSQL 17
Key Features 생산 정보 등록(바코드 리더 스캔)
반제품 공정 이력 검증
S/N 유효성 검증
Cell Grade 검증
제품 조회 기능 (S/N과 관련된 모든 정보 자동 출력)
기타 MES 기본 기능
Wireless 환경 Latency 150ms 이내
Database : OPC UA 서버 데이터 ETL
Database : OCV/IR 검사 장비 데이터 ETL
Database : 비전 데이터 ETL 수작업 라인 제품 등록 폼
<img alt="Pasted image 20241202155547.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202155547.png" target="_self"><br>
<img alt="Pasted image 20241202155608.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202155608.png" target="_self">
조회 폼 - Django ORM
<br><img alt="Pasted image 20241202155628.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202155628.png" target="_self"><br>
<img alt="Pasted image 20241202160003.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202160003.png" target="_self">
S/N 유효성 검사 등록 폼
<br><img alt="Pasted image 20241202160214.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202160214.png" target="_self"><br>
<img alt="Pasted image 20241202160230.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202160230.png" target="_self">
Backend - Django 프레임워크
<br><img alt="Pasted image 20241202160723.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202160723.png" target="_self">]]></description><link>https://64etuor.github.io/300_projects/00_achives/2410-자동화-설비-mes-구축-프로젝트.html</link><guid isPermaLink="false">300_Projects/00_Achives/2410 자동화 설비 MES 구축 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 14 Mar 2025 08:42:33 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241202155547.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241202155547.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-13 하루 한시간이 늘어난다면, 내 인생 책]]></title><description><![CDATA[
하루에 한 시간이 늘어난다면 뭘 할까? If you could add one hour to your day, what would you do with it? 하루에 한 시간이 늘어난다면,
한 시간이 늘어난 것이다. 별로 평소와 다를 것이 없겠다.
호주에서 Summer time 종료를 기뻐하던 사람들이 갑자기 생각나는데,
내가 시간을 효율적으로 쓰지 못하는 탓에 아직도 시간의 가치를 가늠키 어렵다.
총량이 차의 엔진 기름 게이지처럼 표시가 안 되니 더욱 그렇다.
이러한 병은 아마 죽어서 낫는 수 밖에 없겠다. 삶에 가장 큰 영향을 준 '인생 책'을 적어봐 톨스토이.
플라톤 - 대화
체사레 벡카리아 - 죄와 형벌
자본론 - 마르크스
존 롤스 - 정의론
김유정, 채만식, 이상, 이효석, 아니 솔직히 너무 많아서 다 못 쓸 듯.
또 우리 엄마, 박완서, 등등등등
우위란 건 없다.
오늘의 '생각을 자극'하는 글귀
책임의 가장 중요한 원칙을 고통을 전가하지 않는 것이다.책임의 가장 중요한 원칙은 내가 겪은 고통을 다른 사람에게 넘기지 않는 것이다. 좋은 부모는 어린 시절의 짐을 자녀에게 대물림하지 않는다. 좋은 리더와 코치는 학대가 관습화되지 않도록 막는다. 내가 잘못된 방법으로 당했더라도 고리를 끊고 올바른 방법을 선택할 수도 있다.]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-13-하루-한시간이-늘어난다면,-내-인생-책.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-13 하루 한시간이 늘어난다면, 내 인생 책.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 13 Mar 2025 14:09:10 GMT</pubDate></item><item><title><![CDATA[2025-03-12 어디 사는지, 주로 뉴스는 어디서]]></title><description><![CDATA[
어디에 사는가? Where do you live? 공부를 위해서 잠깐 6개월 정도 머물려고 서울에 올라 왔는데 아마 서울이든 근교이든 계속 이 근처에서 살게 되지 않을까 하는 생각이 든다.
사람 많은 게 너무 싫어서 항상 지방으로만 돌아 다녔었는데 막상 이 나이가 돼서 와보니 그렇게 갑갑할 것도 없다. 아마 서울에서 있었던 부정적인 사건들에 영향을 받아 선입견이 생긴 것도 원인일 테고, 어린 시절 내 최악의 사회성 또한 주요한 원인이지 싶다.
차를 안 타고 대중교통을 타고 다니니 건강도 챙기는 느낌.
상경 초기에 1시간 지하철을 탔을 뿐인데도 다리가 후들후들 거렸는데, 지금은 몇 시간도 거뜬 없을 거 같다. 여러 모로 좋은 영향이 있다.
서울이 무엇보다 좋은 점은 여러 가지 모임들이 많다는 것이다.
다른 사람들을 보고 배우는 게 많은 요즈음, 그동안 몰랐던 서울의 매력을 참 많이 알아 가는 거 같다.
한 줄 한 줄 적다 보니 그냥 이런 생각이 든다.
내 마음이 지옥일 땐 어디가 지옥이 아닐 수 있으며,
내 마음이 천국일 땐 어딘들 천국이 아닐까. 주로 뉴스는 어디서, 어떻게 접해? 신문도, 뉴스도 안 보고 살았는데 최근 정세에 너무 무지하다 싶어서 뉴스레터를 구독했다.
구독한 뉴스레터는 그 유명한 https://www.vox.com/
영문이다 보니 모르는 단어가 수두룩하게 나온다.
(하도 모르는 단어가 많아서 마우스를 호버하거나 드래그하면 구글&amp;파파고 검색 및 번역을 해주는 크롬 확장도 깔았다.)
영어 공부 겸 틈틈이 읽는 중.
오늘의 '생각을 자극'하는 글귀
너무 많이 생각하는 것보다 너무 생각하지 않는 게 더 큰 문제다.
생각을 너무 많이 하는 것은 문제다. 생각을 너무 안 하는 것은 더 큰 문제다. 생각이 너무 많아서 분석 마비에 바지는 사람들은 안타깝다. 처음부터 분석 자체를 안 하는 사람들은 걱정스럽다. 과신하고 후회하는 것보다 의심의 불편함을 받아들이는 편이 낫다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-12-어디-사는지,-주로-뉴스는-어디서.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-12 어디 사는지, 주로 뉴스는 어디서.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 12 Mar 2025 08:25:56 GMT</pubDate></item><item><title><![CDATA[2025-03-11 생일선물로 받고 싶지 않은 것, 새로 알게 된 사람]]></title><description><![CDATA[
생일선물로 절대 받지 싶지 않은 것이 있다면? Is there any birthday present you wish you never got? 물건은 별로 안 좋아하는 거 같다. 절대로 받기 싫은 게 있다면 부피가 나가는 물건들..?
이유는 간단하다. 취향이 확고하고 까다로워서 내가 쓸 물건은 아주 고심해서 고르는 편.
그리고 집에 물건이 많은 것도 좋아하지 않는다. 까다로운 인간 같으니라고. 최근에 새로 알게 된 사람은 누구야? 상당히 많다. 더베러에서 알게 된 분들도 많고 그 외적으로도 최근에 여러 사람들을 많이 만난 거 같다. 지평이 넓어졌다는 생각이 든다. 사람들을 만남으로써 나의 세상이 확장될 수 있다고 느끼고 있다. 아무튼 좋은 경험이라고 생각!
좋은 경험을 나눌 수 있으니 또 기쁨이 두 배.
오늘의 '생각을 자극'하는 글귀
배울 점이 있는 사람이 지닌 세 가지 특성을 잘 알아채자.
배울점이 있는 사람인지 알아보는 방법에는 세 가지가 있다. 첫째, 자신과 똑같이 생각하기를 바라지 않고 스스로 생각하도록 격려해주는가. 둘째, 제자를 많이 모으려고만 하지 않고 스승도 많이 만들려고 하는가. 셋째, 자신이 옳다고 우기지 않고 틀렸다고 인정하는가.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-11-생일선물로-받고-싶지-않은-것,-새로-알게-된-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-11 생일선물로 받고 싶지 않은 것, 새로 알게 된 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 11 Mar 2025 13:49:40 GMT</pubDate></item><item><title><![CDATA[2025-03-10 가장 최근에 본 영화, 매일 나를 위한 시간]]></title><description><![CDATA[
"가장 최근에 본 영화는? What was the last movie you watched?" 최근에 넷플릭스를 구독해서 The Boss Baby를 봤다. 마음의 안정을 찾으려던 목적으로 아기들을 보자! 라는 생각이었는데, 영 귀엽지 못한 목소리가 걸걸한(…) 아기였다.
아이들을 타겟으로 제작된 애니메이션이라고만 생각했는데 의외로 주제가 현실을 반영하고 있는 듯하여 여러 생각을 하게 된 면이 있다.
가령 요즘의 사람들은 아기보다 강아지를 더 선호하게 되었다든가 하는 부분.
그리고 아기가 생기면 부모의 관심과 사랑이 아기에게 많이 집중돼서, 기존의 자식은 소외감을 느끼는 부분 등.
전반적으로 코믹한 요소가 많은 가족용 애니메이션이었지만 그래도 갖출 건 다 갖추지 않았나하는 평.
엔딩 즈음에 주인공인 Tim이 Boss baby에게 보낸 편지의 문구는 눈물을 찔끔 짜게 만들었다. And if there isn't enough love&nbsp;for the two of us...&nbsp;then I wanna give you all of mine. 끝이 좋으면 다 좋아!
지브리 애니메이션도 좋아해서 몇 번씩 다시 보곤 했는데, 다시 찾아서 봐야겠다. 매일 너를 위한 시간을 내고 있어? 매일 24시간이 나를 위한 시간으로 꽉 채워져 있다.
공부도 하고 싶어서 하는 것이고, 글도 나를 위해 쓰고, 운동도 나를 위해 한다.
하고 싶어서 하는 일이다 보니 별 불만도 없고, 매우 즐겁다.
너무 나를 위한 시간만 채워져 있는 것도 문제긴 하지만!
오늘의 '생각을 자극'하는 글귀
인생의 사건과 선택에는 복잡한 시스템이 적용된다.
"~하면 행복할 텐데.," "그게 딱 한 번뿐인 기회였는데..." 라는 근거 없는 믿음에서 벗어나야 한다. 인생의 사건과 선택에는 복잡한 시스템이 적용된다. 목적지에 이르는 경로가 여러 개일 수도 있고, 출발지가 같더라도 목적지가 여러 곳일 수도 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-10-가장-최근에-본-영화,-매일-나를-위한-시간.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-10 가장 최근에 본 영화, 매일 나를 위한 시간.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Mar 2025 08:41:22 GMT</pubDate></item><item><title><![CDATA[Deepseek API를 활용한 AI 서비스 구현]]></title><description><![CDATA[ <a data-tooltip-position="top" aria-label="https://github.com/64etuor/english-composition-test" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/64etuor/english-composition-test" target="_self">Github Repository</a>
미니 프로젝트를 만드는 과제를 받고 주제를 정해야 했다.
처음으로 생각이 든 게 영작문 피드백 프로그램이다.
AI를 통해 주어진 주제 카테고리(일상, 비즈니스, 로맨틱, 장난스러운, 그리고 확장 가능)의 문장을 제시 받고 그걸 내가 직접 번역하면 다시 AI가 문장에 대한 피드백을 주는 방식.
모든 이력은 데이터베이스에 저장되고, 저장된 이력을 바탕으로 AI 분석을 해 나의 작문 약점을 파악하는 용도로써 설계되었다.아래는 아직 리팩토링을 하지 못 한 일부 서비스 코드에 대해 설명한다.
이 서비스는 Java의 HttpClient와 Jackson 라이브러리를 사용해 Deepseek과 통신하며, 결과 데이터를 JSON으로 파싱하여 반환하는 방식으로 설계되었다.<br><img alt="Pasted image 20250309222057.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309222057.png" target="_self">
Deepseek API Platform에 보면 위와 같이 예제 스크립트를 안내하고 있다.
OpenAI의 것과 거의 동일하다.
이 구조를 참고하여 API 콜의 형식을 작성하면 된다.
왜 Deepseek을 선택했냐면 2025-03-03 현재 100만 토큰당 1달러라는 가격 정책, 그리고 한 번도 안 써봐서 그냥 호기심 때문에.Deepseek API를 호출하기 위해 makeApiCall() 메서드를 구현한다.
이 메서드는 HttpClient를 사용하여 API 요청을 보내고, JSON 응답을 처리하는 역할을 한다.위의 개발자 문서에서 본 정보를 참고하여 헤더 정보 및 내용을 작성.private String makeApiCall(String endpoint, String prompt) { try { ArrayNode messages = mapper.createArrayNode() .add(mapper.createObjectNode() .put("role", "system") .put("content", "You are a helpful assistant that always responds in valid JSON format. Do not include any markdown formatting or backticks in your response.")) .add(mapper.createObjectNode() .put("role", "user") .put("content", prompt)); ObjectNode requestBody = mapper.createObjectNode() .put("model", model) .put("temperature", temperature) .put("max_tokens", maxTokens) .set("messages", messages); String jsonRequest = mapper.writeValueAsString(requestBody); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create("https://api.deepseek.com/chat/completions")) .header("Content-Type", "application/json") .header("Authorization", "Bearer " + apiKey) .POST(HttpRequest.BodyPublishers.ofString(jsonRequest)) .build(); HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString()); if (response.statusCode() != 200) { throw new RuntimeException("API 호출 실패: " + response.body()); } ObjectNode jsonResponse = mapper.readValue(response.body(), ObjectNode.class); String content = jsonResponse.path("choices").path(0).path("message").path("content").asText(); content = content.replaceAll("```json\\s*", "").replaceAll("```\\s*", "").trim(); mapper.readTree(content); int tokensUsed = jsonResponse.path("usage").path("total_tokens").asInt(); APIUsage usage = new APIUsage(endpoint, tokensUsed, model, temperature); apiUsageRepository.save(usage); return content; } catch (Exception e) { throw new RuntimeException("API 호출 중 오류 발생: " + e.getMessage(), e); }
} JSON 요청 메시지 생성 system 역할을 추가하여 JSON 형식으로 응답하도록 보장.
user 메시지에 프롬프트(prompt) 추가. HttpClient를 사용해 Deepseek API 호출 POST 요청을 보내고, 응답을 수신. 응답(JSON) 처리 choices[0].message.content에서 AI가 생성한 텍스트 추출.
content.replaceAll()을 사용해 불필요한 JSON 마크다운 제거. API 사용량 저장 total_tokens 값을 추출하여 DB에 저장. 차후에 기능별로 분리 리팩토링 예정(아마 시간이 허락한다면?)
랜덤 문장 생성 기능을 구현한다.
카테고리를 입력하면 3개의 한국어 문장과 16개의 관련 키워드를 반환하는 API 요청을 생성한다.
16개의 관련 키워드(영문 단어:한글 뜻)은 피드백 요청 API 콜의 응답을 기다리는 도중, 특정 시간 주기로 출력해서 기다리는 심심함을 방지하기 위해 미리 받아 놓는 것.@Override
public SentenceResponseDto getRandomSentences(String category) { String prompt = String.format(""" You are a English language teacher. Generate 3 interesting Korean sentences (intermediate level) for the '%s' category. Provide 16 key vocabulary words in JSON format. """, category); String content = makeApiCall("random-sentences", prompt); try { var jsonNode = mapper.readTree(content); List&lt;String&gt; sentences = new ArrayList&lt;&gt;(); jsonNode.path("sentences").forEach(node -&gt; sentences.add(node.asText())); List&lt;Map&lt;String, String&gt;&gt; keywords = new ArrayList&lt;&gt;(); jsonNode.path("keywords").forEach(node -&gt; { Map&lt;String, String&gt; keyword = new HashMap&lt;&gt;(); keyword.put("word", node.path("word").asText()); keyword.put("meaning", node.path("meaning").asText()); keywords.add(keyword); }); return new SentenceResponseDto(sentences, keywords); } catch (Exception e) { throw new RuntimeException("응답 파싱 중 오류 발생", e); }
}
{ "sentences": ["오늘 날씨가 정말 좋아요.", "저는 주말마다 등산을 해요.", "비가 올 때는 따뜻한 차를 마셔요."], "keywords": [ {"word": "날씨", "meaning": "weather"}, {"word": "등산", "meaning": "hiking"}, {"word": "주말", "meaning": "weekend"}, {"word": "비", "meaning": "rain"} ]
}
@Override
public FeedbackResponseDto getFeedback(String koreanSentence, String userTranslation) { String prompt = """ Evaluate the student's translation from Korean to English: Korean: %s Student's translation: %s Respond in JSON format with score, ideal sentence, and feedback. """.formatted(koreanSentence, userTranslation); String content = makeApiCall("feedback", prompt); try { var jsonNode = mapper.readTree(content); return new FeedbackResponseDto( jsonNode.path("idealSentence").asText(), jsonNode.path("feedback").asText(), jsonNode.path("score").asDouble() ); } catch (Exception e) { throw new RuntimeException("응답 파싱 중 오류 발생", e); }
}
@Override
public WeaknessAnalysisResponseDto analyzeWeakness(List&lt;String&gt; recentCompositions) { if (recentCompositions == null || recentCompositions.isEmpty()) { return new WeaknessAnalysisResponseDto( List.of("최근 작문 내역이 없어 약점을 분석할 수 없습니다."), List.of("영작 연습을 더 많이 하면 약점 분석이 가능합니다.") ); } String compositionsText = String.join("\n", recentCompositions); String prompt = """ Analyze the student's recent compositions: %s Respond in JSON format with weaknesses and improvement suggestions. """.formatted(compositionsText); String content = makeApiCall("weakness-analysis", prompt); try { var jsonNode = mapper.readTree(content); List&lt;String&gt; weaknesses = new ArrayList&lt;&gt;(); jsonNode.path("weaknesses").forEach(node -&gt; weaknesses.add(node.asText())); List&lt;String&gt; improvements = new ArrayList&lt;&gt;(); jsonNode.path("improvements").forEach(node -&gt; improvements.add(node.asText())); return new WeaknessAnalysisResponseDto(weaknesses, improvements); } catch (Exception e) { throw new RuntimeException("응답 파싱 중 오류 발생", e); }
}
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/deepseek-api를-활용한-ai-서비스-구현.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/Deepseek API를 활용한 AI 서비스 구현.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 14:59:05 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250309222057.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250309222057.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[한화 BEYOND SW부트캠프 7주차 회고]]></title><description><![CDATA[ 운동에 슬슬 재미를 붙이기 시작했다. 이제 운동을 하러 안 가면 몸이 너무 찌뿌둥한 느낌이 든다. 여전히 헬린이에 불과하지만 Gym에 대한 저항을 확실하게 줄였다는 데에서 큰 만족을 느낀다. PT가 끝나기 전에 AI 트레이너도 만들어야 되는데 구상만 해 놓고 아직 시작을 못 했다. 3월 중에는 기록 관리 앱에 AI 트레이너 기능 추가 및 식단 관련 기능을 강화해야 겠다.
오랜만에 진우와 만나서 밥 먹고 얘기를 나눴는데, 그냥 만남이 너무 즐겁기도 했고 사업 얘기, 정치 얘기, 근황 얘기 등 대화 자체도 매우 유익했다. SW 부트캠프:
한 주간 객체 지향 구조, 테스트 유닛, 알고리즘 등을 학습했다. Java 미니 프로젝트 과제도 있었는데 나는 AI 활용 영작문 연습 어플리케이션을 만들었다.
<img alt="Pasted image 20250309225301.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309225301.png" target="_self">
영작문 연습 어플 초기 화면 - 의외로 매우 빅잼 <br>오늘 회고 전에 잠깐 관련 문서 <a data-href="Deepseek API를 활용한 AI 서비스 구현" href="https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/deepseek-api를-활용한-ai-서비스-구현.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Deepseek API를 활용한 AI 서비스 구현</a>를 작성하다가 말았는데 과연 완성시킬 수 있을지? 그냥 클린코드 책 읽으면서 리팩토링이나 하는 게 더 도움이 될 것 같기도… 그건 그렇고 미니 프로젝트지만 중간중간 시간 날 때마다 실제로 영작문 연습을 하고 있다. 한국에 온 뒤로 영어 쓸 일이 많이 없으니 필요할 때에 자꾸 단어가 생각이 안 나는 경험 때문에 만들었는데, 의외로 재밌고 도움이 된다. 나중에 스프링 부트, 프론트 학습 후에 여건이 허락한다면 제대로 한 번 각 잡고 보완해 봐야겠다는 생각이 들지만 또 다른 게 만들어 보고 싶어서 안 할 수도…<br>
<img alt="Pasted image 20250309231009.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309231009.png" target="_self">최고 기록 95점… 기념 사진… 학습 내용 중에 이해가 덜 된 객체 지향 자료 구조는 클린코드 스터디를 하면서 계속 공부할 예정이기도 하고, 이론보다는 확실히 실전이 학습 속도가 빠른 것도 있어서 천천히 시간을 두고 복습할 예정. 사실 이것 외에도 제대로 이해하지 못하고 넘어가는 부분들이 많은데 자원이 한정되어 있으니 일단 전체적인 아키텍쳐를 익히는 데에 집중하고 모자란 건 나중에 채울 듯.토요일엔 플레이데이터 학원에서 비즈니스 기획 특강이 있었는데, 딴 건 다 제치고 PPT의 스토리, ‘1페이지 1메세지’ 이 개념을 건진 것 만으로도 아주 유의미한 특강이었다. 강사로 오신 분께서 경험담을 많이 얘기해 주셔서 크게 도움이 되는 통찰이 많았는데, 대화를 더 많이 나눠 봤으면 좋았을 텐데 강의 끝나자 마자 도망(?)가시는 바람에 얘기를 못 해서 좀 아쉬웠다.
데이터 분석:
지난 주에 이은 코랩 노트북과의 2차전.
코랩 셀 실행 후 그 빙글빙글 돌아가는 스피너를 보고 있으면 나도 같이 돌아버릴 거 같다는 생각을 했다. 매일 새벽까지 그 꼴을 보고 있다가 의외의 깨달음을 얻었는데, 코랩 노트북을 여러 개 열면 동시에 여러 쿼리를 동시에 날릴 수 있잖아!? 바로 실행에 옮겼으나 너무 늦게 이 사실을 깨달은 바람에 데이터 분석에는 크게 써먹지 못했다. 아마 다음 과제는 수월하게 진행 가능할 듯. 데이터 분석이 엉덩이 싸움이란 말이 무슨 뜻인지 절실하게 느낌.
이번 주 과제에선 라이브 스터디 EDA 중 안 써봤던 라이브러리를 사용하는 데 시간을 많이 썼다.
그 중 하나가 folium.<br>
<img alt="Pasted image 20250309230236.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309230236.png" target="_self">
처음에 지역 세그멘테이션 없이 무작정 위도, 경도 데이터로 마커를 꽂아 버렸더니 어디서 뭐가 많이 팔린 건지 알 수가 없었다. 인도네시아 주요 지역 위도, 경도 정보를 찾아서 분류하고 매출액에 따른 버블맵으로 처리, 그리고 주문 밀도는 히트맵으로 처리하니 확실히 시각적 분석 효과가 보인다.
그리고 파레토 법칙이 갑자기 생각 나서 차트로 그려 봤는데 정말 이론처럼 상위 20%가 전체 매출 80%에 근접한 매출을 올려주고 있었다. 파레토 당신은 다 이유가 있구나!<br>
<img alt="Pasted image 20250309230531.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309230531.png" target="_self">그 외에는 평범한 퍼널 분석… 이지만 이 쉬운 걸 하려고 뒤에서 데이터 검증을 얼마나 한 건지 머리가 아프다. 데이터에 대한 의심이 많아서 나는 데이터 분석가는 절대로 안 할 듯 ㅋㅋㅋ 과로로 죽기 십상이겠다.<br>
<img alt="Pasted image 20250309231327.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309231327.png" target="_self">저번 주에 30장짜리 PPT 만든 걸 반성하고 있었는데 이번 주는 20장으로 줄긴 했다. 사실 다른 사람들에게 어떤 EDA를 진행했는지 보여주려고 넣은 부분이 많아서 나중에는 더욱 압축된 스토리를 만들 수 있을 거 같다.
최종 과제에선 아마 그렇게 정식 보고서 같은 형태로 작성할 듯.
이번 주 과제는 A/B 테스트라 금방 끝날 거 같으니 미리 최종 과제 구상을 해봐야 겠다.
목표: Java 복습이 최우선. 채소 섭취 방법 다시 고민. 결과: 복습에 많은 시간을 할애하진 못했다. 채소는 직접 사서 요리 등으로 먹는 중.
<br>
<img alt="Pasted image 20250309224258.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309224258.png" target="_self">암만 봐도 사랑 카테고리는 없애는 게 맞겠다.<br><img alt="Pasted image 20250309224312.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250309224312.png" target="_self">
운동을 꾸준히 하고 있고 슬슬 습관이 되고 있다.
저번 주보다는 밤을 덜 샜다.
소주를 딱 한 병 마셨다!ㅋㅋㅋㅋ
시간 관리 효율이 많이 개선되었다. 여전히 가족과 친구에게 연락이 부족하다. 더 신경 써보자.
루커스튜디오 대시보드 만들기가 엄청나게 지연되고 있다. 이제 급한 일은 끝나가니 이것도 챙겨 보자. PPT? 1페이지 1메세지 한 주의 목표를 세워도 어딘가에 계속 노출 시키지 않으면 망각된다. 좀 더 효과적인 관리를 위해 이와 같은 사소한 디테일부터 챙겨보자. 목표: 루커스튜디오 대시보드 설계. ]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-7주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 7주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 14:36:23 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250309225301.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250309225301.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-09 무시하고 싶던 사람, 힘들 때 외치는 문장]]></title><description><![CDATA[
오늘 무시하고 싶었던 사람은 _ (이)다. A person you wanted to ignore today is _. 아무리 떠올려 봐도 쓸 게 없다. 아마 무시하고 싶은 사람은 이미 무의식 중에 벌써 무시하고 있었나 보다! 힘들 때 외치는 문장이 있다면? 도와줘 기가차드!
라고 쓰고 싶지만 사실 아무 것도 외치지 않는다.
대신에 감정을 술로 달구고 그걸 녹여 시나 에세이를 쓰는 편.
아무래도 내가 좋아하는 건 이런 고요한 외침인가 보다.
그리고 잔뜩 차광된 안경을 끼고, 마음 곳곳에 매립된 감정의 무덤들,
그 종이 위에 안치된 을씨년스런 공동묘지를 돌아보기도 한다.
투쟁의 증거로 얻은 삶이 비루할 지언정,
투쟁이 비루한 적은 없었다는 사실에 안도하고 또 마음을 무장한 뒤에야,
비로소 알게 되는 사실이 한 가지 있다.
무덤이 계속 늘고 있는 건,
내가 아직 포기하지 않았다는 뜻.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-09-무시하고-싶던-사람,-힘들-때-외치는-문장.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-09 무시하고 싶던 사람, 힘들 때 외치는 문장.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Mar 2025 08:51:46 GMT</pubDate></item><item><title><![CDATA[2025-03-08 마지막으로 들은 노래, 돈의 의미]]></title><description><![CDATA[
마지막으로 들은 노래는? What's the last song you listened to? 是你 <a data-tooltip-position="top" aria-label="https://music.youtube.com/channel/UCN1DOlwxsdrAbRqFZempefQ" rel="noopener nofollow" class="external-link is-unresolved" href="https://music.youtube.com/channel/UCN1DOlwxsdrAbRqFZempefQ" target="_self">梦然</a>
I've been listening to this song on repeat ever since my student recommended it to me a few weeks ago.
I don’t understand the lyrics, but the melody carries a hopeful message that resonates with me.
Since I’m not one to ignore my curiosity, I asked ChatGPT to translate the lyrics for me.
Here’s what they say: We chased the dreams in our hearts together
Along the way, your encouragement was indispensable
We used to be so strong
Even when we fell, we never gave up
It is you who gave me strength
Making me stronger
It is you who gave me hope
Letting me see the sunshine
It is you who gave me warmth
So I no longer feel cold
It is you who moved me
Allowing me to have happiness
We chased the dreams in our hearts together
…(repeat) While listening to this song, I felt an urge to capture the moments when I feel truly happy.
Happiness from music,
Happiness from learning something new,
Happiness from a gentle breeze,
Happiness from ordinary conversations, silly jokes, and the warmth they create.
The emotions that turn ordinary things into something special.
Moments of happiness in my life that I wish I could capture these moments of happiness, like photographs in my journal. 너에게 돈은 어떤 의미야? What does money mean to you? Exchange value.
By facilitating the act of exchange, money has gifted humanity with prosperity.
However, as it has become such a firmly established concept, it has also led to the side effect of measuring the value of everything in monetary terms.
오늘의 '생각을 자극'하는 글귀
여성들이 자유롭게 말할 수 있도록 고정관념에 함께 도전하라.
사람들은 남자가 단호하게 말하면 믿는다. 하지만 여자가 똑같이 행동하면 싫어한다. 그 여자는 나쁜 년이 된다. 여자들이 연약한 자아를 보호하기 위해 할 말을 참아야 한다고 말한다면 터무니없는 소리라고 응수해도 된다. 고정관념에 도전하는 여자를 응원하라.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-08-마지막으로-들은-노래,-돈의-의미.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-08 마지막으로 들은 노래, 돈의 의미.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 08 Mar 2025 13:07:33 GMT</pubDate></item><item><title><![CDATA[2025-03-07 _를 실험하는 건 좋은 생각이 아니다, 다른 나라나 도시에 살 수 있다면]]></title><description><![CDATA[
_을(를) 실험하는 것이 좋은 생각이 아니다. It's not a good idea to experiemtn with __. 체력의 한계를 실험하는 건 좋은 생각이 아니다.
내가 자초한 일이긴 하지만 여러 가지 과제를 동시에 진행하고 있다 보니 체력이 부족함을 절실하게 느낀다. 특히 데이터 분석 과제에 시간을 많이 뺏기는 편인다.
프로그램 개발은 기능을 축소한다는 선택지라도 있지 데이터 분석은 유의미한 통찰을 찾을 때까지 무기한 탐색과 분석을 반복해야 한다.
매일 새벽, 코랩 셀을 실행해 놓고 스피너가 돌아가는 것을 보다 보면 머리도 같이 돌아 버릴 것만 같다. 그 꼬리를 남기며 얄궂게 빙글빙글 돌아가는 모양새를 보노라면 지구의 자전과 공전 뿐만 아니라, 은하계마저 돌아가고, 저 먼 닿지 않는 미지의 공간마저 다들 빙글빙글 돌고 있는 것으로 느껴질 수 밖에.
그러니까 우리는 모두 돌지 않으려고 저마다 발버둥치며 돌고 있는 것은 아닌지?
(다같이 돌고 있다면 다같이 멈추어 있는 것과 또 다를 것은 뭔가?)
라는 이상하지만, 그러나 이상하지 않으려고 발버둥치는 이런 생각들. 다른 나라나 도시에서 살 수 있다면 어디에서 살고 싶어? 번외 같은 답변이지만,
맘이 맞는 사람과 함께면 어디라는 건 큰 의미가 없을 법도 하여서,
굳이 다른 나라나 도시를 고르라면,
아마 그런 사람을 만날 수 있는 곳이라 하겠다.
오늘의 '생각을 자극'하는 글귀
다른 사람의 가치관을 바꾸려면 그들의 원칙에 다가가야 한다.
누군가의 가치관을 바꾸는 것은 어렵다. 그들이 이미 가진 가치관에 호소하는 것이 더 쉽다. 자신의 원칙을 밀어붙이면 사람들은 마음의 문을 닫는다. 그들의 원칙에 다가가면 문이 열린다. 다른 사람들을 동기부여하려면 그들이 중요하다고 생각하는 가치에 관심을 기울여야 한다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-07-_를-실험하는-건-좋은-생각이-아니다,-다른-나라나-도시에-살-수-있다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-07 _를 실험하는 건 좋은 생각이 아니다, 다른 나라나 도시에 살 수 있다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 07 Mar 2025 16:58:05 GMT</pubDate></item><item><title><![CDATA[2025-03-06 나의 원수, 남들은 신경도 안 쓰지만 나에게 중요한 것]]></title><description><![CDATA[
나의 원수는 누구인가? Who's your nemesis? 나의 원수는 지긋지긋한 허리 통증, 아주 조사버리기 위해 열심히 운동을 하고 있다. 그런데 너무 무리했는지 허리 통증이 또 도졌다. 런지를 자주 하자! 남들은 신경도 안 쓰지만 너에게 중요한 것은 뭐야 돈이 안 되지만 재밌는 거.
돈이 안 되지만 웃긴 거.
돈이 안 되지만 옳은 거.
잘못된 걸 고치는 거.
다른 사람이 아닌 나 스스로에게 존경 받기 위해 사는 거.
단어 선택, 문장의 아름다움.
미래의 아이들에게 맑은 하늘을 선물하는 거.
등등 오늘의 '생각을 자극'하는 글귀
무언가를 배우는 가장 좋은 방법은 잠시 쉬었다가 설명해보는 것이다.
읽는 내용을 기억하는 좋은 방법은 다시 읽거나 밑줄을 긋는 것이 아니다. 무언가를 배우는 가장 좋은 방법은 10분 정도 휴식을 취한 후 요약해서 누군가에게 가르쳐주는 것이다. 저장된 기억을 꺼내는 과정에서 더 잘 기억하게 되고, 설명의 과정을 거치면 더 잘 이해하게 된다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-06-나의-원수,-남들은-신경도-안-쓰지만-나에게-중요한-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-06 나의 원수, 남들은 신경도 안 쓰지만 나에게 중요한 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 06 Mar 2025 15:17:14 GMT</pubDate></item><item><title><![CDATA[2025-03-05 가장 좋아하는 단어, 창의적일 때]]></title><description><![CDATA[
(지금 이 순간) 가장 좋아하는 단어는? What's your favorite word (rignt now)? 아기. 오늘 아기를 낳은 사람이 눈물이 멈추지 않는다고 쓴 글을 보았다.
순간 너무 가슴이 뭉클해서 행복하면서, 또 행복하지 않은 모순된 감정.
아기라는 단어는 왜 이렇게 가슴이 절절할까?
나도 아기였었다는 걸 도무지 믿을 수가 없다.
어쩌면 진짜로 ‘베이비 주식회사’는 실존할 지도 몰라. 어떨 때 스스로 창의적인 사람이라고 생각해? 아무도 관심 없고, 아무 쓸모도 없는 일에 미친 듯이 몰두할 때 ㅋㅋㅋ 이게 바로 창조 낭비
오늘의 '생각을 자극'하는 글귀
진정성의 핵심은 일관성이 아니라 솔직하게 말하는 것이다.
생각을 바꾼다고 원칙을 버리는 것은 아니다. 그 사이에 새로운 무언가를 배웠다는 뜻일 수도 있다. 의견을 굽히지 않고 끝까지 밀어붙여 진정성을 희생시키는 것보다 모순된 행동으로 위선자라고 비난받는 편이 낫다. 진정성의 핵심은 일관성이 아니라 솔직하게 말하는 것이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-05-가장-좋아하는-단어,-창의적일-때.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-05 가장 좋아하는 단어, 창의적일 때.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 05 Mar 2025 15:00:20 GMT</pubDate></item><item><title><![CDATA[2025년 2월 회고]]></title><description><![CDATA[
AI가 들려주는 나의 회고
ㅋㅋㅋ 정확하다 정확해. 부트캠프 수강 이번 달 대부분의 시간을 “부캠 수강”에 투자하며, SQL·Linux 기초부터 Java 문법(자료형, 클래스/객체, 예외 처리, 제네릭 등)까지 폭넓게 학습했습니다.
새로 접하는 개념(추상 클래스, 인터페이스, Stream, Thread 등)은 난이도가 있었지만, 꾸준히 실습하고 노트에 복습 내용을 정리하면서 점차 이해도를 높였습니다.
DB 모델링, ERD, DDL 등을 실제 프로젝트에 적용해보는 과정도 있었고, 모델링을 통해 데이터 흐름을 체계적으로 정리하는 법을 배웠습니다. 데이터 분석(DA) &amp; 프로젝트 이커머스 분석, A/B 테스트, 퍼널 분석, 코호트 리텐션 등 다양한 기법으로 데이터를 다뤘습니다.
“매출 분석 및 보고서 작성”을 통해 실제 분석 레포트를 완성했는데, 데이터 클리닝부터 시각화·해석까지 시간이 많이 들었지만 최종 결과물을 내며 보람을 느꼈습니다.
코랩(Colab) 환경에서의 답답함이나 각종 에러를 겪기도 했지만, 결국 문제를 해결하고 EDA 과정도 성공적으로 마무리했습니다. 독서 &amp; 스터디 2월 초에는 책 넛지를 완독하며 행동 경제학적 관점에서 “공유지의 비극”이나 “선택 설계”에 대한 인사이트를 얻었습니다.
이후 클린 코드를 읽기 시작했으며, 초반부(1~3장)에서 변수명, 함수 구조, Boolean 사용 등에 대한 날카로운 비판을 접하면서 코딩 습관을 돌아보게 되었습니다.
여러 스터디 모임(시간 관리 스터디, 북클럽, CC 스터디 등)에 참여해 토론하고, 지식을 나누면서 동기부여를 꾸준히 이어갔습니다. 노트 작성 &amp; 회고 습관 매일매일 ‘오늘의 노트 작성’을 통해 자신의 감정·경험을 글로 정리했고, 주말마다 한 주의 회고를 남기며 한층 더 깊게 돌아보는 시간을 가졌습니다.
덕분에 “내가 무엇을 하고 싶은가”, “어떤 점이 아쉬웠나”를 빠르게 발견하고 개선할 수 있었다는 점이 큰 장점으로 보입니다. 앱·대시보드 섹션 작성, 디스코드 봇(n8n) 연동 업무적으로는 앱 구조를 리빌딩하거나 노션 대시보드를 꾸미고, 디스코드 봇을 n8n과 연동해 자동화 프로세스를 구축하는 등 생산성이 높은 작업들이 눈에 띕니다.
디스코드 봇 인증 문제나 호스팅 이슈로 애를 먹었지만, 결국 해결해내면서 개발·운영 과정 전반을 경험했다는 점이 인상적입니다. 발표(더배러톡톡)에서의 ‘대형 사고’와 깨달음 이번 달 가장 크게 체감된 사건 중 하나는 2월 초 “더배러톡톡” 발표가 예상치 못한 난관에 부딪힌 일이었습니다.
준비했던 분량이 시간에 비해 지나치게 많았고, 5분 만에 “X됐다”는 직감이 들 정도로 진행이 꼬였다는 솔직한 후기가 있었습니다.
비록 “크게 실패했다”라는 표현이 나올 정도로 아쉬움이 컸지만, 그 경험 덕분에 “다음에 더 잘할 수 있을 것 같다는 확신”을 얻었고, “필요한 핵심만 전달하는 것”의 중요성을 다시 한번 깨닫게 된 계기가 되었습니다. 식사 &amp; 식단 패턴 2월 내내 짜장밥, 라면, 햄말이김밥, 컵라면, 편의점 도시락 등 간편식 소비가 잦았습니다.
동시에 단백질바·계란 흰자(단백이) 섭취 등으로 나름대로 식단 관리를 시도했지만, “소주를 곁들이는” 식사 빈도가 꾸준히 있었다는 점이 눈에 띕니다.
“식단”을 하기로 마음먹었지만, 좋아하는 음식(특히 짜장밥, 햄버거 등)을 완전히 끊지 못해 내적 갈등이 자주 나타났습니다. 친구·지인들과의 만남 형님들과 술을 마시거나, 도니 님과의 커피챗(사업 얘기, 부동산 매물 확인 등)을 통해 인맥을 넓히고 다양한 아이디어를 교환했습니다.
더베러 신년회 1·2차 자리에 참석해 여러 사람들과 교류하고, 즐거운 대화를 나눈 기록도 긍정적으로 보입니다.
가족(동생)과도 안부를 나누면서 천천히 문제를 풀어가자는 대화를 주고받는 등 대인관계를 지속적으로 유지·강화하는 모습이었습니다. 집안일·생활 리듬 세차, 빨래, 청소 등 일상 관리에도 적절한 시간을 할애했으며, “집안일을 잠깐 놓치면 모든 게 엉망이 된다”라며 깔끔함을 유지하려 노력하고 있습니다.
감기에 걸려 한동안 컨디션이 떨어졌지만, 그래도 일을 이어가거나 가벼운 운동을 통해 건강을 회복하려는 모습이 보였습니다. 운동 &amp; PT PT(퍼스널 트레이닝)를 주 2~3회 정도 꾸준히 받은 것으로 보이며, 상체·하체를 번갈아가며 집중적으로 훈련했습니다.
중간에 기구에 부상을 당하거나, 감기로 몸 상태가 안 좋은 날도 있었지만 전반적으로 운동을 멈추지 않고 이어갔습니다.
근육통이나 피곤함을 호소하는 날이 많았으나, 그래도 지속적으로 “운동하면 보람 있다”라는 긍정적인 평가를 내렸습니다. 취미(코노·몬헌 등) 코인노래방(코노)에 자주 방문하여 노래 부름으로 스트레스를 해소했고, “몬스터헌터 와일즈”를 출시 직후 플레이하면서 만족감을 드러냈습니다.
늦게까지 작업하다가도 짧게라도 노래를 부르고 기분 전환을 하는 루틴이 있었는데, 오히려 체력 안배에는 조금 주의가 필요해 보이기도 합니다. 술과의 갈등 기록을 보면 술(주로 소주)을 마신 후 “이러면 안 되는데” 하면서도 또다시 술자리를 갖는 경우가 꾸준히 있었습니다.
운동과 식단을 병행하면서도 술 때문에 부담을 느끼는 심경이 자주 드러났습니다. 학습 측면 데이터 분석, 자바, DB 분야에서 상당히 폭넓은 공부를 진행했고, 주어진 과제나 프로젝트를 대체로 기한 내 완료했습니다.
“매일 노트 작성”과 “주차별 회고”를 통해 스스로 피드백하고 개선점을 찾는 습관을 잘 유지했습니다. 업무 &amp; 발표 역량 대형 사고였던 “더배러톡톡” 발표의 실패 경험에서 ‘시간에 맞춰 중요한 내용을 압축하는 스킬’이 필요함을 절감했습니다.
그 외에도 디스코드 봇(n8n), 각종 대시보드·앱 리빌딩 등 다양하게 시도하며 기술 역량과 실행력을 키웠습니다. 관계 &amp; 커뮤니케이션 친구·지인들과의 만남을 통해 여러 아이디어를 얻고, 사업·부동산 얘기 등을 폭넓게 나누며 교류 범위를 넓혔습니다.
여러 스터디 모임(시간 관리, 클린 코드, 이커머스 DA, 북클럽 등)에 적극 참여함으로써 지식뿐 아니라 사람들과의 협업·토론 역량도 함께 성장했습니다. 건강 &amp; 생활 균형 PT를 꾸준히 받아 체력 관리에 힘썼으나, 감기와 과한 음주·야근 등으로 컨디션이 흔들리기도 했습니다.
그래도 운동을 통해 스트레스와 체중을 어느 정도 관리하고, 주말엔 쉬거나 취미생활(몬헌, 코노)을 즐기는 등 나름의 균형을 잡으려 노력했습니다. 발표 및 커뮤니케이션 스킬 업그레이드 자료의 양을 무턱대고 늘리기보다, 핵심 메시지를 짧은 시간 안에 명확히 전달하는 연습이 필요합니다.
즉석 상황에서 유연하게 대응하는 능력을 길러, 2월 초 겪었던 문제를 발판 삼아 한층 성장해 보길 바랍니다. 학습 주제의 체계적 복습 자바, 제네릭, Stream 등 아직 헷갈리는 파트가 많다고 느꼈으니, 3월에는 정리 노트를 체계화하고 예제 코드를 많이 다뤄보는 것이 좋겠습니다.
데이터 분석도 다양한 기법을 배웠으니, 프로젝트나 과제 형태로 꾸준히 연습하면서 “한 번 배운 스킬을 곧바로 써먹어 보는” 실전 감각을 쌓아봅시다. 건강 &amp; 식단 관리 술 소비를 줄이고, 식단(단백질 섭취/채소 보충)과 운동을 더 균형 있게 조절하는 것이 바람직합니다.
늦은 시간까지 야근 혹은 노래방으로 달린 날은 다음날 컨디션 조절을 위한 충분한 수면과 휴식이 필요해 보입니다. 지속적인 회고 &amp; 루틴 강화 매일 노트 작성과 주말 회고 습관을 유지하되, 한 달에 한 번씩 더 큰 틀의 ‘월간 계획’을 점검해보면 좋겠습니다.
여러 스터디나 프로젝트를 병행하다 보니 시간이 분산될 수 있으므로, 우선순위를 명확히 하여 ‘적정한 몰입 시간’을 확보하는 전략도 고려해봅시다. 2월은 학습, 업무, 대인관계, 그리고 건강 면에서 매우 바쁘고 다채로웠던 한 달이었습니다. 중간중간 어려움(발표 실패, 감기·피로, 음주 후회 등)도 있었지만, 꾸준한 회고와 자기 점검을 통해 “앞으로 어떻게 발전할지”에 대한 감을 얻은 듯합니다. 3월에는 이 경험들을 바탕으로 더 날카롭게 집중하고, 자신에게 맞는 리듬을 찾아가길 응원합니다. 한 달 동안 수고 많으셨고, 다음 달에도 비약적인 성장을 기대합니다!]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/2025년-2월-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/2025년 2월 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 05 Mar 2025 12:42:16 GMT</pubDate></item><item><title><![CDATA[250305 - 어머니]]></title><description><![CDATA[처마 밑
묵념으로 쌓은 그리움눈물에 패인
깊은 웅덩이]]></description><link>https://64etuor.github.io/900_writings/poems/250305-어머니.html</link><guid isPermaLink="false">900_Writings/Poems/250305 - 어머니.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 15:29:27 GMT</pubDate></item><item><title><![CDATA[2025-03-04 어머니에게 하고픈 질문, 오늘이 마지막이라면]]></title><description><![CDATA[
어머니에게 하고 싶은 질문은? What would you like to ask your mother? 처마 밑
묵념으로 쌓은 그리움
눈물에 패인
깊은 웅덩이 오늘이 인생의 마지막 날이라면 무엇을 할 거야? 정말 어려운 질문이라고 생각하지만… 감사했던 모든 사람들을 위한 글을 쓰지 않을까.
모두 다 만나기는 어려울 테니까.
근데 아직 완전히 행복해 본 적도 없는데 너무 너무 억울함. 좀 살게 해줘라 쫌!
오늘의 '생각을 자극'하는 글귀
침묵은 피드백은 배움의 기회를 빼앗는 것이다.
상대방에게 피드백하지 않은 것은 성장 대신 편안함을 선택하는 것이다. 침묵은 배움의 기회를 빼앗는 것일 수도 있다. 상대의 기분을 상하게 할까 봐 걱정된다면 당신이 신뢰를 얻지 못했다는 뜻이다. 건강한 관계에서 솔직함은 관심의 표현이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-04-어머니에게-하고픈-질문,-오늘이-마지막이라면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-04 어머니에게 하고픈 질문, 오늘이 마지막이라면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Mar 2025 15:27:44 GMT</pubDate></item><item><title><![CDATA[2025-03-03 어젯밤 누구와 잤는지, 집중이 잘되는 시간과 장소]]></title><description><![CDATA[
어젯밤과 누구와 잤는가? Who did you sleep with last night? Today's question feels a bit strange to me. Well, as usual, I slept alone.
It would’ve been nice to have a sweet dream, but I was too tired to dream at all.
Then again, the reason I was exhausted was that I had been working hard to make my dreams come true.
It’s like a trade-off, just like everything else in the world.
So, I know I don’t need to feel lonely, even if I stay alone for a long time. I can hear the footsteps of my dreams coming. 집중이 잘되는 시간과 장소는? Where and when do you concentrate best? I don’t really mind where or when I concentrate, as long as it’s not a war zone.
But the real question is “WHAT” I’m doing. If something isn’t boring, I have no trouble being completely absorbed in it.
It’s both one of my strengths and weaknesses at the same time.
Good concentration helps me work better, but it also makes me unable to pay attention to other things. When I’m deeply focused on my work, I have no room for anything else—even things that are just as important.
I’ve been trying to change myself in a more positive direction.
Now I feel like I’ve improved a little compared to before, but I still have a long way to go.
오늘의 '생각을 자극'하는 글귀
생산성은 루틴을 유지해야 높아지고 창의성은 루틴을 벗어나야 발휘한다.생산성은 일관적인 루틴을 유지해야 높아진다. 반면 창의성은 루틴을 벗어날 때 발휘된다. 새로운 아이디어는 우리가 다양한 것을 읽고 다양한 사람을 만나고 일하는 시간과 장소에 변화를 주어야 나타난다.ㅏ 안정성은 일을 끝낼 수 있게 해주지만 다양성은 새로운 결과를 만들어야 한다.]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-03-어젯밤-누구와-잤는지,-집중이-잘되는-시간과-장소.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-03 어젯밤 누구와 잤는지, 집중이 잘되는 시간과 장소.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Mar 2025 12:14:52 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 6주차 회고]]></title><description><![CDATA[ 운동을 꾸준히 하고 있다. 점점 운동에 대한 거부감도 낮아지는 거 같다. 운동 시작한 지 1달 정도가 됐는데 살이 3kg 정도 빠졌다. 인바디도 한 번 다시 재보고 천천히 근육량을 늘리면서 건강해지자!외국 친구와의 대화를 많이 나눈 한 주였다. 의외의 곳에서 의례적이고 진부하지만 허나 따뜻한, 그런 진심 어린 정서적 서포트가 얼마나 중요한 지 깨닫게 되었다. 사실 이 과정에는 굉장히 웃긴 점이 하나 있다. 상대가 같은 한국 사람이었다면 온갖 드립으로 장난을 쳤을 텐데, 내가 영어로 현란하게 드립을 칠 실력이 안 되니 자연히 대화가 단조롭지만 훈훈해 진다. 근데 서로를 위하는 뻔한 말, 이게 은근히 감동적이다. 그러고 보면 가장 가까운 곳에 대우 형이라는 귀감이 있었는데 왜 이걸 진작 깨닫지 못했을까 아쉬움이 드는 부분. 앞으로는 장난은 조금 줄이고 덜어낸 만큼 정도는 진지해 지자… 라고 생각하고 싶지만… 되려나? 뭐, 일단 해보고 안되면 말고.3월 1일에는 리처드 님이 <a data-tooltip-position="top" aria-label="https://uuu.gl/richardkim/80yearletter" rel="noopener nofollow" class="external-link is-unresolved" href="https://uuu.gl/richardkim/80yearletter" target="_self">시간을 넘어온 편지 - 80년 전 그들이 오늘의 우리에게 묻는 것</a> 이라는 제목으로 작성하신 블로그 내용을 공유해 주셨는데 꽤나 감동적이었다. 우리 역사에서 ‘독립운동’ 키워드가 들어가는 파트는 내가 워낙 좋아하는 부분이다. 나도 예전에 적었던 <a data-href="221029 - 여성독립운동가 전시관을 관람하고" href="https://64etuor.github.io/900_writings/essays/221029-여성독립운동가-전시관을-관람하고.html#_0" class="internal-link" target="_self" rel="noopener nofollow">221029 - 여성독립운동가 전시관을 관람하고</a> 글을 다시 꺼내 읽었다. 이런 상호작용의 순간 순간이 얼마나 소중한 지 매 순간 느끼고 있다.<br>
<img alt="Pasted image 20250302234803.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250302234803.png" target="_self">사람은 대화를 통해 성장한다.<br>특히 독립운동가들의 사연 하나 하나는 모두 가슴을 때리는 것이며, 이 울림에 공감하는 사람들과의 대화는 내게 어느 보석보다도 귀하다. 황현필 선생님한테 국사와 근현대사를 배울 때, 이런 “진짜 울림”의 느낌을 참 많이 받았었는데, <a data-tooltip-position="top" aria-label="https://www.youtube.com/@hwang_history" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/@hwang_history" target="_self">유튜브</a>를 시작하셨을 때 너무 반가웠던 생각이 난다. 멤버십을 가입해 놓고 가끔 영상을 찾아 보는데 “여전”하신 거 같아 보기가 좋다.<br>
또 신념을 가지고 해외 독립운동유적지를 기록으로 남기고 계신 <a data-tooltip-position="top" aria-label="https://www.youtube.com/live/Sl4XE6jLYLo?si=Wdt-023g7nh2u24G" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/live/Sl4XE6jLYLo?si=Wdt-023g7nh2u24G" target="_self">김동우 작가님</a>의 영상도 소개 받았다. 누군가는 해야할 일에 저렇게 선뜻 나서는 사람들이 있어 이 나라의 정신이 지켜져 온 것이라 생각한다.토요일 저녁에는 드디어 커맨드스페이스 오피스를 방문했다. 로망이 모두 담긴 공간!!!
데스크테리어 컨퍼런스라는 작은 행사로 참석했는데 “데스크”에 진심인 사람들이 얼마나 무시무시한지 사진으로만 봐도 그들의 “덕력”이 느껴졌다…<br>
<img alt="Pasted image 20250303000717.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250303000717.png" target="_self">[주최자 최초이 님의 블랙 컨셉 데스크테리어]<br><img alt="Pasted image 20250303000355.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250303000355.png" target="_self">[구요한 교수님의 멀티 유니버스(?)]<br><img alt="Pasted image 20250303000442.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250303000442.png" target="_self">[커맨드스페이스 전경]분위기가 깡패라 가능했다면 그냥 자고 올 뻔.
현재 강의 일정과 장소를 조율하고 있는데, 장소가 커맨드스페이스면 너무 너무 너무 좋겠다! 라고 생각했다. 오늘 일정 조율이 잘 됐으면!
아무튼 행사 시간이 19시~21시였는데 다들 너무 즐기느라 자정이 다 돼서야 자리가 파했다.ㅋㅋ 맥주 2캔 밖에 안 마셨는데 분위기에 취해서 정신이 없었던 듯. 집으로 돌아오는 내내 계속 기분이 흥겨웠다. SW 부트캠프:
금요일 즈음에 같은 스터디원 한 분이 “진도가 너무 빨라서 아우토반에서 차에 치인 고라니”가 된 거 같다는 기가 막힌 표현을 해주셨는데, 사실 나도 그 옆에 같이 치인 한 마리의 고라니였다. 다행히 공휴일이 끼어 있어서 복습을 하면 할 여유가 있어서 다행인 셈. 제대로 이해하지 못한 이런 내용을 기록 관리에 적어 놨더니 Stream 등을 복습하라는 “잼민이(Gemini)”의 지시가 내려온다. 좀 더 데이터를 디테일하게 수집할 수 있는 여건이 갖춰지고 AI가 조금 더 발전하면 ‘자비스’를 만드는 게 꿈의 영역은 아니게 될 듯. 미래의 모습이 참으로 궁금하다.
아무튼 이번 주 학습에서 특히 애를 먹었던 부분은 Generic인데 아무래도 파이썬에선 생소한 개념이다 보니 전혀 이해가 안 됐다. 개념이 안 잡혀서 거의 ChatGPT와 3시간은 토론한 거 같다. 그리고 막상 Generic이 Java에 등장한 배경과 용례를 알게 됐을 땐 너무 허망한 기분이 들었다. 차라리 이론을 팔 게 아니라 여러가지 실습을 해봤어야 했다고 후회하지만, 토론이 꽤나 재밌었기 때문에 괜춘.
이번 주차에는 처음으로 ‘하브루타’를 했는데 재밌었다. 재밌고 도움도 되고, 메타인지도 쌓고 여러 모로 최고의 학습법이라고 생각. 앞으로도 종종 이렇게 학습하면 좋겠다!
그리고 무엇보다 시간 관리 스터디원들이 다들 너무 훌륭하게 자신만의 방법론을 만들어 가고 있어서 너무나 고무적이다. 다들 최고!!!! 데이터 분석:
과제를 하다가 돌아가실 뻔. 평일에 새벽까지 과제를 하느라 잠을 제대로 못 자서 토요일날은 오전 11시까지 뻗어 있었다. 데이터 분석가로 취업할 일도, 이걸 포트폴리오로 사용할 일도 없는데 너무 과하게 자원을 사용한 거 같다는 생각. 사실 이렇게까지 열심히 하려고 전혀 의도한 적이 없는데, 데이터를 분석하다 보니 계속 꼬리에 꼬리를 잇는 의문과 질문들이 머리 속에 떠올라서 스케일이 너무 커져 버렸다.
나중에 자료를 정리해서 프레젠테이션 자료를 만들었는데 맥락을 설명하기 위해 도저히 뺄 수 없는 자료만 넣었는데도 거의 30장 짜리 PPT가 되어 버렸다.
발표 시간도 4배 초과(…)해 버리는 불상사가 발생. 다행히 다른 사람들의 발표시간이 많이 짧아서 전체 시간엔 영향이 없었지만, 다음엔 좀 더 가설과 결론 도출을 압축해서 간결하게 만들어야겠다는 교훈을 얻었다.
데이터 의심병이 있어서 이것저것 검증하느라 시간을 너무 많이 소요했는데 다음엔 그냥 “학습”이라는 관점에만 중점을 두고 과제를 해야겠다.
일요일 과제는 트래픽 데이터 분석을 통한 인사이트 도출이었는데 간단하게 분석하고 정리하니 오히려 발표 퀄리티가 더 나아진 거 같은 기분이 들었다. (너무 피곤해서 목소리는 엉망이었다.)
엉망이지만 하나씩 고쳐나가면 언젠가는 그럴듯한 사람이 되어 있겠지… maybe… 강의 자료를 거의 마무리했다. 기존 앱에서 리빌딩해서 핵심 기능만 넣고 러닝커브가 있는 기술 스택은 전부 빼버렸다. 노션과 피그마로 자료를 정리했는데 양이…ㅋㅋㅋ
관계자들에게 자료를 공유했는데 원데이가 24시간을 의미하는 거였냐는 질문을 받았다. 아무튼 내가 만족하는 정도에서 마무리가 됐으니 꽤나 훌륭하다고 자평함.
목표: 원데이 클래스 자료 정리 마무리, 채소 섭취 방법 고민(반드시!)
결과: 강의 자료는 거의 마무리 했는데 채소 섭취는 좀 요원하다(사실 바빠서 까먹음…)
<br>
<img alt="Pasted image 20250302232416.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250302232416.png" target="_self"><br>
<img alt="Pasted image 20250302232842.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250302232842.png" target="_self">
네트워킹 플러스 300점, 운동 플러스 400점, 도합 893점(산수 못함).
친구와의 대화에서 많은 활력을 얻음
이번 주에는 술을 좀 덜 먹었다(ㅋㅋ) 적절한 휴식을 꼭 취하고 과제는 과하게 하지 말자.
밤 새서 일하지 말자.(강한 영감을 받았을 때는 빼고)
가족과 친구에게 전화를 더 더 더 더 자주 하자. 타인과의 상호작용을 통해 얻는 지식이 무엇보다 값지다.
“입에 발린 말”을 꼭 나쁘게만 생각하지 말자.
과한 건 모자란 것만 못하다. 정말 쉬운 말인데 참… 컨디션을 고려한 일의 배분, 시간 효율성을 더 타이트하게 가져갈 수 있을 거 같다는 생각도 들었다. 이러다가 설마 시간을 정복한 남자 루비셰프가 돼 버리는 건 아니겠지!!!?
천성이 게을러서 영 불가능할 거 같긴 하다만…ㅋㅋㅋ 목표: Java 복습이 최우선. 채소 섭취 방법 다시 고민. ]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-6주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 6주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Mar 2025 01:41:44 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250302234803.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250302234803.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-03-02 나의 하루의 맛, 취향]]></title><description><![CDATA[
오늘 나의 하루는 짠맛인가, 달달한 맛인가? Is today bitter or sweet? 잠도 달콤하게 잤고, 일을 끝낸 해방감도 달콤했고, 친구와의 대화도 너무 달콤해서 하루종일 이가 썩을 것만 같았다.
음악이 달팽이관을 타고 들어와 도파민을 배달하니 좀처럼 재미가 붙지 않는 운동에도 활력을 줬고, 땀방울은 꿀처럼 맺혔다.
행복하기 위한 핑계 거리를 찾아 다니면서 눈을 부라리다 보니 사소한 것에도 억지로 실마리를 붙이고 우기게 되는 것이다.
운동 끝내고 나온 뒤 맞이한 뜻밖의 비를 보며,
가끔은 우산 없이 비를 맞는 것도 운치라고 어거지를 부린다.
그리곤 비를 맞으며 집에 오는 동안, 비 맛이 참 좋다고 생각한다.
아마 원효대사의 해골물이 이런 맛이 아니었을까?
Question 산 vs 바다? 둘 다 좋다.
영화 vs 드라마? 둘 다 잘 안 본다.
전화 vs 문자 메시지? 문자메세지 선호.
사진찍기 vs 사진 찍어주기? 둘 다 잘 안 한다. ㅋㅋ
이상주의자 vs 현실주의자? 반반치킨은 왜 없지?
미니멀리스트 vs 맥시멀리스트? 미니멀리스트 ]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-02-나의-하루의-맛,-취향.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-02 나의 하루의 맛, 취향.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 02 Mar 2025 14:12:37 GMT</pubDate></item><item><title><![CDATA[2025-03-01 후회하는 것, 가진 물건중 가장 오래된 것]]></title><description><![CDATA[
오늘 (또는 어제) 있었던 일 중 후회하는 것은? Any regrets over what happened today (or yesterday)? 데이터 분석 과제를 하느라 매일 새벽 늦게까지 무리한 걸 좀 후회한다. 포트폴리오로 사용할 일도 없는데 너무 과하게 자원을 사용한 거 같다는 생각. 사실 이렇게까지 열심히 하려고 전혀 의도한 적이 없는데, 데이터를 분석하다 보니 계속 꼬리에 꼬리를 잇는 의문과 질문들이 머리 속에 떠올라서 스케일이 너무 커져 버렸다.
나중에 자료를 정리해서 프레젠테이션 자료를 만들었는데 맥락을 설명하기 위해 도저히 뺄 수 없는 자료만 넣었는데도 30장짜리 PPT가 되어 버렸다.
발표 시간도 4배 초과(…)해 버리는 불상사가 발생. 다행히 다른 사람들의 발표시간이 많이 짧아서 전체 일정엔 영향이 없었지만, 다음엔 좀 더 가설과 결론 도출을 압축해서 간결하게 만들어야겠다는 교훈을 얻었다.
후회는 하지만, 얻은 교훈은 있으니 완전히 낭비는 아닌 셈!
오늘의 ‘생각을 자극’하는 글귀인, ‘진전을 위해서는 확대하고 목적을 위해서는 축소하라’가 내 오늘의 상황에 딱 맞는 말씀되시겠다. 가진 물건 중에서 가장 오래된 것은 뭐야? 일단 내 시야에서 보이는 것중엔 로지텍 MX Anywhere2 마우스가 가장 오래 돼지 않았을까? 호주에서 산 물건이니 근 8년은 된 거 같다. 배터리 일체형인데 아직도 쌩쌩하게 잘 작동하는 걸 보면 명기는 명기다 싶다. 나중에 혹시 하드웨어 디바이스도 만들게 된다면 이런 명작을 하나쯤 만들어 보고 싶다는 생각.
오늘의 '생각을 자극'하는 글귀
진전을 위해서는 확대하고 목적을 위해서는 축소하라.
단기적인 과제가 사소하게 느껴진다면 여러 개를 합쳐서 더 큰 목표로 의미 있게 만들자. 장기적인 목표가 불가능하다고 느껴질 때는 쉽게 관리할 수 있도록 작은 조각들로 나누자. 진전을 위해서는 확대하고 목적을 위해서는 축소하라.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-03/2025-03-01-후회하는-것,-가진-물건중-가장-오래된-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-03/2025-03-01 후회하는 것, 가진 물건중 가장 오래된 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 01 Mar 2025 06:16:05 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 5주차 회고]]></title><description><![CDATA[ 운동도 꾸준히 하고 있고 몸 상태도 많이 나아졌다. 저녁 식단도 시작했는데 단백이(계란 흰자 2개), 닥터유 단백질바만 먹고 있다. (+ 운동하고 프로틴에 우유)
채소를 어떻게 섭취할 지 고민… 사서 손질하자니 음식물 쓰레기도 많이 나오고 다 처리하기도 힘들고, 매번 사 먹는 것도 귀찮고… 식단 관리 도시락을 먹는 게 나을 수도 있다는 생각. 좀 더 알아보고 결정해야겠다. 과일이랑 채소를 먹는 습관이 전혀 없다 보니 슬슬 위험할 거 같다는 생각이 든다. 나중에 더 늙어서 후회하지 말고 건강부터 챙기자…
더베러 신년회에서 보고 싶었던 사람들도 만나고 친구들과 따로 사업 얘기도 하고 짧지만 알찬 한 주를 보냈다. 세컨드 브레인 북클럽에서는 토요일에 깜짝 미팅을 가졌는데, 매번 진지한 얘기만 하다가 이번에는 근황 토크 및 추천하는 컨텐츠 등으로 대화를 채워서 엄청나게 재밌었다. (만화 얘기, 무협지 얘기 등등…) 뭔가 사람들을 만나면서 크게 Refresh 되는 느낌?
3월 초부터는 타래님의 꿀생학교 커뮤니티도 본격 활동을 시작한다고 하니 한 번 제대로 유치하게 놀아보자고 벼르고 있다.
영등포 커맨드스페이스 사무실도 얼른 한 번 놀러 가고 싶은데 시간이 잘 맞을는지 모르겠다. 천천히 기회를 보다가 지금이다 싶으면 탱크처럼 쳐들어 가야겠다. 사무실인데 진짜 분위기가 깡패. 그 분위기에 재즈가 곁들여지면 위스키 2병도 먹을 수 있을 듯.(뻥임) SW 부트캠프:
드디어 조금씩 뇌에 과부하가 오는 지점이 왔다. CS 영역이라 아무래도 배경지식이 없다보니 개념 습득하기 급급하다. 영 이해가 안 되서 다시 찾아보는 부분도 있고, 이해했다고 생각했는데 막상 코드를 짜려고 보면 전혀 안 떠오르는 것도 있다. 실습하는데 캡슐화와 제한자 설정에 대한 이해가 없어서 뭘 쓸 지 아무 것도 생각이 안 났다. 나는 접근 제한자를 걸었다고 생각했는데 너무나 편안하게 필드 접근으로 값이 넣어지고 아주 대환장 파티.
개념을 한 번 다시 복습했고 실습 문제를 보고 대충 만들었던 과제 코드를 리팩토링했다.
학생의 정보를 넣고 출력하는 코드였는데 처음에는 Scanner를 통한 필드 직접 접근 형태로 값을 넣었었고, 리팩토링 때는 setter를 사용해서 값을 입력하는 형태로 바꿨다.
Construction Initialization으로 값을 넣기도 해 봤는데, 각각의 방법들이 정확히 어떻게 작동하는 건지 아직도 이해가 안 된다.(ㅎㅎㅎ 뇌 메모리의 overflow)
일단 따로 공부를 더 해야 할 부분. 데이터 분석:
라이브 스터디가 시작되었다. 이제부턴 현업 DA처럼 데이터를 가지고 실제 분석을 진행하고 그에 대한 프레젠테이션을 매주 해야 한다. 과제 데이터가 좀 복잡했으면 좋겠다. 이것저것 많이 시험해 볼 수 있게. 차후로는 공모전 스터디도 한다는데 바빠서 할 시간이 될까 좀 고민.
상황 봐서 재미 있을 거 같으면 도전해 보는 걸로. 더베러톡톡 이후 원데이 클래스 요청이 있어서 앱과 자료를 다시 한 번 검토해 봤는데 하루 만에 끝내는 게 불가능하다고 판단. 전격적인 리빌딩 시작.
우선 앱은 필수 로직만 구현해서 사이즈를 줄이고, 대시보드는 태블로에서 루커 스튜디오로 변경해서 템플릿화해서 배포할 수 있도록 하면 어찌저찌 하루 안에 산출물은 뽑을 수 있을 거라는 계산.
일단 프로세스를 다시 정리하고 있는데 하루 만에 만든 앱이라 별 거 없을 줄 알았는데 과정이 진짜 너무 많다… 단계적으로 정리하고 있는데 레퍼런스 만드는데 그냥 시간이 순살치킨처럼 녹아 버리는 매직. 틈틈이 빨리 정리해서 다음 주 안에 마무리하는 게 목표.
목표: 저녁 식단 시작, 충분한 휴식으로 컨디션 회복이 최우선
결과: 저녁 식단 정도는 가볍게 성공. 컨디션도 꽤 회복됐다! <img alt="Pasted image 20250223190954.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250223190954.png" target="_self"><br>
<img alt="Pasted image 20250223191005.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250223191005.png" target="_self">
네트워킹을 꾸준히 하고 있는 게 긍정적!
여러가지 일이 많은데 밀리지 않고 계획적으로 다 미리 미리 쳐내고 있다. 무친 효율. Java 개념 몇 개가 아직 이해가 안 되는게 있다. 다음 주에 다시 복기해 보고 모르는 점은 알 때까지 다시 파봐야 함. Java를 자꾸 Python이랑 비교하게 되는데, 아직도 Java의 장점을 1도 모르겠다 ㅋㅋㅋㅋㅋ
네트워킹에서 새로운 사람들을 만나면서 배운 관점들이 무척이나 유용하다! 특히 투자자 관점이나 사업가 관점은 일반적인 것과 많이 다르다는 걸 배움 자원이 도처에 깔려 있다는 걸 인지하고, 적절하게 활용하는 게 성공의 지름길인 듯하다.
진심을 다하면 여기저기서 도와주지 못 해 안달이다.
세상은 충분히 따뜻한데, 춥고 어두운데 숨어서 그 따뜻함을 외면하는 사람들이 많아서 안타깝다는 생각. 아마 내가 크게 잘 되고 나면 그런 사람들도 양지로 나오게 도와줄 수 있지 않을까? 목표: 원데이 클래스 자료 정리 마무리, 채소 섭취 방법 고민(반드시!)
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-5주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 5주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 28 Feb 2025 09:23:32 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250223190954.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250223190954.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-28 마지막으로 아팠던 적, 꾸준히 참여하는 모임]]></title><description><![CDATA[
마지막으로 아팠던 적은 언제인가? When was the last time you were sick? 2주 전엔가, 감기가 걸렸다.
혼자 오래 살다 보니 만사에 대한 처세술(?)만 늘어서 조금 아프기 시작하자마자 감기에 좋은 온갖 처방을 시도했다. 너무 바빠서 병원에 갈 시간도 아까웠다. 다행히 크게 아프지 않고 기침 조금 하는 정도에서 넘어갔다.
마음이 약해지면 몸이 약해지는 게 맞는 말일 수 있겠다는 생각을 한다.
왜냐면,
그 때도 그러했고,
그 전에도 그러했으니까.
작은 텀을 두고 울기도, 웃기도 하는 난 작은 사람. 작은 인간.
그렇지만 꿈이 작은 건 아니야. 꾸준히 참여하는 모임이 있어? 어떤 모임이야? 꾸준히 참여하는 모임은 따로 없고, 연초에 반드시 만나는 형님들과의 모임이 그나마 오랫동안 지속한 모임이지 싶다.
20년이 되어 가는 만남이고, 함께 나이 들어 가는 인연이 무엇보다 소중하다고 깨닫게 해 준 사람들.
내가 나무라면 내 나이테 안에는 그 사람들의 향기가 들어 있을 거야.
오늘의 '생각을 자극'하는 글귀
휴식은 낭비가 아니라 행복에 투자하는 시간이다.
바쁘게 산다고 해서 사회적 지위가 높다는 의미는 아니다. 너무 많은 사람을 위해 너무 많은 일을 하려고 할 때 나타나는 부작용일 뿐이다. 일정이 꽉 차면 스트레스가 많아지고 에너지는 부족해진다. 성찰과 휴식이 최우선이 되어야 한다. 일정이 없는 시간은 낭비가 아니라 행복에 투자하는 시간이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-28-마지막으로-아팠던-적,-꾸준히-참여하는-모임.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-28 마지막으로 아팠던 적, 꾸준히 참여하는 모임.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 28 Feb 2025 07:29:01 GMT</pubDate></item><item><title><![CDATA[2025-02-27 나는 독창적인가, 부러운 사람]]></title><description><![CDATA[
나는 독창적인 사람인가, 받아들이는 사람인가? Are you solitary or sociable? 이 두 가지가 양립할 수 없는 개념이라고 보지 않는다.
독창적이면서 받아 들일 줄 모르는 성향은 아집이 되고, 독창적이지 않고 받아 들일 줄만 아는 성향은 주체성 없이 흐름에 휩쓸리기만 하는 무기력함이 된다.
얼마 전에 김정운 교수의 ‘에디톨로지’라는 책이 발간된 것으로 안다. 책을 읽진 않았지만 부제로 달려 있던 "창조는 편집이다."란 말로 유추해 보건대, 창조에 대해 잘못 알려진 개념을 되짚는 책이 아닐까 싶다.
창조가 ‘이전에는 없던 완전히 새로운 것’만을 의미한다고 한다면 창세기 이후로 창조라고 부를 것은 없다. 완전히 새로운 것은 어느 누구에게도 이해될 수가 없다. ‘독창성’의 근거가 될 만한 비교군이 없기 때문이다.
결국, 우리가 창조적이라고 여기는 대부분의 것들은 기존의 요소들을 재구성하고, 편집하고, 새로운 맥락 속에서 조합한 결과물이다.
독창성과 수용성은 결국 상보적인 관계에 있다. 독창적이기 위해서는 기존의 지식과 아이디어를 열린 태도로 받아들이고, 이를 자신의 방식으로 해석하고 재구성하는 과정이 필요하다.
그러니까 나는 독창적인 사람이 되기 위해 받아 들이는 사람이다. 어떤 사람을 주로 부러워해? 딸이 있는 사람이 세상에서 제일 부럽다.
오늘의 '생각을 자극'하는 글귀
받을 것을 돌려주고 세상에 베풀 줄 알아야 한다.
이기적인 사람을 계속 도와주면 그 사람은 점점 더 잘못된 행동을 하게 된다. 그런 사람에게 베푸는 것을 나를 이용한 것에 대한 보상을 주는 셈이고 다른 사람도 이용하라고 부추기는 것과 같다. 다른 사람에게 받은 것을 돌려주고 세상에 베풀려고 애쓰는 사람들에게 시간과 에너지를 나눠주자."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-27-나는-독창적인가,-부러운-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-27 나는 독창적인가, 부러운 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 27 Feb 2025 10:26:54 GMT</pubDate></item><item><title><![CDATA[python 코루틴(coroutine) - 동시성과 병렬성,  동기와 비동기 작업, blocking과 non-blocking 그리고 코루틴 (1)]]></title><description><![CDATA[python에서 코루틴은 "메인"과 "서브"루틴이 서로 협력하는 루틴, cooperative routine 을 의미하며, "협력"이 핵심이다. 코루틴을 이해하기 위한 전반적인 내용을 살펴보자!]]></description><link>https://64etuor.github.io/600_tech-stack/python/python-코루틴(coroutine)-동시성과-병렬성,-동기와-비동기-작업,-blocking과-non-blocking-그리고-코루틴-(1).html</link><guid isPermaLink="false">600_Tech Stack/Python/python 코루틴(coroutine) - 동시성과 병렬성,  동기와 비동기 작업, blocking과 non-blocking 그리고 코루틴 (1).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 27 Feb 2025 01:23:39 GMT</pubDate><enclosure url="https://velog.velcdn.com/images/qlgks1/post/d9161cec-4434-4ca4-8dd1-89f4b8b1cb1d/image.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://velog.velcdn.com/images/qlgks1/post/d9161cec-4434-4ca4-8dd1-89f4b8b1cb1d/image.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-26 절대 버릴 수 없는 물건, 나를 설명할 수 있는 물건]]></title><description><![CDATA[
절대로 버릴 수 없는 물건을 하나만 적어보자. Name one item you can't throw out 없는 거 같다. 현재 너를 설명할 수 있는 물건은 뭐야? 현재의 나를 설명할 수 있는 물건? 방금 먹은 단백이, 단백질바, 방울토마토.
바빠서 저녁 먹을 시간도 없다. 자유주제로 빅데이터 분석을 하는데 코랩을 쓰다 보니 한 번 쿼리 쏘면 5분에서 20분이 걸린다. 답답해서 죽을 거 같다. 다른 걸 같이 하고는 있는데 크게 집중도 안 된다ㅠㅠㅠ… 다른 일도 한참 남았는데
아직 가설조차 못 세워서 당장 내일까지 어떻게 끝낼 지 앞이 깜깜하다 ㅋㅋㅋ
Quote
오늘의 '생각을 자극'하는 글귀
모든 대화는 새로운 것을 배우는 기회다.
가장 똑똑한 사람의 말만 들으면 다른 사람들의 제각각 뛰어난 부분을 놓친다. 우리가 만나는 모든 사람은 우리가 모르는 무언가를 알고 있고, 우리가 살아보지 않은 삶에서 얻은 지혜를 가지고 있다. 모든 대화는 새로운 것을 배우는 기회가 된다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-26-절대-버릴-수-없는-물건,-나를-설명할-수-있는-물건.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-26 절대 버릴 수 없는 물건, 나를 설명할 수 있는 물건.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Feb 2025 11:58:37 GMT</pubDate></item><item><title><![CDATA[2025-02-25 간절히 원했지만 얻지 못한 것, 늘 나의 편이 돼 주는 사람]]></title><description><![CDATA[
"오늘 하루 간절히 원했지만 얻지 못한 것이 있다면? Name one thing you hoped for today that didn't happen" 하루라고 기간을 한정하니 뭔가 쓸 게 마땅치 않다. 언제나 간절히 원하는 것이라면 행복한 가정을 갖는 것이지만 영 요원한 일로 보이긴 한다. 주둥이만 산 몽총이라서 간절히 원한다고 말을 하고 다니면서도 아무 시도조차 안 한다. 고쳐질 기미도 당최 실마리 없다. 아무래도 혼자서 오래 살다 보니 이게 타성이 된 건지. 바쁘게 살다가 시간이 나면 못한 게임을 하거나 웹툰 보기에만 바빠서 참, 더군다나 멀티태스킹이 전혀 안 되는 사람이라 너무 어려운 것.
일단 있는 가족에게라도 잘하자고 마음에 새기는 중. 늘 너의 편이 되어 주는 사람을 떠올려봐 수능 볼 때 재수학원을 다녔는데 난 고등학교를 안 다니고 간 거라 다른 사람들보다 어렸다. 난 참 건방진 막내놈이었는데 다행히 좋은 사람들을 만나서 재밌게 공부를 했다. 그 때 만난 형님들과의 인연이 벌써 20년이 되어 간다.
오랫동안 항상 날 챙겨 주고 믿어 주는 내 정신적 지주라고 할 수 있다.
그리고 안타깝게 먼저 세상을 떠났지만 항상 나를 챙겨 주고 먼저 연락해 주던 고마운 동생, 떠난 아들 대신 날 아들처럼 여겨 주시고 격려해 주시는 그 친구의 부모님.
호주에서 만나서 함께 우여곡절을 겪으면서 서로 엄청나게 돈독해 진 우리 신실한 기독교 동생.(교회 안 나가서 내가 미안해.)
어린 시절부터 지금까지 나의 토론 상대이자 도덕적 귀감이 되어준 내 친동생.
내 맘 속에서 항상 살아 계신 내 어머니까지.
적을 사람이 참 많은데, 더 쓰면 술이 고파질 거 같아서 이만!
오늘의 '생각을 자극'하는 글귀
가장 큰 적수는 나의 나이고, 가장 훌륭한 롤모델은 미래의 나다.
타인을 넘어서려고 하면 자존감은 폭풍의 바다가 된다. 자신을 이기는 것이 목표일 때는 순탄한 항해가 펼쳐진다. 가장 큰 적수는 과거의 나이고, 가장 훌륭한 롤모델은 미래의 나다. 과거의 나와 미래의 나는 나를 조롱하지도 않고 방해하지도 않는다. 그들의 목적은 단 하나, 나에게 동기를 부여하는 것이니까
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-25-간절히-원했지만-얻지-못한-것,-늘-나의-편이-돼-주는-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-25 간절히 원했지만 얻지 못한 것, 늘 나의 편이 돼 주는 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 25 Feb 2025 09:43:38 GMT</pubDate></item><item><title><![CDATA[2025-02-24 오늘 지나치게 많았던 것, 먹을 거 추천]]></title><description><![CDATA[
오늘 _이(가) 지나치게 많았다. There was too much _ today. 지나치게 많았다고 하긴 애매하지만, 신기한 일이 많았다?는 어떨까.
우연히 Whatsapp으로 ‘Hi Kim!’ 이라고 잘못 온 메세지에 ‘Hi dear! I’m not Kim though’ 라고 답해 주었다. 근데 이 대화가 계속 이어져서 계속 대화를 나누고 있다. 오랜 친구처럼 이런 저런 대화를 많이 나누고 있다. 홍콩에 사는 분인데 5월에 자기가 서울에 온다고 그 때 커피 한 잔 하잔다. 실제로 만남이 성사될 지는 모르겠지만 참 재밌는 우연이었다.
부트캠프에서 스터디를 하라는데 그냥 따로 공부에 관한 스터디는 할 필요를 못 느껴서 냅다 시간 관리 스터디를 만들고 멤버를 모집했다. 내가 시간 관리를 시작하면서 얻은 게 많아서 이 친구들도 한 번 경험해 봤음 좋겠다는 단순한 마음이었는데, 아주 성황리에 진행 중.
매니저분도 관심을 가지고, 다른 기수에 스터디에 대해 소개하는 게 어떠냐는 제안도 받고, 아주 흥미진진하다. 시간 관리 이제 3달 차에 접어든 내가 이런 모임을 주관하는 것도 웃기긴 한데(ㅋㅋ) 아무튼 이 재밌고 신기한 분위기가 싫지는 않다.
점점 더 사람을 만날 일이 많아지는 건 전혀 뜻밖의 일이었지만(사실 서울 와서 죽어라 공부만 할 거라고 생각했는데) 이 만년 집돌이에게 찾아 온 기회라고 생각하련다.
아주 신나게 즐기는 중! 최근 먹은 것 중에서 추천하고 싶은 것은? 20년 넘게 알고 지낸 형님들과 먹었던 고속터미널 근처 ‘육백집’.
어느 순간부터 고기 구워 먹는 걸 별로 안 좋아하게 돼서 몇 점 집어 먹고 말았는데 그 날은 아주 폭풍 흡입을 해버렸다. 근데 주의할 건, 좋은 사람들과 있어서 맛있었던 건지 진짜 고기가 맛있는 건지는 전혀 모르겠다는 점ㅋㅋ 삼겹살 집이 있는 건물에 치킨집도 갔는데 새우탕수육?? 이었나 뭘 먹었는데 그것도 엄청나게 맛있었다.
’음식’인지, ‘분위기’인 지 이것도 잘 모르겠다는 것이 함정.
오늘의 '생각을 자극'하는 글귀
의사결정에는 직관과 경험, 둘 사이의 균형이 필요하다.
의사결정 과정의 초반에는 직관을 신뢰할 수 없다. 과거의 패턴들이 현재에 적용되지 않을 수도 있기 때문이다. 결정을 어느 정도 저울질한 후에는 직관이 유용하다. 분석에서 놓쳤을지도 모르는 중요한 정보가 추가되기 때문이다,.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-24-오늘-지나치게-많았던-것,-먹을-거-추천.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-24 오늘 지나치게 많았던 것, 먹을 거 추천.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 24 Feb 2025 10:43:03 GMT</pubDate></item><item><title><![CDATA[OLS(Ordinary Least Squares)]]></title><description><![CDATA[OLS (Ordinary Least Squares, 최소자승법)는 회귀 분석에서 가장 많이 사용되는 기법으로, 독립변수와 종속변수 간의 관계를 선형 모델로 표현하고 그 모델을 최적화하는 방법입니다. OLS는 오차 제곱합 (Sum of Squared Errors, SSE)을 최소화하는 방식으로 회귀 계수를 추정합니다. 회귀 모델 (Regression Model) 독립변수 XX와 종속변수 YY 간의 관계를 설명하는 선형식입니다. 단순 선형 회귀 모델 예제: 오차 (Residuals) 실제 값 와 예측 값 간의 차이입니다. 오차 는 다음과 같이 정의합니다: ei=Yi−Y^ie_i = Y_i - \hat{Y}_i 오차 제곱합 (SSE, Sum of Squared Errors) 모든 오차의 제곱합으로, OLS는 이를 최소화하는 을 찾습니다. 목표 오차 제곱합을 최소화하는 회귀 계수 을 찾는 것입니다. 모델 설정 종속변수 YY와 독립변수 XX 간의 선형 관계를 설정합니다. 회귀 계수 추정 최소자승법을 사용하여 를 추정합니다. 모델 평가 R-squared (결정계수), p-value, F-statistic을 통해 모델의 성능을 평가합니다. 잔차 분석 모델이 적합한지 확인하기 위해 잔차를 분석합니다. import pandas as pd
import statsmodels.api as sm # 예제 데이터
data = { 'X': [1, 2, 3, 4, 5], 'Y': [2.2, 2.8, 4.5, 3.7, 5.5]
}
df = pd.DataFrame(data) # 독립변수와 종속변수 설정
X = df['X']
y = df['Y'] # 상수항 추가 (절편 포함)
X = sm.add_constant(X) # OLS 모델 생성 및 적합
model = sm.OLS(y, X).fit() # 결과 요약 출력
print(model.summary()) OLS Regression Results ==============================================================================
Dep. Variable: Y R-squared: 0.855
Model: OLS Adj. R-squared: 0.807
Method: Least Squares F-statistic: 17.91
Date: Thu, 20 Jun 2024 Prob (F-statistic): 0.0233
============================================================================== coef std err t P&gt;|t| [0.025 0.975]
------------------------------------------------------------------------------
const 1.1000 0.456 2.412 0.077 -0.157 2.357
X 0.9000 0.213 4.231 0.023 0.202 1.598
============================================================================== R-squared (결정계수) 모델이 종속변수의 변동을 얼마나 설명하는지 나타냅니다.
예: 는 데이터의 85.5%가 모델에 의해 설명된다는 의미입니다. coef (회귀 계수) const: X: p-value 회귀 계수가 통계적으로 유의미한지 판단합니다.
p-value &lt; 0.05이면 해당 계수는 유의미합니다. F-statistic 전체 모델의 유의성을 검정합니다. 모델이 잘 맞는지 확인하기 위해 잔차를 분석합니다.import matplotlib.pyplot as plt # 잔차 계산
residuals = model.resid # 잔차 플롯
plt.scatter(df['X'], residuals)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('X')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()
OLS 회귀 분석을 수행할 때 다음 4가지 가정을 만족해야 합니다: 선형성 (Linearity) 독립변수와 종속변수 간의 관계가 선형입니다. 정규성 (Normality) 잔차가 정규 분포를 따릅니다. 등분산성 (Homoscedasticity) 모든 수준에서 잔차의 분산이 동일합니다. 독립성 (Independence) 각 관측치는 서로 독립적입니다. OLS는 선형 회귀 분석에서 가장 많이 사용되는 기법입니다.
오차 제곱합을 최소화하여 최적의 회귀 계수를 추정합니다.
모델 평가와 잔차 분석을 통해 결과의 신뢰성을 검증해야 합니다.
OLS를 사용할 때는 선형성, 정규성, 등분산성, 독립성의 가정을 확인하는 것이 중요합니다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/ols(ordinary-least-squares).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/OLS(Ordinary Least Squares).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:33:48 GMT</pubDate></item><item><title><![CDATA[EDA(Exploratory Data Analysis)]]></title><description><![CDATA[Exploratory Data Analysis (EDA)는 데이터를 이해하고 주요 특성을 파악하기 위한 초기 분석 과정입니다. EDA는 통계적 요약과 시각화를 통해 데이터를 직관적으로 파악하고, 데이터에 숨겨진 패턴, 이상치(Outlier), 결측치(Missing Value), 변수 간 관계 등을 탐색합니다. 존 튜키(John Tukey)가 처음으로 제안한 개념으로, 데이터 분석이나 머신러닝 모델링의 기초를 마련하는 중요한 단계입니다. 데이터의 분포 이해 각 변수의 값들이 어떻게 분포되어 있는지 확인하고, 정규 분포 여부를 파악합니다. 이상치 (Outlier) 탐지 데이터에서 통계적으로 비정상적인 값을 찾아내고, 분석에서의 영향을 평가합니다. 결측치 (Missing Value) 탐색 결측치가 있는지 확인하고, 이를 제거, 대체, 보간하는 전략을 세웁니다. 변수 간 관계성 파악 상관관계, 다변량 관계 등을 확인하여 가설 수립에 필요한 인사이트를 도출합니다. 데이터 정제 및 전처리 방향 설정 데이터 정제, 변환, 스케일링 등의 전처리 전략을 결정합니다. 가설 수립 및 모델링 준비 데이터를 기반으로 잠재적인 가설을 수립하고, 분석 또는 모델링의 다음 단계를 준비합니다. 데이터의 중심 경향성 (Central Tendency)과 퍼짐 (Dispersion)을 요약합니다.
중심 경향성: 평균 (Mean): 모든 값을 더한 후 개수로 나눈 값
중앙값 (Median): 데이터의 중간값
최빈값 (Mode): 가장 많이 나타난 값 퍼짐 정도: 분산 (Variance): 데이터가 평균으로부터 얼마나 떨어져 있는지
표준편차 (Standard Deviation): 분산의 제곱근으로, 데이터의 산포도를 나타냅니다.
사분위수 (Quartiles): 데이터의 25%, 50%, 75%에 해당하는 값 df.describe() # 수치형 변수에 대한 기술 통계
EDA에서 시각화는 데이터의 패턴과 관계를 직관적으로 이해하는 데 필수적입니다.
단변량 분석 (Univariate Analysis) 히스토그램 (Histogram): 변수의 분포 확인
박스플롯 (Box Plot): 이상치와 분포의 퍼짐 정도 확인
커널 밀도 추정 (KDE Plot): 데이터의 확률 밀도 함수 시각화 import seaborn as sns
sns.histplot(df['Price'])
sns.boxplot(df['Price']) 이변량 분석 (Bivariate Analysis) 산점도 (Scatter Plot): 두 변수 간 관계 파악
상관 행렬 (Correlation Matrix): 상관계수를 시각화
바이올린 플롯 (Violin Plot): 분포 및 범주별 차이 확인 sns.scatterplot(x='Price', y='Sales', data=df)
sns.heatmap(df.corr(), annot=True) 다변량 분석 (Multivariate Analysis) 페어 플롯 (Pair Plot): 여러 변수 간 관계를 한눈에 확인
3D 산점도: 3차원 공간에서 변수 간 관계 확인 sns.pairplot(df) 결측치가 있는지 확인하고, 결측치 비율이 높으면 제거하거나 평균, 중앙값, 최빈값으로 대체합니다.
df.isnull().sum() # 결측치 확인
df.dropna() # 결측치 제거
df.fillna(df.mean()) # 평균으로 결측치 대체
이상치는 데이터를 왜곡할 수 있으므로, IQR (Interquartile Range) 또는 Z-점수 (Z-Score)를 사용해 탐지합니다.
IQR 기반 탐지:
Q1 = df['Price'].quantile(0.25)
Q3 = df['Price'].quantile(0.75)
IQR = Q3 - Q1
outliers = df[(df['Price'] &lt; (Q1 - 1.5 * IQR)) | (df['Price'] &gt; (Q3 + 1.5 * IQR))] Z-점수 기반 탐지:
from scipy import stats
df['z_score'] = stats.zscore(df['Price'])
outliers = df[df['z_score'].abs() &gt; 3] 변수 간의 상관관계를 분석하여 강한 양/음의 상관관계를 확인합니다.correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm') 데이터 로드 및 확인:
df.head()
df.info() 기술 통계 요약:
df.describe() 결측치 탐색 및 처리:
df.isnull().sum()
df.fillna(method='ffill') 시각화를 통한 분포 및 관계 확인:
sns.histplot(df['Sales'])
sns.scatterplot(x='Price', y='Sales', data=df) 이상치 탐지 및 처리:
outliers = df[df['Price'] &gt; threshold] 상관관계 분석:
sns.heatmap(df.corr(), annot=True) ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/eda(exploratory-data-analysis).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/EDA(Exploratory Data Analysis).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:32:14 GMT</pubDate></item><item><title><![CDATA[EBM(Explainable Boosting Machine)]]></title><description><![CDATA[Explainable Boosting Machine(EBM) - 트리기반의 순환형 gradient boosting - Generalized Additive 모델 [참고] - 다른 알고리즘 모델보다 학습에 시간이 더 소요될 수 잇음 - glassbox 모델이라 불림 ㄴ 기존 딥러닝 모델이 blackbox모델로 불리며 내부 동작구조를 알기 어려움 ㄴ 내부가 다 보이는 glass박스 모델은 내부 동작구조를 어느정도 알수 있어서 이렇게 명명하지 않았을까?! ㄴ model-agnostic에 맞게 의역해보면, Model에 관계없이 적용가능한 방법론 - 기존 boosting 방식으로 학습시키나, Xi와 y간의 관계를 추가함수를 통해 정의함으로서 비선형성 문제도 해결할 수 있도록 고안 학습방식 - feature를 한개..]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/ebm(explainable-boosting-machine).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/EBM(Explainable Boosting Machine).md</guid><dc:creator><![CDATA[[[Dan-k]]]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:31:51 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/IO2nL/btstxNSrkcl/SKAHcqqO7hYQUFSZW1ado1/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/IO2nL/btstxNSrkcl/SKAHcqqO7hYQUFSZW1ado1/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[11W - 02_SQL을 활용한 EDA]]></title><description><![CDATA[📌 목적: 날짜별로 활성 사용자 수(Active Users) 및 구매자 수(Buyers) 를 디바이스 유형별로 분석 📌 주요 SQL 로직: date_series 서브쿼리로 분석 기간(2020-12-01 ~ 2020-12-31) 생성 user_metrics 서브쿼리에서 device.category 기준으로 사용자 및 구매자 집계 GROUP BY device_category 로 디바이스 유형별 지표 도출 ✅ 예제 SQL WITH date_series AS ( SELECT DATE_ADD(DATE '2020-12-01', INTERVAL day_offset DAY) AS target_date FROM UNNEST(GENERATE_ARRAY(0, 30)) AS day_offset
),
user_metrics AS ( SELECT target_date, device.category AS device_category, COUNT(DISTINCT CASE WHEN _TABLE_SUFFIX = FORMAT_DATE('%Y%m%d', target_date) THEN user_pseudo_id END) AS active_users, COUNT(DISTINCT CASE WHEN _TABLE_SUFFIX = FORMAT_DATE('%Y%m%d', target_date) AND event_name = 'purchase' THEN user_pseudo_id END) AS buyers FROM `datafashion-241006.ga4_241222_test.events_*`, date_series WHERE _TABLE_SUFFIX BETWEEN '20201201' AND '20201231' GROUP BY target_date, device_category
)
SELECT FORMAT_DATE('%Y-%m-%d', target_date) AS target_date, device_category, active_users, buyers
FROM user_metrics;
✅ 활용 예시: 디바이스별(PC, Mobile, Tablet) 구매 전환율 비교 마케팅 캠페인 성과 평가 (예: 특정 디바이스에서 전환율 상승 여부 확인) 📌 목적: 상품별 조회수(Views), 장바구니 담기(Add To Cart), 구매 수(Purchases) 를 분석 📌 주요 SQL 로직: item_events 서브쿼리: view_item, add_to_cart, purchase 이벤트를 집계 pivoted 서브쿼리: CASE WHEN을 사용하여 상품별 이벤트를 열(Column) 형태로 변환 ORDER BY purchase_count DESC 로 구매 수 기준 내림차순 정렬 ✅ 예제 SQL WITH item_events AS ( SELECT DATE(TIMESTAMP_MICROS(event_timestamp)) AS event_date, items.item_name, event_name, COUNT(*) AS event_count FROM `datafashion-241006.ga4_241222_test.events_*`, UNNEST(items) AS items WHERE _TABLE_SUFFIX BETWEEN '20201201' AND '20201231' AND items.item_name IS NOT NULL AND event_name IN ('view_item', 'add_to_cart', 'purchase') GROUP BY event_date, items.item_name, event_name
),
pivoted AS ( SELECT event_date, item_name, SUM(CASE WHEN event_name = 'view_item' THEN event_count ELSE 0 END) AS view_count, SUM(CASE WHEN event_name = 'add_to_cart' THEN event_count ELSE 0 END) AS add_to_cart_count, SUM(CASE WHEN event_name = 'purchase' THEN event_count ELSE 0 END) AS purchase_count FROM item_events GROUP BY event_date, item_name
)
SELECT event_date, item_name, view_count, add_to_cart_count, purchase_count
FROM pivoted
ORDER BY purchase_count DESC;
✅ 활용 예시: 상품별 구매 전환율 분석 (조회수 대비 구매율) 베스트셀러 및 저조한 상품 식별 프로모션 대상 상품 선정 📌 목적: DAU (일간 활성 사용자), WAU (주간 활성 사용자), MAU (월간 활성 사용자) 를 날짜별 계산 📌 주요 SQL 로직: date_series 서브쿼리에서 분석 기간(30일) 생성 metrics 서브쿼리에서 사용자 ID 기준 DAU, WAU, MAU 집계 COUNT(DISTINCT user_pseudo_id) 활용하여 고유 사용자 수 계산 ✅ 예제 SQL WITH date_series AS ( SELECT FORMAT_DATE("%Y%m%d", DATE_ADD(PARSE_DATE('%Y-%m-%d', '2020-12-01'), INTERVAL day_offset DAY)) AS target_date FROM UNNEST(GENERATE_ARRAY(0, 30)) AS day_offset
),
metrics AS ( SELECT target_date, COUNT(DISTINCT CASE WHEN _TABLE_SUFFIX = target_date THEN user_pseudo_id END) AS DAU, COUNT(DISTINCT CASE WHEN _TABLE_SUFFIX BETWEEN FORMAT_DATE("%Y%m%d", DATE_SUB(PARSE_DATE('%Y%m%d', target_date), INTERVAL 6 DAY)) AND target_date THEN user_pseudo_id END) AS WAU, COUNT(DISTINCT CASE WHEN _TABLE_SUFFIX BETWEEN FORMAT_DATE("%Y%m%d", DATE_SUB(PARSE_DATE('%Y%m%d', target_date), INTERVAL 29 DAY)) AND target_date THEN user_pseudo_id END) AS MAU FROM `datafashion-241006.ga4_241222_test.events_*`, date_series WHERE _TABLE_SUFFIX BETWEEN '20201201' AND '20201231' GROUP BY target_date
)
SELECT * FROM metrics;
✅ 활용 예시: DAU/WAU/MAU 증감 추이 분석 월별 리텐션 분석 사용자 활동 감소 시, 마케팅 전략 수정 📌 목적: 날짜별 세션 대비 구매 전환율(%) 을 계산 📌 주요 SQL 로직: sessions 서브쿼리에서 session_start 이벤트 기준 세션 수 계산 purchases 서브쿼리에서 purchase 이벤트 기준 구매 수 계산 ROUND((p.purchases / s.sessions) * 100, 2) 를 사용해 전환율 계산 ✅ 예제 SQL WITH daily_events AS ( SELECT DATE(TIMESTAMP_MICROS(event_timestamp)) AS event_date, event_name, user_pseudo_id FROM `datafashion-241006.ga4_241222_test.events_*` WHERE _TABLE_SUFFIX BETWEEN '20201201' AND '20201231'
),
sessions AS ( SELECT event_date, COUNT(DISTINCT user_pseudo_id) AS sessions FROM daily_events WHERE event_name = 'session_start' GROUP BY event_date
),
purchases AS ( SELECT event_date, COUNT(DISTINCT user_pseudo_id) AS purchases FROM daily_events WHERE event_name = 'purchase' GROUP BY event_date
)
SELECT s.event_date, s.sessions, IFNULL(p.purchases, 0) AS purchases, IFNULL(ROUND((p.purchases / s.sessions) * 100, 2), 0) AS conversion_rate
FROM sessions s
LEFT JOIN purchases p ON s.event_date = p.event_date
ORDER BY s.event_date;
✅ 활용 예시: 마케팅 캠페인 성과 분석 (광고 이후 전환율 변화) 구매 여정 최적화 (전환율 낮은 경우 개선 필요) ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/11w-02_sql을-활용한-eda.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/11W - 02_SQL을 활용한 EDA.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 15:30:23 GMT</pubDate></item><item><title><![CDATA[독서 대시보드]]></title><description><![CDATA[2025년의 목표 지식 기록 관리하기 Dataview의 쿼리 명령어는 수정사항이 없기 때문에 개별 독서 노트의 status 태그가 변경되어서 대시보드 쿼리 결과에 변경사항이 생기더라도 html export 때 변경점이 반영 안 되는 문제 존재 <a href="https://64etuor.github.io?query=tag:issue" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#issue">#issue</a> <a href="https://64etuor.github.io?query=tag:todo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#todo">#todo</a> 2025-02-09 확인 언제 고치지 ㅋㅋㅋDataview: No results to show for table query.]]></description><link>https://64etuor.github.io/200_books/독서-대시보드.html</link><guid isPermaLink="false">200_Books/독서 대시보드.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 10:06:48 GMT</pubDate><enclosure url="https://image.yes24.com/goods/107077663/XL" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://image.yes24.com/goods/107077663/XL"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-23 신용카드 결제내역중 당혹스러운 것, 돈 걱정이 없다면 당장 하고 싶은 것]]></title><description><![CDATA[
"최근 신용카드 결제 내역에서 가장 당혹스러운 항목은? What charge on your recent credit card bill shocked you the most?" 의도와 다르게 돈을 사용한 적은 최근엔 없어서 그나마 당혹스럽다고 말할 만한 건 랩탑을 새로 구매한 거?
그전에 사용하던 랩탑 Asus 제피러스 G14도 꽤 고성능이었는데 본의 아니게 운명해 버리셨다. 사연은 이렇다. CPU 온도가 너무 튀고 가끔 쓰로틀링이 걸려서 써멀 재도포하려고 아무 생각 없이 뚜따(뚜껑따기)를 했는데 리퀴드 갈륨 써멀이 발려 있었다. 히트씽크나 코어 표면을 보니 고르게 발려 있지 않아서 그냥 아예 닦아 버려야겠다고 생각했는데 문제는 써멀 위치가 영 안 좋았던 것… 아무 생각 없이 면봉을 댔는데 써멀이 코어 아래로 살짝 흘러 버렸다. 갈륨 써멀이 전도성이라 식은 땀이 줄줄 나는 상황. 여차저차 나머지는 제대로 닦아 내고 일반 실리콘 써멀 도포까지 하고 다시 조립.
하늘에 기도하면서 전원 버튼을 눌렀고 다행히 문제 없이 켜졌다. 한 두 달은 잘 사용했고 온도도 잡혀서 아 천운이 나를 도우셨다라고 생각했지만, 정확히 두 달 후에 서울에 랩탑을 갖고 왔을 때(시즈 모드로 쓸 때나 괜찮았지 흔들리니까 영향이 간 듯하다.) dGPU에 전원이 인가되는 순간 소름 끼치는 쇼트음과 함께 GOOD-BYE.
부랴부랴 새로운 랩탑을 알아 봤는데 인텔의 루나레이크 CPU가 한창 출시되려던 시점이라 당시 랩탑을 사는 게 너무 꺼림칙했다. 루나레이크 서피스를 기다리고 있던 입장이라 더더욱 컸던 마음의 상처. 그러나 당장 필요하니 어쩔 수 도리가 있나…
무게 1.5kg 내외에서 가장 효율적으로 성능을 뽑을 수 있는 제품 중심으로 알아 봤다. 그러다가 눈에 들어온 게 Acer의 Swift X14.
일단 가격을 보고 눈을 의심했다.
Intel Core Ultra 7 155H / 32Gb Ram(DDR 5X) / 512Gb SSD / RTX 4060(TGP 50W) / OLED 2.8k(120Hz)
심지어 WIN11 OS까지 제공되고 알루미늄 합금 마감인데, 이게 140만원????? 후기를 보니 열도 꽤나 잘 잡았다는 평.
바로 구매. 사용 후기를 말하자면 스피커가 매우 구리다는 거만 빼놓고는 대만족. 이 가격에 이 성능은 정말 적수가 없을 거 같다. (Asus TUF A14도 샀었는데 이게 훨씬 만족도가 높다.)
어쨌든 잘 구매했으니 또 오랫동안 같이 잘 살아보자 친구야!! 돈 걱정을 하지 않아도 된다면 당장 시작하고 싶은 일은? 지금 하고 싶은 일을 다 하고 살고 있어서 따로 당장 시작하고 싶은 일은 없는 거 같다.
그래도 돈 걱정이 없으면 일단 서울에 더 큰 집 구하기?
넓은 데서 살다가 원룸에 오니 불편한 점들이 몇 가지 있다.
요리하기가 너무 힘들고 대형 외부 모니터가 없으니 작업하기가 불편하다.
그 외에는 다 괜찮은 듯? 방이 작아서 청소하기도 쉽고, 아기자기하게 물건 배치한 게 꽤나 보기 좋다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-23-신용카드-결제내역중-당혹스러운-것,-돈-걱정이-없다면-당장-하고-싶은-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-23 신용카드 결제내역중 당혹스러운 것, 돈 걱정이 없다면 당장 하고 싶은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 06:55:51 GMT</pubDate></item><item><title><![CDATA[Git Checkout의 책임 분산 변화(git 2.23)]]></title><description><![CDATA[기존 checkout 명령어는 Git에서 매우 강력한 기능을 제공했지만, 너무 많은 역할을 수행하는 문제를 가지고 있었습니다. checkout은 다음과 같은 여러 기능을 담당했습니다.
브랜치 변경: git checkout branch-name → 특정 브랜치로 이동
새 브랜치 생성 및 이동: git checkout -b new-branch → 새로운 브랜치를 만들고 이동
파일 복원: git checkout -- file.txt → 특정 파일을 이전 커밋 상태로 되돌림
Detached HEAD 모드 진입: git checkout commit-hash → 특정 커밋을 checkout하여 분기 없이 작업
이처럼 checkout은 브랜치 전환과 파일 복원이라는 서로 다른 개념을 하나의 명령어로 처리하면서 혼란을 야기했습니다.
사용자 입장에서는 checkout이 현재 작업 브랜치를 변경하는 것인지, 특정 파일을 복원하는 것인지 혼동할 가능성이 높았으며, 실수로 원치 않는 동작을 수행하는 경우도 많았습니다.이러한 문제를 해결하기 위해 Git 2.23(2019년 출시)부터 checkout의 기능을 두 개의 명령어로 분리했습니다. git switch → 브랜치 관련 작업만 담당 기존 checkout의 브랜치 변경 및 생성 기능을 전담
예:
git switch branch-name # 브랜치 변경
git switch -c new-branch # 새 브랜치 생성 후 이동 기존 checkout과 달리 새 브랜치를 만들 때 -b 대신 -c 옵션을 사용, 더 직관적인 명령 구조 제공 git restore → 파일 복원 전담 기존 checkout의 파일 되돌리기 기능을 따로 분리
예:
git restore file.txt # 특정 파일을 마지막 커밋 상태로 복원
git restore --staged file.txt # staging 영역에서 특정 파일 제거 (add 취소) 명확한 의도를 가진 명령어로 변경됨으로써 혼동을 줄이고 실수를 방지 이러한 변화는 소프트웨어 설계에서 중요한 "책임 분산(Separation of Concerns)" 원칙을 적용한 사례입니다.
Git 내부에서도 각 기능의 역할을 명확히 구분함으로써 사용자 경험(UX)을 개선하고, 더 직관적인 사용법을 제공하는 방향으로 발전한 것입니다.이는 클린 코드의 원칙과도 연결됩니다.
하나의 함수나 객체가 너무 많은 역할을 맡으면 코드가 복잡해지고, 실수를 유발하며, 유지보수가 어려워집니다.
Git의 switch와 restore 도입 사례처럼, 불필요한 책임을 줄이고 역할을 명확히 분리하는 것이 개발 과정에서 중요한 원칙임을 보여줍니다.
💡 정리: 기존 checkout 명령어는 너무 많은 기능(브랜치 전환, 파일 복원 등)을 수행하여 혼란을 유발
Git 2.23부터 switch(브랜치 관련)와 restore(파일 복원)로 분리하여 책임을 명확히 분산
이 과정은 소프트웨어 설계 원칙 중 Separation of Concerns(책임 분리)을 실천한 사례
클린 코드에서도 하나의 함수/객체가 하나의 역할만 담당해야 유지보수성과 가독성이 향상됨 ]]></description><link>https://64etuor.github.io/600_tech-stack/git/git-checkout의-책임-분산-변화(git-2.23).html</link><guid isPermaLink="false">600_Tech Stack/git/Git Checkout의 책임 분산 변화(git 2.23).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Feb 2025 06:04:43 GMT</pubDate></item><item><title><![CDATA[2025-02-22 오늘 두드러진 감정, 나를 소개하는 말]]></title><description><![CDATA[
오늘 가장 두드러진 감정은 무엇인가? What was your prevailing emotion of the day? 오늘 오후를 전부 할애해서 새로 사귄 친구와 대화를 나누고 이런 저런 활동을 했다. 더베러톡톡 이후 커피챗으로 맺은 인연인데, 가치관과 성격이 너무 닮아서(심지어 나이도 같다) 이런 저런 대화를 나누는 게 너무 즐거웠다. 주제가 폭 넓고 대화 중간에 주제를 이리 저리 넘나 들어도 할 얘기들이 계속 있었다. 말이 잘 통한다는 것만큼 친밀감 쌓기에 특화된 속성은 없는 거 같다. 이번 만남에서 난 준비한 게 없는데 책을 선물로 받아서 너무나 감동… 그러니까 오늘 가장 두드러진 감정은 동화감과 감동이라고 생각한다. 은은한 향기가 여운으로 남아서 지금 내 방을 가득 채우고 있는 것만 같다.
사업관에 대해서 나보다 훨씬 넓은 시야와 포부를 갖고 있는 친구라 배울 점이 많다. 대화 중에 같이 상권을 돌아보기도 했는데 참고할 만한 구체적인 ‘행동력’을 목격한 건 정말 중요한 경험이다. 옛날 같았으면 누군가의 야망의 크기가 너무 크면 그 위압적인 중량감에 압도 당하곤 했을 텐데, 이제는 신기하게도 아무렇지 않게 받아 들인다. 나도 또한 성장했다고 생각한다. 이 감정과 경험을 회자할 기회가 또 있으리라 생각한다. 모르는 사람에게 '나는 이런 사람이에요' 라고 소개한다면? 다른 사람이 나를 ‘이렇게’ 봐 줬으면 좋겠다는 바람이 없어서 그때 그때 소개말이 달라질 거 같다. 특히 장소와 상황에 따라서 소개말이 달라지는 거 같다. 가급적이면 그 모르는 사람과의 공감대를 쌓을 수 있는 말을 하려고 한다.
가령 이번 더베러 신년회 2차에서 함께 자리한 분들께는 나를 다양한 관심사를 가진 사람이라고 소개했다. (앉은 사람들 개개의 직업 영역이 판이했고 그 분들의 이야기를 많이 듣고 싶었기 때문에)
그러고 보면 ‘이야기를 수집하는 사람’이 어색한 자리에서 내가 즐기는 포지션인 거 같다. 이야기를 끌어낸 덕분에 금방 함께 웃고 공감하며 대화를 할 수 있어서 너무나 좋았다.
(물론 Beer의 힘도 무시 못 하지!)
오늘의 '생각을 자극'하는 글귀
에너지를 유지하고 번아웃을 피하려면 규칙적으로 휴식을 취해야 한다.
건강하지 않은 문화에서는 휴식을 가속페달에서 발을 떼는 것으로 본다. 지쳐서 나가떨어지기 전까지는 멈추지 말고 계속 밀어붙여야 한다고 말한다. 건강한 문화에서는 휴식을 중요한 연료 공급원이라고 생각한다. 에너지를 유지하고 번아웃을 피하려면 규칙적인 휴식이 필요하다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-22-오늘-두드러진-감정,-나를-소개하는-말.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-22 오늘 두드러진 감정, 나를 소개하는 말.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 22 Feb 2025 10:30:01 GMT</pubDate></item><item><title><![CDATA[보랏빛 소가 온다：21세기 최고의 마케팅 바이블]]></title><description><![CDATA[ 책의 전반에 걸쳐 끊임 없이 회자되는 “Remarkable”은 예술과 일맥상통하는 면이 있다. 여기에 가장 가까운 제품이 있다면 단연 ‘애플’의 제품을 꼽을 수 있겠다.(애플의 폐쇄성이 싫어서 나는 전혀 사용하지 않지만 그들의 제품은 ‘진짜’다.)
제품 구석구석 거의 변태스러울 정도로 집착한 설계자들의 흔적이 남아있다. 회로 설계부터 제품 마감, UI/UX 디자인까지 공을 들이지 않은 부분을 찾기가 어렵다. 방망이 깎던 노인도 이들의 제품을 본다면 혀를 내두를 만한 부분.
책에서 얻을 수 있는 마케팅의 교훈을 키워드로 정리하자면 <a href="https://64etuor.github.io?query=tag:todo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#todo">#todo</a> 🟨 Content:
마케팅에 종사하는 사람들은 지난 수년간 마케팅의 ‘5P’에 대해 얘기했다(물론 P는 5가지보다 많지만, 각자 자기가 좋아하는 5가지를 내세우고 있다). 그 가운데 몇 개를 뽑아보면 다음과 같다. • Product 제품 • Pricing 가격 • Promotion 촉진 • Positioning 포지셔닝 • Publicity 홍보 • Packaging 포장 • Passalong 회람 • Permission 허락Note
생각해보면 마케팅, 제품과 관련된 단어 중 유독 'P'로 시작하는 단어가 많다는 건 신기한 일이다.
예전에 마케팅에서 '4P Mix' 등 단어가 유행한 적이 있는데, 개인적으로는 “유행”이란 그 개념 자체가 이미 레거시가 되었으며 깨야 하는 패러다임이 됐다는 것과 달리 들리지가 않는다.
🟨 Content:
《티핑 포인트》의 저자 말콤 글래드웰Malcolm Gladwell은 아이디어가 어떤 한 사람에게서 시작되어 다른 사람들에게 퍼져나가는 모습을 명확하게 밝혀냈다. 나는 《아이디어 바이러스》에서 이러한 분석을 한층 더 심화시켜, 가장 효율적인 비즈니스 아이디어는 퍼져나가는 아이디어라고 주장했다. 그리고 《퍼미션 마케팅》을 통해, 광고에 대한 소비자들의 무관심 때문에 마케터들이 전에 없는 곤경에 빠졌다고 설명했다. 또한 기업은 잠재 고객의 관심을 기업의 자산으로 여길 때 성공한다고 주장하며, 이러한 관심을 잠깐 이용하고 내팽개쳐서는 안 된다고 강조했다.Note
내가 좋아하는 '키보드 시장'에도 이 방법이 정확하게 먹히고 있다!
🟨 Content:
‘모든 사람이 원하는 상품을 개발하고, 대중에게 어필하도록 광고하라. 그러면 떼돈을 벌 것이다.’Note
한 때 뜨거웠던 캠핑 아이템 등 SNS를 주축으로 한 모든 마케팅에 이러한 사례를 접목할 수 있겠다.
🟨 Content:
냉동 피자 분야에서 최초가 된다는 건 아주 좋은 아이디어였다. 진통제 시장에서 최초가 된다는 건 더 좋은 아이디어였다.Note
한국의 학교 시스템을 정확히 비판하는 말 아닐까? 지금음 어떨지 모르겠지만..
🟨 Content:
• 대부분은 당신의 제품을 사지 못한다. 사람들은 돈이 없거나, 시간이 없거나, 당신의 제품을 원하지 않는다. • 잠재 고객이 충분한 돈이 없어 물건을 사지 못한다면, 당신은 시장 자체가 없는 것이다. • 잠재 고객이 시간이 없어 당신의 광고에 귀를 기울이지 못한다면, 당신은 투명 인간 취급 당한 것이다. • 만약 잠재 고객이 시간을 들여 광고를 들어주더라도 안 사겠다고 결정해 버린다면 더 나아가기가 힘들어진다.🟨 Content:
전 미국 특허청장이 한 말을 인용하자면, 우리가 필요할 것이라고 상상할 수 있는 모든 물건은 대부분 이미 발명됐다.🟨 Content:
과거의 법칙은 이랬다. &nbsp; “안전하고 평범한 제품을 만들고 이를 위대한 마케팅과 결합하라.” &nbsp; 새로운 법칙은 이렇다. &nbsp; “리마커블한 제품을 창조하고 그런 제품을 열망하는 소수를 공략하라!”🟨 Content:
나는 리마커블한 아이디어가 부족하다고 생각하지 않는다. 당신의 사업에는 성공할 기회가 아주 많다. 부족한 건 아이디어가 아니다. 그런 아이디어를 실행에 옮기려는 의지가 부족한 것이다. 나는 이 책을 통해 위험한 길이 오히려 안전한 길이라는 사실을 일깨워주고 싶다. 내 목표는 독자들이 정말로 놀랄 만한 일을 하겠다는 의지를 불태우게 하는 것이다. 낡은 방법이 결국 실패로 끝날 것이라는 사실을 알게 되면, 이제 남은 것은 얘기할 만한 가치가 있는 제품을 만들어내는 길밖에 없다.🟨 Content:
유일한 방법은 변화를 좋아하고, 새로운 걸 좋아하며, 적극적으로 당신이 파는 물건을 찾아다니는 사람들을 공략하는 것이다.🟨 Content:
그렇다면 퍼져나가는 아이디어는 어떻게 창조하는가? 모든 이를 위한 제품을 만들지 말라. 그런 제품은 그 누구를 위한 것도 아니니까. 모든 이를 위한 제품은 이미 다 선점됐다. 그런 거대 시장의 상품이 너무 많고, 또 이미 만족할 만한 것이 있어 스니저의 흥미를 사로잡기란 어렵다.🟨 Content:
아무에게나 광고하는 건 백해무익한 짓이다. 소비자들이 정말로 도움을 구하고 있을 때, 그리고 이들이 당신을 찾을 수 있는 곳에 광고해야 한다.🟨 Content:
• 제트블루 항공JetBlue Airways은 속임수를 쓰고 있다. 저비용 구조, 저활용 공항의 이용, 젊은 직원, 무노조 경영 덕분에 제트블루 항공은 일방적 경쟁 우위를 누리고 있다. • 스타벅스도 속임수를 쓰고 있다. 커피 바 현상coffee bar phenomenon은 스타벅스가 만들어낸 것이고, 심지어 모든 사람이 커피를 생각할 때마다 스타벅스를 떠올리게 됐다. • 뱅가드Vanguard도 속임수를 쓰고 있다. 뱅가드의 저렴한 인덱스 펀드 때문에 풀서비스 금융 회사는 경쟁이 불가능하다. • 아마존Amazon 역시 속임수를 쓰고 있다. 무료 배송과 엄청난 도서 보유율 덕분에 아마존은 동네 서점에 일방적인 경쟁 우위를 누리고 있다. • 구글 또한 속임수를 쓰고 있다. 구글은 1세대 포털 사이트의 시행착오로부터 많은 걸 배웠지만, 지금은 다른 포털 사이트를 전혀 도와주지 않고 있다. • 웬디스Wendy’s도 속임수를 쓰고 있다. 웬디스는 자사의 융통성을 무기로 6가지나 되는 샐러드 위주의 주요리를 내놓아, 다이어트 푸드시장의 상당 부분을 빼앗았다. • 듀카티Ducati도 속임수를 쓰고 있다. 듀카티는 시장 전체를 위해서 오토바이를 생산할 필요가 없어서, 매년 동이 나는 마진 높고 놀랄 만한 오토바이만 전문적으로 생산하고 있다. • HBO도 속임수를 쓰고 있다. HBO는 일주일에 하루만 자체 제작 영화를 방영해도 되기 때문에, 방송망에 집중하여 본전을 톡톡히 뽑고 있다.🟨 Content:
‘모든 이를 위한 모든 제품’ 전략을 따르지 않는 경쟁업체 목록을 작성하라. 그런 회사들이 당신 회사를 능가하고 있는가? 충족되고 있지 못한 틈새시장 가운데 당신이 공략할 만한 시장을 고른다면, 그게 어디일까? 그렇다면 왜 오직 이 시장에만 어필할 만한 고유의 상품을 개발하지 않는가?🟨 Content:
퍼플 카우가 드문 건 두려워하기 때문이다.🟨 Content:
우리는 거짓된 믿음을 배우며 자랐다. 비판은 실패로 귀결된다고 잘못 생각하고 있다. 학교에 가면서부터 우리는 눈에 띄는 게 안 좋은 일이라고 배웠다. 눈에 띄게 되면, 하버드대학교가 아니라 교장실로 불려가야 했다. “그래, 나는 나를 진지한 비판의 무대에 올려놓고 싶어!”라고 말하는 사람은 아무도 없다. 그렇지만 리마커블하기 위한 유일한 방법은 바로 그렇게 하는 것이다.🟨 Content:
리마커블한 경험을 회피하는 사람들의 문제점은 그들이 결코 리더가 되지 못한다는 점이다. 그들은 큰 회사에서 일하기로 하고, 의도적으로 이름 없는 게으름뱅이 역할을 하며, 절대 나서지 않으면서 위험과 비판을 피한다. 만약 그들이 실수해서 잘못된 새를 쫓아가면, 그들은 실패하고 만다.🟨 Content:
“우수한 디자인은 해결사다. 하지만 이걸 쿨cool 요소와 결합할 수 있다면, 당신을 홈런을 칠 것이다.” 허먼 밀러의 커뮤니케이션 이사를 역임한 마크 셔먼Mark Schurman의 말이다. 허먼 밀러는 안전한 의자를 만드는 게 자기들이 할 수 있는 가장 위험한 일임을 알았다.]]></description><link>https://64etuor.github.io/200_books/00_achives/2025/보랏빛-소가-온다.html</link><guid isPermaLink="false">200_Books/00_Achives/2025/보랏빛 소가 온다.md</guid><dc:creator><![CDATA[세스 고딘, 이주형, 남수영]]></dc:creator><pubDate>Fri, 21 Feb 2025 12:36:15 GMT</pubDate></item><item><title><![CDATA[넛지： 파이널 에디션：복잡한 세상에서 똑똑한 선택을 이끄는 힘]]></title><link>https://64etuor.github.io/200_books/bookshelf/넛지-파이널-에디션.html</link><guid isPermaLink="false">200_Books/Bookshelf/넛지 파이널 에디션.md</guid><dc:creator><![CDATA[리처드 탈러, 캐스 선스타인, 이경식, 최정규]]></dc:creator><pubDate>Fri, 21 Feb 2025 12:35:22 GMT</pubDate></item><item><title><![CDATA[2025-02-21 요즘 유행하는 말, 누군가가 이유 없이 날 싫어한 경험]]></title><description><![CDATA[
요즘 유행하는 말을 세 개만 적어보자. Name three current buzzwords 헤이 만삣삐 - 기가차드 밈
살았죠? - 대상혁 밈
난 대학 시절 묵찌빠를 전공했단 사실~
물론 요즘이 아닐 수도 있겠지만 내가 아는 내용은 요종도~(벡크) 누군가가 이유 없이 너를 싫어한 적이 있어? 어떤 기분이었어? 날 싫어한 사람들은 있겠지만 이유 없이 싫어하진 않았을 거 같다.
뭐 다 그럴 만한 이유가 있겠지.
그리고 누가 날 싫어한대도 별로 신경 안 쓸 거 같다. (날 엄청 괴롭히지 않는 이상은…)
살면서 누가 날 괴롭힌 적도 딱히 없는 거 같고 그냥 적당한 인복을 갖고 살았다고 생각한다.
그리고 아마 그 인복 덕에 사람을 미워하지 않는 성향을 얻었나 보다.
오늘의 '생각을 자극'하는 글귀
나와 다른 의견을 듣는 것은 새로움을 배울 수 있는 기회다.
열린 마음으로 바라보면 누군가 내 의견에 반론을 제기하는 것은 나에 대한 공격이 아니다. 오히려 새로운 것을 배울 수 있는 좋은 기회가 된다. 다른 사람의 주장에 동의하지 않더라도 그 관점을 이해하려고 노력하는 것은 도움이 된다. 이를 통해 토론은 열기를 띠면서 가정이 명확해 지고 추론은 예리해진다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-21-요즘-유행하는-말,-누군가가-이유-없이-날-싫어한-경험.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-21 요즘 유행하는 말, 누군가가 이유 없이 날 싫어한 경험.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 21 Feb 2025 10:27:14 GMT</pubDate></item><item><title><![CDATA[2025-02-20 오늘 많이 사용한 말, 크리에이터가 된다면 운영하고픈 채널]]></title><description><![CDATA[
오늘 지나치게 많이 사용한 말은? What word did you overuse today? 이틀 전의 PT 후폭풍이 오늘 아침에 와서 아침부터 아이고 아이고 곡소리를 종일 입에 달고 있었다. 아침에 너무 팔이 끊어지듯 아파서 겨우겨우 씻고 나왔다. 아직도 팔이 가슴팍 이상으로 올라가질 않는다. 운동을 열심히 했다는 훈장인 셈 쳐야지 뭐. 유튜브 크리에이터가 된다면 어떤 주제로 채널을 운영하고 싶어? 내성적인 성향이라 크리에이터는 영 끌리지 않긴 한다. 그래도 굳이 하고 싶은 걸 찾자면 이 세상의 쓰레기들이 실제로는 어떻게 처리되고 있는지 낱낱이 밝히는 다큐멘터리는 어떨까? 그 외에도 명백하게 잘못된 많은 것들(법률이든 관습이든, 제도든 온갖 걸 다 망라한)을 대중들에게 소개하는 건 채널이라면 어떨까?
책과 글쓰기에 대한 채널도 괜찮겠다. 아니면 게임도 좋고, 생산성에 관련된 채널도 괜찮을 거 같다.
영 끌리지 않는다고 말한 거 치곤 꽤나 하고픈 게 많구나!? 오늘의 '생각을 자극'하는 글귀
규칙적인 게임은 두뇌운동이 될 수 있다.
아이들에게 게임을 금지하지 마라. 오히려 어른들도 같이해야 한다. 규칙적으로 게임을 하는 아이들은 하지 않는 아이들보다 작업 기억력과 충동 조절능력이 뛰어나다. 연구 결과에 따르면 게임은 어른들의 인지능력에도 효과적이다. 게임은 일종의 뇌를 위한 운동이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-20-오늘-많이-사용한-말,-크리에이터가-된다면-운영하고픈-채널.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-20 오늘 많이 사용한 말, 크리에이터가 된다면 운영하고픈 채널.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 20 Feb 2025 11:37:40 GMT</pubDate></item><item><title><![CDATA[2025-02-19 가장 정신 나간 사람, 행복했던 순간]]></title><description><![CDATA[
내가 아는 가장 정신 나간 사람은 누구인가? Who is the craziest person in your life? 생각나는 사람이 좀 있는데, 와 정말 우열을 가리기 어렵다. 최근에 행복했던 순간은? 더베러톡톡 이후 커피챗을 하잔 분이 계셔서 2주 전에 만났는데 말이 너무 잘 통해서 정말 행복했다. 살면서 나랑 생각의 결이 비슷한 사람을 만난 적이 없어서 더 각별한 경험인 듯하다. 계속 연락을 하기로 했는데 아직까진 친하지 않아서 연락이 뜸한 편이다. 얼른 친해질 계기가 생겼으면 좋겠다!
오늘의 '생각을 자극'하는 글귀
인생의 작은 파도는 회복하는 힘을 만들어준다.
힘든 경험이 전부 다 트라우마는 아니다. 평범한 시련과 특별한 시련은 일상생활을 해나가는 능력이 얼마나 심하게, 얼마나 오랫동안 영향을 받았는가에 따라 달라진다. 인생을 통째로 흔드는 고통과 단순한 불편함을 혼동하면 고통을 고소평가하게 되고, 회복탄력성이 약해진다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-19-가장-정신-나간-사람,-행복했던-순간.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-19 가장 정신 나간 사람, 행복했던 순간.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Feb 2025 09:00:34 GMT</pubDate></item><item><title><![CDATA[git 실용 명령어 정리]]></title><description><![CDATA[Git 명령어 정리 파일 - 지속적으로 추가# 사용자 이름 및 이메일 설정
$ git config --global user.name "Your Name"
$ git config --global user.email "your.email@example.com" # Git 설정 확인
$ git config --list
# 새로운 Git 저장소 초기화
$ git init # 기존 저장소 클론
$ git clone &lt;repository_url&gt;
# 현재 디렉토리에 저장소 클론
$ git clone &lt;repository_url&gt; .
# 작업 디렉토리 변경 사항 확인
$ git status # 특정 파일 스테이징
$ git add &lt;file&gt; # 모든 변경 사항 스테이징
$ git add . # 커밋 수행
$ git commit -m "설명 추가"
# 현재 브랜치 확인
$ git branch # 새로운 브랜치 생성
$ git branch &lt;branch_name&gt; # 브랜치 변경 (체크아웃)
$ git checkout &lt;branch_name&gt; # 브랜치 생성 및 이동
$ git checkout -b &lt;branch_name&gt; # 브랜치 생성 및 이동(최신 버전)
$ git switch -c &lt;branch_name&gt; # 병합 전 최신 상태 유지
$ git checkout main
$ git pull origin main # 특정 브랜치를 현재 브랜치에 병합
$ git merge &lt;branch_name&gt;
# 로컬 브랜치 삭제
$ git branch -d &lt;branch_name&gt; # 강제 삭제
$ git branch -D &lt;branch_name&gt; # 원격 브랜치 삭제
$ git push origin --delete &lt;branch_name&gt;
# 원격 저장소 추가
$ git remote add origin &lt;repository_url&gt; # 원격 저장소 목록 확인
$ git remote -v
# 원격 저장소에서 최신 변경 사항 가져오기
$ git pull origin &lt;branch_name&gt; # 로컬 변경 사항 푸시
$ git push origin &lt;branch_name&gt;
# 마지막 커밋 메시지 변경
$ git commit --amend -m "새로운 메시지"
# 특정 파일을 이전 커밋 상태로 복원
$ git checkout &lt;commit_hash&gt; -- &lt;file&gt; # 커밋 전체 되돌리기
$ git revert &lt;commit_hash&gt;
# 마지막 n개의 커밋 수정 (인터랙티브 모드)
$ git rebase -i HEAD~n
# 충돌 발생 시 충돌 파일 확인
$ git status # 충돌 파일을 수정 후 스테이징
$ git add &lt;conflicted_file&gt; # 변경 사항 커밋
$ git commit -m "충돌 해결"
# 충돌이 발생한 경우 충돌 파일 수정 후
$ git add &lt;conflicted_file&gt; # Rebase 계속 진행
$ git rebase --continue # Rebase 중단
$ git rebase --abort
# 현재 브랜치에서 특정 커밋 되돌리기
$ git revert &lt;commit_hash&gt; # 특정 커밋 이후 모든 변경 사항을 되돌리기
$ git reset --hard &lt;commit_hash&gt;
# 로컬에서 되돌리고 원격에 강제 푸시
$ git reset --hard &lt;commit_hash&gt;
$ git push --force
# 태그 생성
$ git tag &lt;tag_name&gt; # 특정 커밋에 태그 추가
$ git tag -a &lt;tag_name&gt; -m "설명" &lt;commit_hash&gt; # 태그 목록 확인
$ git tag # 원격 저장소에 태그 푸시
$ git push origin &lt;tag_name&gt;
# 커밋 로그 확인
$ git log # 한 줄 요약 로그 확인
$ git log --oneline
# 워킹 디렉토리와 마지막 커밋 비교
$ git diff # 두 커밋 비교
$ git diff &lt;commit1&gt; &lt;commit2&gt;
# Git 캐시 삭제 후 다시 추가
$ git rm -r --cached .
$ git add .
$ git commit -m "캐시 초기화"
]]></description><link>https://64etuor.github.io/600_tech-stack/git/git-실용-명령어-정리.html</link><guid isPermaLink="false">600_Tech Stack/git/git 실용 명령어 정리.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Feb 2025 00:47:53 GMT</pubDate></item><item><title><![CDATA[2025-02-18 지금 걸친 가장 비싼 물건, 평생 갖고픈 취미]]></title><description><![CDATA[
지금 몸에 걸친 것 중에서 가장 비싼 물건은? What's the most expensive thing you're wearing now?" 외국에서 산 신발? 굉장히 특이하게 생겼다. 200달러쯤 했던 거 같다. 스쿠버 다이빙을 하러 혼자 여행을 갔는데 공교롭게도 태풍이 오는 바람에 너무 할 게 없어서 쇼핑몰에서 시간을 떼우다가 산 기억이 난다. 사놓고 잘 신지는 않고 맨날 크록스만 신고 다니곤 했다. 아까워서 서울에 갖고 와서 신고 다니는 중… 평생 가지고 싶은 취미는? 어차피 평생 할 취미들은 다 제치고… 갖고 싶은 취미라고 한다면… 운동… 이 아닐까…? 도대체 운동을 어떻게 취미로 하는 건지 이해가 안 되기 때문에… ㅋㅋㅋ 김종국 같이 운동에 중독된 사람들이 헬스장에 많이 보이는데 몹시 부럽다. 책상 앞에 앉아 있는 건 하루 종일도 자신 있는데, 확실히 사람마다의 성향이란 게 있나 보다. 일단 꾸준히 운동을 하곤 있지만 아직도 재미를 붙이는 단계는 아닌 거 같다. 계속 하면 루틴이 되서 좀 나아지겠지 막연한 기대를 하는 중.
오늘의 '생각을 자극'하는 글귀
친구는 무엇이든 양보다는 질을 높여야 한다.
세상은 양을 미화하지만 결국은 질이 중요하다는 사실을 기억하자. 그저 그런 작품을 산더미처럼 만들기보다는 소수의 걸작을 만들어야 성공한다. 많은 지인보다 몇 안 되는 진정한 친구가 행복을 준다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-18-지금-걸친-가장-비싼-물건,-평생-갖고픈-취미.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-18 지금 걸친 가장 비싼 물건, 평생 갖고픈 취미.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 18 Feb 2025 14:30:37 GMT</pubDate></item><item><title><![CDATA[🌐 악명 높은 CORS 개념 & 해결법 - 정리 끝판왕 👏]]></title><description><![CDATA[악명 높은 CORS 에러 메세지 웹 개발을 하다보면 반드시 마주치는 멍멍 같은 에러가 바로 CORS 이다. 웹 개발의 신입 신고식이라고 할 정도로, CORS는 누구나 한 번 정도는 겪게 된다고 해도 과언이 아니다. 프론트엔드 개발자 입장에선 요청 코드를 이상하게 적은것도 아니고, 백엔드 개발자 입장에선 서버 코드나 세팅이 이상한것도 아니다. 모든게 멀쩡한데 왜 요청한 자료에 대한 응답을 시뻘건 에러줄로 확답하는게 문제이다. 🤬 이러한 현상이 일어나는 이유는, 웹 브라우저는 HTTP 요청에 대해서 어떤 요청을 하느냐에 따라 각기 다른 특징을 가지고 있기 때문이다. 요청 방식에 따라 다른 CORS 발생 여부 1. , , 2. XMLHttpRequest, Fetch API 스크립트 → 기본적으로 Same-Or..]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/5_resources/악명-높은-cors-개념-&amp;-해결법-정리-끝판왕.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/5_Resources/악명 높은 CORS 개념 &amp; 해결법 - 정리 끝판왕.md</guid><dc:creator><![CDATA[[[인파_]]]]></dc:creator><pubDate>Tue, 18 Feb 2025 01:27:33 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/6p7bn/btrqLUBlJJT/oO0OJTezjbllLqHy48kXO0/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/6p7bn/btrqLUBlJJT/oO0OJTezjbllLqHy48kXO0/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[클린 아키텍처(Clean Architecture) 개념 및 원칙]]></title><description><![CDATA[개발이란 마치 여러 개의 기반이 되는 블록을 만들어 설계 원칙에 따라 조립하여 완성해 나아가는 과정이라고 생각합니다. 여기서 설계 원칙은 수 많은 디자인 패턴들을 의미하며, 이번 주는 아키텍처 패턴에 속하는 클린 아키텍처에 대해 알아보는 것으로 이번 주 스터디 그룹의 주제를 선정하였습니다. 화자는 실무에서 MVVM 패턴과 클린 아키텍처를 함께 사용 중이나, 이 둘에 대한 설명에 명확한 답변을 할 수 있을지 의문을 가져 이번 기회에 명확히 알아두고자 합니다. 클린 아키텍처를 사용해야 하는 이유 기원 엉클 밥(Robert C. Martin)은 애자일 방법론의 지지자이자, SOLID (객체지향 설계 원칙)의 창시자로 알려져 있습니다. 그는 'Clean code'와 'Clean architecture'등의 책의..]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/5_resources/클린-아키텍처(clean-architecture)-개념-및-원칙.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/5_Resources/클린 아키텍처(Clean Architecture) 개념 및 원칙.md</guid><dc:creator><![CDATA[[[굿햄]]]]></dc:creator><pubDate>Tue, 18 Feb 2025 00:48:43 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/bOh3Wo/btrXn7BTilz/TWwETWquQqz79ndGY9gVc0/img.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/bOh3Wo/btrXn7BTilz/TWwETWquQqz79ndGY9gVc0/img.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[11W - 01_패션 산업 데이터 분석]]></title><description><![CDATA[
pandas.read_csv(), pandas Profiling을 사용하여 데이터 로드 및 EDA(탐색적 데이터 분석) 수행
import pandas as pd
from pandas_profiling import ProfileReport # 데이터 불러오기
df_orders = pd.read_csv("order_data.csv")
df_customers = pd.read_csv("customer_data.csv") # 데이터 개요 출력
print(df_orders.info())
print(df_orders.describe()) # Pandas Profiling 실행
profile = ProfileReport(df_orders, title="주문 데이터 분석", explorative=True) # HTML 리포트 저장 및 확인
profile.to_file("order_data_profile.html") 주문 데이터와 고객 데이터를 merge()를 사용하여 병합 후 날짜 처리
# 주문 데이터와 고객 데이터를 customer_id 기준으로 병합
df = pd.merge(df_orders, df_customers, on="customer_id", how="inner") # 날짜 변환
df["order_date"] = pd.to_datetime(df["order_date"])
df["order_year"] = df["order_date"].dt.year
df["order_month"] = df["order_date"].dt.month # 확인
print(df.head()) 브랜드별, 시즌별, 카테고리별 구매 패턴 분석
import matplotlib.pyplot as plt
import seaborn as sns # 브랜드별 구매 분포
brand_counts = df["brand"].value_counts()
sns.barplot(x=brand_counts.index, y=brand_counts.values)
plt.xticks(rotation=90)
plt.title("브랜드별 구매 분포")
plt.show() # 시즌별 구매 분포
season_counts = df["season"].value_counts()
sns.barplot(x=season_counts.index, y=season_counts.values)
plt.title("시즌별 구매 분포")
plt.show() 브랜드별 평균 가격을 분석하여 가격 정책에 활용
# 브랜드별 평균 가격
brand_price = df.groupby("brand")["price"].mean().sort_values() # 시각화
plt.figure(figsize=(10,5))
sns.barplot(x=brand_price.index, y=brand_price.values)
plt.xticks(rotation=90)
plt.title("브랜드별 평균 가격")
plt.show() RFM 분석을 위해 데이터 전처리 수행
# 고객별 구매 빈도, 총 지출, 마지막 구매 날짜 계산
rfm = df.groupby("customer_id").agg({ "order_date": lambda x: (df["order_date"].max() - x.max()).days, "order_id": "count", "price": "sum"
}).rename(columns={"order_date": "Recency", "order_id": "Frequency", "price": "Monetary"}) # 확인
print(rfm.head()) Min-Max 정규화 후 K-Means로 군집화
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans # 정규화
scaler = MinMaxScaler()
rfm_scaled = scaler.fit_transform(rfm) # K-Means 클러스터링
kmeans = KMeans(n_clusters=4, random_state=42)
rfm["Cluster"] = kmeans.fit_predict(rfm_scaled) # 결과 확인
print(rfm.groupby("Cluster").mean()) 클러스터의 품질을 실루엣 계수로 평가
from sklearn.metrics import silhouette_score sil_score = silhouette_score(rfm_scaled, rfm["Cluster"])
print(f"실루엣 계수: {sil_score}") 거리 기반 군집화 수행
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler # 정규화
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm) # DBSCAN 클러스터링
dbscan = DBSCAN(eps=0.5, min_samples=5)
rfm["DBSCAN_Cluster"] = dbscan.fit_predict(rfm_scaled) # 결과 확인
print(rfm["DBSCAN_Cluster"].value_counts()) 할인율을 기준으로 상태 할당
# 할인율 계산
df["discount_rate"] = 1 - (df["discount_price"] / df["original_price"]) # 할인율에 따라 상태 부여
df["discount_label"] = pd.cut(df["discount_rate"], bins=[0, 0.2, 0.5, 1], labels=["Low", "Medium", "High"]) # 확인
print(df.head()) 고객의 구매 패턴을 HMM을 사용해 모델링
from hmmlearn import hmm
import numpy as np # 은닉 상태 정의 (예: NORMAL, DISCOUNT, OUTLET)
states = ["NORMAL", "DISCOUNT", "OUTLET"] # 관측 상태 정의 (예: 구매 횟수)
observations = df["purchase_count"].values.reshape(-1,1) # HMM 모델 정의
model = hmm.MultinomialHMM(n_components=len(states), n_iter=100, random_state=42)
model.fit(observations) # 상태 예측
hidden_states = model.predict(observations) # 결과 저장
df["HMM_State"] = [states[i] for i in hidden_states] # 확인
print(df.head()) 상태 간 이동 확률을 분석
import numpy as np
from collections import defaultdict # 상태 전이 횟수 계산
transition_counts = defaultdict(lambda: defaultdict(int)) for i in range(len(hidden_states) - 1): transition_counts[hidden_states[i]][hidden_states[i + 1]] += 1 # 전이 확률 계산
transition_matrix = { state: {next_state: transition_counts[state][next_state] / sum(transition_counts[state].values()) for next_state in transition_counts[state]} for state in transition_counts
} # 출력
for state, transitions in transition_matrix.items(): print(f"From {states[state]}: {transitions}") 패션 산업 데이터 분석 (2강) 브랜드별 매출 및 고객 선호도 분석 → 마케팅 최적화
시즌별 트렌드 분석 → 재고 최적화 고객 세분화 및 타겟 마케팅 (4강) K-Means/DBSCAN을 활용한 고객 그룹화
RFM 분석 기반으로 VIP 고객 타겟팅 HMM을 활용한 구매 패턴 예측 (5강) 고객의 할인 선호도를 기반으로 맞춤형 할인 정책 수립
구매 행동 변화 감지 → 전략적 가격 조정 ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/11w-01_패션-산업-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/11W - 01_패션 산업 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Feb 2025 23:57:55 GMT</pubDate></item><item><title><![CDATA[12W - 실습 과제2]]></title><description><![CDATA[“12주차Looker과제결과물.pdf” 함께 참고
1p- 전체데이터와2023년생성된데이터비교
2p-전체데이터와2023년생성된데이터비교, 기본값으로status_item에“Complete”이적용된상태라는 문제. 루커스튜디오를 이용한 정말 간단한 시각화… 라서 따로 피드백은 없다.
<img alt="Pasted image 20250218084451.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250218084451.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/12w-실습-과제2.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/12W - 실습 과제2.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Feb 2025 23:45:32 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250218084451.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250218084451.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[12W - 실습 과제1]]></title><description><![CDATA[import pandas as pd
# EDA 용 함수 생성
def data_inspection(df): print("=== 데이터 기본 정보 ===") print("\n- 데이터 크기:", df.shape) print("\n- 데이터 타입:") print(df.dtypes) print("\n- 결측치 확인:") print(df.isnull().sum()) return df.head() events = pd.read_csv('data_과제\events.csv')
data_inspection(events)
퍼널 데이터 프레임을 만드는 전형적인 함수다. pandas 버전이 올라가면서 원본 데이터프레임에 바로 수정사항을 적용할 경우 경고가 뜬다. copy()로 복사본을 만들어서 진행했다.# [문제] 데이터 전처리를 위한 함수 선언하기
# [목적] 퍼널 데이터프레임을 생성하는 함수 선언
# [데이터] events.csv
# [입력값] 데이터프레임, funnel_stages 목록, event type 컬럼
# [동작] # 1. 데이터프레임에서 funnel stage별 데이터 갯수 count
# 2. count 정보를 기반으로 conversion_rate 컬럼 생성 # funnel_stages = ['product','cart','purchase'] # def : # funnel_df = funnel_dataframe(df = events,
# funnel_stages=funnel_stages,
# event_type_col='event_type')
# funnel_df funnel_stages = ['product','cart','purchase'] def funnel_dataframe(df, funnel_stages, event_type_col): event_counts = df[event_type_col].value_counts().reset_index() event_counts.columns = ['event_type', 'count'] funnel_df = event_counts[event_counts['event_type'].isin(funnel_stages)].copy() funnel_df.loc[:, 'conversion_rate'] = funnel_df['count'] / funnel_df['count'].shift(1) return funnel_df funnel_df = funnel_dataframe(df = events, funnel_stages=funnel_stages, event_type_col='event_type')
funnel_df
퍼널 분석을 위한 피벗 테이블을 생성한다. 실제 스테이지는 3개 이상이지만 데이터를 살펴 보면 집계할 이유가 없는 스테이지라 문제에서 제외된 듯 하다. loc는 이상하게 손에 안 익는다. 이유를 모르겠음.# [목적] # 데이터 전처리 함수 선언 # [데이터] # - events.csv # [순서]
# 1. 원본 events.csv 파일 확인
# 2. 셀 출력 결과물 확인 # 아래 화면면은 기존 데이터 출력 결과 # pd.read_csv('data_과제\events.csv')
# funnel_stages = ['product', 'cart', 'purchase'] # def : # browser_funnel = perform_funnel_analysis(df=events,
# group_by='browser',
# funnel_stages=funnel_stages)
# browser_funnel funnel_stages = ['product', 'cart', 'purchase'] def perform_funnel_analysis(df, group_by, funnel_stages): pivot_table = df.pivot_table(index=group_by, columns='event_type', values='id', aggfunc='count', fill_value=0) result = pivot_table[funnel_stages].copy() result.loc[:, 'product_to_cart'] = result['cart'] / result['product'] result.loc[:, 'cart_to_purchase'] = result['purchase'] / result['cart'] result.loc[:, 'overall_conversion'] = result['purchase'] / result['product'] return result browser_funnel = perform_funnel_analysis(df=events, group_by='browser', funnel_stages=funnel_stages)
browser_funnel
# [목적]
# 데이터 간단 탐색용 함수 선언 # [데이터]
# Q2의 전처리 데이터
# Q2에서 데이터를 전처리하지 못했을 경우, Q2_result.csv 파일 사용 # [동작]
# 데이터프레임과 정렬 기준 컬럼 입력 시,
# 해당 컬럼 기준 최상위 데이터와 최하위 데이터를 차례로 출력 # def : # data_analysis(df = browser_funnel,
# sort_column = 'product') def data_analysis(df, sort_column): print("\n================================================================================") print(f"{sort_column} 값이 가장 큰 데이터 정보") print(df.sort_values(by=sort_column, ascending=False).head(1)) print("\n================================================================================") print(f"{sort_column} 값이 가장 작은 데이터 정보") print(df.sort_values(by=sort_column, ascending=True).head(1)) data_analysis(df = browser_funnel, sort_column = 'product')
문제가 너무 불친절하다. ㅋㅋ 이제는 너무 익숙해서 알아서 하긴 하지만.# [목적]
# RFM 분석을 위한 데이터프레임 전처리 # [데이터]
# order_detail.csv df_order_detail = pd.read_csv('data_과제\order_detail.csv') tmp_df = df_order_detail[['고객번호', '주문번호', '주문일시', '총주문금액_판매가']].copy()
tmp_df['주문일자'] = pd.to_datetime(tmp_df['주문일시']).dt.date
tmp_df['주문일자'] = pd.to_datetime(tmp_df['주문일자'])
tmp_df = tmp_df[['고객번호', '주문번호', '주문일자', '총주문금액_판매가']] print('\n================================================================================')
print('기존')
print(df_order_detail.head(10))
print('\n================================================================================')
print('전처리결과')
print(tmp_df.head(10))
RFM 계산을 위해 customerNum을 그룹으로 묶고 Recency, Frequency, Monetary를 계산했다. 기준일인 date_info와 가장 최근 구매일자의 차이를 구하기 위해 lambda x: (date_info - max(x)).days를 사용했다.# [목적]
# 고객별 recency, frequency, monetary 계산
# recency(최근 주문일자) : 기준일 - 마지막 주문일
# frequency : 주문 횟수
# monetary : 총 사용금액 # [데이터]
# Q4에서 생성한 데이터프레임
# Q4에서 데이터프레임을 생성하지 못한 경우, 제공된 Q4_result.csv 사용 # import datetime as dt
# date_info = dt.datetime(2024,9,1) #데이터 추출 기준 8월 마감 기준 # def : # tmp_df = rfm_maker(df=tmp_df, date_info = date_info,
# col_customerNum='고객번호', col_orderDate = '주문일자', col_orderNum = '주문번호', col_money = '총주문금액_판매가') # tmp_df import datetime as dt
date_info = dt.datetime(2024,9,1) #데이터 추출 기준 8월 마감 기준 def rfm_maker(df, date_info, col_customerNum, col_orderDate, col_orderNum, col_money): rfm = df.groupby(col_customerNum).agg({ col_orderDate: lambda x: (date_info - max(x)).days, col_orderNum: 'count', col_money: 'sum' }).reset_index() rfm.columns = [col_customerNum, 'recency', 'frequency', 'monetary'] return rfm rfm_df = rfm_maker(df=tmp_df, date_info = date_info, col_customerNum='고객번호', col_orderDate = '주문일자', col_orderNum = '주문번호', col_money = '총주문금액_판매가') rfm_df
이건 답지 출력 결과를 보고 추측하는 수 밖에… customers_data.csv를 보면 null값이 꽤 많다. 고로 기존에 만든 데이터프레임에 고객번호를 기준으로 inner 조인해서 출력.# [목적]
# RFM 분석을 위한 데이터 병합 # [데이터]
# (1) Q5 데이터 =&gt; 풀지 못한 경우 제공된 Q5_result.csv 사용
# (2) customer_data.csv # [동작]
# 데이터 형태 및 데이터 크기 정보를 바탕으로 merge 방식 선택
# 자료형 정보도 참고 customers = pd.read_csv('data_과제/customer_data.csv')
display(customers) # 병합 결과
merge_df = customers.merge(rfm_df, on='고객번호', how='inner') merge_df
데이터만 뽑으면 사실 시각화는 어려울 게 없다. 차트의 kind value를 인수로 빼서 처리해 보려고 했는데 왜인지 잘 안 돼서 그냥 값으로 넣었다. 왜인지 아직도 모르겠는데 나중에 다시 한 번 시도해보면 될 듯.import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False
from sklearn.preprocessing import StandardScaler
# [문제]
# Q7. scatter 시각화 메서드
# 입력 예시를 참고하여 메서드의 입력인자 구성 # [데이터]
# Q6 데이터
# 데이터를 생성하지 못한 경우, 제공된 Q6_result.csv 사용 # rfm_class = rfm_analysis(merge_df) # display(rfm_class.df) # rfm_class.Visual(col_x = '나이',
# col_y = 'frequency',
# color = 'monetary',
# kind='scatter') class rfm_analysis: def __init__(self, df): self.df = df self.scaler = StandardScaler() def Visual(self, col_x, col_y, color, kind='scatter'): plt.figure(figsize=(6, 6)) scatter = plt.scatter(self.df[col_x], self.df[col_y], c=self.df[color], cmap='viridis', alpha=1, s=50) cbar = plt.colorbar(scatter) cbar.set_label(color, rotation=0, y=1.05) plt.xlabel(col_x) plt.ylabel(col_y) plt.grid(False) plt.tight_layout() plt.show() rfm_class = rfm_analysis(merge_df) display(rfm_class.df) rfm_class.Visual(col_x = '나이', col_y = 'frequency', color = 'monetary', kind='scatter')
# [문제]
# Q8. Scaling 메서드 # [Scaler]
# StandardScaler 사용 # rfm_class.Scaler(column_list = ['나이', 'frequency', 'monetary', 'recency'])
class rfm_analysis: def __init__(self, df): self.df = df self.scaler = StandardScaler() self.df_scaled = None def Scaler(self, column_list): scaled_data = self.scaler.fit_transform(self.df[column_list]) self.df_scaled = pd.DataFrame(scaled_data, columns=column_list, index=self.df.index) print('='*70) print("스케일링 수행 전") display(self.df[column_list]) print('='*70) print("스케일링 수행 후") display(self.df_scaled) return self.df_scaled def Visual(self, col_x, col_y, color, kind='scatter'): plt.figure(figsize=(6, 6)) scatter = plt.scatter(self.df[col_x], self.df[col_y], c=self.df[color], cmap='viridis', alpha=1, s=50) cbar = plt.colorbar(scatter) cbar.set_label(color, rotation=0, y=1.05) plt.xlabel(col_x) plt.ylabel(col_y) plt.grid(False) plt.tight_layout() plt.show() rfm_class = rfm_analysis(merge_df) rfm_class.Scaler(column_list = ['나이', 'frequency', 'monetary', 'recency']) DBSCAN을 처음 써보는 거 같다. <a data-href="DBSCAN(밀도 기반 클러스터링)" href="https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/dbscan(밀도-기반-클러스터링).html#_0" class="internal-link" target="_self" rel="noopener nofollow">DBSCAN(밀도 기반 클러스터링)</a> 정리 자료를 추가적으로 살펴 봤다. 사실 라이브러리를 깔짝 써보는 정도라 뭔가 큰 이해가 있었다고는 느껴지지 않는다. 왜 필요한지, 언제 쓰는지 좀 더 탐구해 봐야 할 듯.# [데이터]
# Q8 스케일링 데이터
# 데이터를 만들지 못한 경우, 제공된 Q8_result.csv 활용
from sklearn.cluster import DBSCAN tmp_df = rfm_class.df_scaled
tmp_df
# [Clustering 방법]
# DBSCAN # [동작]
# 1. 분류 결과 표현
# 2. 분류 결과 시각화
# dbscan_analysis(df=tmp_df,
# opt_eps=0.3, opt_min_samples=60) def dbscan_analysis(df, opt_eps, opt_min_samples): print('='*70) print('분류 결과') dbscan = DBSCAN(eps=opt_eps, min_samples=opt_min_samples) clusters = dbscan.fit_predict(df) result_df = df.copy() result_df['cluster'] = clusters display(result_df) plt.figure(figsize=(8, 6)) cluster_counts = result_df['cluster'].value_counts().sort_index() cluster_counts.plot(kind='bar') plt.title('분류 결과 시각화') plt.xlabel('cluster') plt.ylabel('') plt.show() return dbscan_analysis(df=tmp_df, opt_eps=0.3, opt_min_samples=60)
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/12w-실습-과제1.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/12W - 실습 과제1.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[2025-02-17 바꾸고 싶은 일, 부자의 정의]]></title><description><![CDATA[
오늘 하루 벌어진 일 중에서 바꾸고 싶은 게 있다면? If you could change something about today, what would it be? 그다지 없다네. ‘부자'하면 뭐가 떠올라? 빌 게이츠가 가장 먼저 떠오른다. 그는 최근에 Linkedin에서 The Brilliant Teachers Who Shaped Me – Bill Gates 라는 제목의 아티클을 발행했는데 인상 깊게 읽었다. 이 글은 본인을 Extremely lucky kid 라고 소개하며 시작된다. 지금의 자신이 있게 도와준 여러 사람에게 감사를 전한다. 글에 표현된 겸손함을 칭찬하는 게 아니다. 내가 그를 부자라고 생각하는 이유는 ‘결핍’이 느껴지지 않기 때문이다. 결핍이 없는 사람은 항상 감사하며 살아 간다. 내가 ‘부자’라는 단어를 듣고 이 사람을 떠올린 데에는 물론 그의 재산과 유명세도 한몫 했겠지만 뒤의 이유가 지분은 더 클 것이다.
명예에 집착하고 결핍이 있는 사람은 감사할 줄 모르고, 돈에 집착하고 결핍이 있는 사람은 베풀 줄 모르고, 사랑에 집착하고 결핍된 사람은 신뢰할 줄을 모른다.
결핍은 본능적으로 무언가를 움켜쥐게 만든다. 명예가 부족한 사람은 끊임없이 스스로를 증명하려 하고, 돈이 부족한 사람은 끝없이 더 많은 것을 가지려 하며, 사랑이 부족한 사람은 상대를 조종하려 한다.
반대로, 결핍이 없는 사람은 흐름을 믿고 자연스럽게 받아들인다. 명예가 주어지면 감사하지만 집착하지 않고, 가진 것을 흔쾌히 나눌 줄 알며, 사랑을 받아도 소유하려 하지 않는다.
그래서 나는 '부자'라는 단어를 들으면, 단순한 경제적 풍요를 넘어선 어떤 이상적인 정신의 상태를 떠올린다. 결핍이 없는 사람, 즉 감사할 줄 알고, 베풀 줄 알고, 신뢰할 줄 아는 사람.
이 상태에 정확히 부합하는 사람이 바로 빌 게이츠 아닐까.
물론 이건 어디까지나 나의 개인적인 해석에 불과하지만.
오늘의 '생각을 자극'하는 글귀
비판적 사고는 다양한 정보를 어떻게 취합하느냐에 달려 있다.
균형 잡힌 논쟁에서 양쪽의 무게가 똑같지는 않다. 더 강력한 증거 쪽으로 기운다. 비판적 사고는 자신의 견해를 다 표현하는 게 아니다. 자신의 선입견을 인식하고 희망이나 신념과는 엄연히 다른 사실 정보를 진지하게 고려해보는 것이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-17-바꾸고-싶은-일,-부자의-정의.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-17 바꾸고 싶은 일, 부자의 정의.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 17 Feb 2025 11:50:36 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 4주차 회고]]></title><description><![CDATA[ 몸 상태가 최악… 피로가 안 풀린다. 감기까지 걸려서 영 몽롱한 기분. 몸 상태가 좋아질 때까진 무리하지 말고 충분한 휴식을 취해야 겠다.
토요일에는 도니 님이 준비하는 사업 아이템을 직접 체험해 볼 수 있었다. 정말 재밌는 아이디어고 시장에 먹힐 만한 아이템이라고 생각했다. 다만 내가 느꼈던 아쉬운 점 등을 피드백으로 자세히 적어서 전달했고 다음에 만나서 이에 대한 얘기를 나누기로 했다. 아주 흥미진진한 대화가 되지 않을까 싶다. 도니 님과 대화를 아직까진 많이 나누지는 않았지만 서로 닮은 점이 많다는 걸 점점 더 발견하고 있다. 나이도 같다니 참 신기한 일.
다음 주 수요일에 더베러 신년회에서도 만나고 싶었던 사람들을 잔뜩 만날 예정이라 요새 아주 대화 복이 터진 기분이다. 몸 상태가 조금만 더 좋았다면 하는 아쉬움이 있다.우연찮게 토요일에는 취업을 준비하는 사람들에게 조언을 줄 기회가 있었는데, 나를 비롯해 다른 현업자들이 공통적으로 하는 얘기가 있었다. 포트폴리오에 ‘어떤 기능’을 구현했고, 기술을 뭘 사용했고 하는 뻔한 얘기를 쓰지 말고(이건 경력자용 포트폴리오에서나 유효하다. 장황하게 쓰고 부풀려 봐야 신입이 입사하자마자 일을 잘할 거라고 아무도 기대 안 한다.) 프로젝트 협업 과정과 문제 해결 과정을 묘사하는데 집중하라는 얘기. 회사에서 일하려면 가장 필요한 1순위 능력이 바로 커뮤니케이션 능력이다. 당연하지만 커뮤니케이션이 안 되는 사람은 거를 타순 1순위이고 이걸 거르는 장치는 곳곳에 있다. 아 뭐, 똑똑한 젊은 친구들은 다들 알아서 잘 하겠지만, 의외로 이런 실수가 너무 흔하다.오늘은 회고 전에 기분 전환 겸 더 글로우 2025 티켓 2일권을 예매했다. 잔나비, 이승윤, 쏜애플, 넬, 장기하 등등 내가 좋아하는 가수들이 엄청나게 많이 온다. 그 외 라인업도 너무 좋다. 자안뜩 기대중. 진짜 자아아아아아아아아안뜩 기대중. SW 부트캠프:
간단한 Linux 입문 강의 말고 특별히 배운 내용은 많지 않다. 1차 기반기술 프로젝트 발표 기간이라 거의 프로젝트 마무리에 집중했다. 우여곡절이 많았지만 어찌 정리는 한 모양새. 여러가지 할 말이 많지만, 이에 대한 회고는 따로 정리하기로 한다.
프로젝트 발표 직전까지 발생한 이슈를 해결한다고 정신이 없었는데, 발표 시간이 되서 다른 팀들의 프로젝트 결과를 보고 입이 딱 벌어졌다. 다들 너무 재밌는 프로젝트들을 했고 결과물도 흥미진진했다. 아주 흥미롭게 지켜봤고 앞으로의 발전이 더 기대됐다.
개인적으로는 이번 프로젝트에서는 SQL 프로시저를 씹고 뜯고 맛보고 다 해본 게 재밌었다. 기능 외적인 부분은 가급적이면 팀원들이 자율적으로 선택해서 진행하는 방향으로 가려고 했는데 아무래도 아쉬운 부분들이 있다. 팀 차원에서의 회고를 통해 그런 부분을 짚고 개선해 나가면 아주 좋은 피드백 루프가 될 듯.(사실 스크럼 회의도 이걸 위해 한 거긴 하지만 일이 ‘진행’ 자체가 안되니 원하던 목적과 다르게 운영된 감이 있다.)
발표 후에는 Linux와 SQL 평가 시험이 있었다. 시험이 있는 지 전혀 모르고 있었는데 그냥 별 생각 없이 봤다. 결과는 바로 나왔는데 의외로 점수가 높게 나왔다. 기분이라도 좋아졌으니 아무튼 개이득 데이터 분석:
Live Study 준비 기간이라 강의는 없었다. 대신 토요일에 오프라인 미팅을 통해 데이터 분석 현직자들과의 만남이 있었는데, 네트워킹을 통해 좋은 경험을 쌓을 수가 있었다. 특히 좋았던 강의 Andy 강사님을 직접 만나서 의견을 나눴는데, 앞으로도 종종 관계를 지속하리란 생각이 든다. 시간이 날 때 커피챗으로 못 나눈 대화를 나눠 봐야 겠다.
루커스튜디오로 내 시간 관리 대시보드를 이전할 계획이었는데 결국 시도도 못했다. 구상은 있으니 천천히 정리해서 시작해 봐야겠다. 목표: 과일과 채소를 식단에 더 많이 반영한다.
결과: 식단은 아예 신경도 못 썼다. 다음 주부터 저녁 식단을 하기로 준비해 놨다. <img alt="Pasted image 20250216225937.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250216225937.png" target="_self"><br>
<img alt="Pasted image 20250216225952.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250216225952.png" target="_self">
프로젝트에서 발생했던 문제를 그래도 빠르게 잘 처리했다.
꾸준하게 공부를 한 건 좋은데 과연 실속이 있었는가 점검해 보자.
오프라인 만남으로 지속적인 네트워킹을 하고 있는 건 긍정적이다. 컨디션 관리 실패, 식단도 시작 못함
술을 또 여러 번 먹었다… 2달 차에 접어드니 약간 긴장이 풀린 건가? 다시 정신 차리자.
루커스튜디오 계획이 밀렸다. mariadb SQL 프로시저를 이리저리 많이 사용했다. 객체 지향처럼 프로시저를 모듈화해서 전부 분해하고 조립해서 원하는 로직을 구현했는데 꽤나 아주 여러모로 재밌었다.
데이터 분석가로 취업을 할 생각은 없지만, 현업에서의 재미난 얘기들을 많이 들을 수 있었다. 사실 좀 더 이 분야가 심화되면 ‘사주팔자’도 완전한 데이터 중심으로 재편될 거란 생각이 갑자기 들었었다. 아주 재밌겠다!
‘주도적인’ 인재가 어느 분야에서든지 부족하다는 하소연이 많이 들린다. 사실 현 사회에서는 좀 당연한 결과이긴 하지만… 따라서 시장에서 나의 경쟁력을 높이는 방법은 너무 쉽게 느껴진다만 쉬운 게 쉬운 게 아니긴 하지. 네트워킹 강화도 이번 해의 주요 목표 중의 하나다. 가치와 철학이 비슷한 사람들과 만난다는 건 그 자체로도 너무 기쁜 일이지만, 앞으로 내가 준비하는 사업이나 기타 활동에도 큰 도움이 될 거 같다. 진작 좀 할 걸이라는 생각도 들지만 뭐 better late than never. 목표: 저녁 식단 시작, 충분한 휴식으로 컨디션 회복이 최우선
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-4주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 4주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 16 Feb 2025 16:02:39 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250216225937.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250216225937.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[한화 BEYOND SW부트캠프 3주차 회고]]></title><description><![CDATA[ 정말 힘들고 바쁜 한 주였다. 그 많던 밀린 일을 다 처리한 나에게 박수를 쳐주고 싶다.(짝짝짝)
월요일, 화요일은 추위를 이기지 못하고 새벽 운동을 쉬었지만 막상 그거까지 했으면 더 녹초가 되었겠다는 생각도 든다. PT를 시작하기도 했고 이것저것 일이 많다보니 잠을 제대로 잔 날이 없다. 결국 주말에 완전히 퍼져서 잠을 많이 잤다. 휴식을 적절하게 분배하는 것도 지혜라는 걸 새삼 깨달은 셈. 조금 더 효율적으로 시간을 사용했다면 이 지경은 되지 않았을 거라고도 생각한다. 앞으로 경험이 쌓이면 뭐 점점 더 능숙해질 테니 뭐 조급하게 생각하진 말자. SW 부트캠프:
SQL의 Syntax를 실습하는 시간이 많았다. Store Procedure, Stored Function, Trigger 등은 상당히 재밌었다. 앞으로 많이 사용할 기능이기도 하고 응용 방법이 다양해서 생각하고 고민하는 재미를 주는 면이 있다. 사실 Python으로 데이터를 조작할 때와 로직은 정확히 똑같아서 크게 혼란스러운 부분은 없다. 다만 SQL Query를 짤 때도 나도 모르게 자꾸 파이썬 문법을 작성하게 되는데 아마 여러 번 연습을 거치면 자연스럽게 나아질 부분이다. 이후 수업에서는 DB 모델링과 비즈니스 규칙을 적용한 논리 ERD, 물리 ERD 작성에 대한 실습을 했다. 번외로 SQL의 난수 생성 방식이 궁금해서 찾아봤는데 그냥 seed 값에 따른 예측 가능성이 존재하는 PRNG 방식을 택하고 있었다. 갑자기 든 생각이었는데 현실 세계의 무작위와 디지털 세계의 무작위는 과연 정말로 무작위한 것인가? 라는 주제로 토론을 하면 이야기거리가 무궁무진할 듯!
앱과 어플리케이션을 여러 개 만들어 봤지만 다 이론 공부 없이 독학으로 만든 거라 모델링 이론은 아는 것이 없다. 논리ERD는 정말 완전하게 생소한 것이었다. 왜 이게 필요한 지 이해하려고 했으나 사실 아직도 이게 왜 필요한 지 전혀 모르겠다.(…)
아무튼 실습 이후로 본격적인 프로젝트 윤곽 잡기와 강사님의 피드백을 거치고 금요일 수업까지 마무리됐다. 집에 가기 전 프로젝트 팀원들과 짧은 회의를 했고, 주말에는 학습을 위해 팀원들 제각기 자신의 방식으로 ERD를 짜보기로 했다. 난 주말에 일정이 좀 많았던 터라 금요일 밤에 미리 작성을 끝냈다.
프로젝트 팀으로 뭉친 지 얼마 되지 않았지만 내 예상보다 빠르게 제자리를 찾아가는 기분이다. 솔직한 바람으로는 팀원들이 서로 더 많이 부딪히고 의견이 갈렸으면 하는 생각인데, 나이 많은 사람이 떡 버티고 있으니 그러지 못하는 거 같기도 하고 좀 아쉬운 부분.
팀원들에게 여러 가지 알려주고 싶은 것들이 많다 보니 중간 중간 넌지시 팀원들에게 힌트처럼 던지는 단어들이 있는데 input &amp; output이 실행되지 않으면 아무래도 또 같은 말을 반복하게 된다. 사람은 이렇게 꼰대가 되어가나 보다라고 새삼 느끼는 중.
나이 들면 사람은 다 똑같아진다는 말이 정말 틀린 거 하나 없다. 데이터 분석:
이번 주의 강의는 루커 이커머스 데이터로 각종 분석 실습을 하고 루커 스튜디오로 시각화를 하는 것까지 포함되었다. 퍼널 분석이니 코호트니 계속 반복되는 분석(그만큼 중요하다는 얘기겠지만)이라 색다를 건 없었고, 이전과 달랐던 건 K-Means 대신 DBSCAN 알고리즘을 사용해서 클러스터링을 진행한 점? 비선형적이고 비구형인 클러스터를 찾는데 이점을 가진 알고리즘이라고 한다. 또 반드시 클러스터에 데이터를 배정해야 하는 K-Means와는 달리 DBSCAN은 이상치(Outlier) 탐지가 가능한 것도 하나의 장점. 클러스터 크기가 달라도 쓸 수 있다 보니 막(?) 쓰기 좋을 거 같다는 생각을 한다. (‘일단 해보고 안되면 말고’는 최선의 실행 전략이다.)
쓰다 보니 떠오른 것인데 이번에 도니님과의 커피챗에서 Outlier에 대한 얘기를 했다. ‘이상치’. 집단에서 멀리 떨어진 것들을 지칭하는 이런 단어를 불편해 하는 사람도, 그렇지 않은 사람도 있다. 그러나 현실 세계에서 때로는 이 이상치가 집단과 유행을 주도하기도 하는 법이다. 늘 시대는 이행하고 새로운 표준이 정립된다. 기존의 패러다임을 깨고 새로운 기준을 세우는 것을 우리는 ‘혁신’이라고 부른다. 회사를 다니다 보면 이 혁신이라는 단어가 얼마나 자주 남용 되는지 볼 수 있는데, 그 현상이 역설적으로 회사에 혁신이 없다는 사실을 방증한다.
아무튼 잡설이었고, 과제는 큰 무리 없이 마무리했다. 파이썬으로 EDA하는 건 점점 능숙해지고 분석도 자꾸 반복하니 늘 수 밖에 없다. 따라서 어떤 가설을 세우고 어떻게 검증하느냐 하는 방법론적인 부분이 오히려 데이터 분석에서의 핵심이 아닐까 한다. (기술적인 측면이야 사실 AI로 어떻게든 해결 가능한 부분이고) 루커 스튜디오 시각화 과제는 난이도가 너무 낮아서 오히려 맥이 빠진 수준. 기존에 만들었던 태블로 대시보드를 루커 스튜디오로 이식하는 작업을 하면서 모자란 학습 경험치를 채워보면 되겠다는 생각을 한다. 더베러톡톡 제안이 왔을 때는 사실 할 일이 많아서 미루거나 사양하려고 했는데 그 순간 구요한 교수님의 ‘2주 뒤에 뵙겠습니다.’ 멘트가 딱 떠올랐다. 2주라는 ‘정해진 기간’에 결과물을 만들 수 있도록 자신을 단속하고 채찍질하는 아주 유용한 방법이라고 생각하던 차였다. 공감과 생각만으론 아무런 일도 일어나지 않는다. 내가 또 변명을 찾기 전에 빠르게 결단을 내렸다. 크릿님의 제안에 대뜸 알겠다고 답변을 하고 이후에 자료 준비를 시작했다.
항상 생각이 많으니 할 얘기는 많았다. 다만 이제 막 이 세계에 발을 들인 시간 관리의 ‘뉴비’이자 천성적인 게으름뱅이에 불과한 내가 다른 사람들 앞에서 내 시간 관리법과 그걸 위해 개발한 툴에 대해 얘기한다는 게 정말 너무나 어색했다. 다만 이미 하기로 한 일을 무를 수는 없으니 최선을 다해 준비할 뿐이고 내가 모자란 부분은 다른 진행자 분이 채워 주리라 막연히 기대할 뿐이었다.
나름대로 이야기의 기승전결, 간략한 소개에서 언급한 단어들과 내가 전하고 싶은 메세지를 잘 매칭시켜서 이야기를 준비했다. 중간중간 넣을 유머도 미리 다 짜놨다. 그리고 특히 맘에 들었던 건 시간 ‘도망자’에서 ‘추격자’가 되었다고 적은 카피라이트와 ‘탈주’로 대변되던 내 인생이 어떻게 주도적인 성질로 변하게 되었는지 마지막에 서로 매칭되는 부분이었다. 아주 훌륭한 서사라고 생각했고 지금 생각해도 그 평가는 유효하다. 다만 한 가지 간과한 사실이 있었다.
생각과 말의 시간은 다르게 흐른다. 이 교훈을 잊지 못할 거 같다.
내가 머리 속에서 시뮬레이션 했을 땐 분명히 1시간 정도면 전부 진행할 수 있는 분량이었다. 사전 회의에서 앤드류 님이 ‘2시간 짜리 분량인데요’ 라고 말하셨을 때도 약간 갸우뚱했다.
진행시간을 체크하기 위해 시각 자료로 사용한 피그잼 보드에 시계를 달아 놓았는데, 세미나를 시작한 지 5분 만에 완전히 X됐음을 직감했다. 내가 머리 속으로 산정한 시간보다 현실 시간은 3배 이상 빠르게 흘렀다. 즉석에서 모든 스토리를 수정해야 했다. 중요도가 밀리는 자료들은 죄다 스킵하고, 준비한 유머도 다 갖다 버렸다. 어떻게든 말이 되게 끼워 맞추려고 그야말로 “두뇌 풀가동”이라는 느낌. 어찌 저찌 시간은 정확하게 맞춰서 끝냈는데 내가 뭐라고 했는지 아무 기억도 나질 않았다. 채팅창 한 번을 볼 여유가 없이 계속 떠들었으니 꼴이 참 우스웠겠구나 짐작만 할 뿐이다. 아무튼 그렇게 내 자신의 의도와는 완전히 빗나갔지만 큰 사고 없이 마무리가 되었고, 그 후로도 응원하고 격려해주는 분이 많아서 한시름 놓았다. 참 착한 사람들 같으니라고.처음엔 청중으로 20분 정도가 오지 않을까 생각했는데 50분이 넘게 와주셔서 너무 감사하고 죄송할 따름. 다음에 또 비슷한 기회가 생긴다면 변인 통제를 수월하게 할 수 있겠다는 자신감은 생겼다. 뭐든 처음이 어려운 법이다. 회사에서 회의를 진행하는 거랑은 또 완전히 다른 세계!
아무튼 이번 더베러톡톡은 다시 없을 아주 값진 경험이 되었다. 배움의 기회도 된 것만으로도 감사할 지경인데, 이후에 뜻밖의 제안을 해주시는 분들도 계셨다. 커피챗을 통해 좋은 친구도 생기고 또 다른 여러 약속이 잡혔다. 내가 만든 툴을 다른 사람들도 직접 만들 수 있게 클래스를 열자는 제안도 있었는데 더베러톡톡 중에 사람들에게 참여 의사를 물으니 의외로 호응이 있었던 것도 놀랍다. 아무튼 굉장히 놀랍고 신비한 경험이었고, 사람은 확실히 서로의 상호작용에서 더욱 발전한다고 느끼게 된 중요한 사건이었다고 자평하고 싶다.
목표: 더베러 톡톡 성공적인 마무리
결과: 결과는 미흡했으나 성과 자체는 막대하다. <img alt="Pasted image 20250209164807.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250209164807.png" target="_self"><br>
<img alt="Pasted image 20250209164825.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250209164825.png" target="_self">
더베러톡톡을 통해 많은 교훈을 얻었다.
운동도 꾸준히 하고 있다.
술을 (이전에 비해) 많이 줄였다.
수업 시간에 가르쳐 주는 것외로 추가 자료 조사를 많이 했다. 휴식 시간을 일정에 적절히 분배하자. 무리해서 퍼지면 오히려 아낀 시간이 다 날아간다.
채소 섭취가 너무나 적다. 단백질과 채소 섭취를 늘리자.
식단…을 하기 싫지만 해야 할 필요성을 계속 느낀다. 조금씩 변화시켜 보자.(언제 배에 이렇게 살이 포동포동 찼는지 모르겠다.)
넛지 독서 마무리가 거의 한달을 밀렸다. 100 페이지쯤 남은 거 같은데 천천히 소화시켜 봐야겠다. 기회는 항상 어디에나 있다. 아는 만큼 보이고, 행하는 만큼 얻는다. 그리고 발전의 빠른 방향은 상호작용이다. 혼자 굴 안에 갇혀 있지 말자.
네트워킹의 힘을 간과하지 말자. 자신의 힘만으로 성공하겠다는 것도 어찌 보면 자만의 일종이다. 사람을 더 많이 만날 것이고, 더 많은 얘기를 나눌 것이다. 한적한 곳을 선호해서 서울을 무척이나 싫어하고 평생 피해 왔는데 어찌저찌 지금 서울에 돌아와 보니 여긴 그냥 무슨 기회의 땅이고 노다지다. 호미 들고 금 캐러 가자스라. 목표: 과일과 채소를 식단에 더 많이 반영한다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-3주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 3주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 16 Feb 2025 14:01:46 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250209164807.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250209164807.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-16 최근에 간 공연, 내게 영향을 준 사람]]></title><description><![CDATA[
"마지막으로 가본 공연이나 콘서트는? What was the last performance or concert you went to?" 사람이 붐비는 걸 극도로 싫어해서 공연이나 콘서트는 잘 가지 않는다. 그나마 재작년 세종에서 열렸던 축제에서 본 공연이 마지막 관람이다.
칼든강도와 넬이 온다는 소식을 듣고 친구랑 같이 공연을 보러 갔는데, 그 외의 다른 가수들과 밴드들의 오프닝 무대도 너무 좋았던 기억이 난다. 여기서 ‘실리카겔’이라는 밴드를 발견했다. 정말 멋진 밴드를 우연히 만나서 아주 기뻤다.
킨더가든 님의 목 상태가 안 좋았던 터라 킨더조이 무대는 살짝 아쉬웠지만, 넬은 그런 아쉬움을 싹 녹여 버렸다. 살면서 그렇게 흥분했던 적이 또 있나 싶을 정도로 들떴다. 그러고 보면 넬의 음악을 아주 어려서부터 지금까지 쭉 좋아하고 있는데 콘서트를 한 번 안 간 것도 신기한 일이다. 완전히 만취한 기분으로 김종완 님이 뭘 부르든 다 따라 부르고 있었다. 음악이 가진 힘이 이렇게나 크다는 걸 몸으로 확인한 느낌. 앞으로는 서울에 있을테니 문화 생활 좀 해야겠다! 라고 쓴 김에 바로 예매 ㅋㅋ
더글로우 2025 2일권 티켓을 예매했는데 라인업이 무쳐부렸다. 잔뜩 기대중. 𝟎𝟑.𝟐𝟗(𝐒𝐚𝐭)
✦ALI 알리 @ali.love.music.and.dance
✧BABO 바보 ᴺᴱᵂ @bandbabo
✦BAND NAH 나상현씨밴드 @bandnah
✧Cosmo's Midnight 코스모스 미드나잇 ᴺᴱᵂ @cosmos_midnight
✧deca joins 데카 조인스 ᴺᴱᵂ @decajoins
✦Dragon Pony 드래곤포니 @dragonpony
✦JANNABI 잔나비 @bandjannabi
✦LEE SEUNG YOON 이승윤 @bgsmsyl
✦MRCH 윤마치 @yooonmarch
✦TOUCHED 터치드 @touched_official
𝟎𝟑.𝟑𝟎(𝐒𝐮𝐧)
✧Billyrrom 빌리롬 ᴺᴱᵂ @billyrrom
✦Chang Kiha 장기하 @kihachang
✦Damons year 데이먼스 이어 @littlemushydickens
✦HANRORO 한로로 @hanr0r0
✦jisokuryClub 지소쿠리클럽 @jisokuryclub
✧Marrakech 마라케시 ᴺᴱᵂ @bandmarrakech
✦NELL 넬 @spacebohemians
✦Redoor 리도어 @band_redoor
✦THORNAPPLE 쏜애플 @thornapple_official
✦YONLAPA 욘라파 @yonlapa 너에게 가장 큰 영향을 준 사람은 누구야? 어머니가 내 마음 속에 안 계셨다면, 나는 아직도 추락하고 있지 않았을까.
어머니의 시에 ‘무언으로 더 많은 말을 하는 당신’이라는 구절이 있는데, 본인이 딱 그런 분이셨다. 아무 것도 강요하지 않으셨고, 항상 행동으로써 사람이 어떻게 살아가야 하는지를 보여주셨다. 엄마가 우리 엄마라서 정말 다행이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-16-최근에-간-공연,-내게-영향을-준-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-16 최근에 간 공연, 내게 영향을 준 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 16 Feb 2025 13:36:33 GMT</pubDate></item><item><title><![CDATA[2025-02-15 상처받은 마음 치유법, 사과하고 싶은 사람]]></title><description><![CDATA[
상처받은 마음을 치유하는 나만의 방법을 적어보자 Write down the cure for a broken heart" 금요일 날 PT를 받다가 기구에 정강이가 살짝 찍혔다. 다행히 뼈를 다친 건 아니고 피부와 살이 철판 모서리에 찍혀서 피가 났는데, 대수롭지 않은 상처였지만 트레이너 분은 안절부절 못하는 티가 났다. 난 정말 아무렇지도 않았으니 적당히 처치하고 말았지만.
고통과 상처는 크기는 상대적으로만 측정이 가능하다. 큰 고통을 겪었던 사람에게 작은 고통이 그다지 대수롭지 않게 느껴지는 거처럼. 굳이 마음이라고 다를까? 나의 경우엔 상처받은 마음을 치유하는 방법이 있다기 보다는 재생력과 저항이 저절로 길러졌다는 게 맞을 것이다. 지난 과거를 돌아보면 난 우습게도 나를 진정 위하는 말에 상처 받기도 했으며, 나를 상처 내려고 하는 말을 그러려니 흘려 버리기도 했다. 귀로 들리는 말을 해석하고 치환하는 나의 뇌내 함수가 점점 더 복잡오묘하게 변해간 탓이다. 한마디로 말하자면 성장했다는 얘기다.
’나는 이런 것을 경험으로 얻었으니 모두 이런 경험을 통해 자가 치유력을 득해야 한다’고 말하기는 어렵다. 나의 경험의 방정식보다 훨씬 훌륭한 방법은 얼마든지 있을 테고, 모든 개개인은 저의 방식대로 본인만의 치유 방법을 터득할 테니까. 그리고 그다지 상처 입지 않는 사람 또한 있다. 그러니까 내가 진정 하고 싶은 말은 상처의 크기는 결국 본인이 정하기 나름이란 것이다. 치유가 필요한 것보다는 상처 입지 않는 것이 백 번 낫다. 그런데 상처 입지 않으려면 마음이 무척 단단해야 한다.
그 단단한 마음을 어떻게 얻을지는 각자의 판단에 맞기는 걸로. 지난 일이지만 사과하고 싶은 사람이 있어? 너무 많다. 지난 일이지만 내가 기억하고 있으면 죽을 때까지 절대 지난 일이 되지 않는다. 몇 십년이 지난 일도 왜 이렇게 또렷하게 다 기억이 나는 걸까. 그래서 항상 잘못한 기억을 만들지 않으려고 애쓰는 걸 보면 이게 꼭 나쁜 일만은 아니지 싶기도 하고…
오늘의 '생각을 자극'하는 글귀
진보는 직선이 아니라 루프 형태로 전개된다.
진보는 직선으로 이루어지는 경우가 거의 없다. 일반적으로 루프 형태로 전개된다. 매일매일 쳇바퀴 돌 듯 제자리만 빙빙 도는 것처럼 느껴질 수 있지만, 몇 달 또는 몇 년의 궤적을 돌아보면 앞으로 성큼 나아간 모습을 볼 수 있다. 큰 성장은 사소해 보이는 수많은 전환의 결과이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-15-상처받은-마음-치유법,-사과하고-싶은-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-15 상처받은 마음 치유법, 사과하고 싶은 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 15 Feb 2025 14:28:04 GMT</pubDate></item><item><title><![CDATA[2025-02-14 사랑하고 있는지, 내 단점]]></title><description><![CDATA[
지금 사랑하고 있는가? Are you in love right now? 지금 하고 있는 공부를 즐기고 있다는 점 외에 달리 사랑으로 부를 게 있나… 아무래도 질문에 대한 즉답이 어려운 건 ‘사랑’이 여전히 어려운 어른이기 때문이기도 하고, ‘사랑’받는 것도 어색하기 때문이겠다.
사랑이라는 주제가 나오면 벙어리가 되는 건 오늘의 두 번째 질문과 연관되지 않을까. 너의 단점은 뭐야? 그 단점을 바꾸고 싶어? 혼자서 보낸 시간이 많다 보니 누군가와 뭔가를 함께 하는 게 어렵다. 나 스스로는 느끼지 못하고 있지만 분명 편견도 많을 것이고, 혼자였기 때문에 남을 배려하는 습관도 부족하리라 생각한다.
나와 같은 사람들이 세상에 많다는 걸 경험으로 알고 있고, 내가 발견한 이 부류들의 공통점은 사랑 받아 본 경험이 많지 않다는 거다.
사랑도 하나의 기회로 생각한다면, 핑계를 대기에는 분명히 많은 기회가 있었고 그걸 외면 아닌 외면을 해 버린 까닭은 전적으로 내 자존심 때문이었다. 늘 나의 처지를 비관했고, 희망을 알지 못했다. 이런 사람을 사랑하게 될 사람이 너무나 불쌍했다. 끊임 없이 나에게 존속의 가치 증명을 요구하던 내 맘 속의 추상적 강박이 어느새 무엇보다 명료한 물리적 주박으로 변모했다.
이런 심리적 자승자박 과정이 무엇보다 무서운 점은 탈출구가 없다는 것이다. 비관과 체념은 계속 내부에서 되풀이되며 강화된다. 그리고 오래 묵은 주박의 형태가 더 단단해져서 깨지기 어려울 지경에 이르면, 그 때 마주할 거대한 압박감은 사람으로서 차마 떨치기가 어려운 것이다.
내게 조금은 불행했던 시간이 있었다. 그 기간 동안 물리적인 환경도, 정신적인 환경도 모두 암울한 감정이 증식하기 좋은 최적의 온도였을 것이다. 탈출구를 찾으려는 의지는 애먼 시도 속에 점점 사그라들고 그저 버티는 것 외에 택할 방법은 아무 것도 없다고 생각했다.
그러나 의외로 탈출구는 엉뚱한 데서 찾았다. 내 탈출구는 책도 아니고, 강연도 아니고, 종교도 아니었다.
그저 버텼고, 결국 버텨냈다.
버텼다는 걸 깨달은 순간, 어려움으로 위장해 있던 많은 일들이 그저 흔한 것으로 보이기 시작했다. 뒤늦게 몰려 온 후회는 첫 째, ‘왜 악을 쓰며 혼자 그걸 버텼을까’라는 것과, ‘왜 늘 스스로에게 불리한 선택을 하며 지옥에 제 발로 들어 갔을까’라는 것이다.
나의 주박은 ‘타인에게 부탁을 하고 신세를 지는 게 죄’라고 여기도록 스스로를 조련했고, 고립의 시발점은 바로 저기에 있었다. 어떤 의미에서는 자아의 몰락을 막기 위한 보호장치였을 지도 모르지만, 결국 끊임 없이 자존감을 갉아 먹는 방식이기도 했다. 무력함에 맞서기 위해 더 무력해지는 방식을 선택한 셈이다.
아이가 생존의 방식을 부모에게 위탁하듯, 인간 관계에서는 물질적인 것에 국한되지 않고 무언가를 주고 받는 상호작용이 끊임 없이 일어난다. 이건 자연스러운 일이고 거스를 수 있는 일이 아니다. 이 과정에서 파생되는 여러 양상을 삶이라고 부르고 이 안에서 감정과 가치가 생겨난다. 그 이치에 맞서 정성스레 벽을 세우고 울타리를 둘러 교도관조차 없는 감옥에 스스로 갇힌 사람들은, 대체 그 안에서 어떻게 출구를 찾겠는가.
혼자서 긴 시간을 버틴 걸 훈장처럼 여기지 못한다. 되려 이런 사람을 미련한 것이라 정의 내리는 데에 동의한다. 그리고 선뜻 이런 결론을 내릴 수 있는 까닭은 꽤나 간단하다.
내가 과거의 나를 만난다면, 상처 주는 것도, 상처 받는 것도 무서워서 오들오들 떨고 있는 나를 본다면, 아니 설령 그게 내 자신이 아니라 치더라도.
껴안아 주지 않고 배길 자신이 있는가?
아니, 절대 없다.
오늘의 '생각을 자극'하는 글귀
"창조적인 갈등이 아름다운 음악을 만든다.
""지적 케미가 좋다.""라는 말은 서로의 의견이 100퍼센트 일치한다는 뜻이 아니다. 오히려 의견 불일치를 즐긴다는 의미이다. 조화는 서로 다른 음색이나 목소리, 악기가 만나 기분 좋게 울리는 상태를 의미할 뿐, 완전히 똑같은 소리를 합쳐놓은 것을 하지 않는다. 창조적인 갈등이 아름다운 음악을 만든다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-14-사랑하고-있는지,-내-단점.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-14 사랑하고 있는지, 내 단점.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 14 Feb 2025 11:56:54 GMT</pubDate></item><item><title><![CDATA[2025-02-13 즐겨하는 질문, 잠들기 전 생각]]></title><description><![CDATA[
"사람들에게 가장 즐겨 하는 질문은 무엇인가? What's your favorite question to ask people?" 질문을 잘 하지 않는 편이라 도통 생각나는 게 없다. 아무래도 자연스럽게 알아가는 쪽을 선호한다고도 할 수 있겠다. 사람의 말보다는 행동을 보는 것을 선호한다.
사람을 오래 관찰해 본 결과, 자신이 믿는 본인의 모습과 실제의 자신이 다른 경우가 허다하게 있다. 따라서 말보다는 행동이 더 신뢰할 만하다고 믿는 것이며, 이런 믿음은 아직까진 그렇게 틀려 버린 적은 없는 거 같다.
그러나 남의 글을 대해선 몹시 궁금해 하는 편이다. 개인적으로는 말보다는 글에 사람의 인격이 더 진하게 묻어 있다고 생각한다. 말은 상황에 대한 ‘반응’일 수 있지만, 글은 대부분 혼자 생각을 하며 쓰기에 그렇다고 생각한다. 일면 편견으로 보일 수는 있겠지만 경험 또한 지혜라는 사실을 안다.
지난 날 여러 노트를 불태워 버린 데에는 이러한 믿음이 담겨 있다. 노트 안에 적나라하게 담긴 나의 가식적인 면을 참을 수 없었고, 음흉한 면을 참을 수가 없었다. 그런 더러운 연명의 증거들을 굳이 세상에 내놓지 않고 훗날 세상을 떠나겠다는 바람이 있었다. 글을 다 태워 버린 건 아직까지 무척 아쉬워하는 일이다.
이렇게 쓰다 보니 그나마 자주 하는 질문이 생각났다. 취미나 좋아하는 일에 대해. 이 질문을 할 때면 은근히 속으론 혹시 글을 쓰는 사람이지 않을까 기대하곤 했다. 대부분의 기대는 빗나갔지만, 뚜렷한 증거가 없던 기대이니 만큼 실망 따위도 하지 않는다.
그냥 가끔 사람은 우연 같은 선물을 바라곤 하니까.
아마 줄곧 나의 글친구였던 어머니를 대신 해 줄 사람을 은연중 염원하는 걸지도 모르겠다는 생각. 잠들기 전에는 주로 어떤 생각을 해? 상황에 따라 그 날 생각하는 주제가 많이 다른 편이라 뭐라 꼬집어 말할 수 있는 건 없는 거 같은데 그래도 공통되는 무언가가 있다면 ‘잡생각’에 가까운 거란 점? 생각을 하다가 밤을 샌 적이 많은 거 같다. 무슨 생각을 했냐고 누가 물으면 답할 말이 없다. 그냥 뜨개질하듯 별 생각 없이 생각의 꼬리를 자꾸 엮고 엮는 일을 반복하다 보니 습관이 된 거 같다.
그래서 항상 금방 잠이 드는 사람들을 부러워 했다.
오늘의 '생각을 자극'하는 글귀
"자신의 가치를 지키고 싶다면 다른 사람의 가치도 존중해야 한다.
""솔직하게 행동한 것뿐이야."" 라는 말로 무례한 행동을 합리화할 순 없다. 남을 배려하는 마음이 전혀 없다는 뜻일 뿐이니까. 공감 없는 진정성은 이기적이며, 선을 지키지 않는 진정성은 경솔하다. 자신의 진정한 가치를 지키고 싶다면 다른 사람의 가치도 존중해야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-13-즐겨하는-질문,-잠들기-전-생각.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-13 즐겨하는 질문, 잠들기 전 생각.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 13 Feb 2025 14:10:27 GMT</pubDate></item><item><title><![CDATA[2025-02-12 나의 장애물, 스스로를 잘 아는지]]></title><description><![CDATA[
현재 나의 꿈을 가로막는 가장 큰 장애물은 무엇인가? What is your biggest obstacle right now? 아무래도 건강과 체력… 하고 싶은 일이 없을 땐 체력이 넘쳤고, 하고 싶은 일이 많이 생기니 체력이 달린다. 운동을 하고는 있지만 정상적인 체력으로 돌아가는 게 쉬운 일은 아닐 거란 생각이 든다. 오랜 시간 동안 나를 너무 막 사용했다. 상처투성이에 삐그덕 대는 관절이며, 관리가 안 된 기계 마냥 잡음도, 아픔도 많다. 이제 와서 윤활을 하고 보수를 한들 분명한 한계가 있는 것이다. 그러나 조금 더 천천히 망가져 가기 위해서 할 수 있는 노력은 다해야겠다.
육체만이 아니라 정신도 똑같다. 스스로 잘 가꾸어 두지 않으면 금새 헤지고 난잡해지는 게 사람의 속이다. 아무래도 오래도록 빈 집이었던 마음 속이 폐허가 되어 있을 건 자명한 일이다. 스스로를 위해서도 다른 누군가를 위해서도 정돈된 마음을 가질 필요를 느낀다.
그래서 나는 조금 더 건강해 지기로 결심 했고, 조금 덜 외로워 지기로 했다. 스스로를 몇 퍼센트 안다고 생각해? 중학생 때 주된 관심사는 철학과 심리학이었다. 다른 사람도, 나도 이해할 수 없었기 때문이다. 그래서 사람을 알기 위해 철학과 심리학 책을 읽었고, 읽은 책이 쌓여갈 수록 오히려 더욱 사람을 이해할 수가 없었다. 인간의 모순을 확신한 순간이었을 거다.
어려서부터 스트레스를 받으면 장이 꼬이듯 무척 아팠다. 얼마나 아픈지 통증 때문에 기절을 해서 앰뷸런스에 실려 병원에 입원하곤 했다. 항상 통증의 원인은 불명. 그러나 뒤돌아 생각해 보건대 그 증상의 대부분의 원인은 사람 때문이었고, 그건 타인이기도, 나 자신이기도 했다. 나는 살기 위해 나를 더 자세히 알아야 했고, 내 감정에 대해 정확히 알아야 했다.
이러한 웃지 못할 역사 덕에 남들보다 스스로에 대해 잘 알고 있다고 자부하는 면이 있다. 이 과정에서 유일하게 자랑할 만한 건, 내가 스스로의 모자람을 크게 인정했다는 것이며 나처럼 다른 사람들도 모자라기 마련이란 걸 깨달았단 것이다.
그러니까 이제 와선 이런 생각마저 날 수 밖에 없다.
사람을 미워할 수록 더 괴로워지던 내 고통의 기억은 축복이었을까, 아님 불행이었을까.
오늘의 '생각을 자극'하는 글귀
잘못된 의견은 잘못된 행동이 아니다.
복잡한 문제에 대해 이야기할 때, 남들과 다른 의견을 내도 나쁜 사람이 되는 것은 아니라고 몇 번을 더 강조해야 사람들이 납득할까. 인격은 무엇을 믿느냐가 아니라 어떻게 행동하느냐로 결정된다. 잘못된 의견은 잘못된 행동이 아니다
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-12-나의-장애물,-스스로를-잘-아는지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-12 나의 장애물, 스스로를 잘 아는지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 12 Feb 2025 15:15:48 GMT</pubDate></item><item><title><![CDATA[Minimalism_Home]]></title><description><![CDATA[On the route 46]]></description><link>https://64etuor.github.io/index.html</link><guid isPermaLink="false">index.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 11 Feb 2025 12:06:25 GMT</pubDate></item><item><title><![CDATA[2025-02-11 출근 방법, 충격적인 뉴스]]></title><description><![CDATA[
오늘 무엇을 타고 출근했는가? 걸어서? 지하철을 타고? How did you get to work today? On foot? By subway? 평일엔 플레이데이터 캠퍼스로 출근을 한다. 바로 근처에 집을 구해 놔서 출근하는데 5분이면 충분하다. 지방에서 일을 할 때는 차가 필수라 항상 차를 탔는데 서울에 와서는 차 탈 일이 없어서 좋다.
차를 타는 시간이 항상 아깝다고 생각한다. ‘세이노의 가르침’에서도 이런 얘기가 나왔는데 아무래도 운전기사를 고용할 형편은 안되니 대중교통은 최고의 대안이다. 기왕이면 한 번 타고 30분 이상은 가야 좋다. 책을 읽든, 웹툰을 보든 어느 정도 일의 단위가 마무리될 만한 충분한 시간이 필요하다. (갈아 타는 것은 싫다.)
출퇴근 시간이 길거나, 장거리를 이동할 땐 운전하는 시간이 너무 아까워서 밀리의 오디오북(AI 듣기 기능이 생긴 이후로 엄청나게 자연스러워졌다.)도 읽곤 했는데, 소설 정도는 큰 무리가 없었다. 그러나 끊임 없이 생각과 상호 작용을 해야 하는 책들은 듣고 나서도 독서 효과가 전혀 없다는 걸 발견했다. 그래서 둘을 구분해서 듣는 편.
여담이지만 예전 직장 동료의 친부상에 가느라 부산에 간 적이 있는데 그 때 오디오북으로 “참을 수 없는 존재의 가벼움”을 들었다. 왕복 8시간 이상이 걸렸는데 아주 정신 없이 빠져서 들었던 기억이 난다. 비유와 묘사, 철학이 너무나 복잡하게 설계되어 있어서 이후에 책을 처음부터 다시 보면서 정리를 했다. 이게 내 인생의 첫 독서 노트였고 ‘기록’의 필요성을 느낀 첫 순간이었다.(생각해 보면 이 때의 일이 더베러 커뮤니티를 찾아온 계기와 연결되기도 한다.)
이 때 처음으로 ‘내가 책을 제대로 읽고 있었던 게 맞나?’라는 의심이 생겼다. 이때부터 독서 노트 작성을 시작하게 됐다. 최근에 가장 충격적이었던 뉴스는? 아무래도 계엄령이겠다. 현실에 대한 미시감마저 느껴져서 정신이 몽롱했던 기억이 난다. 당시엔 이미 술을 마신 상태였는데 그래도 서울로 차를 몰고 가야 하나 갈팡질팡 했다. (음주로 잡히면 어떻게 돼지? 라는 이상한 생각도 하고)
나중에 수원에서 전 직장 동료들과 술을 마실 때 계엄령 얘기가 나왔는데, 거기 계신 분들은 바로 여의도로 달려 갔다고 한다.
대한민국, 참 희망적이다!
오늘의 '생각을 자극'하는 글귀
대화의 공백을 채우는 의미 없는 표현은 분명한 의사소통에 도움이 된다.
'음...'이나 '어...' 같은 말을 아예 쓰지 않는 것은 잘못이다. 이런 표현(filler word)은 문장 사이에 새로운 정보가 등장한다고 알리는 신호 역할을 하기 때문에 청자가 다음에 올 정보를 더 쉽게 이해하고 기억하게 만든다. 주저하는 것처럼 보일까 봐 걱정할 필요 없다. 오히려 명확한 의사소통에 도움이 된다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-11-출근-방법,-충격적인-뉴스.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-11 출근 방법, 충격적인 뉴스.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 11 Feb 2025 03:43:43 GMT</pubDate></item><item><title><![CDATA[2025-02-10 오늘을 동물에 비유, 돈이 아깝지 않은 일]]></title><description><![CDATA[
"오늘 하루를 동물에 비유한다면? 그 이유는 무엇인가? If this day was an animal, which animal woudl it be? Why?" 하루를 동물에 비유하려는 시도를 해본 적이 없으니 뭔가 막막한 질문 같기도 한데… 굳이 따지자면 공작새 같았나? 뭔가 평소 같지 않게 다채로운 색감으로 뭔갈 만들려고 했으니까…? 뭔가 억지스럽긴 하다.
DB 서버 프로젝트 공동작업을 위해 노션을 쓰라는 권유가 있어서 그냥 수업 이후에 이것저것 눌러 보면서 대시보드로 쓸 만한 페이지를 만들기 시작했다. 노션은 처음 써보는데 이것저것 잘 만들어 놨다는 생각이 든다. 몇 개 만지작거리다가 이미지 편집도 좀 하고 하니 3시간이 훌쩍 가버렸다. 맨날 시간이 없다고 툴툴 대는 투덜이 스머프면서 이런 일에는 곧잘 시간을 잘 쓴다. 하다 보니 꽤 재밌던 건 사실… 현상금 게시판을 넣으면서 혼자 낄낄 대던 내 모습을 되돌아 보니 영 답이 없는 인간이란 생각이 들었다. 아무튼 꽤나 열심히 놀면서 기능을 이것저것 많이 둘러 봤고 노션도 꽤나 좋구나? 라는 생각을 하게 된 건 덤. 개인적으로 쓸 일은 전혀 없을 거 같긴 하지만 뭐 재밌었으면 됐다.
아무튼 뭐 잘 모르겠고 다들 행복하시라. 디비디바비디부! <img alt="Pasted image 20250210214338.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250210214338.png" target="_self"> 돈을 쓰는 게 아깝지 않은 경우는 언제야? 공부하는데 쓰는 돈은 안 아끼는 편인 거 같아. 뭐 사실 써서 사라지는 것도 아니고… 투자라고 읽어야 맞는 거라 생각해. 요샌 건강에도 돈을 안 아끼는 편… 이것도 투자 같네?
오늘의 '생각을 자극'하는 글귀
솔직한 피드백을 원한다면 목소리를 낼 수 있는 환경을 만들어야 한다.
누군가에게 솔직한 피드백을 주는 것이 두렵다고 해서 용기가 부족한 것은 아니다. 그것은 심리적 안정감이 조성되지 않았다는 뜻이다. 피드백을 막지 않더라도 편히 목소리를 낼 수 없는 환경이기 때문이다. 진실을 원한다면 진실을 말할 수 있는 환경을 만들어주어야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-10-오늘을-동물에-비유,-돈이-아깝지-않은-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-10 오늘을 동물에 비유, 돈이 아깝지 않은 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Feb 2025 12:48:03 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250210214338.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250210214338.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Docker vs Virtual box]]></title><description><![CDATA[Docker와 VirtualBox는 둘 다 가상화 기술을 이용하지만, 사용하는 방식과 목적이 다릅니다. VirtualBox는 하드웨어 가상화를 이용하여 전체 OS를 가상화합니다. 예를 들어, Windows에서 Ubuntu를 실행할 수 있습니다.
Docker는 컨테이너 가상화를 이용하여 애플리케이션을 실행합니다. 단일 OS 커널을 공유하며, 프로세스 단위로 격리합니다. Docker는 호스트 OS의 커널을 직접 사용하므로 부팅 속도가 빠르고, 자원 사용량이 적습니다.
VirtualBox는 별도의 OS를 실행해야 하므로 메모리, CPU 사용량이 많고 부팅 속도가 느립니다. VirtualBox는 가상 머신이 완전히 독립된 OS이므로 격리가 강력하고 보안성이 높습니다.
Docker는 커널을 공유하는 구조이므로 보안 격리가 비교적 약합니다. VirtualBox는 Windows, Linux, macOS 등 다양한 OS를 가상 머신에서 실행할 수 있습니다.
Docker는 기본적으로 Linux 컨테이너를 실행하며, Windows에서는 WSL2를 활용해야 합니다. 개발 환경을 빠르게 세팅하고 싶을 때 (예: 웹 서버, 데이터베이스)
애플리케이션을 컨테이너로 배포하려고 할 때 (CI/CD)
여러 환경(Linux 기반)에서 동일한 설정을 유지하고 싶을 때 여러 운영체제(Windows, Linux, macOS)를 실행해야 할 때
Windows에서 Linux 개발 환경을 구축하고 싶을 때 (GUI 프로그램 포함)
완전히 독립적인 시스템이 필요한 경우 Docker는 컨테이너 기반 가상화로 가볍고 빠르며, 주로 서버 애플리케이션 배포와 개발 환경 세팅에 유용함.
VirtualBox는 하드웨어 가상화로 완전한 운영체제(OS)를 실행하는 데 적합하며, 다양한 OS를 테스트할 때 필요함.
👉 Docker는 "애플리케이션 중심"의 가상화, VirtualBox는 "운영체제 중심"의 가상화라고 보면 됩니다! 🚀]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/5_resources/docker-vs-virtual-box.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/5_Resources/Docker vs Virtual box.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 10 Feb 2025 02:21:15 GMT</pubDate></item><item><title><![CDATA[한화 BEYOND SW부트캠프 1주차 회고]]></title><description><![CDATA[부캠 회고와 개인적으로 쓰던 회고를 나눠서 쓰긴 힘들어서 그냥 하나로 합쳤다. 좀 정신 없는 한 주였던 거 같다. 부트캠프에 다니기 위해 서울에 집을 구해야 했는데, 다행히 집을 금방 잘 구해서 큰 어려움은 없었지만 시간에 쫓기다 보니 조금 놓친 부분들도 있었다. 서울에 온 김에 세미나도 챙기고, 지인들과 만날 약속도 잡고, 이것저것 너무 욕심을 낸 게 원인이다. 그러나 결과적으론 모두 잘 마무리되었으니 뭐 어떤가. “끝이 좋으면 다 좋아.”라는 소설도 있듯이.
다만 다음에는 시간 관리를 좀 더 효율적으로 해서 제한된 시간 안에 더 많은 일을 처리할 수 있게 잘 구상해봐야 겠다. 이번 일로 약간의 요령이 생긴 기분. 서울 집에 짐을 풀고 바로 근처 GYM에 등록을 했다. 앞으로 부트캠프 6개월을 수강하면서 꾸준히 다니려고 6개월 회원권을 끊고 PT 20회도 함께 등록했다. 이전에 PT를 받았을 때는 계속 꾸준히 운동을 할 줄 알았는데, 당시 이직 하면서 완전히 습관이 또 무너졌었다. 이번에는 꾸준히 습관을 만드는데 주력해보려고 한다. 그리고 내가 한 운동 데이터를 기록하기 위해 내 기록 관리 앱에 추가 작업을 하고 있다. AI가 내 Personal Trainer가 되어서 운동 루틴을 추천해주고 내 운동 습관을 점검해주는 시스템을 추가할 생각이다.이런 저런 사유로 늦은 나이에 부트캠프란 걸 신청하게 되었지만, 이직 대신 6개월 간 부트캠프를 다니기로 한 게 절대 쉬운 결정은 아니었다. 학습에 온전히 몰두할 시간이 필요하다는 판단 하에 손실을 감안하면서 이직을 미룬 만큼, 이게 내가 살면서 선택한 여러 갈림길 중 가장 빛나는 길이 되게 만들 것이다.
내가 주도하는 삶을 살 수 있는 독립된 기반을 만들기 위해서 당분간 묵묵히 땅을 다지는 시간을 가지자. SW 부트캠프:
부트캠프 강의는 첫 주차라 주로 SW공학, DB 등 간단한 이론과 실습들만 진행했다. 이전엔 Git을 다른 사람과 함께 써볼 기회가 없었는데 짝꿍과의 실습을 통해 작동 원리를 자세하게 이해할 수 있게 되었다. 특히 Git branch 전략을 만들고 Convention을 짜보는 시간은 굉장히 유용했다.
SQL 실습도 무척 재밌었다. DB는 많이 만들어 봤지만 직접 SQL 쿼리로 만들어 본 적은 없어서 좀 생소한 부분들이 있었다. 근데 실습 문제를 좀 풀다 보니 금방 감이 잡히는 기분이 든다. 데이터 분석:
데이터 분석 학습에서는 주로 AAARR 분석과 Cohort Retention 분석을 복습했다. 다양한 산업군에서 실제로 진행되는 A/B test 또한 복습하는 과정이 있었고, 가설 검정을 위한 Chi-squared test, T-test, ANOVA 등도 다루었다. 단순 이론보다 확실히 실습이 이해가 쉽다.
실습 과제는 양이 상당했는데 파이썬 EDA, Funnel test를 Class Method로 구현하기를 시작으로 SQL 쿼리로 작성된 Cohort Retention을 위한 전처리 과정을 Python으로 재현하고 시각화하는 과제가 있었고, 이외에도 공공데이터 EDA, 그리고 전처리된 데이터를 태블로로 시각화하는 문제가 추가로 주어졌다.
데이터 처리 지침 같은 게 없었기 때문에 현업 분석가처럼 알아서 판단해서 전처리를 진행해야 했다. 그래도 데이터 자체가 크게 엉망은 아니었던 터라 명백하게 정규화되지 않은 데이터, 이상치 데이터를 삭제하고 나니 나머지는 큰 어려움이 없었다. 사실 출력물 포맷을 답안 출력물과 똑같이 맞추는 게 제일 귀찮은 작업이다.(이걸 현실 반영으로 받아 들여야 할 지…) 활동 및 평가
<img alt="Pasted image 20250127191654.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250127191654.png" target="_self">
프로젝트 현황<br>
<img alt="Pasted image 20250127221745.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250127221745.png" target="_self"> 새벽/아침 운동을 꾸준히 했다. 아주 칭찬할 만하다.
바쁜 와중에 Data Analysis 과제들을 전부 완성했고, 리뷰까지 마쳤다. 학습노트도 작성.
매일 9시~18시 부트캠프 수강, 18시~22시 Data Science 학습을 했는데 생각보다 힘든 건 없다. 이외의 여유시간은 적절하게 분배하는 중. 저녁을 밤 늦게 먹으면 술을 마시게 되는 패턴이 보인다. 끼니는 제때 먹어야 한다.
휴일 시간 관리를 조금만 더 타이트하게 짜봐야겠다.
넛지 독서가 마무리가 안 되고 있다. 책이 분량이 많은 것도 있고 메모를 하면서 읽어서 느린 것도 있지만 좀 더 집중해서 다음 주 내엔 마무리해야겠다.
BEYOND 부캠 그룹원들과의 소통이 아직까지 조금 모자란 거 같다. (그룹원들과 나이차가 있어서 좀 조심하는 경향이 크다보니 그렇긴 한데 중간점을 잘 찾아봐야겠다.) Git 활용 방법(프로젝트 레벨)
SQL Query
M/L 모델 성능 평가, 통계 검정, EDA 심화 앞으로 6개월 간의 목표는 단순 학습 뿐만이 아니라 생활 습관 등도 전반적으로 관리하는 뜻 깊은 시간이 될 것이다. 잘해온 것들은 계속 더 강화하고, 부족한 부분을 메울 수 있도록 앞으로 내 기록과, 지식과 경험들을 잘 융합해 봐야겠다. 다른 사람들과 함께 공부하는 걸 여러 관점들로부터 배우는 기회로 여기자.
일단 Git을 개략적으로나마 익힌 게 앞으로 프로젝트를 진행함에 있어 큰 도움이 될 것이다.
또 차근차근 쌓아가고 있는 데이터 분석 역량도 앞으로의 프로젝트에서 유의미한 상호 작용을 기대할 수 있을 듯 하다. 목표: Javascript 프리코스 수강 후 프로그래머스 시험 보기.
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-1주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 1주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Feb 2025 08:37:35 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250127191654.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250127191654.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[한화 BEYOND SW부트캠프 2주차 회고]]></title><description><![CDATA[ 시간적, 정신적 여유가 없을 때 회고를 쓰는 게 좀 아쉽긴 하지만, 일단 적어보자.
이번 설에 고향에 갔을 때 인천에 살고 계신 삼촌이 폐암에 걸리셔서 수술을 한다는 얘기를 들었다. 어제 수술을 하셨을 텐데 회복실에서 나오시면 한 번 찾아 봬야겠다. 안 그래도 안 좋은 일이 연말 연초에 몰려서 터져서 계속 마음이 좀 무거웠는데 뭔가 더 먹먹해지는 기분.
억지로 더 바빠지려고 노력하는 중. 시간 여유가 없는데도 더베러톡톡 제안을 수락한 것도 사실 이것 때문인 거 같다. 그리고 금연 계획도 차차 다시 세워 봐야겠다. SW 부트캠프:
이번 주에는 금요일 하루만 강의가 있었다. DDL, DML 실습을 했는데 이제 생각해 보니 과제가 있었다. 다른 일에 정신이 팔려 완전히 잊고 있었다. 서울에 도착하면 한 번 훑어봐야겠다. 프로그래머스 시험은 생각 외로 괜찮았고, 프로젝트 준비는 간단한 Convention 준비 외에는 아무 것도 진행 못한 상태. 너무 일정을 빡빡하게 잡고 있는가 의구심이 살짝 들기도 한데 일단 되는 데까지는 해봐야 겠다. 최선을 다해보고 안되면 말고~ 데이터 분석:
여러가지 새로운 일을 시작하면서 시간이 부족해서 이번 주차 M/L 학습은 완전 건너 뛰었다. 어떻게든 만회해야 한다. 다행히 Power BI는 강의를 안 들어도 될 정도로 능숙한 툴이라 M/L에 집중해서 학습하면 될 듯 하다. 목표: 프로그래머스 시험
결과: 합격 <img alt="Pasted image 20250202175912.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250202175912.png" target="_self"><br>
<img alt="Pasted image 20250202180309.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250202180309.png" target="_self">
설 연휴가 걸쳐 있어서 운동을 며칠 쉬긴 했지만 이외에는 꾸준히 잘 이어나가고 있다.
시간 관리 요령이 점점 더 정교해지고 있다고 느껴진다. 다만 아직도 계획에 허점이 종종 발생.
더베러톡톡을 준비하면서 내 삶을 돌아볼 수 있는 시간을 가졌다. 내가 다른 사람들에게 무언가를 가르쳐 줄 수 있는 게 있는가 싶은 의심도 되지만 어쨌든 나의 산출물을 공유하고 공유를 통해 더욱 발전하자는 의미로 접근하면 나쁘지 않겠다. 나에게도 좋은 영향이 생길 것이고!
책 두 권을 마무리지었다. 독서노트도 마무리해보자. 술을 많이 줄이긴 했지만 아직도 더 줄여야 한다. 힘내자.
끼니 때가 불규칙하다. 술 먹는 버릇과도 연관이 있으니 제때에 밥을 먹자.
Life Wheel에 ‘사랑’이라는 영역을 넣어 놨지만 전혀 쓸 데가 없다. 애초에 뭘 해야 할 지도 모르겠고. 의미가 없다면 없애는 걸 고려해보는 게… 아니라 유지하긴 해야 할 텐데 이게 참 어렵다.
넛지 마무리를 못했다… 대신 다른 책 두 개를 읽었으니 봐주자. Figma의 Figjam를 처음 사용해 봤는데 아주 내 맘에 든다. 따로 설명서를 볼 필요도 없이 UI가 직관적이고, UX는 매끄럽고 훌륭하다.(이미지 렌더링을 어떻게 하는 건지 궁금) 앞으로 강의나 회의에 자주 사용할 거 같다.
Seth Godin의 마케팅 전략은 오래 되었지만 여전히 유효하고 강력하다. 다른 책도 더 찾아봐야겠다.
세컨드 브레인 부스트를 읽고 내가 얻었던 아이디어들을 조금 더 강화하게 되었다. 1회독으로 그치지 않고 나중에 다시 또 읽어볼 것이다. 학습의 영역에 제한을 두지 말되 정보의 선별 능력을 더 강화해야겠다는 생각이 들었다. 정보가 무수하게 쏟아지는 이 때 필터 기제를 잘 만들어 놓지 않으면 정보에 그대로 묻히거나 시간을 허비해 버릴 수도 있겠다는 생각이 들었다.
‘전문성’은 달콤하게 들리는 말이지만 내가 사업을 하고자 하면 분야에 따라 의외로 크게 중요하지는 않을 수도 있다. ‘그럴 듯한 것들’, ‘놓치면 손해 볼 거 같은 정보’에 대한 집착은 줄이고 ‘본질적이며 중요한 것’을 보는 눈을 갖자. 목표: 더베러톡톡 성공적인 마무리
]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/한화-beyond-sw부트캠프-2주차-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/한화 BEYOND SW부트캠프 2주차 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Feb 2025 08:37:26 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250202175912.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250202175912.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-09 어제 잠든 시간, 스트레스 해소법]]></title><description><![CDATA[
"어제 몇 시에 잠자리에 들었는가? What time did you go to sleep last night?" 어제가 아닌 오늘 새벽 4시에 잤다. 전날도 진행중인 프로젝트의 ERD를 짜다가 새벽 늦게 잤다. 연이은 PT와 운동으로 인한 근육통과 피로 때문에 완전히 뻗어서 오후 3시까지 일어날 생각도 못하고 누워 있었다. 약속이 있어서 억지로 일어나서도 계속 몸이 괴로웠는데 잠깐 볼 일을 보고 온 뒤에 집에서 과제를 하다가 정신 차려 보니 이미 또 새벽 3시가 넘어 있었다. 규칙적인 생활 패턴 잡기가 너무 어렵다. 다행히 밀렸던 일은 거의 다 처리했고, 오늘 주간 회고 등을 마무리하면 이번 한 주도 어떻게든 무사히 마무리 한 셈이니 다음 주부터 다시 패턴을 잡는 시도를 해야겠다.
시간 관리를 시작한 이후로 너무 무리를 했다는 생각이 들긴 한다. 좀 더 휴식에도 비중을 두어야 한다는 교훈을 얻었으니 앞으로는 합법적으로 쉬는 시간을 이리저리 배치해 봐야겠다.
무릇 욕심이 과하면 탈이 나는 법이다. 균형을 잡는 지혜가 어느 때보다 절실한 시점인데 확실히 습관이란 건 개는 못 주는 법인가 보다. 스트레스를 해소하는 방법은? 코인노래방에 가서 시원하게 노래 부르기!
오늘 저녁은 집 앞 홍콩반점에 가서 짜장밥을 야무지게 먹고 코노에 가서 신나게 노래 부르다 와야겠다!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-09-어제-잠든-시간,-스트레스-해소법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-09 어제 잠든 시간, 스트레스 해소법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 09 Feb 2025 06:38:46 GMT</pubDate></item><item><title><![CDATA[DBSCAN(밀도 기반 클러스터링)]]></title><description><![CDATA[DBSCAN (Density-Based Spatial Clustering of Application with Noise) 포인트 데이터 분석에서 DBSCAN은 항상 빠지지 않고 등장한다. 항상 무의식적으로 사용했었는데, 조금 더 자세히 알아보고 싶었다. DBSCAN 이란? DBSCAN(Density-Based Spatial Clustering of Applications with Noise)은 머신 러닝에 주로 사용되는 클러스터링 알고리즘으로 Multi Dimension의 데이터를 밀도 기반으로 서로 가까운 데이터 포인트를 함께 그룹화하는 알고리즘이다. DBSCAN은 밀도가 다양하거나 모양이 불규칙한 클러스터가 있는 데이터와 같이 모양이 잘 정의되지 않은 데이터를 처리할 때 유용하게 사용 가능하다. K-..]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/dbscan(밀도-기반-클러스터링).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/DBSCAN(밀도 기반 클러스터링).md</guid><dc:creator><![CDATA[[[난시간과싸워]]]]></dc:creator><pubDate>Sun, 09 Feb 2025 02:13:57 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/cpOe5z/btr2OrOW7VL/S9KuZa8GCXElDMaml5upak/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/cpOe5z/btr2OrOW7VL/S9KuZa8GCXElDMaml5upak/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-08 만원의 행복, 기억하는 가장 어렸을 때의 순간]]></title><description><![CDATA[
"만 원을 가장 알차게 쓸 수 있는 방법은 무엇일까? What would be the best way to spend 10,000 won?" (1) 꽃 한 송이를 산다.(물가가 미쳐버렸다.)
(2) 사랑하는 사람의 방 꽃병에 그 꽃을 꽂아 놓는다. (라임 좋다.)
그러면 꽃 향기뿐만 아니라, 꽃을 사온 당신의 예쁜 마음이
오래도록 그 방에 기분 좋게 자리할 것이다. 기억하는 가장 어렸을 때의 순간은? 한여름에 차 안에 아이가 갇혔다. 엄밀히 말하면 차 안에 들어가 스스로 문을 잠가 버렸으니 스스로 갇힌 셈이다.(옛날에는 차에 오늘 날과는 다른 잠금장치가 있었다. 원통 기둥형 잠금 스위치를 아래로 눌러 잠그거나 위로 잡아 당겨 잠금을 풀었다.)
아이 엄마는 집 안에서 철사를 가져오더니 끝을 동그랗게 매듭 짓고 차의 창문 사이로 밀어 넣었다. 그리고 잠금 장치를 걸어서 풀었다.
난 조금 나이 먹어서까지 이 이야기의 주인공이 내 동생이라고 생각했다. 이미 머리가 굵어졌을 무렵 어느 날 밥을 먹다가 내가 우연찮게 이 이야기를 꺼냈는데, 부모님은 이구동성으로 그 때 갇힌 게 나라고 얘기하셨다. 따지고 보면 당시의 기억이 모두 1인칭 시점으로 떠올랐음에도 나는 그게 나라는 생각을 전혀 하지도, 그게 동생이 아니었다는 의심을 해보지도 않았다. 이 모순이 자아 형성의 시기와 큰 관계가 있으리라 짐작할 뿐이다.
이야기의 전말은 이렇다.
그 여름날 부모님은 잠깐 차 안에 나를 놔두고 자리를 비웠고, 돌아와 보니 내가 이미 안에서 문을 이쪽 저쪽 다 잠그고 놀고 있더란다. 차문을 어떻게 열까 부모님이 발을 동동 구르는 동안에도 나는 그 모습을 보면서 방싯방싯 웃고 있었다고 한다.
문제는 여름 더위에 창문 닫힌 차 안에 있으니 서서히 차 내부의 온도가 올랐고, 그 더위를 버틸 재간이 없는 나는 울기 시작했다고 한다. 이 때문에 창문을 깨려고 아버지는 망치를 들고 왔고, 어머니는 양봉(아버지가 양봉을 하신다.)에서 소초를 만들 때 쓰이는 가는 철사를 들고 왔다. 그리고 먼저 말한 대로 철사로 문의 잠금 장치를 푼 것.
이 때가 2살 때의 일이라고 하니 기억이 있다는 건 일반적이지 않은 일이나, 어쩌면 그 때의 충격과 구출(?) 후의 깊은 안도 때문에 뇌에 깊게 각인된 게 아닌가 싶다.(재밌는 건 아버지도 2살 때의 기억이 있다고 하셨다.)
여담이지만 초등학교에 처음 입학했을 때 동급생들과 기억에 관한 얘기를 한 적이 있다. 그들은 대부분 1살 때의 기억이 난다고 했으며, 심지어 엄마 배 속에 있을 때의 기억도 난다는 친구들까지 있었다. 나는 암만 해도 3살 이전의 기억은 하나도 떠오르지 않아서 은근한 패배감을 느끼곤 했다.
기억이 많은 게 썩 좋을 뿐만은 아니란 걸 깨달은 지금, 이토록 나이 먹은 이즈음에 보면,
그들은 사실 그때 귀여운 거짓말을 한 것일 수도 있겠다는 생각을 한다.
오늘의 '생각을 자극'하는 글귀
"왕이 되려는 자는 왕관의 무게를 견뎌야 한다.
권위를 갈망하거나 관심을 원하는 사람에게 리더의 명예가 주어져서는 안 된다. 리더의 역할은 따르는 무게를 힘겨워하면서도 봉사에 대한 책임감으로 나아가는 사람이 힘을 얻어야 한다. 왕이 되려는 자는 왕관의 무게를 견뎌야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-08-만원의-행복,-기억하는-가장-어렸을-때의-순간.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-08 만원의 행복, 기억하는 가장 어렸을 때의 순간.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 08 Feb 2025 13:53:16 GMT</pubDate></item><item><title><![CDATA[2025-02-07 갖고 싶은 것, 다시 연락하고 싶은 사람]]></title><description><![CDATA[
"당장 갖고 싶은 세 가지가 있다면? What are the three things you want to have at this moment?" 일단은 체력&amp;근력. PT를 엊그제부터 시작했는데 아직도 허벅지가 뻐근해서 잘 걷지도 못하고 있다. 멋진 근육은 바라지도 않는다만 좀 건강하게 살고 싶다. 원체 오래 나쁜 버릇을 갖고 살았다 보니 목이며 어깨(특히 승모근), 허리가 항상 불편하다. 이렇게 말하고 보니 당장 어디서 체력&amp;근력이 공짜로 툭 떨어진대도 금방 다시 제자리로 돌아가겠다. 열심히 운동하는 습관을 기르는 게 최선이겠다.
가족의 평화 또한 바라는 부분이다. 이리 저리 많이 꼬여 있는 부분들을 당췌 어떻게 풀 지 모르겠다. 내가 중간에서 조율한다고 뭔가 해결될 만한 일도 아니고. 할 수 있는 게 없다는 건 꽤나 허망한 일이다.
그 외로는 갖고 싶은 건 잘 모르겠다. 애초에 나의 노력이 들어가지 않고 무언가를 얻는다는 건 참 어색한 일이다. 내가 가진 좋은 것들은 대부분 과정에서 얻었기 때문이다.
올해는 정말 내 인생 중의 MAX로 노력하는 중이고, 아마 또 좋은 걸 많이 얻을 것이다. 당장 가지지 못해도 언젠가 분명히 가질 것이기 때문에 그리 급한 맘이 들진 않는다. 오랫동안 연락하지 못했지만 다시 연락하고 싶은 사람은? 남들이 삶에 업적을 채우는 동안 나는 허물만 채워서 아마 그 양이 대서양을 채우고도 남을 거다. 후회도 많고, 만나고 싶은 사람도, 용서를 구하고 싶은 사람도 많다. 대부분은 연락할 길이 없고, 혹은 연락이 뜸한 동안 완전히 어색해져 버려서 이제서야 연락한다는 건 다른 의도로 보일까 염려하는 관계들이다. 쓸 얘기가 많지만 바쁜 관계로 다음에 기회에 오면 다시 생각해 봐야겠다.
오늘의 '생각을 자극'하는 글귀
"내 일에 의미를 갖기 위해서는 세상을 변화시킨다는 믿음이 필요하다.
일이 의미를 가지려면 내 일이 다른 사람들의 삶을 더 좋게 만들어 줄 것이라는 믿음이 필요하다. 그 믿음이 흔들릴 때 스스로에게 물아보자. "만약 내 직업이 사라진다면 누구의 삶이 고통스러워질까?" 당신의 일이 중요한 이유는 다른 사람들 때문이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-07-갖고-싶은-것,-다시-연락하고-싶은-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-07 갖고 싶은 것, 다시 연락하고 싶은 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 07 Feb 2025 09:51:50 GMT</pubDate></item><item><title><![CDATA[2025-02-06 위대한 직업, 평생 할 일]]></title><description><![CDATA[
"가장 위대하다고 생각하는 직업은? What would be the greatest job you could think of having?" 직업은 역사를 거쳐 다양하게 세분화되어 왔다. 농경 시대의 시작, 화폐의 등장과 신용(credit), 도시국가의 출현, 중세의 길드 시스템, 대항해시대와 애덤 스미스의 국부론, 그리고 산업혁명, 테일러의 과학적 관리법과 포드가 연 컨베이어벨트 분업 시대, 컴퓨터와 인터넷(버너스 리 경 만세!)의 등장, 그리고 또다른 시대를 열어갈 AI 시대의 태동까지.
모든 생물의 본질인 ‘생존’의 양상이 어떻게 인간에게서만 유독 큰 변화를 보였을까. 여러 가지 의견이 있겠지만, ‘학습’과 ‘기록’이 선물처럼 부여한 혜택이었다는데 큰 반론의 여지는 없다고 본다.
인간은 기록을 통해 과거의 실수를 반복하지 않을 수 있었고, 기술과 지식을 축적하여 점진적으로 발전할 수 있었다. 한 세대의 경험과 발견이 다음 세대로 전달되면서, 문명은 단순한 생존을 넘어 지속적인 혁신을 거듭해왔다. 농경 사회에서 구전으로 전해지던 지식은 점토판과 양피지에 새겨졌고, 인쇄술의 발달로 지식의 전파 속도는 비약적으로 증가했다.
오늘날 우리는 디지털 데이터와 인공지능을 통해 기록의 방식과 활용을 더욱 정교하게 발전시키고 있다. 수백 년 전의 장인들은 자신의 손으로 도구를 만들고 후세에 기술을 전수했지만, 이제 우리는 알고리즘을 통해 지식을 학습하고, 데이터를 분석하며, 새로운 패턴을 발견하는 시대를 살아간다. 기록이 단순한 과거의 보존을 넘어 실시간으로 학습하고 예측하는 도구가 된 것이다.
이제 AI 시대에 접어들면서 우리는 다시금 직업의 변화의 한 기로에 서 있다. 기록과 데이터는 인간이 스스로 학습하고 결정을 내리는 방식뿐만 아니라, 기계가 학습하고 새로운 해결책을 도출하는 방식까지 바꾸고 있다.(어찌나 빠른지 멀미가 날 정도로.)
이러한 변화 속에서 우리는 과연 또 어떤 직업을 갖게 될까? AI가 기존의 많은 직업을 대체할 것이라는 우려가 있지만, 기록이 문명을 발전시켜 온 것처럼, 새로운 시대는 또다른 형태의 직업과 역할을 요구할 것이다. AI 시대의 기록은 단순한 정보의 저장을 넘어, 창의적인 문제 해결과 예측의 도구로 작용하며 인간과 기계가 협력하는 새로운 직업군을 만들어갈 것이다.
그럼 질문으로 돌아가서 무엇이 가장 위대한 직업인가?
직업은 시대와 함께 변화하는 무한한 양태에 불과하고, 그 본질은 학습으로부터 얻은 지혜를 토대로 ‘생존’이라는 지상과제를 이어가는 인간 본능에 뿌리를 둔다.
예측할 수 없는 날씨에도 불구하고 훌륭한 열매를 맺은 나무를 보며, 우리는 열매가 훌륭했다 할 것인가, 줄기가 훌륭했다 할 것인가, 뿌리가 훌륭했다 할 것인가. (그것도 아니라면 돼지고기에 무수한 부위 명칭을 붙이듯, 특정 부분을 또 분류하여 그것이 훌륭하다 할 것인가.)
개인적인 바람이 섞인 말이고 명제로 부른다면 수많은 논리적 공격을 받을 말이긴 하지만 그래도 이렇게 말하고 싶다. 사람은 위대하다. 평생 하고 싶은 일은 찾았어? 어떤 일이야? 딴 건 모르겠지만 시 쓰기, 공부, 독서 는 확실하게 평생 할 거 같아! 항상 새롭고 짜릿해
오늘의 '생각을 자극'하는 글귀
"삶에서 가장 필요한 자원은 주의력이다.
삶에서 가장 부족한 자원은 시간, 에너지, 사랑이 아니다. 바로 주의력이다. 산만함에 굴복한다면 인지, 감성, 사회지능을 스스로 낮추게 된다. 집중력은 소중한 자산이다. 가장 중요한 우선순위가 흐트러지지 않도록 온전히 집중해야 한다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-06-위대한-직업,-평생-할-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-06 위대한 직업, 평생 할 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 06 Feb 2025 02:39:58 GMT</pubDate></item><item><title><![CDATA[2025년 1월 회고]]></title><description><![CDATA[바쁜 한 달이었다. 여러 모로 뜻 깊은 한 달이기도 했고 새로운 도전도 시작했다.
한 달 회고는 하려고 생각한 적도 없고 뭐해서 일단 ChatGPT에 나의 데이터를 넣고 나 대신 회고 좀 해 달라고 요청해본다. (…)
내 실제 데이터가 바탕이기 때문에 정확도가 엄청나다. 창피하다는 뜻이다.
그냥 아예 매월 자동으로 나의 활동 기록을 분석해서 내게 주기적으로 레포트를 보내게 자동화 해놓으면 좋겠다는 생각이 들었다. 1월은 학습, 운동, 생활 정비에 집중한 달이었다. 특히, 데이터 분석 및 프로그래밍 강의를 꾸준히 들으며 기술 역량을 강화하는 데 시간을 많이 투자했다.
하지만 술을 마신 날이 적지 않아 컨디션 관리에서 아쉬운 부분이 있었다.
AppSheet, Google Cloud, Gemini API, n8n 관련 개발을 진행하며 자동화 및 연동 작업을 꾸준히 수행함.
태블로 대시보드 구축에 처음 도전했으며, 기대보다 빠르게 작업을 완료함.
랩탑 세팅 및 포맷 문제 해결에 시간을 할애했으나, 드라이버 문제 등으로 일부 시간 낭비가 있었음. 결국 망가져서 돈을 허비함.
🟢 잘한 점: 다양한 기술 스택을 활용하여 실습하며 성장함.
🔴 개선할 점: 일은 적당히 쉬면서 하기.
한화 SW부트캠프에 등록함.
SQL, Tableau, 머신러닝, JS, Python 등 데이터 분석 및 개발 관련 강의를 다수 수강함.
세컨드 브레인 독서 및 독서 노트 작성을 꾸준히 진행함.
과제 제출, 실습, 코드 테스트 합격 등 성취감 있는 결과를 남김.
🟢 잘한 점: 꾸준한 강의 수강 및 노트 정리 습관이 정착됨.
🔴 개선할 점: 이해가 부족한 부분(통계 심화 등)에 대한 심층 학습 필요.
로잉 머신 200회 3세트 루틴 정착 &amp; 헬스장 PT 등록 후 유산소 + 근력 운동 시작.
하지만 술 섭취 빈도와 컨디션 저하가 문제였음.
🟢 잘한 점: 운동 루틴을 확립하고 지속적으로 수행함.
🔴 개선할 점: 술 섭취 줄이기 → "운동 후 술" 루틴을 "운동 후 건강식"으로 전환 필요.
짐 정리 및 이사, 집 계약 완료, 헬스장 탐색 등 생활 정비를 적극적으로 수행함.
식사 기록이 상세했으며, 직접 요리하는 빈도도 높았음.
하지만, 술과 함께한 식사 기록이 많았고, 그로 인해 피곤함을 호소하는 경우도 많았음.
🟢 잘한 점: 생활을 체계적으로 정리하며 계획을 실행함.
🔴 개선할 점: 늦은 밤 식사 &amp; 음주 후 피곤함 개선 필요.
발라트로, 웹툰 감상 등으로 휴식을 취함.
하지만 무계획적인 휴식이 많아 게으른 날이 종종 있었음.
🟢 잘한 점: 바쁜 일정 속에서도 자기만의 휴식 시간을 가짐.
🔴 개선할 점: 여가 시간을 보다 계획적으로 활용하면 좋을 듯.
술 섭취 줄이기 → 술을 마신 후 다음날 피곤함이 지속됨. 금주 실천 필요.
운동 루틴 유지 &amp; 근력 운동 추가 → 로잉 머신 &amp; PT 병행 지속.
공부 시간의 질 향상 → 통계 &amp; ML 등 이해 부족한 부분 심층 학습.
작업의 우선순위 설정 → 디버깅 &amp; 실수로 인한 불필요한 시간 낭비 줄이기. "많이 배우고, 많이 성장한 한 달. 하지만 술과 체력 관리가 관건이다."
➡️ 2월에는 "건강"을 더 우선순위로 둬야 함! 💪🚀]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/3_회고/2025년-1월-회고.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/3_회고/2025년 1월 회고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 05 Feb 2025 12:04:06 GMT</pubDate></item><item><title><![CDATA[2025-02-04 오늘의 날씨, 소비 철학]]></title><description><![CDATA[
"지금 밖의 날씨는 __ (이)다. Outside, the weather is ___." 춥다. 왜 이렇게 추운지 모르겠다. 아마 마음 또한 소름 돋게 시린 탓이겠다.
오늘 저녁 받은 전화는 억지로 모른 척 하고 있던 일을 굳이 들춰낸다. 아주 멘탈을 자꾸 멘틀을 향하여 끌어 당기기로 작정한 모양이다. 그러나 한 번 넘어가야 할 일이긴 했다.
시선이 자꾸 초점 없이 흐려져서 정신이 없지만 이런 날마저도 흔들리지 않고 잘 버티려 그 오랜 시간을 감내한 거라 생각하면 은근한 활력이 난다.
날씨가 춥긴 하지만, 죽을 정돈 아닌 게다. 너의 소비 철학은 뭐야? 예전에 이것저것 많이 사다 보니 이제 내가 필요한 게 무언지 너무 잘 알게 되었어. 필요한 걸 사는 편이야. ‘가치와 필요’가 내가 생각하는 소비 철학이지 않을까? 이것도 할 얘기가 많은 주제긴 하지만 오늘은 바쁘니 다음으로 미루자!
오늘의 '생각을 자극'하는 글귀
"시간이 흘러도 변하지 않으면 평범해지거나 쓸모가 없어진다.
단기적으로 보면 변화에는 위험이 따른다. 그러나 장기적으로는 변하지 않는 것이 더 큰 위험을 부르낟. 시간이 흘러도 변하지 않으면 평범해지거나 쓸모없어진다. 변화의 비용을 따지려면 현재 상태를 계속 이어나갈 때 발생하는 기회비용도 고려해야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-04-오늘의-날씨,-소비-철학.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-04 오늘의 날씨, 소비 철학.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 05 Feb 2025 11:29:10 GMT</pubDate></item><item><title><![CDATA[2025-02-05 친구란, 이번주 집중한 일]]></title><description><![CDATA[
"친구란 __ (이)다. A friend is _." 친구란 버팀목이다. 내가 무너지지 않게 잡아주는 지지대다. 마음 깊이 의지하는 사람들에게 많은 정신적인 빚을 지고 살아 왔다. 물질적인 빚은 한 번 상환하면 끝난 일이 될 테지만, 정신적인 빚은 평생 갚아도 다 못 갚는 것이다. 그러므로 나는 아주 큰 빚쟁이다. 이번 주에 가장 집중해서 한 일은 뭐야? 더배러톡톡 준비를 열심히 했는데 막상 시작하자마자 준비했던 서사가 엉망으로 꼬였다. 근본적으로 45분 동안 준비한 자료를 모두 전달하는 게 물리적으로 불가능했다. 시작하고 10분 후에 시간을 체크했을 때 X됐음을 직감했다. 내가 어림짐작하였던 시간보다 실제 소요되는 시간이 3배 이상 많았다. 즉석에서 서사를 계속 수정해야 했다. 준비한 유머는 하나도 못 써먹었다. 너무 아쉽고 부끄러웠다. 끝까지 들어주신 분들한테 죄송할 뿐ㅠㅠ
오늘의 '생각을 자극'하는 글귀
"진정한 위로란 감정을 그대로 인정해주는 것이다.
우리는 상처받은 사람을 위로할 때 그 사람이 지금 어떤 감정을 느껴야 하는지 조언해주곤 한다. 하지만 진정한 위로는 그들이 느끼는 감정을 그대로 받아주는 데서 비롯된다. 위로할 때는 자신의 관점을 드러내는 것보다 상대의 관점을 이해하는 모습을 보여주는 게 좋다. 감정을 조절해주는 것보다 인정해주는 것이 먼저다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-05-친구란,-이번주-집중한-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-05 친구란, 이번주 집중한 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 05 Feb 2025 10:07:59 GMT</pubDate></item><item><title><![CDATA[Gannt]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/1_프로젝트/1차-데이터베이스/gannt.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/1_프로젝트/1차 데이터베이스/Gannt.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Feb 2025 11:16:08 GMT</pubDate></item><item><title><![CDATA[10W - 실습과제2_Cohort Retention]]></title><description><![CDATA[# Pandas만을 이용하여 쿼리문과 동일한 출력 결과물 생성
# SQLite는 사용하지 말 것
# 쿼리문 내용은 태블로 강의 함께 참고
# 원본 쿼리문
'''
WITH first_visit AS ( SELECT user_id, MIN(date_ymd) AS first_visit_date FROM data GROUP BY user_id
),
retention_cohort AS ( SELECT fv.user_id, fv.first_visit_date, d.date_ymd, CAST(JULIANDAY(d.date_ymd) - JULIANDAY(fv.first_visit_date) AS INT) AS days_since_first_visit FROM first_visit fv JOIN data d ON fv.user_id = d.user_id
),
daily_active_users AS ( SELECT first_visit_date, days_since_first_visit, COUNT(DISTINCT user_id) AS retained_users FROM retention_cohort WHERE days_since_first_visit &gt;= 0 GROUP BY first_visit_date, days_since_first_visit
),
total_users AS ( SELECT first_visit_date, COUNT(DISTINCT user_id) AS total_users_cohort FROM first_visit GROUP BY first_visit_date
)
SELECT dau.first_visit_date, dau.days_since_first_visit, dau.retained_users, tu.total_users_cohort, CAST(dau.retained_users AS REAL) / tu.total_users_cohort AS retention_rate
FROM daily_active_users dau
JOIN total_users tu ON dau.first_visit_date = tu.first_visit_date
ORDER BY dau.first_visit_date, dau.days_since_first_visit;
'''
# EDA
df_web_log['event_time'] = pd.to_datetime(df_web_log['event_time'], format='%Y-%m-%d %H:%M:%S') df_web_log.drop(columns=['category_id', 'category_code', 'brand'], inplace=True, axis=1, errors='ignore')
df_web_log['date_ymd'] = df_web_log['event_time'].dt.date
df_web_log.head() df_web_log.info()
# Cohort Retention
first_visit = df_web_log.groupby('user_id')['date_ymd'].min().reset_index()
first_visit.columns = ['user_id', 'first_visit_date'] df_retention = pd.merge(df_web_log[['user_id', 'date_ymd']], first_visit, on='user_id') df_retention['days_since_first_visit'] = (pd.to_datetime(df_retention['date_ymd']) - pd.to_datetime(df_retention['first_visit_date'])).dt.days retention_rate = df_retention.groupby(['first_visit_date', 'days_since_first_visit']).agg( retained_users=('user_id', 'nunique')
).reset_index() total_users = df_retention.groupby('first_visit_date').agg( total_users_cohort=('user_id', 'nunique')
).reset_index() retention_rate = pd.merge(retention_rate, total_users, on='first_visit_date')
retention_rate['retention_rate'] = retention_rate['retained_users'] / retention_rate['total_users_cohort'] retention_rate = retention_rate.sort_values(['first_visit_date', 'days_since_first_visit']) print('=========== 상단 20개 데이터 ============')
print(retention_rate.head(20)) print('=========== 하단 20개 데이터 ============')
print(retention_rate.tail(20))
# Pandas만을 이용하여 동일한 출력 결과물 생성
# SQLite는 사용하지 말 것
# 태블로 강의 코호트 리텐션 분석 심화 참고 # 첫 방문일에서의 view 수에 따라 유저 구분
# 해당 쿼리와 똑같은 결과물 반환
# web_log_data.csv 읽기부터 작업 수행
# 원본 쿼리문
'''
query_cohort_retention = """
WITH first_visit AS ( SELECT user_id, MIN(date_ymd) AS first_visit_date FROM data WHERE event_type = 'view' GROUP BY user_id
),
first_visit_with_views AS ( SELECT d.user_id , first_visit_date , CASE WHEN COUNT(d.user_id) &gt;= 0 AND COUNT(d.user_id) &lt;= 5 THEN 'a. 0~5' WHEN COUNT(d.user_id) &gt;= 6 AND COUNT(d.user_id) &lt;= 10 THEN 'b. 6~10' WHEN COUNT(d.user_id) &gt;= 11 AND COUNT(d.user_id) &lt;= 30 THEN 'c. 11~30' WHEN COUNT(d.user_id) &gt;= 31 THEN 'd. 31~' ELSE NULL END AS views FROM data d JOIN first_visit fv ON d.user_id = fv.user_id AND d.date_ymd = fv.first_visit_date WHERE d.event_type = 'view' GROUP BY d.user_id, first_visit_date
),
retention_cohort AS ( SELECT fv.user_id, fv.first_visit_date, fv.views, d.date_ymd, CAST(JULIANDAY(d.date_ymd) - JULIANDAY(fv.first_visit_date) AS INT) AS days_since_first_visit FROM first_visit_with_views fv JOIN data d ON fv.user_id = d.user_id
),
daily_active_users AS ( SELECT first_visit_date, views, days_since_first_visit, COUNT(DISTINCT user_id) AS retained_users FROM retention_cohort WHERE days_since_first_visit &gt;= 0 GROUP BY first_visit_date, views, days_since_first_visit
),
total_users AS ( SELECT first_visit_date, views, COUNT(DISTINCT user_id) AS total_users_cohort FROM first_visit_with_views GROUP BY first_visit_date, views
)
SELECT dau.first_visit_date, dau.views, dau.days_since_first_visit, dau.retained_users, tu.total_users_cohort, CAST(dau.retained_users AS REAL) / tu.total_users_cohort AS retention_rate
FROM daily_active_users dau
JOIN total_users tu ON dau.first_visit_date = tu.first_visit_date AND dau.views = tu.views
ORDER BY dau.first_visit_date, dau.views, dau.days_since_first_visit;
"""
cohort_retention_rate = pd.read_sql(query_cohort_retention, conn)
cohort_retention_rate.head()
'''
#EDA
df_web_log2['event_time'] = pd.to_datetime(df_web_log2['event_time'], format='%Y-%m-%d %H:%M:%S') df_web_log2.drop(columns=['category_id', 'category_code', 'brand'], inplace=True, axis=1, errors='ignore')
df_web_log2['date_ymd'] = df_web_log2['event_time'].dt.date
df_web_log2.head() df_web_log2.info()
#Cohort Views
first_visit = df_web_log2[ df_web_log2['event_type'] == 'view'
].groupby('user_id')['date_ymd'].min().reset_index()
first_visit.columns = ['user_id', 'first_visit_date'] first_day_views = df_web_log2[ (df_web_log2['event_type'] == 'view')
].merge( first_visit, on='user_id'
).query('date_ymd == first_visit_date') view_counts = first_day_views.groupby(['user_id', 'first_visit_date']).size().reset_index(name='view_count') view_counts['views'] = (view_counts['view_count'] .map(lambda x: 'a. 0~5' if x &lt;= 5 else 'b. 6~10' if x &lt;= 10 else 'c. 11~30' if x &lt;= 30 else 'd. 31~')) df_retention = df_web_log2.merge( view_counts[['user_id', 'first_visit_date', 'views']], on='user_id'
) df_retention['days_since_first_visit'] = (pd.to_datetime(df_retention['date_ymd']) - pd.to_datetime(df_retention['first_visit_date'])).dt.days start_date = df_web_log2['date_ymd'].min()
end_date = df_web_log2['date_ymd'].max() date_range = pd.date_range(start=start_date, end=end_date)
valid_periods = []
for date in date_range: max_days = (pd.to_datetime(end_date) - date).days valid_periods.extend([ { 'first_visit_date': date.date(), 'days_since_first_visit': day } for day in range(max_days + 1) ]) valid_df = pd.DataFrame(valid_periods) daily_users = df_retention[ df_retention['days_since_first_visit'] &gt;= 0
].groupby(['first_visit_date', 'views', 'days_since_first_visit'])['user_id'].nunique().reset_index(name='retained_users') daily_users = pd.merge( daily_users, valid_df, on=['first_visit_date', 'days_since_first_visit'], how='inner'
) total_users = view_counts.groupby(['first_visit_date', 'views'])['user_id'].nunique().reset_index(name='total_users_cohort') cohort_retention_rate = pd.merge( daily_users, total_users, on=['first_visit_date', 'views']
)
cohort_retention_rate['retention_rate'] = cohort_retention_rate['retained_users'] / cohort_retention_rate['total_users_cohort'] cohort_retention_rate = cohort_retention_rate.sort_values(['first_visit_date', 'views', 'days_since_first_visit'])
# Q8에서 생성한 데이터를 시각화하기 위한 함수 선언
# Q8에서 데이터를 전처리 하지 못한 경우, # 제공된 Q8.csv 파일 사용 # 해당 함수의 주된 목적은 내가 원하는 범위를 지정하여 그래프를 출력하는 것입니다.
# 사용된 입력 인자와 출력 결과는 예시 출력 결과들을 확인해주세요
# 정의된 함수에서 title_text 입력인자는 어떻게 다룰 것인지 스스로 판단해주세요
def graph_selected_range(day_range, days_col, retention_col, view_col, title_text=None): # title_text = title_text or f'{day_range}일까지의 리텐션 그래프' title_text = title_text or '설정된 제목이 없습니다.' cohort_retention_avg = cohort_retention_rate.query(f'{days_col} &lt;= {day_range}')\ .groupby([days_col, view_col])[retention_col].mean().reset_index() plt.figure(figsize=(15, 6)) sns.lineplot(data=cohort_retention_avg, x=days_col, y=retention_col, hue=view_col) plt.title(title_text) plt.show() graph_selected_range(day_range=20, days_col = 'days_since_first_visit', retention_col = 'retention_rate', view_col = 'views', title_text='20일까지의 리텐션 그래프')
#Retention Curve 그래프 시각화
graph_selected_range(day_range=5, days_col = 'days_since_first_visit', retention_col = 'retention_rate', view_col = 'views', title_text='5일까지의 리텐션 그래프')
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/10w-실습-과제2_cohort-retention.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/10W - 실습 과제2_Cohort Retention.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 04 Feb 2025 05:18:24 GMT</pubDate></item><item><title><![CDATA[2025-02-03 슬픈 일, 갖고 싶은 초능력]]></title><description><![CDATA[
"오늘 오후 슬퍼할 일이 있었는가? 그 강도를 1에서 10으로 표현한다면? On a scale of one to ten, how sad are you? Why?" 슬픈 일은 딱히 없었지만, 있었다고 한들 그 누구도 몰랐을 거다. 세월살이는 감정을 절제하고 그 발효시점을 지연하는 방법을 사람이 터득하도록 훈련시킨다. 나도 나이가 들면서 10의 슬픔을 5로 절제하고, 5를 1로 절제하는 법을 배웠다. 감당할 수 있는 슬픔의 크기가 점점 더 커진다는 뜻이다. 오늘 슬픈 일은 없었다만, 그러나 이건 퍽 슬픈 사실이다.
대학생 때, 항상 싱글벙글 잘 웃던 친구가 있었다. (내가 대학을 남들보다 일찍 갔기에 엄연히 따지면 누나지만…) 반면에 난 항상 심각하고 표정이 없는 사람이었다. 그 친구를 보면서 ‘항상 뭐 저리 실 없이 웃고 다닐까, 걱정도 없고 거참 상팔자다’라고 은근히 생각하던 속내가 있었다. 엄밀히 말하자면 짐짓 얕보는 마음이었다.
학기를 보내면서 서로 친해지고 난 뒤의 일이다. 종종 함께 술을 마시던 친구였고, 그날도 별 다른 일 없이 저녁에 잠깐 술을 먹자고 한 뒤에 그 친구를 비롯해 3명이 술집에 모였다.
나는 그 날 유독 마음에 거리끼는 일이 있었다. 아니, 줄곧 목적 없이 살고 있는 저 자신 때문에 화가 나 있었다는 게 옳은 말일 것이다. 세상은 암만 봐도 내 편이 아닌 것 같았고, 갈피를 잡지 못하고 방황하는 마음은 깃대에 매달려 바람 부는 대로 나부끼고 있었다.
그저 바람이 조금 불던 날이었을 뿐이다. 나는 친구에게 성토하듯 내 신세를 한탄하며 내가 겪는 불행의 크기를 쇼케이스하듯 떠벌렸다.
술을 마시면서 계속 나를 위로해주던 그 친구로부터, 그 날 난 뜻밖의 얘기를 듣게 되었다.
그녀가 어렸을 때 가정의 불화로 부모님이 이혼한 것, 편부모 가정에서 자라면서 넉넉치 못한 형편 덕에 많은 고생을 한 것, 공부를 계속 하고 싶어서 이미 학생일 때부터 여러 아르바이트를 하며 사회에 뛰어든 것. 그렇게 원하던 대학에 오기까지의 이야기.
내가 그 순간 스스로에게 느낀 모멸감은 일찍이 겪어 보지 못한 거대한 것이었다. 거센 바람이 뇌 안에서 메아리치는 것 마냥 끊임 없이 비난을 던져 댔다. 그 비난의 아픔보다 부끄러움이 더 컸다. 날 위로 하던 나의 불쌍한 내 친구에게 나는 무슨 말이나 위로를 했던지 기억조차 나질 않는다.
어찌저찌 자리를 마무리하고 집에 와서는 도통 잠을 이룰 수가 없었다. 실존하는 내 어리석음의 크기를 직접 목도한 충격은 아무래도 당시의 낮은 정신력으로는 견딜 수 있는 것이 아니었다. 아주 길고 또 고통스러운 밤이었다.
여러 해가 흘렀다. 서로의 소식이 닿지 않은지도 10년이 넘었을 무렵이고, 그 불에 데인 듯 아팠던 기억은 아주 까마득히 잊혀진 거 같았다. 그 무렵 나는 호주에서 타향살이를 하고 있었다. 호주에서의 생활이 너무나 힘들어서 향수에 젖는 날이면 나는 좋아하는 작가의 글을 찾아서 읽었다. 소설가 ‘박완서’의 책을 보았던 날이다. 그리고 한 문장에서 숨이 멎어버렸다. ”아무렇지 않지 않은 사람이 아무렇지도 않아 보였다면 그게 얼마나 눈물겨운 노력의 결과였는지는 한 번도 생각해본 적 없으시죠. - ‘나의 가장 나종 지니인 것’ 그 날 일말의 저항도 없이 터져버린 눈물은,
그 때의 그녀에 대한 생각이 나서였을까.
아니면 나 또한 이제야 어른이 되었다는 감격의 눈물이었을까. 갖고 싶은 초능력은? 우주를 누비는 능력?
오늘의 '생각을 자극'하는 글귀
사람들이 나에게 실망하더라도 함부로 선을 넘지 못하게 하라.
나에게 죄책감을 심어주는 사람의 행동을 내버려둔다면 내 감정이 그 사람의 기대에 좌우하도록 방치하는 것이다. 사람들이 나에게 실망했다고 말하는 것이 내가 실패했다는 증거는 아니다. 그 누구도 나에게 책임을 강요할 권리는 없다. 때로는 선을 지키기 위해 사람들을 실망시켜야 할 수도 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-03-슬픈-일,-갖고-싶은-초능력.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-03 슬픈 일, 갖고 싶은 초능력.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Feb 2025 14:35:28 GMT</pubDate></item><item><title><![CDATA[2025-01-31 어떤 사람이 되고 싶은지, 첫 경제활동]]></title><description><![CDATA[
궁극적으로 어떤 사람이 되고 싶은가? What kind of person do you want to become?" 내가 어릴 때 굉장히 유명했던 책 중에 "영혼을 위한 닭고기 스프"라는 책이 있다.
책에선 여러 가지 이야기가 소개되는데 나는 이중에 한 목사의 자서전 격의 이야기를 좋아한다. "한 마을에 한 목사가 살고 있었습니다. 그는 세상을 더 나은 곳으로 만들고 싶다는 열망을 품고, 교회에서 설교를 하고, 가난한 이들을 돕고, 마을 사람들의 갈등을 해결하려 애썼습니다. 하지만 시간이 지나면서 그는 점점 좌절감을 느끼기 시작했습니다. 아무리 노력해도 세상은 쉽게 변하지 않았고, 사람들은 여전히 다투었으며, 가난한 이들은 계속해서 어려움을 겪고 있었습니다. 그러다 문득 그는 생각했습니다. "세상을 변화시키는 것이 너무 거대한 목표라면, 내 주변부터 바꾸는 건 어떨까?" 그는 마을을 변화시키는 데 집중하기 시작했습니다. 이웃들과 더 많은 대화를 나누고, 그들의 고민을 깊이 이해하려 했으며, 좀 더 현실적인 도움을 주기 위해 노력했습니다. 하지만 시간이 지나면서 또 다른 좌절이 찾아왔습니다. 주변의 작은 변화는 일어나기도 했지만, 근본적으로 사람들의 본성은 쉽게 바뀌지 않았기 때문입니다. 그러던 어느 날, 그는 깨달았습니다. "사실 가장 먼저 바뀌어야 했던 건 나 자신이었어." 그는 자신의 기대와 실망, 그리고 세상을 바꾸고 싶다는 욕심이 오히려 변화를 가로막고 있었다는 사실을 깨달았습니다. 자신이 먼저 변하지 않으면, 진정한 변화는 일어나지 않는다는 걸 알게 된 것입니다. 그 후 그는 이전처럼 세상을 바꾸려고 애쓰기보다는 자신을 먼저 돌아보고 변화시키는 것에 집중했습니다. 마음을 열고 더 겸손해졌으며, 사람들을 있는 그대로 받아들이는 법을 배웠습니다. 그러자 신기하게도 주변 사람들도 점차 변하기 시작했습니다. 그가 그들에게 훈계하거나 설득하려 하지 않았음에도 말입니다." 내가 바꿀 수 있는 건 나 자신뿐임을 항상 인지하려고 노력한다. 주변 환경과 동료들에게 무언가를 바라기보단 내가 먼저 무언가를 나눌 수 있는 사람이 되길 바란다.(쉽지 않은 일이라고 매번 좌절하긴 하지만) 나의 궁극적인 목표는 행복한 사람이 되는 것이다. 진짜 행복은 전염력을 가진 것이라 그렇게 행복한 나의 곁 주변도 행복하길 바란다. 종국에는 경계 없이 뻗어가는 행복과 함께 멀리 멀리 있는 모두들이 나처럼 행복했으면 좋겠다. 처음으로 돈을 벌었던 순간을 기억해? 그 돈은 어떻게 벌었어? 초등학교에 다닐 때 "심부름 센터"라는 사업을 했지. 심부름에 값을 매겨서 집 안 벽에 딱 메뉴를 붙여놨어. 두부 사오기 200원 안마 500원 이런 식으로 ㅋㅋ 자꾸 심부름을 시켜 달라고 떼 쓰는 악성 사업자에 대한 민원 급증으로 사업을 금방 접긴 했지만,
뭐 어때 재밌잖아? 한 잔해~
오늘의 '생각을 자극'하는 글귀
"자존감이 높고 삶이 앉어적인 사람은 타인의 잣대에 스스로를 가두지 않는다. 자신감을 키우려면 자존감을 키워야 한다. 불안감을 줄이려면 흔들리지 않는 자존감이 필요하다. 타인이 자신을 어떻게 판단하는지에 따라 자존감이 달라지면 항상 불안정할 수밖에 없다. 자신의 능력과 가치에 대한 기준을 스스로 갖춰야만 안정감을 느낄 수 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-31-어떤-사람이-되고-싶은지,-첫-경제활동.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-31 어떤 사람이 되고 싶은지, 첫 경제활동.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Feb 2025 13:16:56 GMT</pubDate></item><item><title><![CDATA[2025-02-02 함께 사는 사람, 소울 푸드]]></title><description><![CDATA[
"누구와 함께 사는가? Who do you live with?" 나 혼자 산다.
하하하. 너의 소울 푸드는? 라면.
파스타.
볶음밥.
감바스.
반찬이 따로 필요 없는 것들만 먹는 듯.
(올인원을 좋아해)
정말 좋아하는 건 안 질리고 계속 먹음 ㅋㅋㅋ
매운 걸 좋아해서 뭘 하든 청양고추, 페페로치노를 넣는 편
예전엔 진짜 심하게 자극적으로 먹었는데 최근엔 좀 많이 얌전(?)해졌어.
그건 그렇고 아주 최근에 카츠디나인이란 돈가츠 집에서 가츠에 트러플 오일을 뿌려 먹어보라고 해서 시도해 봤는데, 세상에 너무 맛있어서 놀람. 완전 추천!
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-02-함께-사는-사람,-소울-푸드.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-02 함께 사는 사람, 소울 푸드.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Feb 2025 13:13:28 GMT</pubDate></item><item><title><![CDATA[10W - 실습 과제3_Tableau 시각화]]></title><description><![CDATA[후기
아무래도 Power BI에 익숙한 터라 좀 다른 개념들이 많아서 헷갈린 부분들이 있었다.
아무래도 직관적 UI는 Power BI 쪽이 좀 더 나은 듯…
다만 Tableau Public으로 무료로 웹에 호스팅할 수 있는 기능은 확실히 좀 유용하다. Dataset: <a data-tooltip-position="top" aria-label="https://www.data.go.kr/data/15062386/fileData.do" rel="noopener nofollow" class="external-link is-unresolved" title="https://www.data.go.kr/data/15062386/fileData.do" href="https://www.data.go.kr/data/15062386/fileData.do" target="_self">2023 소방청 구조활동 데이터</a> 위 링크의 데이터셋을 다운 받아서 python으로 EDA를 진행했다.
Null 값 drop
object로 저장된 날짜, 시간 열 datetime 포맷으로 변경
이상치 제거 (발생장소_시,군,구가 이상하게 저장된 데이터가 꽤 많았음.) 정답 출력물로 안내 받은 pdf와 동일하게 시각화 진행<br>
<img alt="Pasted image 20250127181646.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250127181646.png" target="_self"><br>
<img alt="Pasted image 20250127181709.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250127181709.png" target="_self">
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/10w-실습-과제3_태블로-시각화.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/10W - 실습 과제3_태블로 시각화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Feb 2025 09:12:28 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250127181646.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250127181646.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[10W - 실습 과제1_EDA 및 SQL 연결]]></title><description><![CDATA[후기
과제 양이 점점 많아지는 듯. 쿼리문을 python으로 짜보는 건 신선했다.
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px import warnings
warnings.filterwarnings('ignore')
# 데이터 정보
# ab_testing_prep : https://www.kaggle.com/datasets/melihkomutgan/ab-testing-dataset
df_ab_test_prep = pd.read_csv('../10W/fc_data/ab_testing_prep.csv', encoding='utf-8')
# web_log_data : Tableau 분석 강의 데이터
df_web_log = pd.read_csv('../10W/fc_data/web_log_data.csv', encoding='utf-8')
# ab_test_data : Tableau 분석 강의 데이터 df_ab_test = pd.read_csv('../10W/fc_data/ab_test_data.csv', encoding='utf-8')
# user_info : Tableau 분석 강의 데이터
df_user_info = pd.read_csv('../10W/fc_data/user_info_data.csv', encoding='utf-8')
# 클래스 이름 Funnel_Data_Analysis
# 동일 클래스 내에 아래의 메서드들을 구현
# 사용 데이터 : web_log_data.csv # 문제 1. 클래스 메서드를 통한 데이터 전처리 및 데이터 탐색 # 생성자 메서드
# - 입력된 데이터프레임을 인스턴스 속성(df)에 할당
# - 입력인자 : 데이터프레임 # Execute_EDA 메서드
# - 입력된 데이터프레임 분석 및 전처리 작업
# - 입력인자 : 이벤트 타입 컬럼 이름
# - event_type별로 해당 이벤트가 몇 번 발생했는지 확인 및 시각화
# - 'rate' : event_type별 발생 비율 class Funnel_Data_Analysis: def __init__(self, df): self.df_original = df.copy() self.df = None self.event_counts = None def Execute_EDA(self, event_col='event_type'): self.df = self.df_original.copy() print('데이터 탐색 시작') print('상단 5개 데이터') print(self.df.head()) if 'event_time' in self.df.columns: self.df['event_time'] = pd.to_datetime(self.df['event_time']) drop_cols = ['category_id', 'category_code', 'brand'] for c in drop_cols: if c in self.df.columns: self.df.drop(c, axis=1, inplace=True) total = len(self.df) counts = self.df[event_col].value_counts() event_counts_df = pd.DataFrame({ event_col: counts.index, 'count': counts.values }) print('\n이벤트 타입별 발생횟수 확인') print(event_counts_df) event_counts_df['rate'] = event_counts_df['count'] / total print('\n이벤트 타입별 발생횟수/비율 확인') print(event_counts_df) plt.rcParams['font.family'] = 'Malgun Gothic' plt.figure(figsize=(10, 6)) sns.barplot(data=event_counts_df, x=event_col, y='count') plt.xlabel(event_col) plt.ylabel('Count') plt.title('이벤트 타입별 발생 횟수 - barplot') plt.show() self.event_counts = event_counts_df return def Funnel_Graph(self): if self.event_counts is None: print("EDA를 실행하지 않았습니다. 먼저 Execute_EDA() 메서드를 호출하세요.") return fig = px.funnel( data_frame=self.event_counts, x='event_type', y='rate' ) fig.update_traces(texttemplate="%{value:.2%}") fig.show() data_class = Funnel_Data_Analysis(df=df_web_log)
# 문제 2. 클래스 메서드를 통한 퍼널 시각화
# Execute_Funnel 메서드
# - 퍼널 차트 생성
# - 입력인자 : 없음
# - 소수점 두 번째 자릿수까지 출력 data_class.Funnel_Graph()
# ※ 문제 풀이를 위한 준비사항
# : AB 테스트 데이터를 저장하기 위한 데이터베이스 및 테이블 생성
# 데이터베이스 및 테이블 생성 방식은 자유
# 테이블의 자료형 구성은 csv 파일을 보며 판단할 것
# 데이터 입력은 제공된 sql 파일 혹은 원하는 방식으로 입력
# csv : ab_testing_prep.csv / sql : ab_testing_prep.sql # 이미지는 참고용 / 따로 이미지 파일 제출할 필요 X import sqlite3 conn = sqlite3.connect(':memory:') df_ab_test_prep.to_sql('ab_test_prep', conn, if_exists='replace', index=False)
# 1. Python과 SQL을 연결하고 해당 데이터베이스의 테이블을 불러와서 데이터프레임 형식으로 불러오기
# - 원본 데이터프레임에 CVR 컬럼 추가
# - CVR 값은 Purchase/Click 식을 통해 계산
# 2. 불러온 데이터를 control 그룹과 test 그룹으로 분리
# 3. 각 데이터의 상단 5개 데이터 및 결측치 정보 확인 query = """ SELECT * FROM ab_test_prep;
""" df_ab_test_prep_sql = pd.read_sql(query, conn)
print('========== 원본 데이터 ============')
print(df_ab_test_prep_sql.head()) df_ab_test_prep_sql['CVR'] = df_ab_test_prep_sql['Purchase'] / df_ab_test_prep_sql['Click'] print('========== CVR 컬럼 추가 ============')
print(df_ab_test_prep_sql.head()) control_group = df_ab_test_prep_sql[df_ab_test_prep_sql['test_group'] == 'control'] print('========== 데이터 그룹 나누기 ============')
print(control_group.head()) test_group = df_ab_test_prep_sql[df_ab_test_prep_sql['test_group'] == 'test'] print(test_group.head()) print('========== 데이터 결측치 확인 ============')
print(control_group.isnull().sum())
print(test_group.isnull().sum())
# Q3에서 control / test 그룹 데이터를 생성하지 못한 경우,
# 제공된 Q3_control.csv, Q3_test.csv 사용 # 함수 df_analysis
# user_id와 test_group을 제외한 컬럼들에 대한 t-test 수행
# 반복문을 돌며, 유의수준 0.05를 기준으로 귀무가설의 기각/채택에 따른 결론 출력 # 입력인자 : (1) Q3에서 만든 Control 그룹, (2) Q3에서 만든 Test 그룹, (3) 컬럼 리스트
# 출력 : 각 컬럼에 대한 t-test 결과 출력
# 반환값 : 없음
import scipy.stats as stats def df_analysis(df_1, df_2, column_list): for column in column_list: print(f"\n=====================\n ") t_stat, p_value = stats.ttest_ind(df_1[column], df_2[column], equal_var=False) print(f"{column}에 대한 t-test 수행\n") if p_value &lt; 0.05: print(f"두 집단의 {column}에 대한 t-test 값 : {p_value}") print("귀무가설 기각") print(f"두 집단에서 {column}의 평균값에는 유의미한 차이가 존재한다.") else: print(f"두 집단의 {column}에 대한 t-test 값 : {p_value}") print("귀무가설 채택") print(f"두 집단에서 {column}의 평균값에는 유의미한 차이가 존재하지 않는다.") df_analysis(df_1 = control_group, df_2 = test_group, column_list = ['CVR', 'Click', 'Purchase', 'Earning']) conn.close()
# ab_test_data / user_info_data 불러오기
# sqlite3를 통해 데이터 전처리 수행
# 두 데이터 Join user_id 기준 join
# 셀에서 출력한 데이터프레임 정보는 모두 출력 # ab_test_data : Tableau 분석 강의 데이터 df_ab_test = pd.read_csv('../10W/fc_data/ab_test_data.csv', encoding='utf-8') # user_info : Tableau 분석 강의 데이터
df_user_info = pd.read_csv('../10W/fc_data/user_info_data.csv', encoding='utf-8') conn = sqlite3.connect(':memory:') df_ab_test.to_sql('ab_test_data', conn, if_exists='replace', index=False)
df_user_info.to_sql('user_info', conn, if_exists='replace', index=False) query_ab_test = """
SELECT *
FROM ab_test_data
WHERE user_id IS NOT NULL AND clicks IS NOT NULL AND views IS NOT NULL; """
df_ab_test_sql = pd.read_sql(query_ab_test, conn) query_user_info = """
SELECT *
FROM user_info
WHERE user_id IS NOT NULL AND age_group IS NOT NULL AND test_group IS NOT NULL;
"""
df_user_info_sql = pd.read_sql(query_user_info, conn) print(f"ab_test 데이터 형태 : {df_ab_test_sql.shape}")
print(df_ab_test_sql)
print(f"user_info 데이터 형태 : {df_user_info_sql.shape}")
print(df_user_info_sql)
# 두 데이터 Join user_id 기준 join 결과
# CTR 컬럼은 (clicks / views) * 100을 통해 계산하고 소수점 두 번째 자리까지 표현 query_join = """
CREATE TABLE IF NOT EXISTS joined_table AS
SELECT a.user_id , a.clicks , a.views , ROUND((CAST(a.clicks AS FLOAT) / NULLIF(CAST(a.views AS FLOAT), 0)) * 100, 2) as CTR , b.age_group , b.test_group FROM ab_test_data a
LEFT JOIN user_info b ON a.user_id = b.user_id
"""
conn.execute(query_join) query_select = """
SELECT *
FROM joined_table
"""
df_joined = pd.read_sql(query_select, conn) print(df_joined)
# 위에서 sqlite3를 통해 만든 데이터에 대한 정보를 pandas 함수를 통해 확인 print(f"\'결합 수행 이후 데이터 형태 : {df_joined.shape}\'")
print(df_joined.describe())
# 동일하게 sqlite3를 통해 데이터 전처리 수행
# 위에서 생성한 테이블을 전처리하여 필요한 데이터 생성 # df_test : df_1에서 test 그룹만 선택
# df_control : df_1에서 control 그룹만 선택
# df_test와 df_control 그룹 생성은 sqlite3를 활용할 것 query_control = """
SELECT *
FROM joined_table
WHERE test_group = 'control'
""" query_test = """
SELECT *
FROM joined_table
WHERE test_group = 'test'
""" df_test = pd.read_sql(query_test, conn)
df_control = pd.read_sql(query_control, conn) # 각 그룹에서 변수별 상관관계를 시각화
# 시각화는 seaborn 라이브러리 혹은 원하는 방식 사용 plt.figure(figsize=(20, 6)) plt.subplot(1, 3, 1)
numeric_all = df_joined[['clicks', 'views', 'CTR']]
sns.heatmap(numeric_all.corr(), annot=True, cmap='coolwarm')
plt.title('전체 집단에서의 상관관계') plt.subplot(1, 3, 2)
numeric_test = df_test[['clicks', 'views', 'CTR']]
sns.heatmap(numeric_test.corr(), annot=True, cmap='coolwarm')
plt.title('test 집단에서의 상관관계') plt.subplot(1, 3, 3)
numeric_control = df_control[['clicks', 'views', 'CTR']]
sns.heatmap(numeric_control.corr(), annot=True, cmap='coolwarm')
plt.title('control 집단에서의 상관관계') plt.tight_layout()
plt.show() conn.close() ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/10w-실습-과제1_eda-및-sql-연결.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/10W - 실습 과제1_EDA 및 SQL 연결.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 03 Feb 2025 09:12:13 GMT</pubDate></item><item><title><![CDATA[Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 2]]></title><description><![CDATA[<a data-href="Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1" href="https://64etuor.github.io/600_tech-stack/appsheet/appsheet를-활용한-작업-일보-어플리케이션-최단기간-구현-1.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1</a>에서 이어지는 내용입니다.<br><img alt="Pasted image 20241015162413.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015162413.png" target="_self"><br><img alt="Pasted image 20241015162616.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015162616.png" target="_self"><br><img alt="Pasted image 20241015163201.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015163201.png" target="_self"><br><img alt="Pasted image 20241015163523.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015163523.png" target="_self"><br><img alt="Pasted image 20241015163728.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015163728.png" target="_self"><br><img alt="Pasted image 20241015163828.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015163828.png" target="_self">불량 발생?이 Yes로 체크될 경우에만 아래의 불량 정보 입력 칸이 노출된다.<br><img alt="Pasted image 20241015163956.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015163956.png" target="_self">IF(IN([_THISROW].[ID],
weldhisotry[ID]),TRUE,
NOT(IN([_THIS],weldHistory[ModuleKey])))
현재 행 ID가 테이블 내에 존재하는지 확인하고,
중복된 ID가 없을 경우 ModuleKey 중복 여부를 검사한다.<br><img alt="Pasted image 20241017083423.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017083423.png" target="_self"><br><img alt="Pasted image 20241017094431.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017094431.png" target="_self"><br><img alt="Pasted image 20241017094637.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017094637.png" target="_self"><br>
<img alt="Pasted image 20241017094804.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017094804.png" target="_self"><br>
<img alt="Pasted image 20241017095137.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017095137.png" target="_self">왼쪽 메뉴 패널의 하단에서 SYSTEM GENERATED라는 자동 생성된 뷰의 항목을 볼 수 있다. 방금 생성된 Form의 Display name을 수정해 준다.<br><img alt="Pasted image 20241017095634.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017095634.png" target="_self">처음에 설계한 대로 작업 시작? / 작업 종료? 버튼을 누를 때마다
NOW() 함수로 시간을 계산하여 ReworkStartTime / ReworkEndTime 에 입력된다.
그리고 ReworkEndTime이 입력된 시점에 reworkDuration이 계산되어 화면에 표시된다.<br><img alt="Pasted image 20241017100055.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017100055.png" target="_self"><br><img alt="Pasted image 20241017100621.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017100621.png" target="_self">데이터를 실제로 입력하여 문제가 없는지 확인한다. 그리고 엔드유저가 개발 의도대로 사용하지 않았을 경우에 생길 수 있는 문제점도 전부 체크해 준다.이제 앱을 배포할 준비가 거의 다 되었다. 앱시트 홈 화면 왼쪽 패널 맨위에 로켓 모양의 아이콘이 Deploy 버튼이다. 해당 버튼을 누르면 Deploy, Versions, Monitor, Collaborate &amp; Publish 설정을 할 수 있다. 먼저 Deployment Check를 해본다.<br>
<img alt="Pasted image 20241017101032.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017101032.png" target="_self">
위의 단계대로 작업을 진행했다면 필연적으로 여러가지 Warning과 Error가 뜰 것이다.(Error만 없다면 Deploy가 가능하지만 가급적 최소 요건은 맞춰 주면 좋다.)<br>
<img alt="Pasted image 20241017101224.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017101224.png" target="_self">
하나 하나 살펴보면, 아래와 같은 메세지를 확인할 수 있다.<br>
<img alt="Pasted image 20241017101312.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017101312.png" target="_self"><br>
<img alt="Pasted image 20241017101322.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017101322.png" target="_self"><img alt="Pasted image 20241017101350.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017101350.png" target="_self">
App description의 경우 Settings &gt; Information에서 경고 문구의 내용들을 수정해 주면 된다. Short Description과 Industry를 정하라고 하니, 해당 항목을 수정해준다.<br>
<img alt="Pasted image 20241017101539.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017101539.png" target="_self">
Custom Logo의 경우, 로고가 기본설정된 로고일 경우 뜨는 경고 메세지이다. Settings &gt; Theme &amp; Brand에서 해당 내용을 수정해준다. 로고 파일을 Url로 추가해주거나 Google Drive 등에 업로드해서 불러온다.
마지막으로 Account에서 발생한 Error는 User signin 기능이 Free plan에서 지원하지 않는다는 내용이다. Security &gt; Require sign-in 항목에서 Require user signin? 을 FALSE로 수정하고, 아래의 보안 항목 관련 확인란에(데이터가 공개된다는 것을 인지하였는가? 보안이 되지 않는 앱이라는 것을 인지하였는가?) 체크를 해주면 된다.<br>
<img alt="Pasted image 20241017103802.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241017103802.png" target="_self">
이후, Deplyment Check를 다시 진행하면 모두 Passed 된 것을 확인할 수 있다.이제 앱에서 입력하는 데이터가 실시간으로 구글 시트에 등록된다.
이 데이터를 바탕으로 대시보드를 구현하여 웹에 Publish 하면 실시간으로 어디서든 작업 현황을 볼 수 있다.<br>
<img alt="batch_2024-12-08 23 39 34.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-08-23-39-34.png" target="_self">실제로 앱 개발에 걸린 시간은 3시간 내외로, (오히려 이 글을 작성하는 시간이 훨씬 오래 걸렸다.) 빠른 시간 안에 MVP를 만들어 테스트를 진행할 수 있다는 점에서 Appsheet 활용 가능성은 무궁무진하다. 이런 MVP 기능의 앱을 만들어서 실제로 테스트를 해보고 필요 데이터를 추가하고 정리하는 등 과정을 거치면 이후에 데이터 솔루션을 직접 제작하든, 외주 제작을 하든 강력한 레퍼런스로 활용할 수 있다. 제작 기간과 디버깅 기간도 훨씬 단축될 것이다. 사실 엔터프라이즈급 데이터가 아니라면, Appsheet를 구독하여 사용하는 것도 비용 절감 차원에서는 하나의 옵션이 될 수 있겠다고 생각한다.(프리미엄 플랜에서는 Automation 등 다른 기능 여러가지 기능도 지원한다.) 여러가지 LOW-CODE 툴 중에서도 커스텀 제약이 많은 편이긴 하지만, 반대로 말하면 커스텀 제약이 많기 때문에 개발 기간도 그만큼 짧아진다. 개발 시간 단축이 목표라면 Appsheet 만한 선택지가 많지는 않을 것이라고 생각한다.]]></description><link>https://64etuor.github.io/600_tech-stack/appsheet/appsheet를-활용한-작업-일보-어플리케이션-최단기간-구현-2.html</link><guid isPermaLink="false">600_Tech Stack/Appsheet/Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 2.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 02 Feb 2025 15:45:27 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20241015162413.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015162413.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[project_diagram]]></title><description><![CDATA[ "쓸데없는 메모 3위 '많이 쓴 메모' 2위 '보고 쓴 메모' 1위는..." 25년 기록학 전문가가 말하는 메모 '제대로' 하는 법 | 김익한 교수 | 빅퀘스천 30회 ​⁠ - YouTube메모와 기록의 중요성 김익한 교수는 메모와 기록을 통해 개인의 성장과 삶의 변화를 이끌어내는 방법을 설명합니다. 메모는 단순한 기록이 아닌 자기 인식의 도구이며, 극단적 요약과 자기화가 핵심입니다. 계획과 구상 기록을 통해 전략적 사고가 가능해지고, 삶을 더욱 가치 있게 만들 수 있습니다. : <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=L7zWucx7TR8&amp;t=589s" target="_self">https://www.youtube.com/watch?v=L7zWucx7TR8&amp;t=589s</a> 🧠 기록을 통한 개인의 성장과 변화
📝 메모의 본질: 극단적인 요약과 자기화 2.1. 📝 메모를 하는 올바른 방법
2.2. 📝 메모의 기초: 자기화와 요약
2.3. 📝 비효율적인 메모 방식의 문제점
2.4. 📝 메모의 중요성과 현재 행위의 인식
2.5. 📝 지속적인 메모의 중요성 📝 구상 기록과 플래너의 중요성 3.1. 📝 생각 기록의 중요성
3.2. 📝 아침 플래닝의 중요성 및 효율적인 방법
3.3. 📝 구상 기록의 중요성과 방법
3.4. 📚 책 읽기의 목적과 자기 생각의 중요성 ✍️ 자기 인식과 기록의 중요성
🚀 기록형 인간으로의 변화 기록을 시작한 지 한 달 만에 머리 구조의 변화를 경험할 수 있다. [1-1]
매일 아침 플래닝을 통해 인생이 바뀔 수 있다. [1-2]
기록을 통해 전략적인 사람으로 발전할 수 있다. [1-3]
25년간 기록학을 전공한 김익한 교수는 기록 관리 경험을 개인의 삶에 적용하면 성장할 수 있다고 말한다. [1-4, 1-7] 메모는 극단적으로 요약하여 작성해야 한다. [2-5]
자기화가 중요하며, 이해한 내용을 내 방식으로 정리해야 한다. [2-14]
회의록도 핵심 키워드를 중심으로 작성해야 한다. [2-27]
메모는 기록 행위 자체가 각인을 돕는다. [2-56]
일상 기록은 자아 인식을 높이고 지적으로 풍요로운 삶을 만든다. [2-76] 메모는 조금 쓰는 것이 중요하다. [2-1]
깨달은 내용을 극단적으로 요약하고 명확히 정리해야 한다. [2-6]
많은 양을 기록하는 습관을 버려야 한다. [2-9] 정보를 자기화하여 기록하는 것이 핵심이다. [2-13]
이해한 내용을 자기 방식으로 정리해야 한다. [2-15]
극단적 요약은 시간 소모를 줄이고 전체 흐름을 파악하게 한다. [2-19] 회의에서 속기사처럼 메모하면 맥락 파악이 어렵다. [2-33]
키워드 메모와 자기 해석이 필요하다. [2-41]
효율적인 요약이 중요하며, 자기 이해와 자기화가 필수다. [2-50] 메모는 현재의 각인 과정이다. [2-55]
기록을 통해 과거 경험과 현재가 연결된다. [2-69]
비효율적인 메모는 정보를 소모하게 만든다. [2-72] 메모는 지적으로 풍요로운 삶을 만든다. [2-77]
자기 인식을 높이고 삶을 가치 있게 만든다. [2-81, 2-84] 구상 기록은 일 시작 전 목표를 상기하게 한다. [3-39]
하루 계획은 네 개에서 다섯 개의 목표로 줄이는 것이 효율적이다. [3-10] 일을 시작하기 전에 간단한 기록을 작성하면 명확한 방향성을 제공한다. [3-2, 3-3] 아침에 가장 중요한 목표를 설정하고 계획을 세우는 것이 중요하다. [3-7, 3-12]
큰 틀에서의 사고가 효율적이다. [3-9] 구상 기록은 일을 체계적으로 진행하게 돕는다. [3-39, 3-49]
핵심 성공 요인(CSF)을 고려하여 목표를 설정한다. [3-42] 책 읽기의 목적은 궁금증 해소에 있다. [3-63]
자기 생각을 가지고 질문하며 독서를 해야 한다. [3-64] 강의 내용을 검토하고 메모하는 과정이 중요하다. [4-1]
독서카드로 이해한 내용을 정리하면 지식의 깊이를 높인다. [4-25]
기록을 통해 자기 의심을 해소하고 성장할 수 있다. [4-31] 기록을 통해 전략적 사고가 가능해진다. [5-1]
삶을 주관적으로 이끌 수 있는 기반이 된다. [5-3]
메모는 개인의 성장과 변화에 기여한다. [5-1]
김익한 교수 - 메모 ‘제대로’ 하는 법구상 기록 목표 설정: 목표는 큰 틀에서 정한다. (총 4~5개) 아침 계획: 1~2개 가량
낮 계획: 1개 가량
밤 계획: 2개 가량 목적 설정: 목적을 기록하여 계속 상기한다.
CSF(Critical Success Factors): 반드시 수행해야 하는 요소를 고려
Process화: 계획은 단계적으로 설정하여 체계화 단계 설정 → 단계별 아웃풋 예측 시뮬레이션: 정한 목표를 가지고 오늘의 하루를 시뮬레이션 해본다. Daily Planner영감 기록(문학) 떠오른 영감은 즉시 기록한다.
영감에 담긴 감정을 함께 기록한다.
매 주 토요일, 영감 기록을 확인하고 한 편의 글을 작성한다. Inspiration Note영감 기록(사업) 떠오른 영감은 즉시 기록한다.
영감에 담긴 배경이나, 영감을 떠올린 요인을 함께 기록한다.
영감이 떠오른 직후가 아닌 후일에 아래의 요소를 고려하여 종합 점수를 매긴다. 실현 가능성(Feasibility)
기대 이익 (Potential Profit)
시장 수용성 (Market Acceptance)
혁신성과 차별화 (Innovation &amp; Differentiation)
사회적 &amp; 환경적 영향 (Social &amp; Environmental Impact)
리스크와 불확실성 (Risk and Uncertainty)
확장성 (Scalability)
나의 역량 (My Capabilities) 주기적인 품평회를 가지고, 가장 높은 점수를 받은 실현 가능한 아이디어를 실천에 옮긴다. Idea Note일상 기록 요약 기록: 시간 단위로 자신의 일상을 “한 줄” 정도로 기록한다.
회상 기록: 일기를 쓸 때 자신의 하루를 회상하여 본다. 기억이 잘 나지 않는 경우에는 일상 기록을 참고한다. Daily Note지식 기록 이해 단계: 책을 읽거나 강의를 들으면서 이해를 한다.
기록 단계: 핵심적 키워드 위주로 내용을 회상하며 자신의 “생각”을 써본다. ===&gt; Fix
일상 노트와 통합Knowledge Note어플리케이션: 모바일 환경, 데스크탑 환경 어디에서든 사용 가능
대시보드: 모바일, 데스크탑 환경 어디에서든 확인 가능 + 집안, 회사에 대시보드 설치?최대한 빠르게 단기 개발 → 이후 실제로 사용을 하면서 추가해야 하는 기능 등을 검토
노동력 외의 자원 투자 없음일상 기록, 구상 기록, 지식 기록, 영감 기록
Life Wheel 개념 ( 점수는 어떻게 계산??)
(폐기) 일일 체크리스트 ( 스키마를 어떻게 구상?? )
목표 설정 ( 목표와 Life Wheel 연동?? )
대시보드 (즉각적인 피드백)용돈 차감 사유 발생 시, 정해진 금액에서 차감하여 익월 용돈 산정
산정된 금액만큼 익월에 용돈 계좌에 입금한 주의 기록과 활동을 회고(템플릿 작성 + 대시보드 넣기?)<br>아이디어 노트<img src="https://64etuor.github.io/settings/attachments/pasted-image-20241217193929.png" draggable="false" target="_self">Pasted image 20241217193929.png<img src="https://64etuor.github.io/settings/attachments/pasted-image-20250103115906.png" draggable="false" target="_self">Pasted image 20250103115906.png<img src="https://64etuor.github.io/settings/attachments/20250104_142505.jpg" draggable="false" target="_self">20250104_142505.jpg<img src="https://64etuor.github.io/settings/attachments/pasted-image-20250103115833.png" draggable="false" target="_self">Pasted image 20250103115833.png그냥 갑자기 구상하다 말고 만들기 시작.]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/project_diagram.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/project_diagram.canvas</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:14:21 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241217193929.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241217193929.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[아이디어 노트]]></title><description><![CDATA[어플리케이션: 모바일 환경, 데스크탑 환경 어디에서든 사용 가능
대시보드: 모바일, 데스크탑 환경 어디에서든 확인 가능 + 집안, 회사에 대시보드 설치?최대한 빠르게 단기 개발 → 이후 실제로 사용을 하면서 추가해야 하는 기능 등을 검토
노동력 외의 자원 투자 없음일상 기록, 구상 기록, 지식 기록, 영감 기록
Life Wheel 개념 ( 점수는 어떻게 계산??)
(폐기) 일일 체크리스트 ( 스키마를 어떻게 구상?? )
목표 설정 ( 목표와 Life Wheel 연동?? )
대시보드 (즉각적인 피드백)용돈 차감 사유 발생 시, 정해진 금액에서 차감하여 익월 용돈 산정
산정된 금액만큼 익월에 용돈 계좌에 입금한 주의 기록과 활동을 회고(템플릿 작성 + 대시보드 넣기?)]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/아이디어-노트.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/아이디어 노트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:14:08 GMT</pubDate></item><item><title><![CDATA[SMOTE]]></title><description><![CDATA[이번에 알아볼 것은 불균형 데이터(Imbalanced Data) 처리에 대해서 알아보겠습니다. 불균형 데이터는 모델 학습에 좋지 않은 영향을 미치게되어 그 모델의 신뢰성을 떨어뜨리곤 하는데요. 그렇다면, 불균형 데이터가 가지고 있는 문제는 무엇이며, 이를 해결하기 위한 방법 중 오버샘플링에 대해서 알아보겠습니다. 추가적으로, 오버샘플링 기법 중 많이 활용되는 SMOTE(Synthetic Miniority Oversampling Technique)에 대해 알아보겠습니다. 1. 불균형 데이터와 불균형 데이터의 문제점- 불균형 데이터(Imbalanced Data)란, 불균형한 클래스 분포를 가진 데이터셋을 말합니다. - 불균형한 클래스 분포란, 하나의 클래스가 다른 클래스보다 훨씬 더 많은 샘플을 가지고 있는..]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/smote.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/SMOTE.md</guid><dc:creator><![CDATA[[[CodeCrafter]]]]></dc:creator><pubDate>Sun, 02 Feb 2025 05:48:46 GMT</pubDate><enclosure url="https://blog.kakaocdn.net/dn/vRUYi/btstXyBB4dY/BzTAcOhROpHh4jyqLlHveK/img.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://blog.kakaocdn.net/dn/vRUYi/btstXyBB4dY/BzTAcOhROpHh4jyqLlHveK/img.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-02-01 내일의 계획, 성취감이 컸던 일]]></title><description><![CDATA[
"내일 무엇을 할 계획인가? What is your resolution for tomorrow?" 내일은 우선 DA 과제부터 마무리해야 한다. 시간을 잘 쪼개서 쓰긴 했는데 요새 원체 바쁘다 보니 우선 해야 할 것도 뒤로 밀려 있다. 급한 불은 껐으니 다음 일도 잘 정리해 보자.
차순위로는 더베러톡톡에서 소개하기로 한 자료 마무리, 시뮬레이션 해봤을 땐 나름 재밌어 보였는데 결과는 항상 까봐야 아는 것이라… 별 부담은 없으니 그냥 원래 하던 대로의 발표에서 진지함을 286g 쯤 빼면 적당한 맛이지 않으려나 생각하는 중.
M/L 학습은 완전히 제껴 버렸다. 차주에 부담이 엄청 쏠리는 감이 없잖아 있는데 이미 엎질러진 물이니 잠을 줄여서라도 하는 수 밖에… 라고 생각하다보니 PT 시간도 이번 주까지 정하기로 했는데 완전히 잊어 버리고 있었다. 이리저리 펼친 일이 많다 보니 다 뒤죽박죽 엉망이다. 나의 일과 관계된 분들껜 꽤 죄송한 일이다만 의도한 일이긴 했다. 여러가지 일 때문에 이렇게 바쁘리라곤 전혀 생각 못하긴 했지만… 어쨌든 바쁘지 않으면 시간 관리의 요령을 평생 알지 못한다. 스미마셍.(미안할 땐 이 말이 국룰이라고 배웠다. 딱히 일본을 비하하는 건 아니다.)
아무런 일도 하지 않아도 배고파 본 적이 없는 사람이 어떻게 농사를 짓고 미래를 대비하나.
최근 이런 교훈을 여실히 느낀 게 하나 있다면, 운동하는 날로 생각하고 GYM에 갔는데 예상치 않게 GYM의 휴일이었던 그 날, 문이 닫힌 걸 발견하고도 아무 것도 못했다. 마치 이 세상의 운동이 ‘GYM에서의 운동’으로 완전히 제한된 것 마냥.
요령이 없다는 건 경험이 없다는 것이고, 경험이 없다는 건 어디로 갈 지 몰라서 아무 데도 못 간다는 얘기다.
거참, 어리석은 이의 이야기치고는 썩 그럴싸 하다. 지금까지 했던 경험 중 성취감이 컸던 일은 뭐였어? 경력과 이력 때문에 늘 편견과 싸워야 했고, 마지막엔 항상 이겼어.
나는 내가 존경스러워!
이겨서가 아니라, 극복해서.
오늘의 '생각을 자극'하는 글귀
"창의성을 발휘하려면 칭찬과 비판 모두 필요하다.
창의성을 발휘하고 싶은가. 아이디어를 떠올릴 때는 자신에게 친절하고, 아이디어를 평가할 때는 자신에게 엄격하라. 브레인스토밍을 할 때는 내면의 치어리더를 초대해 응원하고, 끝나면 내면의 펴론가를 불러 난장판을 정리하라"
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-02/2025-02-01-내일의-계획,-성취감이-컸던-일.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-02/2025-02-01 내일의 계획, 성취감이 컸던 일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 02 Feb 2025 04:58:44 GMT</pubDate></item><item><title><![CDATA[UX 심리학：UX 디자이너와 개발자가 알아야 할 사용자 심리의 모든 것]]></title><description><![CDATA[UX 심리학 - David Evans
인간의 단기 기억 용량은 제한적이므로(밀러의 법칙: 7±2) 사용자가 처리해야 할 정보를 최소화해야 한다.
단순하고 직관적인 디자인이 선호되며, 인지적 부담을 줄이는 것이 중요하다. 사용자는 기존에 학습한 패턴을 기반으로 행동하므로, 익숙한 디자인(예: 햄버거 메뉴, 카트 아이콘)을 활용하면 사용자 학습 비용이 줄어든다.
사용자가 기대하는 동작(예: 클릭하면 새 창이 열림)과 일치하도록 설계해야 한다. 시각적 요소의 배치는 사용자의 관심을 유도하는 데 중요한 역할을 한다.
색상, 크기, 대비, 정렬을 통해 핵심 정보가 강조되도록 구성해야 한다. 첫인상이 전체적인 평가에 영향을 미친다.
UX 디자인에서도 첫 화면(로딩 속도, 초기 인상)이 전체적인 사용자 만족도에 영향을 미친다. 사람들은 경험 전체보다 가장 강렬한 순간(피크)과 마지막 순간(엔드)을 기억한다.
UX 디자인에서도 긍정적인 피크 경험과 깔끔한 종료 경험을 제공하는 것이 중요하다. 미완성된 작업이나 경험이 더 잘 기억된다.
UX에서 진행률 표시기(Progress Bar)나 단계적 프로세스를 도입하면 사용자 참여율을 높일 수 있다. 너무 많은 선택지가 주어지면 결정하기 어려워지고 만족도가 낮아진다.
UX에서는 사용자의 선택을 단순화하고, 기본값(Default Option)을 제공하는 것이 효과적이다. 제품이 감성을 자극하면 사용자 만족도가 증가한다.
재미 요소(예: 마이크로인터랙션, 애니메이션)나 긍정적인 피드백(예: 성공 메시지)을 활용하여 감성적인 반응을 유도해야 한다. 사용자의 목표와 고충을 이해하고 이를 UX에 반영하면 신뢰가 형성된다.
개인화된 경험(예: 맞춤형 추천, 사용자 데이터 기반 인터페이스)을 제공하면 사용자 만족도가 높아진다. 사람들이 다른 사람의 행동을 따르는 경향이 있다.
UX에서 사용자 리뷰, 추천 수, "다른 사람들이 많이 사용하는 기능" 등의 요소를 활용하면 신뢰도를 높일 수 있다. 사용자의 행동에 대한 즉각적인 피드백을 제공해야 한다.
버튼 클릭 후 로딩 애니메이션, 입력 오류 메시지 등의 피드백이 필요하다. 사용자가 한 번에 많은 정보를 처리하지 않도록, 필요할 때 추가 정보를 제공하는 방식이 효과적이다.
예: 고급 설정 옵션을 기본적으로 숨기고, 필요할 때 확장 가능하게 제공. 사용자는 F-패턴(텍스트 중심 콘텐츠) 또는 Z-패턴(비주얼 중심 콘텐츠)으로 웹 페이지를 스캔한다.
중요한 정보는 좌측 상단 또는 시각적 동선의 주요 지점에 배치하는 것이 효과적이다.
UX의 심리적 병목 구간을 밝혀낸 세계 최초의 책!
사람들의 마음속에서 디자인은 어떻게 받아들여질까?
끝까지 살아남는 디자인의 심리학적 조건을 파헤친다!어떤 디자인이 성공하고 어떤 디자인이 실패하는가? 그 답은 UX(사용자 경험)의 병목 현상에 있다. UX의 병목이란 디자인이 통과해야 할 사용자의 심리적 구간을 말한다. 이 책은 UX 디자인의 심리적 병목 구간을 밝혀낸 세계 최초의 안내서로, 사람들이 디자인을 심리적으로 어떻게 받아들이고 거부하는지를 흥미롭게 탐구한다. UX 전문가이자 심리학 박사인 저자는 마이크로소프트의 고객 리서치 수석 매니저로 활약하며, 오피스 365, 윈도우 10 등 마이크로소프트의 대표적 제품들의 디자인을 맡고 있으며 그동안 실무 경험에서 터득한 통찰을 이 책에서 모두 공개했다. 오랫동안 UX 이면의 심리를 연구해 온 저자는 이 책은 단편적인 법칙이 아니라 100년간의 심리학 분야의 연구 결과를 바탕으로 세계적으로 전파되고 많이 사용되는 디자인의 비밀을 밝혀낸다. 이 한 권의 책으로 UX 디자인을 해 나가는 데 필요한 모든 심리학 지식을 끝낼 수 있도록 탄탄하게 구성되어 있다.프롤로그1부 - 주의 병목 구간1장 중심와 시선
2장 과업 지향성
3장 주의 집중2부 - 인지 병목 구간4장 게슈탈트 인지
5장 심도 인지
6장 운동 인지3부 - 기억 병목 구간7장 작업 기억
8장 신호 탐지
9장 장기 기억
10장 부호화와 인출4부 - 취향 병목 구간11장 성격
12장 발달 단계
13장 욕구
14장 재미5부 - 동기 부여 병목 구간15장 강화 계획
16장 몰입 상승
17장 접근과 회피
18장 설득의 경로6부 - 사회적 영향력 병목 구간19장 사회적 자산
20장 집단 극단화
21장 사회적 영향력7부 - 수용성22장 수용성의 한계
23장 6단계 추천에필로그
참고 문헌]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/ux-심리학.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/UX 심리학.md</guid><dc:creator><![CDATA[데이비드 에반스, 김종명]]></dc:creator><pubDate>Sat, 01 Feb 2025 05:48:10 GMT</pubDate></item><item><title><![CDATA[세컨드 브레인 부스트]]></title><description><![CDATA[ ]]></description><link>https://64etuor.github.io/200_books/00_achives/2025/세컨드-브레인-부스트.html</link><guid isPermaLink="false">200_Books/00_Achives/2025/세컨드 브레인 부스트.md</guid><dc:creator><![CDATA[티아고 포르테, 이희령]]></dc:creator><pubDate>Sat, 01 Feb 2025 00:57:04 GMT</pubDate></item><item><title><![CDATA[13강. JAVA 문법(컬렉션)]]></title><description><![CDATA[이 강의는 자바의 컬렉션 프레임워크에 대한 기초적인 내용을 다루고 있습니다. 컬렉션 프레임워크는 객체를 효율적으로 추가, 삭제 및 검색할 수 있는 방법을 제공하며, 이 강의를 통해 그 구조와 사용법을 이해할 수 있게 됩니다. 각각의 컬렉션 유형인 `list`, `set`, `map` 등에 대한 설명 및 메소드 사용법을 배운 후, 각 컬렉션의 특징과 차별점을 명확히 알게 될 것입니다. 이러한 기초 지식은 자바 프로그래밍을 위한 필수적인 바탕이 될 것입니다. 강의를 통해 자바 컬렉션의 활용법을 배우면, 실제 프로젝트 개발에 큰 도움이 될 것입니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/13강.-java-문법(컬렉션).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/13강. JAVA 문법(컬렉션).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 12:45:43 GMT</pubDate></item><item><title><![CDATA[12강. JAVA문법(예외처리) |]]></title><description><![CDATA[이 강의에서는 자바의 예외 처리에 대해 자세히 설명합니다. 예외와 에러의 차이를 이해하고, 예외가 발생했을 때 프로그램이 종료되지 않도록 처리하는 방법을 배웁니다. `try-catch-finally` 구조를 통해 여러 종류의 예외를 효율적으로 다루는 기법을 소개하며, 예외 클래스를 활용한 예외 관리 방식을 설명합니다. 또한 예외를 메소드 호출 시 떠넘기는 방법까지 다루어, 복잡한 프로그램에서도 안정적으로 동작할 수 있도록 합니다. 이 내용을 통해 개발자는 예외 처리의 중요성과 실제 사용법을 익히게 됩니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/12강.-java문법(예외처리).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/12강. JAVA문법(예외처리).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 12:40:44 GMT</pubDate></item><item><title><![CDATA[11-2강. JAVA 문법(상속, 다형성, 추상 클래스, 인터페이스 part.2) |]]></title><description><![CDATA[이 강의는 자바의 객체지향 프로그래밍에서 중요한 개념인 상속, 다형성, 추상 클래스, 인터페이스를 심도 있게 다룹니다. 상속을 통해 클래스 간의 관계를 확립하고, 다형성을 사용하여 다양한 객체를 통일된 방식으로 사용할 수 있는 방법을 설명합니다. 강의 내용은 타입 변환, 메서드 재정의, 그리고 추상 클래스 및 인터페이스의 활용에 중점을 두고 있습니다. 이러한 개념을 통해 프로그래밍의 유연성과 재사용성을 높일 수 있습니다. 자바의 객체지향 원리를 이해하고 발전시킬 수 있는 풍부한 기회가 됩니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/11-2강.-java-문법(상속,-다형성,-추상-클래스,-인터페이스-part.2).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/11-2강. JAVA 문법(상속, 다형성, 추상 클래스, 인터페이스 part.2).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 12:38:16 GMT</pubDate></item><item><title><![CDATA[11-1강. JAVA 문법(상속, 다형성, 추상 클래스, 인터페이스 part.1)]]></title><description><![CDATA[이번 강의에서는 자바의 객체지향 프로그래밍에서 기본적인 개념인 상속, 다형성, 추상 클래스, 인터페이스를 다룹니다. 상속을 통해 부모 클래스의 필드와 메소드를 자식 클래스에서 활용하는 방식을 배우며, 이를 통해 코드의 재사용성과 유지보수의 효율성을 높일 수 있습니다. 또한, 메소드 오버라이드에 대한 이해를 통해 자식 클래스에서 부모 클래스의 메소드를 재정의하는 방법을 익힐 수 있습니다. 이 강의는 자바의 구조를 파악하고, 객체지향 프로그래밍의 주요 개념에 대한 실용적인 이해를 도와줄 것입니다. 이러한 기술을 통해 효율적인 프로그래밍을 할 수 있습니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/11-1강.-java-문법(상속,-다형성,-추상-클래스,-인터페이스-part.1).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/11-1강. JAVA 문법(상속, 다형성, 추상 클래스, 인터페이스 part.1).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 12:36:22 GMT</pubDate></item><item><title><![CDATA[10강. JAVA 문법(접근제한자)]]></title><description><![CDATA[이번 강의는 JAVA의 접근 제한자에 대한 상세한 설명과 예제를 제공합니다. 패키지 구조와 클래스의 식별법, 그리고 접근 제한자를 통해 클래스와 멤버의 접근 범위를 설정하는 방법을 배우게 됩니다. 특히, `public`, `protected`, `private`, `default` 접근 제한자의 차이를 이해하고 활용하는 것이 중요합니다. 각 접근 제한자에 맞는 예제를 통해 실제 적용하는 방법을 익히게 됩니다. 이 강의를 통해 JAVA 프로그래밍에서 클래스 관리와 정보 은닉의 중요성을 깨닫게 될 것입니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/10강.-java-문법(접근제한자).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/10강. JAVA 문법(접근제한자).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 12:34:34 GMT</pubDate></item><item><title><![CDATA[2025-01-28 집이란, 최근 방문지 중에 좋았던 곳]]></title><description><![CDATA[
"집이란 무엇이라고 생각하는가? How do you describe home?" 집은 돌아갈 곳.
내가 들어가서 불을 밝혀야 하는 곳이 아니라 이미 불이 밝혀져 있는 곳이다.
아니면 내가 불을 밝히고 누군가를 기다리는 곳.
사람이 없는 곳은 화려한들 죽어 있고,
사람이 있는 곳은 빈궁할 지언정 생기가 있다.
우리나라에서 가장 사람이 많은 도시에 와서도 늘 여전히 사람이 그리운 건 전혀 우연한 일이 아닐 거다. 최근에 방문했던 곳 중 가장 좋았던 곳은 어디야? 귀성길에 지나친 산 중턱, 고요와 눈과 나무와 산이 다같이 잠든 곳에 마음의 일부를 두고 왔어.
내 마음도 저처럼 아름다워지길 바라면서.
오늘의 '생각을 자극'하는 글귀
"똑똑하다는 말보다 사려 깊다는 말이 더 큰 칭찬이다.
똑똑하다는 말보다 사려 깊다는 말이 더 큰 칭찬이다. 지성에 대한 칭찬은 단순히 논리력에 대한 칭찬이지만, 사려 깊다는 것은 그 능력을 이용해 다른 사람에게 관심을 기울이고 그에게서 배울 수 있다는 것에 대한 칭찬이다. 깊은 성찰과 타인에 대한 폭넓은 관심이 만날 때 사려 깊은 사람이 될 수 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-28-집이란,-최근-방문지-중에-좋았던-곳.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-28 집이란, 최근 방문지 중에 좋았던 곳.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 30 Jan 2025 11:34:47 GMT</pubDate></item><item><title><![CDATA[2025-01-30 지우고 싶은 기억, 새로운 도전]]></title><description><![CDATA[
"오늘 있었던 일 중에서 지우고 싶은 기억이 있다면? Did anything happen today that you want to forget?" 지우고 싶은 기억이란 건 없다. 그러나 내가 무엇을 지우고 싶었는지를 기록하는 건 의미가 있다. 지우지 않겠다고 선언함에 숨은 뜻은 나의 허물을 인정하겠다는 것이며, 모든 발전이 스스로의 허물을 인정함으로써 출발하는 것이니 이것은 단순한 기록 이상의 의미가 있다. 내가 최근 만든 기록 관리 앱에도 이런 신념이 여실히 들어가 있다. 계획을 지우는 대신, 취소하였다는 기록이 남게 하였다. 계획이 무모했든, 다른 이유가 있든, 계획의 신뢰성을 높이기 위해서는 반드시 실패가 선행되어야 하기 때문이다.
사람들을 관찰하면 사람들의 여러 가지 모습을 볼 수 있다. 대게의 경우, 사람들은 자신의 실제 모습과는 다른 ‘남에게 보이고픈 자신’을 구별하여 가지고 있으며 그들이 인지 여부와 관계 없이 이는 매우 뚜렷한 구별을 보인다. (어디까지나 연구 없는 개인의 의견일 뿐이나) 가장 흔한 경우가 ‘말’과 ‘행동’이 다른 것이고, 두 번째는 상황에 따라 ‘말’과 ‘행동’이 달라지는 것이다. 나는 사람들이 이 모순을 스스로 느끼지 못한다는 사실에 굉장히 흥미를 느꼈는데, 단순히 느끼지 못했다는 건 나의 편견에 불과할 수도 있겠다. 모순을 느끼지만 무시하는 경우도 있으며, 모순을 알면서도 그리 행하는 경우도 적잖이 경험해봤으니.(나에게도 정확히 해당하는 말이다.)
일전의 노트에서도 썼지만, 모자람을 감추려는 행위가 오히려 모자람을 배가하는 경우가 많다. 드러냄으로써 잃을 것도 없는데 본인 내부의 마음에서 사소한 ‘실책’ 따위를 크게 부풀려 생각하는 경우가 세상에는 얼마나 많은지. (그러므로 허물을 일부 내보이는 게 오히려 전략적일 수 있는 행보라 할 수 있겠다.)
유명한 예를 하나 보면, 조선 시대 민인생이라는 사관이 스토킹에 가깝게 태종의 시시콜콜한 사적까지 죄다 기록한 바람에(민인생 본인은 귀양을 갔다만), 태종 본인은 심한 스트레스를 얻었을 지언정 후대에는 ‘인간미’를 갖춘 왕으로 재평가 받게 되지 않았는가.
어릴 때부터 나는 위인전에 묘사된 인물이 완벽에 가까울 수록 거부감을 느꼈다. 사람은 대다수 본질적으로 공통된 본성을 공유하며, 대부분 같은 실수를 한다. 그게 허물이라고 폄하할 이유란 없다. 오히려 위인들조차 실패와 좌절이 있었다는 사실은 우리네 평범한 사람들에게 묘한 동질감마저 느껴지게 하는 것이라 이는 우리 또한 위인의 씨로 태어난 것임을 명백하게 증거하는 것이렷다.
”왕후장상의 씨가 따로 있느냐.”
우리의 위인은, 위와 같은 역사의 질문에 그것이 아니라고 당당히 외치는 보통의 사람들이다. 최근에 새로이 도전하거나 배우기 시작한 것은? 도메인을 바꿔서 Javascript를 베이스로 웹앱 개발을 공부하는 중. 원리 같은 건 다 비슷비슷한 터라 크게 어려운 건 없고 ai 덕에 적응도 편하고. 그러고 보니 이 업계에서 최근 들리는 얘기 중엔 좀 동의하기 어려운 것들이 있어.
”AI가 Junior 개발자를 대체할 것이다?” → Junior 개발자들의 업무 형태가 바뀌겠지.
”많은 직업이 AI로 대체될 것이다?” → AI가 다룰 수 없는 영역의 직업이 늘어나고 심화되겠지.
사실 러다이트 운동 때에도 ‘사람의 직업’을 위협하는 기계에 대한 맹렬한 적대심이 있었는데, 그 결과는 어때.
역사는 참 빙글 빙글 돌아가는 것이야. “나미”가 옳았다.
오늘의 '생각을 자극'하는 글귀
"최고의 상사는 적극적으로 휴식을 장려한다.
나쁜 상사는 휴식을 나쁘게 생각한다. 쉬고 싶은 이유를 일하기 싫어서라도 여기기 때문이다. 좋은 상사는 휴식을 긍정적으로 생각한다. 재충전을 해야만 일할 에너지가 생긴다고 여기기 때문이다. 최고의 상사는 휴식을 보상이 아닌 권리라고 생각한다. 나아가 팀원들의 일고 삶의 균형까지 신경 써준다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-30-지우고-싶은-기억,-새로운-도전.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-30 지우고 싶은 기억, 새로운 도전.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 30 Jan 2025 11:33:16 GMT</pubDate></item><item><title><![CDATA[9강. JAVA문 법(클래스) |]]></title><description><![CDATA[이번 강의는 클래스와 객체지향 프로그래밍의 핵심 개념을 배우는 것입니다. 자바에서 클래스를 사용하여 객체를 만들고, 객체의 속성(필드)과 동작(메소드)를 정의하는 방법을 설명합니다. 클래스는 객체의 설계도로서 역할을 하며, 객체는 메모리에서 식별 가능한 인스턴스입니다. 이 과정을 통해 객체지향 프로그래밍의 기본 원칙을 이해할 수 있습니다. 실습을 통해 직접 클래스를 생성하고 속성과 메소드를 구현하는 경험을 얻을 수 있습니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/9강.-java-문법(클래스).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/9강. JAVA 문법(클래스).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 10:28:26 GMT</pubDate></item><item><title><![CDATA[8강. JAVA 문법(열거 타입)]]></title><description><![CDATA[이번 영상에서는 열거 타입에 대해 자세히 설명합니다. 열거 타입은 한정된 값을 갖는 카테고리화된 데이터로, 코드 구현 시 간편함과 안정성을 제공합니다. 이 강의를 통해 열거 타입을 정의하고 사용하는 방법을 배우고, 메모리에서의 저장 방식과 예제 코드를 통해 이해를 돕습니다. 특히, 스위치 문을 활용한 요일 판별 방법을 학습하여 실용적인 프로그래밍 기술을 익힐 수 있습니다. 열거 타입에 대한 이해는 자바 프로그래밍에서 필수적인 요소이므로 초보자들에게 큰 도움이 될 것입니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/8강.-java-문법(열거-타입).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/8강. JAVA 문법(열거 타입).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 10:25:05 GMT</pubDate></item><item><title><![CDATA[7강. JAVA 문법(배열)]]></title><description><![CDATA[이번 강의에서는 배열 의 개념과 사용법을 자세히 다루고 있습니다. 배열을 활용하면 여러 개의 데이터를 효율적으로 저장하고, 평균 등 다양한 수치 계산을 간편하게 수행할 수 있습니다. 특히, 배열의 인덱스를 통해 각 요소에 쉽게 접근할 수 있는 방법을 알리며, 반복문을 통해 데이터를 누적하거나 처리하는 기술을 설명합니다. 배열은 고정된 길이 를 갖지만, 다양한 데이터 타입을 저장할 수 있어 매우 유용한 데이터 구조임을 강조합니다. 이 영상을 통해 배열의 기본 사용법을 확실히 익힐 수 있습니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/7강.-java-문법(배열).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/7강. JAVA 문법(배열).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 10:16:00 GMT</pubDate></item><item><title><![CDATA[6강. JAVA 문법(참조타입)]]></title><description><![CDATA[이 강좌에서는 자바의 참조 타입에 대해 깊이 있게 설명합니다. 참조 타입은 기본 타입과는 달리 객체의 주소값을 저장하며, 메모리 관리 및 효율성에 있어 중요합니다. 특히, 힙 영역과 스택 영역의 개념을 명확히 하여 객체의 생성과 메모리의 관리 방식을 이해하는 데 도움을 줍니다. 또한, 참조 타입의 변수 간 비교 및 `null` 포인터 예외에 대한 처리를 통해 실제 프로그래밍에서 마주칠 수 있는 문제를 다루고 있습니다. 이 강좌는 자바 프로그래밍의 기초를 다지기에 적합한 내용으로 구성되어 있습니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/6강.-java-문법(참조타입).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/6강. JAVA 문법(참조타입).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 08:27:16 GMT</pubDate></item><item><title><![CDATA[생성AI 활용 학회 발표 준비]]></title><description><![CDATA[오랜만에 연구 결과를 국제학회에서 발표했습니다. 일정이 바빴다는 핑계를 댈 수도 있지만 생성 AI의 능력과 그간 쌓인 노하우를 믿었습니다. 밀도있게 3일 준비해서 발표를 마쳤습니다. 자세하게 말씀드릴 수는 없지만 노하우를 공유합니다. 2024.09.14. - 초록 제출 Scopus: Scopus content (1) 결론은 가지고 시작 여러 이유가 겹]]></description><link>https://64etuor.github.io/500_resources/generative-ai/발표-준비/생성ai-활용-학회-발표-준비.html</link><guid isPermaLink="false">500_Resources/Generative AI/발표 준비/생성AI 활용 학회 발표 준비.md</guid><dc:creator><![CDATA[[[Pega Devlog]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 08:22:35 GMT</pubDate><enclosure url="https://jehyunlee.github.io/2024/11/07/General-67_afore2024/67_AFORE2024_01.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://jehyunlee.github.io/2024/11/07/General-67_afore2024/67_AFORE2024_01.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2-2강. JAVA 문법 예제(변수, 리터럴, 변수의 범위, 타입, 타입 변환)]]></title><description><![CDATA[이 강의 영상은 JAVA 문법의 기초를 이해하는데 도움을 줍니다. 특히, 변수와 리터럴, 각 변수의 범위, 데이터의 타입과 타입 변환의 필요성을 설명합니다. 실습을 통해 직접 코드 작성을 하며 변수를 선언하고 연산 결과를 출력하는 기회를 제공합니다. JAVA의 기초적인 문법을 차근차근 이해하고 활용할 수 있는 중요한 기초를 다지는 시간이 될 것입니다. 이 강의를 통해 프로그래밍 입문에 필요한 실무적인 기술을 익히게 됩니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/2-2강.-java-문법-예제(변수,-리터럴,-변수의-범위,-타입,-타입-변환).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/2-2강. JAVA 문법 예제(변수, 리터럴, 변수의 범위, 타입, 타입 변환).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 08:18:00 GMT</pubDate></item><item><title><![CDATA[3강. JAVA 문법(시스템 입출력)]]></title><description><![CDATA[이 강의는 자바의 시스템 입출력에 대한 내용을 다룹니다. 자바의 표준 입력과 출력을 통해 어떻게 데이터를 전달하고 출력하는지를 이해하는 데 도움이 됩니다. 변수에 저장된 값을 모니터에 출력하는 방법과 키보드로부터 입력을 받는 과정을 상세히 설명합니다. 주요 메소드인 println, print, 그리고 printf의 사용법을 배우고, 이를 통한 데이터 형식 지정 및 출력 포맷팅의 중요성을 강조합니다. 이 강의를 통해 시청자는 자바 프로그래밍에서 필수적인 입출력 기능을 숙지할 수 있습니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/3강.-java-문법(시스템-입출력).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/3강. JAVA 문법(시스템 입출력).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 08:17:42 GMT</pubDate></item><item><title><![CDATA[4강. JAVA 문법(연산자)]]></title><description><![CDATA[이번 영상에서는 자바의 연산자에 대해 자세히 배우게 됩니다. 기본 타입과 비교 연산자, 문자열 비교, 산술 연산자, 대입 연산자 등 다양한 연산자들의 활용법과 기본적인 사용 방법을 설명합니다. 연산자의 우선순위와 이를 효율적으로 사용하는 방법을 사례와 함께 쉽게 풀어내어, 프로그래밍에 필요한 필수 지식을 제공합니다. 이 과정에서 연산자가 어떻게 작동하는지 이해하고, 실제 코드 작성에 적용할 수 있는 능력을 키우게 됩니다. 효과적인 프로그래밍을 위한 필수 요소 중 하나인 연산자에 대한 깊은 이해를 돕는 영상입니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/4강.-java-문법(연산자).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/4강. JAVA 문법(연산자).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 07:57:06 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250130135705.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250130135705.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[8W - 실습 과제_ML 모델 성능 비교, 통계 검정]]></title><description><![CDATA[ 후기
함수 선언을 하라고 했는데 선언을 안했다는 이유로 오답 처리를 받은 과제.
뭐, 문제를 잘 읽자. 정답 출력물을 보고 코드를 어떻게 쓸 지 유추해야 하는 과제라 좀 많이 귀찮다. 본질적인 기능 구현은 문제가 전혀 아닌데 사소한 텍스트나, 그 외 포맷, 색깔 등을 맞추는 게 좀 많이 귀찮긴 하다.
# 사용 데이터
# Titanic - Machine Learning from Disaster
# 출처 : kaggle
# 링크 : https://www.kaggle.com/competitions/titanic/data?select=train.csv
# 설명 : Kaggle에서 제공하는 Titanic 생존 데이터 import os
os.listdir('./data/titanic') import pandas as pd
tmp_df = pd.read_csv('./data/titanic/train.csv')
display(tmp_df.info())
# 클래스를 통한 데이터 처리
# 클래스 외에 방법으로 처리할 경우, 0점 # 클래스 이름 Data_Handling # 1) __init__ 생성자 메서드 : 데이터프레임 입력
# - 데이터프레임 정보 저장
# - 입력된 데이터 프레임 상단 5개 데이터 및 결측치 정보 출력 # 2) missing_handle 결측치 처리 메서드
# - 메서드 실행 시 결측치 전처리 이후, 결측치 정보 출력
# - 입력인자 option, value
# - 입력인자 option의 기본값은 'drop'
# - 인자에 결측치 처리 옵션 정보를 입력하면 해당 방법으로 결측치 대체 # 3) column_prep 컬럼 삭제 메서드
# - 필요없는 컬럼 제거 수행
# - 입력 인자 : 컬럼 리스트
# - 데이터프레임에 없는 컬럼인 경우, 해당 컬럼은 pass하고 다른 컬럼 처리 수행 class Data_Handling: def __init__(self, df): self.df = df print(self.df.head()) print(self.df.isnull().sum()) def missing_handle(self, option='drop', value=None): if option == 'drop': self.df = self.df.dropna() print('drop 방식으로 결측치 처리') elif option == 'fill': print('fill 방식으로 결측치 처리') if value is None: print('결측치를 대체할 Value가 존재하지 않음') return else: self.df = self.df.fillna(value) print(f'{value} 값으로 결측치 대체') print(self.df.isnull().sum()) def column_prep(self, columns): original_shape = self.df.shape original_columns = len(self.df.columns) for column in columns: if column in self.df.columns: self.df = self.df.drop(columns=[column]) print(f'{column} 삭제 수행') else: print(f'{column} 은 존재하지 않음') print(f'원본 데이터 프레임 형태 : {original_shape}') print(f'전처리 이후 데이터 프레임 형태 : {self.df.shape}') print(f'삭제된 컬럼 숫자: {original_columns - len(self.df.columns)}') DataFrame_Class = Data_Handling(df_titanic)
DataFrame_Class.missing_handle(option='fill', value = 100) # 옵션 지정 O / Value 지정 O 상태 DataFrame_Class.missing_handle(option='fill') # 옵션 지정 O / Value 지정 X 상태
# 클래스 외에 방법으로 처리할 경우, 0점
DataFrame_Class.column_prep(['Name','Ticket', 'Money', 'Cabin'])
# Step 1. 불필요한 컬럼 제거, 인코딩 진행하기 # target 컬럼 분리하기
# target 컬럼 : 'Survived' # 필요한 컬럼에 대해 인코딩 진행하기 #DataFrame_Class.df['Embarked'].unique()
# C = 0, S = 2, Q = 1
removed_column = DataFrame_Class.df.pop('Survived')
from sklearn.preprocessing import LabelEncoder le_sex = LabelEncoder()
DataFrame_Class.df['Sex'] = le_sex.fit_transform(DataFrame_Class.df['Sex']) le_embarked = LabelEncoder()
DataFrame_Class.df['Embarked'] = le_embarked.fit_transform(DataFrame_Class.df['Embarked']) DataFrame_Class.df.info()
# 학습용, 테스트용 데이터 분리
# 비율 확인
from sklearn.model_selection import train_test_split X = DataFrame_Class.df
y = removed_column X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) x_train_ratio = len(X_train) / len(X)
y_train_ratio = len(y_train) / len(y)
print(f"'X_train 비율 : {x_train_ratio}'")
print(f"'y_train 비율 : {y_train_ratio}'")
# 필요 라이브러리 import : DecisionTreeClassifier # model_1 : Decision Tree Ver1 - 별도 설정 X
# model_2 : Decision Tree Ver2 - max_depth = 3
# model_3 : RandomForestClassifier
# model_4 : XGBClassifier # 각 모델 훈련
# 각 모델 예측 수행 # 성능 확인 accuracy_score from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score model_1 = DecisionTreeClassifier()
model_1.fit(X_train, y_train)
pred_1 = model_1.predict(X_test)
acc_1 = accuracy_score(y_test, pred_1) model_2 = DecisionTreeClassifier(max_depth=3)
model_2.fit(X_train, y_train)
pred_2 = model_2.predict(X_test)
acc_2 = accuracy_score(y_test, pred_2) model_3 = RandomForestClassifier()
model_3.fit(X_train, y_train)
pred_3 = model_3.predict(X_test)
acc_3 = accuracy_score(y_test, pred_3) model_4 = XGBClassifier()
model_4.fit(X_train, y_train)
pred_4 = model_4.predict(X_test)
acc_4 = accuracy_score(y_test, pred_4) accuracies = { 'model_1': acc_1, 'model_2': acc_2, 'model_3': acc_3, 'model_4': acc_4
} results = pd.DataFrame(accuracies.items(), columns=['Model', 'Accuracy'])
print(results)
# 타이틀, 격자, 수평선 등 모든 요소를 포함하시오.
import matplotlib.pyplot as plt
import seaborn as sns plt.rc('font', family='Malgun Gothic') plt.figure(figsize=(10, 6))
sns.barplot(x='Model', y='Accuracy', data=results)
plt.title('모델별 성능 비교하기')
plt.xlabel('model_name')
plt.ylabel('model_accuracy')
plt.grid(True)
plt.axhline(y=results['Accuracy'].mean(), color='red', linestyle='-', label=f'모델들의 평균 성능: {results["Accuracy"].mean()}')
plt.legend()
plt.show()
# 모델별 feature importance 시각화 결과를 하나의 셀에 출력, 2행 2열
# 반복문을 활용하여 출력할 것 models = [model_1, model_2, model_3, model_4]
model_names = ['Model 1', 'Model 2', 'Model 3', 'Model 4'] plt.figure(figsize=(20, 12)) for i, (model, name) in enumerate(zip(models, model_names), 1): plt.subplot(2, 2, i) feature_importance = model.feature_importances_ feature_names = X.columns plt.bar(range(len(feature_importance)), feature_importance) plt.title(f'{name} 피쳐 중요도') plt.xticks(range(len(feature_importance)), feature_names, rotation=45) plt.xlabel('Feature') plt.ylabel('Importance') plt.tight_layout()
plt.show()
# 함수명 : stats_interpret # tips 데이터셋에서 total_bill에 대한 distplot 시각화 진행
# 샤피로 윌크 검정을 통해 해당 데이터가 정규분포를 따르는지 통계적으로 확인
# if문을 통해 p-value에 따른 결론 문장 출력
# 유의수준은 0.05로 설정
# 데이터는 seaborn 라이브러리에서 tips를 로드하여 사용
# seaborn을 통해 tip의 total_bill 그래프 출력, 그래프는 출력 결과 참고
from scipy import stats tips_data = sns.load_dataset("tips")
shapiro_test = stats.shapiro(tips_data['total_bill'])
print(f'Shapiro Test Statistic: {shapiro_test.statistic}')
print(f'p-value: {shapiro_test.pvalue}')
if shapiro_test.pvalue &gt; 0.05: print("p-value가 유의수준보다 크므로, 귀무가설을 채택합니다.") print("결론: 'total_bill'은 정규분포를 따른다고 볼 수 있습니다.")
else: print("p-value가 유의수준보다 작으므로, 귀무가설을 기각합니다.") print("결론: 'total_bill'은 정규분포를 따르지 않는다고 볼 수 있습니다.") sns.displot(data=tips_data, x='total_bill', kde=True, stat='density', edgecolor=None)
plt.show()
tips = sns.load_dataset("tips") # tips 데이터셋 로드
# if문을 통해 p-value에 따른 결론 문장 출력 # 유의수준은 0.05로 설정
# 데이터는 seaborn 라이브러리에서 tips 데이터를 가져올 것
# 흡연 여부에 따라 팁 비율(tip_percentage)의 차이가 존재하는지 확인한다. # 팁 비율(tip_percentage)는 total_bill 중에서 tip의 비율을 의미한다. tips_data = sns.load_dataset('tips')
tips_data['tip_percentage'] = (tips_data['tip'] / tips_data['total_bill'])
tips_data = tips_data.dropna(subset=['total_bill', 'tip', 'smoker']) t, p = stats.ttest_ind( tips_data[tips_data['smoker'] == 'Yes']['tip_percentage'], tips_data[tips_data['smoker'] == 'No']['tip_percentage']
) print(f't-test statistic: {t}')
print(f'p-value: {p}') if p &gt; 0.05: print("p-value가 유의수준보다 크므로, 귀무가설을 기각하지 않는다.") print("결론: 흡연 여부에 따른 팁 비율의 차이가 유의미하지 않음.")
else: print("p-value가 유의수준보다 작으므로, 귀무가설을 기각합니다.") print("결론: 흡연 여부에 따른 팁 비율의 차이가 유의미함.") plt.figure(figsize=(10, 6))
sns.barplot(x='smoker', y='tip_percentage', data=tips_data, errorbar=('ci', 95)) plt.title('흡연 여부에 따른 총 지출 대비 팁의 비율')
plt.xlabel('Smoker Status')
plt.ylabel('Average Tip Percentage') plt.ylim(0, 0.25) plt.show()
# 9. 함수 선언 - IQR / 이상치 상한점 하한점 계산 # 데이터는 seaborn 라이브러리에서 tips 정보를 가져와서 사용
import numpy as np
import seaborn as sns
tips = sns.load_dataset("tips") Q1 = tips['tip'].quantile(0.25)
Q3 = tips['tip'].quantile(0.75)
IQR = Q3 - Q1 lower_bound = Q1 - 1.5 * IQR upper_bound = Q3 + 1.5 * IQR tips_no_outliers = tips[(tips['tip'] &gt;= lower_bound) &amp; (tips['tip'] &lt;= upper_bound)] print(f'Q3 (3사분위수): {Q3:.4f}')
print(f'Q1 (1사분위수): {Q1:.4f}') print(f'IQR: {IQR:.4f}') print(f'원본 데이터프레임 크기: {tips.shape}')
print(f'이상치 제거 후 데이터프레임 크기: {tips_no_outliers.shape}')
# Q10. 함수 선언 - 데이터 분포 bar 차트 시각화 import matplotlib.pyplot as plt columns = ['sex', 'smoker', 'day', 'time'] for col in columns: print('='*30) print(f'분석 컬럼: {col}') value_counts = tips[col].value_counts() print(value_counts) plt.figure(figsize=(8, 6)) ax = value_counts.plot(kind='bar') plt.tight_layout() plt.show() ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/8w-실습-과제_ml-모델-성능-비교,-통계-검정.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/8W - 실습 과제_ML 모델 성능 비교, 통계 검정.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 30 Jan 2025 07:23:09 GMT</pubDate></item><item><title><![CDATA[5강. JAVA 문법(조건문과 반복문)]]></title><description><![CDATA[이번 강의는 자바 프로그래밍에서 조건문과 반복문의 중요성을 설명합니다. 조건문은 특정 조건에 따라 코드 블록의 실행 여부를 결정하며, 반복문은 특정 작업을 여러 번 수행하기 위해 사용됩니다. 이 강의를 통해 참가자는 조건문과 반복문의 기본 개념을 이해하고, 실습을 통해 프로그램의 흐름을 조절하는 방법을 배울 수 있습니다. 또한, 여러 조건을 동시에 다루는 if-else와 switch 문, 다양한 반복문(while, for 등)의 사용법도 익힐 수 있습니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/5강.-java-문법(조건문과-반복문).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/5강. JAVA 문법(조건문과 반복문).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 06:41:39 GMT</pubDate></item><item><title><![CDATA[2-1강. JAVA 문법(변수, 리터럴, 변수의 범위, 타입, 타입 변환)]]></title><description><![CDATA[이번 영상에서는 자바의 변수와 타입에 대한 기본 개념을 배웁니다. 변수를 어떻게 선언하고, 리터럴을 어떤 방식으로 입력하는지, 그리고 초기화와 타입 변환에 대한 내용을 쉽게 설명합니다. 또한, 변수의 범위와 타입의 중요성을 강조하며, 코드 작성 시 주의할 점을 수록합니다. 이를 통해 자바 프로그램을 작성하는 데 필요한 기본적인 지식과 규칙을 습득할 수 있습니다. 변수와 타입의 이해는 프로그래밍의 기초이며, 코드의 명확성을 높이는 데 필수적입니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/2-1강.-java-문법(변수,-리터럴,-변수의-범위,-타입,-타입-변환).html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/2-1강. JAVA 문법(변수, 리터럴, 변수의 범위, 타입, 타입 변환).md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 05:01:39 GMT</pubDate></item><item><title><![CDATA[1강. JAVA 기초와 개발환경 설정]]></title><description><![CDATA[이 강의는 자바에 대한 기초 및 개발 환경 설정을 다룹니다. 자바 언어의 특징과 복잡한 명령을 어떻게 이해하고 처리하는지를 설명하며, 소스 코드 작성 및 컴파일 과정에 대해 배웁니다. 강의 중간에는 자바 개발에 필요한 JDK 설치 방법과 함께 IDE 설정도 안내합니다. 초보 개발자에게 자바 언어를 이해하고 환경을 세팅하는 데 실질적인 도움이 되는 내용입니다. 전반적으로 자바 프로그래밍을 시작하기 위한 기초 지식 와 환경 설정을 설명하는 강의입니다.]]></description><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/0_pre-course/1강.-java-기초와-개발환경-설정.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/0_Pre-course/1강. JAVA 기초와 개발환경 설정.md</guid><dc:creator><![CDATA[[[Lilys AI]]]]></dc:creator><pubDate>Thu, 30 Jan 2025 05:01:35 GMT</pubDate></item><item><title><![CDATA[2025-01-29 마지막으로 본 TV, 별명]]></title><description><![CDATA[
"마지막으로 본 TV 프로그램은? What was the last TV show you watched?" TV는 안 본 지 오래 됐고 대신 유튜브를 본다. 유산소 운동할 때 심심하니까 앞에 틀어 놓는 정도. 챙겨 보는 채널은 딱히 없지만 노출된 영상 중에 그때 그때 흥미가 동하는 걸 본다. 주로 게임과 관련된 영상을 많이 보는데 ‘김성회의 지식백과’는 광고마저 재밌다. 멘트가 선을 넘을 듯 말 듯 천박하면서도 짜임새가 있다. 영상을 정말 밀도 있게 정성스럽게 만드는 게 보인다. 멘트는 싸구려인데, 싸구려로 명품을 빚는 언어의 마술사 김성회…
그외의 구독 채널을 둘러 보았다. 코딩애플(츤데레처럼 틱틱 대면서 꿀정보를 알려줌), 김준표(호그와트 출신 흑마법사), 황현필 한국사(존경하는 한국사 스승님), 테디노트(벡터 스토어 만들 때 참고), Charming Jo(수상할 정도로 음악에 뛰어난 게임 스트리머), 간다효(메기), 노마드 코더(그 귀하다는 진성E 개발자), Mr아재(아내를 놀리는데 진심인 썩은물 엔지니어)…
이렇게 쓰다 보니까 죄다 남자다.
나도 인지하지 못하던 나의 취향을 깨달아 버렸다. 지금까지 불린 별명 중 가장 마음에 드는 것은? 별명을 다 떠올려 보니 양아치, 양파, 씨니컬, 자연인인데 뭐 하나 맘에 드는 게 없어. 그나마 자연인이 낫겠다. 그러고 보면 어릴 때 친구들은 다들 서울을 좋아했는데 난 기회만 되면 떠나고 싶어한 거 같아. 줄곧 사람이 없는 곳보다 사람이 많은 곳에서 더 외로움을 느꼈던 거 같아.
그래서 자꾸 숲으로, 산으로 갔나 보다.
오늘의 '생각을 자극'하는 글귀
"과거의 부끄러운 시간 없이는 좋은 작품을 만들 수 없다.
예전의 작품을 다시 꺼내 볼 때 부끄럽더라도 형편없다고 생각해선 안 된다. 그만큼 성장했다는 뜻이니까. 우리가 과거의 결과물을 비판적으로 바라보는 이유는 그동안 기준이 높아지고 취향이 확고해지며 판단력이 커졌기 때문이다. 과거의 부끄러운 시간 없이는 좋은 작품을 만들 수 없다."c
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-29-마지막으로-본-tv,-별명.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-29 마지막으로 본 TV, 별명.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 29 Jan 2025 13:19:00 GMT</pubDate></item><item><title><![CDATA[2025-01-27 나를 예술 사조로 표현하면, 처음 만난 사람과 대화]]></title><description><![CDATA[
"오늘 나를 예술 사조로 표현한다면? (초현실주의, 모더니즘, 다다이즘) Which are movement best describes you today? (Surrelaims, Modernism or Dadaism)" 예술 사조에 대해 무지하지만 좋아하는 그림과 취향은 있다.
어릴 때는 프리드리히의 ‘안개 바다 위의 방랑자’를 블라인드에 인쇄해서 내 방 창문에 걸어 놓고, 벽면에는 클림트의 그림을 많이 걸어 놨었다.
차를 타고 집에 가다가 길가에 팔던 그림에 완전히 꽂혀서 차에 실리지도 않는 직경 2m는 족히 되는 큰 그림을 사온 적도 있다. “우주”라는 제목의 한국 화가 작품이었다.(그림을 보면 우주가 전혀 안 떠오른다는 게 함정이긴 하지만.)
무슨무슨 ‘주의' 따위는 관심도 없다만, 사람이 보통 자기가 닮고 싶은 걸 좋아하고 동경하는 성향이 일반이란 점에서 나는 그럼 ‘낭만주의’ 가 되고픈 사람인지 모르겠다.
오늘의 나를 가만히 돌아보면, 오늘도 여전히 나는 지독한 ‘사실주의’ 인간이긴 했지만!
<img alt="Pasted image 20250127215208.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250127215208.png" target="_self"> 처음 만난 사람에게 말을 걸어야 할 때는 어떻게 생각해? 일터나 독서모임 같은 데서는 말을 참 잘하는데... 문제는 아무 접점이 없는 사람과 얘기하는 거야. 가벼운 Small Talk을 예전부터 전혀 못했는데 나이를 먹어도 나아지는 것이 하나도 없네! 평소에 한 번도 해보지 않았던 것에 대한 질문 받았을 때도 당황하는 편. 의미가 없는 질문을 받으면 무슨 의미인지 해석이 안되서 당황하는 편. 반대로 질문을 해야 할 때도 모르는 사람한테 무슨 질문을 해야 할 지 전혀 모르겠어. 왜 이런 걸 가르쳐 주는 학원은 없을까 😂
오늘의 '생각을 자극'하는 글귀
의미 있는 일과 처리할 수 있는 일은 균형을 이루어야 한다.
감당할 수 없을 정도로 일이 많으면 번아웃이 찾아온다. 일이 너무 지루하고 따분하면 보어아웃(boreout)에 빠진다. 할 일이 너무 많으면 지치고, 할 일이 너무 없으면 무기력에 빠진다. 단조롭고 의미 없는 시간은 활력을 떨어뜨린다. 동기부여를 위해서는 의미 있는 일과 처리할 수 있는 일이 균형을 이루어야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-27-나를-예술-사조로-표현하면,-처음-만난-사람과-대화.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-27 나를 예술 사조로 표현하면, 처음 만난 사람과 대화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 13:48:45 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250127215208.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250127215208.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Git 브랜치 전략 및 규칙]]></title><description><![CDATA[Git Flow는 Vincent Driessen이 제안한 브랜칭 모델로, 명확한 브랜치 전략을 제공하여 협업과 배포 프로세스를 체계적으로 관리할 수 있도록 한다. 주로 라이브러리, 프레임워크, 대규모 애플리케이션 개발에 적합하다.<img alt="Pasted image 20250122092400.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250122092400.png" target="_self">
master (main): 배포 가능한 안정적인 코드가 위치하는 브랜치
develop: 개발을 위한 기본 브랜치로, 모든 기능 브랜치는 이곳에서 시작하고 완료 후 병합된다.
feature: 개별 기능 개발을 위한 브랜치 (예: feature/login-page)
release: 배포 준비를 위한 브랜치. 새로운 버전 출시 전 테스트 및 버그 수정을 진행한다.
hotfix: 배포된 버전에서 발생한 긴급한 버그를 수정하기 위한 브랜치 develop 브랜치에서 새로운 feature 브랜치를 생성하여 개발을 진행한다.
개발이 완료되면 develop 브랜치로 병합(Merge)하고, 필요하면 코드 리뷰를 진행한다.
배포가 필요하면 release 브랜치를 생성하여 추가적인 QA 및 버그 수정을 진행한 후 master 브랜치에 병합한다.
release가 완료되면 develop에도 병합하여 변경 사항을 유지한다.
배포 후 긴급 수정이 필요한 경우 hotfix 브랜치를 master에서 생성하여 버그를 수정한 후 master 및 develop에 병합한다.
Git Flow는 명시적 버전 관리가 필요한 프로젝트(Library, Framework 등)에 적합하다. 하지만 수시로 배포되는 웹 애플리케이션 등의 프로젝트에는 부적합할 수 있다.GitHub Flow는 Git Flow보다 단순한 브랜칭 모델로, 빠른 배포가 필요한 프로젝트(예: 웹 애플리케이션, SaaS 등)에 적합하다.<br><img alt="Pasted image 20250122093600.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250122093600.png" target="_self">
main 브랜치는 항상 배포 가능한 상태로 유지한다.
새로운 작업이 필요하면 main에서 새로운 브랜치를 생성한다.
브랜치에서 개발을 진행하며, 완료되면 Pull Request(PR)를 생성한다.
PR을 통해 코드 리뷰를 진행하고, 문제가 없다면 main 브랜치에 병합한다.
병합된 후에는 곧바로 배포한다. 새로운 기능이나 버그 수정을 위해 main 브랜치에서 새로운 브랜치를 생성한다.
개발 및 테스트를 진행한 후, 원격 저장소에 푸시한다.
GitHub에서 Pull Request(PR)를 생성하여 코드 리뷰를 진행한다.
리뷰가 승인되면 main 브랜치에 병합하고, 배포한다.
필요하면 배포 후 브랜치를 삭제한다.
GitHub Flow는 단순하고 빠른 개발 및 배포가 필요한 프로젝트(웹 애플리케이션, SaaS, 스타트업 프로젝트 등)에 적합하다.브랜치 네이밍 규칙을 정하면 팀원들이 쉽게 이해하고 협업할 수 있다. 일반적인 네이밍 규칙은 다음과 같다:
main 브랜치에 직접 커밋하지 않는다.
새로운 기능을 개발하기 전에는 main 또는 develop 브랜치를 기준으로 새로운 브랜치를 생성한다.
브랜치 이름은 기능을 명확히 나타낼 수 있도록 한다.
보통 Git Flow 또는 GitHub Flow 방식을 따라 브랜치를 관리합니다.
main 또는 master → 최종 배포 브랜치
develop → 개발 진행 중인 브랜치 (여러 기능이 머지될 예정)
feature/* → 새로운 기능 개발
bugfix/* → 버그 수정 브랜치 (배포 전 수정)
hotfix/* → 긴급 버그 수정 (배포 후 발생한 이슈)
release/* → 배포 준비 브랜치 (QA 테스트 등)
chore/*, docs/*, refactor/* → 코드 개선, 문서 작업 등
# Feature 개발 (로그인 페이지)
git checkout -b feature/login-page # 버그 수정 (이슈 1234)
git checkout -b bugfix/1234 # 긴급 버그 수정 (로그인 오류)
git checkout -b hotfix/login-critical-error # 코드 리팩토링 (쿼리 성능 개선)
git checkout -b refactor/improve-db-queries # 문서 업데이트 (API 문서)
git checkout -b docs/update-api-docs # CI/CD 설정 변경 (GitHub Actions 추가)
git checkout -b ci/add-github-actions
일관된 커밋 메시지 스타일을 유지하면 프로젝트 관리가 쉬워진다.
커밋 메시지는 명확하고 간결하게 작성한다.
첫 줄에는 요약을 작성하고, 필요하면 추가 설명을 포함한다.
동사 원형을 사용한다 (예: Fix, Add, Update).
feat: 사용자 로그인 기능 추가
fix: 로그인 페이지에서 비밀번호 검증 오류 수정
refactor: 사용자 인증 로직 리팩토링
chore: 불필요한 콘솔 로그 제거
PR 작성 시 다음 사항을 포함하면 리뷰 과정이 효율적이다.## 변경 사항
- 로그인 기능 추가
- JWT 인증 구현 ## 테스트 방법
1. 로그인 페이지로 이동
2. 이메일과 비밀번호 입력 후 로그인 시도
3. 성공적으로 로그인되면 토큰이 반환되는지 확인 ## 관련 이슈
- Closes #123
]]></description><link>https://64etuor.github.io/600_tech-stack/git/git-branch-strategy.html</link><guid isPermaLink="false">600_Tech Stack/git/git branch strategy.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 13:13:39 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250122092400.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250122092400.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[10W - 02_보험 데이터 분석]]></title><description><![CDATA[보험 데이터 분석은 보험 상품의 기본 개념을 이해하고, 데이터를 활용하여 인사이트를 도출하는 과정입니다. 이를 통해 보험 사기 탐지, 포트폴리오 최적화, 데이터 기반 의사결정 등의 목표를 달성할 수 있습니다. 보험의 기본 개념과 주요 용어 정리
보험 데이터 분석을 통한 리스크 평가 및 비즈니스 가치 창출 결측치 처리 및 데이터 정제
데이터 시각화를 통한 기본적인 인사이트 도출
다양한 그래프 및 PowerBI를 활용한 EDA(Exploratory Data Analysis) 데이터에서 패턴을 발견하고 비즈니스 가설 도출
Multi-factor 분석을 통한 가설 검증
통계적 방법론(카이제곱 검정, t-검정, ANOVA 등) 활용 보험 사기 탐지를 위한 지도학습 모델 적용
Feature Engineering을 통한 변수 최적화
머신러닝 모델 성능 평가 및 해석 가능성 확보 PowerBI를 이용한 데이터 시각화 및 분석
대시보드 구축을 통한 인사이트 제공 보험 데이터 분석 결과를 효과적으로 전달하는 방법
PowerBI를 활용한 스토리텔링 및 보고서 제작 보험 사기의 주요 패턴 및 탐지 기법
사기 보험 청구 식별을 위한 주요 변수 분석 Rule-based 모델과 머신러닝 모델의 장단점 비교
Explainable AI(Interpretable Machine Learning) 적용 방법 리스크 최소화를 위한 보험 상품 설계 전략
다양한 보험 상품의 손해율 분석 및 최적화 보험 데이터의 기본 개념 이해
가설 수립 및 검증 방법 학습
PowerBI를 활용한 데이터 시각화 실습
머신러닝을 활용한 보험 사기 탐지 모델 구축 배운 점: 보험 데이터 분석을 통해 보험 사기 탐지 및 포트폴리오 최적화를 수행할 수 있음. 데이터 기반 의사결정을 내리기 위해 PowerBI와 머신러닝을 함께 활용하는 것이 중요함. 느낀 점: 보험 데이터는 매우 복잡하지만, 적절한 가설과 모델링을 통해 유의미한 패턴을 찾을 수 있음. 보험 사기 탐지에는 도메인 지식과 데이터 과학이 결합된 접근 방식이 필요함. 다음 목표: 실무 보험 데이터를 활용하여 모델을 개선하고, 더 정교한 탐지 기법을 적용해 볼 것. ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/10w-02_보험-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/10W - 02_보험 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[10W - 10_게임 데이터 분석 강의 요약]]></title><description><![CDATA[이 강의는 게임 데이터 분석가가 수행하는 주요 업무 및 게임 데이터 분석 방법론을 학습하는 데 초점을 맞춥니다.
특히 유저 행동 분석, AARRR 프레임워크, 코호트 분석, A/B 테스트 등의 기법을 실무에서 적용하는 방법을 다룹니다.
게임 데이터 분석가의 역할과 필요 역량
게임 산업에서의 데이터 활용 AARRR 프레임워크 (Acquisition, Activation, Retention, Revenue, Referral)
코호트 분석을 활용한 유저 유지율 분석
KPI 및 주요 게임 지표 분석 A/B 테스트 개념 및 실험 설계
유저 행동 로그 데이터 분석
통계적 검정을 활용한 실험 분석 Power BI, Tableau를 활용한 데이터 시각화
게임 운영 및 지표 모니터링을 위한 대시보드 설계
게임 데이터 분석가는 다음과 같은 역할을 수행합니다:
유저 행동 데이터 분석: 게임 내 유저의 활동 패턴을 분석하여 개선 방향 도출
게임 내 경제 시스템 최적화: 게임 내 화폐, 아이템, 레벨업 구조 최적화
A/B 테스트 수행: 새로운 기능 및 이벤트의 효과를 검증
KPI 모니터링 및 지표 개선: 핵심 성과 지표를 추적하여 게임의 성과 최적화 Acquisition (유입) → Activation (활성화) → Retention (유지율) → Revenue (수익화) → Referral (추천) Acquisition (유입): 유저가 게임을 처음 설치하거나 가입하는 과정
Activation (활성화): 첫 번째 주요 행동(예: 튜토리얼 완료, 첫 플레이)을 수행하는 유저 비율
Retention (유지율): 일정 기간 후에도 계속 게임을 이용하는 유저 비율
Revenue (수익화): 유저가 유료 결제를 진행하는 과정
Referral (추천): 기존 유저가 친구를 초대하여 신규 유입을 유도 📌 활용 예시:
특정 신규 유저 그룹이 튜토리얼 완료율이 낮다면, UI/UX를 개선하여 Activation을 높이는 전략을 수립. 특정 기간 동안 같은 행동을 한 유저 그룹(코호트)의 잔존율 분석
Retention 분석을 통해 유저가 게임을 얼마나 오래 유지하는지 확인 📌 활용 예시:
1월에 가입한 유저와 2월에 가입한 유저의 30일차 Retention Rate(잔존율)을 비교하여, 어떤 마케팅 전략이 더 효과적인지 분석. 게임 내 특정 기능이 유저 행동 및 KPI에 미치는 영향을 실험적으로 검증하는 방법
유저를 A 그룹(기존 기능), B 그룹(신규 기능)으로 나누어 실험 수행 가설 설정: 신규 기능이 기존보다 Retention을 높일 것이다.
지표 선정: 평균 플레이 시간, 결제율 등 분석 대상 KPI 정의
유저 샘플링: 유저를 랜덤하게 두 그룹으로 분리
실험 실행: 특정 기간 동안 게임 내 신규 기능 테스트
결과 분석: 통계적 검정을 통해 A/B 그룹 간 차이 검증
최종 결정: 신규 기능의 전체 배포 여부 결정 📌 활용 예시:
신규 로그인 보상 시스템이 Retention을 증가시키는지 확인하기 위해 로그인 유지율을 비교하는 A/B 테스트 수행. 실시간 유저 데이터 모니터링이 가능해야 함
주요 KPI (DAU, MAU, ARPU, Retention 등)를 직관적으로 시각화
대시보드를 통해 문제점을 즉각 발견하고 해결 가능 핵심 KPI를 좌측 상단에 배치하여 가시성을 높임
필터 기능을 활용하여 특정 유저 그룹만 분석 가능하도록 구성
한 화면에 과도한 정보를 담지 않도록 주의 Tableau: 강력한 대시보드 기능 제공
Power BI: 직관적인 UI와 실시간 데이터 분석 가능
Python &amp; Colab: 데이터 분석 및 자동화 가능 📌 활용 예시:
이벤트 진행 후 Retention 변화를 Tableau 대시보드로 실시간 모니터링. Kaggle (<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.kaggle.com/" target="_self">https://www.kaggle.com/</a>)
<br>Dacon (<a rel="noopener nofollow" class="external-link is-unresolved" href="https://dacon.io/" target="_self">https://dacon.io/</a>)
<br>AI Hub (<a rel="noopener nofollow" class="external-link is-unresolved" href="https://aihub.or.kr/" target="_self">https://aihub.or.kr/</a>)
<br>공공데이터 포털 (<a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.data.go.kr/" target="_self">https://www.data.go.kr/</a>) 게임 데이터 분석가는 유저 행동 데이터 및 KPI를 분석하여 게임 운영 최적화 AARRR 프레임워크를 활용하여 유저의 유입부터 수익화까지 분석 A/B 테스트를 통해 게임 기능 변경의 효과를 검증 Tableau, Power BI, Python을 활용하여 데이터 시각화 및 대시보드 구축 📌 다음 단계: 실습을 통해 직접 게임 데이터를 분석하고 인사이트 도출! 🚀]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/10w-01_게임-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/10W - 01_게임 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 03:46:05 GMT</pubDate></item><item><title><![CDATA[9W - 01_태블로 심화: 웹 로그 및 A/B 테스트 분석]]></title><description><![CDATA[강사: 황수현 (카카오 계열사 데이터 분석가, 패스트캠퍼스 강사)
대상: 태블로를 활용한 IT 프로덕트 데이터 분석을 배우고 싶은 사람 웹 로그 데이터 분석 및 A/B 테스트를 실무에서 적용하고 싶은 사람 프로덕트 데이터 분석가로의 커리어 전환을 꿈꾸는 사람 DAU, MAU, 체류시간 분석
전환율 공식 및 퍼널 분석
리텐션 분석 및 코호트 분석
태블로로 대시보드 구축 A/B 테스트 개념 및 통계적 접근
A/B 테스트 데이터 분석
태블로를 활용한 시각화 및 대시보드 구축 제품의 전 생애 주기에서 발생하는 데이터를 활용해 성과를 분석하고 개선하는 과정
제품의 기획, 개발, 출시, 사용, 개선 과정에서 데이터를 통해 성능을 향상시키고 사용자 경험을 최적화하는 것이 목표 기획 단계: 시장 조사, 사용자 요구 사항 분석 개발 단계: 제품 설계, 개발 및 테스트 배포 및 모니터링: 시스템 안정성 및 KPI 모니터링, 개선점 도출 기획 단계: 데이터 기반 아이디어 도출 및 시장 조사 개발 단계: 제품 성능 예측 및 지표 설계 배포 후 모니터링: 유저 데이터 분석 및 개선점 도출 DAU (Daily Active Users): 하루 동안 앱을 사용한 유저 수
MAU (Monthly Active Users): 한 달 동안 앱을 사용한 유저 수
체류시간 (Session Duration): 사용자가 제품을 사용하는 평균 시간
전환율 (Conversion Rate): 특정 행동을 완료한 유저 비율
퍼널 분석 (Funnel Analysis): 유저가 제품에서 이동하는 단계별 흐름 분석
리텐션 분석 (Retention Analysis): 특정 기간 이후에도 남아 있는 유저 비율
코호트 분석 (Cohort Analysis): 특정 시점에 유입된 유저 그룹의 유지율 분석 신규 기능 배포 전 효과성을 검증하는 실험 방법
유저를 두 그룹(A/B)으로 나누고 통제된 환경에서 특정 변수를 비교 변수 통제 가능: 기존 기능과 신규 기능의 차이를 정확하게 측정 리스크 최소화: 전체 배포 전에 기능 효과를 확인하여 실패 방지 가설 설정: 신규 기능이 특정 KPI를 개선할 것인지 검증 지표 선정: 전환율, 체류시간 등 적절한 측정 기준 설정 샘플링: 유저를 A/B 그룹으로 무작위 분할 실험 수행: 일정 기간 동안 두 그룹의 차이를 관찰 결과 분석: 통계적 검정을 통해 차이가 유의미한지 확인 최종 결정: 신규 기능을 전체 배포할지 여부 판단 귀무가설 (H₀): A그룹과 B그룹의 차이가 없다 대립가설 (H₁): A그룹과 B그룹의 차이가 있다 p-value: 유의수준(보통 0.05) 이하이면 귀무가설 기각 t-검정 (t-test): 두 그룹의 평균 차이가 통계적으로 유의한지 검증 📌 중심극한정리 (CLT) 활용
A/B 테스트 대상이 충분히 크면 모집단이 정규분포를 따르지 않더라도 표본 평균은 정규분포에 수렴 사용자가 직관적으로 데이터를 이해할 수 있도록 구성
단순한 현황 파악뿐만 아니라 문제 원인을 분석하고 해결 방법을 제시
핵심 KPI를 강조하고, 필요하면 드릴다운(세부 분석) 기능 제공 가장 중요한 지표를 좌측 상단에 배치 한 화면에 너무 많은 정보 배치 금지 필터 기능을 활용하여 데이터 탐색 용이하게 구성 국내: 공공데이터포털, 통계청 국외: Kaggle, Awesome Data 웹 로그 분석을 통해 유저 행동을 분석하고 태블로로 시각화 A/B 테스트를 활용하여 기능 변경 효과를 검증하고 통계적 방법론 적용 태블로 대시보드를 활용하여 효율적인 데이터 커뮤니케이션 가능 📌 다음 단계: 실습을 통해 직접 데이터 분석 및 시각화 적용! 🚀]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/9w-01_태블로-심화.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/9W - 01_태블로 심화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 03:44:06 GMT</pubDate></item><item><title><![CDATA[8W - 01_Describe Statistics]]></title><description><![CDATA[import warnings
warnings.simplefilter('ignore') import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
tips = sns.load_dataset('tips')
iris = sns.load_dataset('iris')
car_crashes = sns.load_dataset('car_crashes')
<a data-href="EDA(Exploratory Data Analysis)" href="https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/eda(exploratory-data-analysis).html#_0" class="internal-link" target="_self" rel="noopener nofollow">EDA(Exploratory Data Analysis)</a>tips.head() # 데이터 샘플 확인
tips.info() # 데이터 타입 및 결측치 확인
tips.describe() # 기본 통계량
데이터 시각화:plt.scatter(tips['total_bill'], tips['tip'])
plt.xlabel('Total Bill')
plt.ylabel('Tip')
plt.show() sns.heatmap(tips.corr(), annot=True)
plt.show() 평균 (Mean): 중앙값 (Median):
데이터의 중앙에 위치한 값 최빈값 (Mode):
데이터에서 가장 빈번하게 나타나는 값 분산 (Variance): 표준편차 (Standard Deviation): 공분산 (Covariance): 상관계수 (Correlation Coefficient): mu, sigma = 0, 1
rv = stats.norm(mu, sigma)
x = np.linspace(-3, 3, 100)
plt.plot(x, rv.pdf(x))
plt.show() 표본 크기가 커질수록 모집단의 분포와 관계없이 표본 평균의 분포가 정규분포를 따름.
sample_means = []
for _ in range(1000): sample_mean = tips['tip'].sample(30).mean() sample_means.append(sample_mean) sns.histplot(sample_means, kde=True)
plt.show() 샤피로-윌크 검정 (Shapiro-Wilk test) 귀무가설 (H₀): 데이터가 정규성을 따른다.
대립가설 (H₁): 데이터가 정규성을 따르지 않는다. stat, p = stats.shapiro(tips['total_bill'])
print(f"Test Statistic: {stat}, p-value: {p}") 한 모집단의 평균이 특정 값과 같은지 검정
stat, p = stats.ttest_1samp(tips['total_bill'], 20)
print(f"Test Statistic: {stat}, p-value: {p}") 두 모집단의 평균이 같은지 검정
group1 = tips[tips['sex'] == 'Male']['total_bill']
group2 = tips[tips['sex'] == 'Female']['total_bill'] stat, p = stats.ttest_ind(group1, group2)
print(f"Test Statistic: {stat}, p-value: {p}") <br>ANOVA (분산분석)<a data-href="ANOVA(Analysis of Variance)" href="https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/anova(analysis-of-variance).html#_0" class="internal-link" target="_self" rel="noopener nofollow">ANOVA(Analysis of Variance)</a>
회귀 분석 (Regression Analysis)
<br>베이지안 추론 (Bayesian Inference)<a data-href="Bayes Theorem" href="https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/bayes-theorem.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Bayes Theorem</a>
시계열 모델링 (Time Series Modeling)
머신러닝 응용 (Machine Learning with Statistics) <br>Scipy 공식문서: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.scipy.org/doc/scipy/" target="_self">https://docs.scipy.org/doc/scipy/</a>
<br>Seaborn 데이터셋: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://seaborn.pydata.org/generated/seaborn.load_dataset.html" target="_self">https://seaborn.pydata.org/generated/seaborn.load_dataset.html</a>
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/8w-01_describe-statistics.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/8W - 01_Describe Statistics.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 03:41:28 GMT</pubDate></item><item><title><![CDATA[8W - 02_주가 데이터 분석 및 모델링]]></title><description><![CDATA[
분석할 주요 종목: AAPL (Apple, Tech)
JPM (JP Morgan, Finance)
JNJ (Johnson &amp; Johnson, Health Care)
KO (Coca-Cola, Consumer Staples) import numpy as np
import pandas as pd
import yfinance as yf assets = ['AAPL', 'JPM', 'JNJ', 'KO']
price = yf.download(assets)['Adj Close']
price = price.dropna()
수익률 계산:
rtns = price.pct_change().iloc[1:]
import matplotlib.pyplot as plt
import seaborn as sns plt.figure(figsize=(10, 6))
sns.heatmap(rtns.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()
정규 분포 모델링from scipy import stats mu = rtns['AAPL'].mean()
sigma = rtns['AAPL'].std()
x = np.linspace(mu - 5 * sigma, mu + 5 * sigma, 1000)
y = stats.norm.pdf(x, mu, sigma) plt.plot(x, y, label='Normal Distribution')
plt.hist(rtns['AAPL'], bins=50, density=True, alpha=0.6)
plt.legend()
plt.show()
import statsmodels.api as sm mkt_rtn = yf.download('^GSPC')['Adj Close'].pct_change().iloc[1:]
train_X = sm.add_constant(mkt_rtn.shift(1).loc['2000':'2020'])
train_y = mkt_rtn.loc['2000':'2020'] ols = sm.OLS(train_y, train_X)
fitted = ols.fit()
print(fitted.summary())
def calc_beta(r, mkt): beta = np.cov(r, mkt, ddof=1)[0, 1] / np.var(mkt, ddof=1) return beta betas = rtns.apply(lambda x: calc_beta(x, mkt_rtn))
print(betas)
confidence_level = 0.95
param = stats.norm.fit(rtns['JPM'])
var_value = stats.norm.ppf(1 - confidence_level, *param)
print(f"VaR (95%): {var_value * 100:.2f}%")
test_X = sm.add_constant(mkt_rtn.shift(1).loc['2021':"2024"])
test_y = mkt_rtn.loc['2021':'2024'] pred_y = fitted.predict(test_X) plt.figure(figsize=(10,5))
plt.plot((test_y.pct_change() + 1).cumprod(), label='Original')
plt.plot((pred_y.pct_change() + 1).cumprod(), label='Predicted')
plt.legend()
plt.show()
Fama-French 다중 요인 모델:
CAPM (1 Factor): Market Premium
Fama-French 3 Factor: Market Premium, SMB, HML(Value)
Fama-French 5 Factor: Market Premium, SMB, HML, RMW(수익성), CMA(투자)
import pandas_datareader as pdr ff4 = pdr.famafrench.FamaFrenchReader('F-F_Research_Data_Factors', freq='M').read()[0] / 100
rtns_m = rtns.resample('M').apply(lambda x: (1+x).prod() -1)
df_merged = pd.concat([ff4, rtns_m], axis=1).dropna()
Fama-French 모델 회귀 분석:X = sm.add_constant(df_merged[['Mkt-RF', 'SMB', 'HML']])
y = df_merged['KO'] - df_merged['RF'] ols = sm.OLS(y, X)
fitted = ols.fit()
print(fitted.summary())
resid = y - fitted.fittedvalues
sns.regplot(x=fitted.fittedvalues, y=resid, lowess=True)
plt.show()
stats.shapiro(resid)
from statsmodels.stats.outliers_influence import variance_inflation_factor X_values = sm.add_constant(df_merged[['Mkt-RF', 'SMB', 'HML']]).values
vif = [variance_inflation_factor(X_values, i) for i in range(X_values.shape[1])]
print(vif) Fama-French Factors: <a data-tooltip-position="top" aria-label="https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html" target="_self">Ken French Data Library</a>
<br>Yahoo Finance API: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://pypi.org/project/yfinance/" target="_self">https://pypi.org/project/yfinance/</a>
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/8w-02_주가-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/8W - 02_주가 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 03:38:06 GMT</pubDate></item><item><title><![CDATA[8W - 03_마케팅 데이터 분석]]></title><description><![CDATA[
Frequency (광고 빈도) None: 광고 노출 없음
7:1: 7번의 비광고 컨텐츠 이후 1번 광고
4:1: 4번의 비광고 컨텐츠 이후 1번 광고
1:1: 1번의 비광고 컨텐츠 이후 1번 광고 Type (광고 유형) 1: Photo
2: Video Time 세션 지속 시간 (분) 광고가 사용자 참여에 미치는 영향을 평가 독립변수: 광고 빈도, 광고 유형
종속변수: 세션 지속 시간
세션 지속 시간이 짧아지면 사용자의 이탈 가능성이 증가 → 광고가 사용자 경험에 방해를 줬을 가능성 있음. import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.graphics.factorplots import interaction_plot
from scipy import stats ad_data = pd.read_csv('data.csv')
print(ad_data.info())
그룹별 기술 통계:groupby = ad_data.groupby(['Type', 'Frequency'])
desc = pd.concat([groupby.mean(), groupby.std(), groupby.skew(), groupby.count()], axis=1)
desc.columns = ['Mean', 'Stddev', 'Skew', 'N']
desc
광고 빈도별 박스플롯:level1 = ad_data['Frequency'].unique()
f1 = pd.concat([ad_data[ad_data['Frequency'] == i]['Time'].reset_index(drop=True) for i in level1], axis=1)
f1.columns = ['None', '7:1', '4:1', '1:1']
f1.boxplot()
plt.show()
광고 유형별 박스플롯:level2 = ad_data['Type'].unique()
f2 = pd.concat([ad_data[ad_data['Type'] == i]['Time'].reset_index(drop=True) for i in level2], axis=1)
f2.columns = ['Photo', 'Video']
f2.boxplot()
plt.show()
선형 회귀 모델: ): 세션 지속 시간
): 광고 유형 인디케이터 (0 또는 1)
): 광고 빈도 수준
): 광고 유형과 광고 빈도의 상호작용 효과
ols = sm.OLS.from_formula('Time ~ C(Frequency) * C(Type)', data=ad_data)
fitted = ols.fit()
print(fitted.summary())
잔차의 정규성 검정 (Shapiro-Wilk Test):stat, p = stats.shapiro(fitted.resid)
print(f"Test Statistic: {stat}, p-value: {p}")
잔차의 등분산성 검정 (Levene’s Test):stat, p = stats.levene(fitted.resid, fitted.fittedvalues)
print(f"Test Statistic: {stat}, p-value: {p}")
가설 검정
Main Effects Frequency (광고 빈도) H0: 광고 빈도에 따른 세션 지속 시간 평균 차이가 없음
H1: 광고 빈도에 따른 세션 지속 시간 평균 차이가 있음 Type (광고 유형) H0: 광고 유형에 따른 세션 지속 시간 평균 차이가 없음
H1: 광고 유형에 따른 세션 지속 시간 평균 차이가 있음 Interaction (상호작용 효과) H0: 광고 빈도와 광고 유형 간의 상호작용이 없음
H1: 광고 빈도와 광고 유형 간의 상호작용이 있음 sm.stats.anova_lm(fitted)
분산 분석 공식:
plt.figure(figsize=(12, 6)) ax1 = plt.subplot(1, 2, 1)
interaction_plot(x=ad_data['Frequency'], trace=ad_data['Type'], response=ad_data['Time'], colors=['black', 'red'], ax=ax1)
plt.xticks([1, 2, 3], ['7:1', '4:1', '1:1'])
plt.xlabel('Frequency')
plt.legend(['Photo', 'Video'], fontsize=15) ax2 = plt.subplot(1, 2, 2)
interaction_plot(x=ad_data['Type'], trace=ad_data['Frequency'], response=ad_data['Time'], colors=['black', 'red', 'blue'], ax=ax2)
plt.xticks([1, 2], ['Photo', 'Video'])
plt.xlabel('Type')
plt.legend(['7:1', '4:1', '1:1'], fontsize=15) plt.show() ANOVA 개념 정리: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.scribbr.com/statistics/anova/" target="_self">https://www.scribbr.com/statistics/anova/</a>
<br>Scipy 공식문서: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://docs.scipy.org/doc/scipy/" target="_self">https://docs.scipy.org/doc/scipy/</a>
<br>Statsmodels 공식문서: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.statsmodels.org/stable/index.html" target="_self">https://www.statsmodels.org/stable/index.html</a>
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/8w-03_마케팅-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/8W - 03_마케팅 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 27 Jan 2025 03:37:45 GMT</pubDate></item><item><title><![CDATA[9W - 02_금융 데이터 분석]]></title><description><![CDATA[이 강의는 금융 도메인에서 Product Data Analyst(PDA) 역할을 수행하는 방법을 다룹니다. 데이터 기반 제품 분석 및 개선을 위한 AARRR 프레임워크, Cohort 분석, A/B 테스트, ML 모델 활용 등의 방법론을 학습합니다.
PDA: 특정 제품과 관련된 분석을 수행하며, UX, 마케팅, 유저 행동 분석을 통해 제품 성장을 지원.
BDA: 기업 전반의 데이터 분석을 수행하며, 주로 경영 의사결정과 관련된 데이터 인사이트를 제공. AARRR 프레임워크:
→ Acquisition (유입) → Activation (활성화) → Retention (유지) → Revenue (수익) → Referral (추천)
→ 유저 여정을 정의하고, 전환율을 높일 방법을 탐색. Cohort 분석:
→ 유저를 특정 기준(예: 가입일, 첫 거래일)으로 그룹화하여 리텐션을 분석.
→ 유저 Lock-in 전략 수립에 활용. Funnel 분석:
→ 제품 사용 단계별 이탈률 분석 후 UX 개선. 제품의 Retention(유저 유지율)을 강화하는 것이 장기적으로 지속 가능한 성장을 위한 핵심 전략.
단기적인 광고 및 프로모션을 통한 유입(Inflow) 부스팅보다 더 중요한 요소. 📌 Carrying Capacity(C.C) 개념
C.C = 신규 유입 고객 수 / 고객 이탈률
→ 제품의 기초체력 분석을 위한 지표. Acquisition (유입): 계좌 개설율 분석, 주요 이탈 구간 개선.
Activation (활성화): 최초 주식 거래율 증가를 위한 이벤트 운영.
Retention (유지율): 장기 보유 유도(예: 출석 퀴즈, 주식 모으기 이벤트). Explainable AI (XAI): 단순히 ML 모델 예측값을 제공하는 것이 아니라, 데이터 패턴을 해석하는 역량이 중요.
주요 기법: SHAP (Shapley Additive Explanations)
→ 유저 행동이 전환율에 얼마나 기여했는지를 분석. SHAP 활용 예시 광고 효과 분석: TV &gt; Radio &gt; Newspaper 순으로 광고 영향도 비교.
Waterfall Plot: 개별 변수가 예측값에 미치는 영향 분석.
Summary Plot: Feature 값 크기에 따른 예측 영향도 분석. A/B 테스트 실험군 &amp; 대조군 비교를 통해 UI/UX, 프로모션 효과 검증.
Z-test, t-test 등을 활용. 신뢰구간 &amp; 가설 검정 모집단 평균/비율을 추정하고, 검정을 통해 차이 분석.
제1종 오류(α): 잘못된 귀무가설 기각 (false positive).
제2종 오류(β): 잘못된 귀무가설 채택 (false negative). Product Data Analyst는 제품 기반의 데이터 분석을 수행하며, 유저 여정을 최적화하는 것이 핵심.
AARRR 프레임워크와 Cohort 분석을 활용하여 유저 리텐션 전략을 개선.
SHAP, XAI 기법을 활용해 머신러닝 모델의 해석 가능성 강화.
통계적 검정(A/B 테스트, 신뢰구간 분석)을 활용하여 데이터 기반 의사결정 수행.
📌 다음 단계
강의 내용을 실제 금융 데이터 분석 프로젝트에 적용해보면서 실습! 🚀
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/9w-02_금융-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/9W - 02_금융 데이터 분석.md</guid><dc:creator><![CDATA[메타코드]]></dc:creator><pubDate>Sat, 18 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[2025-01-26 내게 필요한 것, 열렬한 사랑]]></title><description><![CDATA[
"오늘 나는 _이(가) 좀 더 필요했다. Today you needed more ___." 오늘 넛지를 읽다가 퇴직 연금과 관련된 챕터에서 그만 잠이 들고 말았다. 복잡한 계산을 싫어하는 것도 아닌데 왜 이렇게 돈과 관련된 사안은 재미가 없는지 모른다. 해보지 않았던 일은 이처럼 불편하고 어색한 것이지만 유독 돈과 관련된 것은 흥미가 안 생긴다. 보통은 이와 반대이지 않은가.
이게 잘못된 일이라고 통렬히 느끼는 한 편, 이게 쉽사리 바뀌지 않을 성정이라는 생각이 들자 대번 겁이 난다. 목표란 걸 세워야겠다는 생각을 한다. 생각해보면 돈이란 언제나 정량화가 가능해서 가장 측정하기 쉬운 지표 중 하나인데, 왜 쉬운 걸 제쳐두고 어려운 것들만 붙잡고 있었을까 아쉬움이 남는다.
삶을 바꾸기 위해서는 이제껏 해오지 않은, “싫은 걸” 해야 한다. 싫은 걸 하기 위해서는 끈기가 필요하다. 오늘뿐만 아니라 나는 항상 끈기가 더 필요했다.
억지로라도 돈 벌 궁리 좀 해보자. 누군가를 열렬히 사랑해 본 적이 있어? 마음의 크기와 표현의 크기가 항상 같지 않아서… 열렬한 사랑은 해봤겠지만 겉으로 드러나는 애정의 양은 그 정도가 못되지 않았을까.
’사랑하니까 헤어진다.’는 이해하지 못하지만, ‘사랑하지만 헤어진다.’는 겪어본 거 같아.
파국이 뻔히 보이는 사랑만은 계속 하지 못하겠더라. 내가 너무 바라는 게 많은 사람일까.
”물 80ml에 분말 사랑을 한 포 타시오.”
이런 설명을 보고도 그냥 더 오래 마시고 싶어서 물을 냅다 붓는 거 같이, 나의 사랑은 항상 밍밍한 맛이었고 매번 다 마시기 전에 차가 식어버렸던 거 같아.
참 바보 같지. 사랑이란 게 일회용도 아닌데.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-26-내게-필요한-것,-열렬한-사랑.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-26 내게 필요한 것, 열렬한 사랑.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 26 Jan 2025 13:33:43 GMT</pubDate></item><item><title><![CDATA[241228 - 이상의 냄새]]></title><description><![CDATA[지난 연적의 상흔을 열람하러 나서는 자리와 같이
도서관 맡에 기웃기웃 대며 까막머리를 들이 밀어
죄 우중충한 표정들에게서 간혹 사랑의 실마리를 맡고,
못난 코를 킁킁 대고 돌아치는 들개야말로
글자를 모르고도 세상에서 가장 독서에 배고픈 자이다.기름진 먹이는 한 번 입에 대지 못 하고,
풍문으로 도는 향기에 입질이 살살 동해서,
낑낑 대며 몸서리를 대번 치다가 또 돌연 진저리 내고 마는 결말은,
향기의 실존이란 명백한데,
따라 간들 당최 그 근원이 어딘지 알 도리 없다.들개는 배알이 꼬이고 뿔이 난다.
굶주림이란 어느덧 만성 질병 같이 어금니 사이에 끼어 들어서는
시시때때로 이를 갈며 짖어 대는 꼬락서니 우스웁고,
그걸 보고 사람들은 더 우스운 꼴을 보려고,
작대기로 개의 옆구리를 쿡쿡 찔러 댄다.
개는 그러나, 참사랑을 아는 개는,
사람을 닮은 것을 물지 않는다.시간이 공정한 까닭은,
낯짝이 두꺼워서가 아니라 저 스스로도
그 양을 조절할 수가 없어서이다.
시간은 저 자신조차 한 때의 비극을 천년처럼 앓는다.앓던 이가 저절로 빠지듯, 귀신같이 참 기척도 없이,
모든 화난 것들에게
몇 글자의 전보가 닿는다.“좋은 향을 좇는 이에게 좋은 향이 깃든다.”누군가는 살아서 전보를 받았는지,
죄다 객사하여 향기로 흩어졌는지는,
아무 누구라도 모를 일이다.향기는 코 끝에 분연히 실존하는데,
여전히 그 진원 찾을 길 없다.]]></description><link>https://64etuor.github.io/900_writings/poems/241228-이상의-냄새.html</link><guid isPermaLink="false">900_Writings/Poems/241228 - 이상의 냄새.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 25 Jan 2025 14:11:01 GMT</pubDate></item><item><title><![CDATA[2025-01-25 나를 나답게 만드는 것, 지구를 지키는 나만의 방법]]></title><description><![CDATA[
"무엇이 나를 나답게 만드는가? What makes "you" you?" 어릴 적부터 유별나단 취급을 많이 받았던 터라 ‘나'라는 개성이 일찍부터 뚜렷하게 있었다. 색이 진한 탓에 어딜 가든 물감 퍼지듯 나로 인해 번지는 분위기가 있었으며, 이건 좋은 의미로 그렇기도, 또 그렇지 않기도 한 거 같다.
의견을 내는 것을 좋아한다, 토론을 좋아한다.
위의 두 가지 나의 속성을 가지고 얘기하면 일면 긍정적으로 보일 수도 있겠으나 실상 그렇지 않은 경우도 많다. 의견을 내고 그걸 관철하기 위해 노력하니, 대부분의 일은 내가 원하는 대로 흘러가는 결과가 나온다.
→ 이런 사람을 독재자라고 부르기로 한 사회적 합의가 있다.
토론을 좋아해서 사소한 안건을 가지고도 이야기를 집요하게 늘리는 경향이 있다.
→ 듣다가 질려버리는 사람이 나온다. 즉, 나만 재밌다. 다 일장일단이 있는 것이라 마냥 버리기도 애매한 부분들이다.
더도 말고 덜도 말아야 하는 중용을 지키는 게 참으로 어렵다고 다시 한 번 느끼는 부분.
그러나 이런 모자란 점은 차차 경험이 해결해 주리라 믿는다.
Sting의 ”Englishman In New York” 노래 가사에 이런 내용이 있다. ”Be yourself, no matter what they say.” 줄곧 나를 기분 좋게 하는 가사였다. 그러나 지금 다시 생각해 보면, 난 저 ‘나다움’이라는 낱말과 멜로디에 도취되어 혼자 대로변에서 머리를 흔들며 즐기고 있던 거 같다. 다른 사람들 보기 불편한 건 아랑곳 않고. 뭐든 과용은 좋을 것이 없다. 지구를 지키는 너만의 방법은? 기도. 그냥 이렇게 대놓고 답 없는 대답을 할 정도로, 솔직히 뭘 시도할 수 있다는 생각조차 안 들긴 해. 현대의 소비주의는 자본주의 논리와 맞물려서 돌아가는 거대한 조류 같은 것이라 마치 자연재해만 같이 느껴지거든.
공유지의 비극을 해결하기 위한 다양한 방안을 연구한 공로로 노벨경제학상을 수상한 엘리노어 오스트럼은 ‘공유의 비극을 넘어’라는 저서에서 공유 관리의 원칙을 제시했어. 나는 그 원칙에서 옛날 향촌 사회의 풍경을 떠올려. 작은 공유재를 가진 아주 많은 작은 소집단으로 구성된 사회 말이야.
도시화가 심화되면서 ‘이기주의’ 또한 심화된 거라고 말하면 내가 턱없는 비약을 한 것일까? 오늘의 '생각을 자극'하는 글귀"지식을 탐구하는 것이야말로 진정한 호기심의 발현이다.호기심의 특징은 뚜렷한 쓸모가 없는 지식에 대한 갈증이다. 당장 나와 상관없는 무언가를 탐구하고 발견하는 데서 기쁨을 얻는다면 평생 배우는 자세로 살아갈 수 있다. 이런 배움은 이해를 위한 이해가 목적이다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-25-나를-나답게-만드는-것,-지구를-지키는-나만의-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-25 나를 나답게 만드는 것, 지구를 지키는 나만의 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 25 Jan 2025 14:00:34 GMT</pubDate></item><item><title><![CDATA[2025-01-01 삶의 목적, 나를 한단어로 표현]]></title><description><![CDATA[
내 삶의 목적은 무엇인가? What is your purpose in life? 행복해지는 것. 그리고 그 행복을 위해 끊임 없이 노력하는 것. 이 과정에서 새로 배우는 것도 많고, 여러 가지 다양한 시도들도 경험으로 쌓일 것이다. 이러한 과정을 너무나 사랑하는 내 태도가 스스로 목표에 다다르기 위한 선순환의 싸이클이 되어주리라 믿는다. 궁극적으로는 내가 가진 인문학적, 공학적, 예술적 재능을 남김 없이 발휘하여 나 자신을 먼저 행복하게 하고, 그 결과물이 남도 행복하게 한다면 가장 이상적인 시나리오가 아닐까 한다. 너를 하나의 단어로 표현한다면 어떤 단어가 떠올라? 자유. 남들의 일반적인 조언을 신경 써 본 일이 없다. 그 사람들의 조언이 허무맹랑해서가 아니라 그게 나한테 맞는 조언이 아닌 것을 일찍이 알던 까닭이다. 덕분에 내가 원하는 게 무엇인지 알기 위해 엄청나게 많은 시간을 소비했다. 누군가의 눈에는 그저 낭비로 보일 수도 있는 그런 일들 뿐이었을 테지만, 나에게는 더없이 소중한 시간들이다. 여러 가지 삶을 체험했고, 여러 가지 직업을 경험했다. 나의 문학적 토양은 이처럼 다양한 기초와 현장감을 가지고 특정 편견에 얽메이지 않으니, 다사다난했던 인생은 어쩌면 내게 가장 큰 교훈을 준 셈이다. 언어란 한 사람의 세상이요, 나는 이토록 광활한 세상에 살고 있으니.
오늘의 '생각을 자극'하는 글귀
작년은 되돌릴 수 없지만 올해는 더 나아질 수 있다.
실수를 되돌아봐야 하는 이유는 과거의 나를 부끄러워하기 위해서가 아니다. 미래의 나에게 가르침을 주기 위함이다. '반추'는 과거의 잘못을 계속 곱씹는 것이지만, '성찰'은 앞으로 더 잘하기 위해 새로운 통찰을 찾는 것이다. 작년은 되돌릴 수 없지만 올해는 더 낫게 만들 수 있다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-01-삶의-목적,-나를-한단어로-표현.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-01 삶의 목적, 나를 한단어로 표현.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 25 Jan 2025 13:02:06 GMT</pubDate></item><item><title><![CDATA[2025-01-24 창업을 한다면]]></title><description><![CDATA[
"만약 창업을 한다면 어떤 일을 하고 싶은가? If you were going to start your own company, what would it be? 미래 세대에게 가치 있는 일을 하고 싶다. 어떤 형태로 창업하든, 궁극적으로는 그러한 목표를 가지고 일하게 될 것 같다. 설령 완벽하게 실패한다 해도 말이다.
일제강점기 당시, 목숨을 걸고 투쟁했던 독립운동가들을 떠올려본다. 그들의 행동은 자본주의적인 관점에서 보면 완벽하게 이율배반적이었다. 목숨을 담보로 싸우는 것도 모자라, 때로는 가족까지 희생해야 했고, 그 효과 역시 확신하기 어려웠다. 거대한 식민 정부에 맞선다는 것은 누구의 눈에도 무모하게 보였을 것이다.
그들 또한 이 사실을 몰랐을 리 없다. 그럼에도 불구하고 그들은 독립운동을 했다. 아니 했다기 보다도 그저 그러지 않고는 살 수가 없었을 것이다. 아이러니하게도 스스로를 내던지는 사람일수록 무언가를 강렬히 사랑한다. 가족과 나라, 그리고 그 후손을 향한 깊은 사랑에 대한 전제가 없다면 이런 행위를 도저히 이해하기 힘들다.
누군가는 “독립운동이 성공하지 못했다. 광복을 스스로 쟁취하지 않았다”고 말한다. 그런 말을 들으면 화가 나기보다는 슬픈 마음이 앞선다. 그 말을 하는 사람들은, 무언가를 진심으로 사랑해 본 적이 없는 듯 느껴졌기 때문이다. 독립운동가들은 당대인들에게 희망을, 그리고 후손들에게 자부심을 심어 주었다. 반대로 생각하여 만약 우리의 조상이 모두 친일로 돌아섰다면, 지금의 시대를 살아가는 우리 중 누가 그것을 자랑스러워할까?
코맥 맥카시(Cormac McCarthy)의 소설 The Road를 보면, 아버지와 아이가 황폐한 세상을 떠돌며 생존을 위해 싸우지만 끝내 선의를 잃지 않는다. 작품에서는 끊임없이 “불꽃을 운반한다(Carrying the fire)”는 비유가 등장한다. 소설 말미에는 아이가 그 ‘불꽃’을 이어받아 앞으로 나아간다. 바로 희망의 계승을 상징하는 장면이다. “You have to carry the fire.”
“I don’t know how to.”
“Yes, you do.”
- Cormac McCarthy, The Road 우리 시대에 전해진 ‘불꽃’ 또한 이전 세대가 이어준 유산이다. 그리고 이 불꽃 덕분에, 우리는 이런 모습의 현재를 살아가며 미래를 꿈꿀 수 있다.
거창한 듯 쓰지만 그저 받은 만큼은 돌려주고 싶다는, 단순하지만 진심 어린 마음이다.
불꽃을 활활 태울 자신만은 없다만 적어도 성화 봉송 정도는 해낼 수 있지 않을까? 하는 그런. “I don’t know how to.”
“Yes, you do.”
오늘의 '생각을 자극'하는 글귀
나에게 기대는 사람이 있을 때 의지는 강해진다.
나를 믿고 기대하는 사람들이 있을 때 의지는 강해진다. 아이들도 자신에게 기대하는 누군가 있다면 나중에 이익을 위해 당장의 손해를 기꺼이 포기한다. 자신만을 위한 일이 아니라면 자제력은 더 강해진다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-24-창업을-한다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-24 창업을 한다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 25 Jan 2025 13:00:35 GMT</pubDate></item><item><title><![CDATA[AIC (Akaike Information Criterion)]]></title><description><![CDATA[AIC는 모델 선택(Model Selection)을 위한 통계적 기준으로, 모델의 적합도와 복잡도를 모두 고려하여 가장 적합한 모델을 선택하는 데 사용됩니다. 이 문서에서는 AIC의 정의, 유도 과정, 활용 방법, 그리고 실제 예제를 통해 AIC를 심도 있게 이해할 수 있도록 합니다. 공식: : 추정된 모델의 최대우도 값 (Likelihood).
: 모델의 파라미터 수. 의미: : 모델의 적합도를 평가.
: 모델 복잡도에 대한 페널티를 추가하여 과적합 방지.
AIC 값이 작을수록 좋은 모델. AIC는 모델이 데이터를 잘 설명하는 정도와 모델의 단순성을 균형 있게 평가합니다. AIC는 절대적인 지표가 아닌 상대적인 지표로, 여러 모델의 AIC 값을 비교하여 가장 작은 값을 가진 모델을 선택합니다. 데이터가 독립적이고 동일한 분포(i.i.d.)를 따른다고 가정합니다.
동일한 데이터셋에 대해 모델을 비교해야 합니다. BIC (Bayesian Information Criterion): : 데이터 포인트 개수.
BIC는 데이터 크기에 따라 더 강한 페널티를 부과하여 단순한 모델을 선호.
AIC는 상대적으로 유연한 모델 선택이 가능. Adjusted 는 주로 선형 회귀에서 사용되며, 모델 복잡도에 따라 를 조정하여 비교합니다.
AIC는 보다 일반적인 모델(예: 선형 회귀 외의 경우)에도 적용 가능합니다. 여러 대안 모델을 설계합니다.
각 모델의 최대우도 값을 계산합니다.
AIC 값을 계산: 가장 낮은 AIC 값을 가진 모델을 선택합니다. 목표: 변수 선택(Feature Selection)을 통해 최적의 회귀 모델을 찾습니다.
모든 가능한 변수 조합에 대해 회귀 모델을 피팅하고, AIC 값을 계산하여 비교합니다. 종속 변수 , 독립 변수 . 모델 1: 모델 2: 모델 1: , . 모델 2: , . AIC 값이 작은 모델 2를 선택합니다. 이항 데이터 (0/1) 분석. 모델 A: 모델 B: 모델 A를 선택합니다. 데이터 크기 문제: AIC는 작은 데이터셋에서 과적합 가능성이 있습니다.
BIC를 함께 사용하는 것도 유용합니다. 모델 해석 가능성: AIC 값이 큰 차이가 나지 않을 경우, 해석 가능한 모델을 선호합니다. 복잡한 모델 평가: 비선형 모델이나 머신러닝 알고리즘에서도 AIC를 활용할 수 있습니다. Akaike, H. (1974). "A new look at the statistical model identification". IEEE Transactions on Automatic Control.
Burnham, K. P., &amp; Anderson, D. R. (2004). Model Selection and Multimodel Inference. Springer.
관련 강의 자료 및 통계 교재 참고.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/aic-(akaike-information-criterion).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/AIC (Akaike Information Criterion).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[GitHub Flow 기반 브랜치 & 이슈 네이밍 규칙]]></title><description><![CDATA[Summary
GitHub Flow를 사용해 배포가 자주 일어나는 프로젝트(웹 애플리케이션, SaaS 등)를 간소하고 효율적으로 운용하기 위한 규칙입니다. 브랜치: main에서 분기(feature/*, fix/*, docs/*, refactor/*, chore/*, [선택] hotfix/*) 이슈: [Type] 짧은 설명 (예: [Bug] 로그인 오류 수정) 커밋 메시지: feat: ..., fix: ... 등 간결한 태그 사용 Pull Request: 짧은 변경 사항 요약 + 테스트 방법 + 관련 이슈 main 브랜치는 항상 배포 가능한 상태를 유지합니다.
새로운 작업(기능 추가, 버그 수정 등)은 main 에서 새 브랜치를 생성합니다.
작업 완료 후 Pull Request(PR) 를 통해 코드 리뷰를 진행한 뒤, 승인 시 main에 병합합니다.
필요 시 병합 완료된 브랜치는 삭제하여 관리합니다.
Note
GitHub Flow에서는 별도의 고정 브랜치(develop, release 등)를 두지 않습니다. 모든 작업은 main을 기준으로 분기합니다. feature/: 새로운 기능 개발
- 예: feature/user-login fix/: 일반 버그 수정 (아직 배포되지 않은 이슈)
- 예: fix/login-validation-error docs/: 문서 작성 또는 수정
- 예: docs/update-readme refactor/: 리팩토링(코드 구조 변경, 성능 개선 등)
- 예: refactor/improve-db-queries chore/: 그 외 설정/빌드 작업, 패키지 업데이트 등
- 예: chore/update-eslint-config hotfix/: 배포 후 발견된 치명적 버그 및 긴급 수정(옵션)
- 예: hotfix/payment-crash
# 기능 추가
git checkout main
git checkout -b feature/user-login # 버그 수정
git checkout main
git checkout -b fix/login-validation-error # 긴급 버그(배포 후) 수정
git checkout main
git checkout -b hotfix/critical-bug
프로젝트 이슈(버그, 기능 요청 등)를 효율적으로 관리하기 위해 이슈 제목에 유형(Type)을 붙입니다.[Type] 짧은 설명 Type: Bug, Feat, Fix, Docs, Refactor, Chore 등
짧은 설명: 구체적으로 어떤 작업인지 간단명료하게 작성 [Bug] 로그인 시 비밀번호 검증 오류 발생
[Feat] 사용자 프로필 페이지 생성
[Docs] API 문서 업데이트
[Refactor] DB 쿼리 최적화
[Chore] ESLint 버전 업데이트
Tip 이슈 본문(내용)은 무엇을, 왜, 어떻게의 관점에서 상세히 작성하면 협업에 유리합니다.
필요 시 라벨(Label)을 추가(bug, enhancement, question 등)하거나, 프로젝트보드와 연동할 수 있습니다. 태그 + 간략한 요약 + 이슈 번호(옵션) 필요하다면 한 줄 띄우고 추가 설명 feat: 기능 추가
fix: 버그 수정
docs: 문서 작성/수정
refactor: 코드 리팩토링 (기능 변화 없음)
chore: 빌드 설정, 패키지 업데이트
test: 테스트 코드 추가/수정
git commit -m "feat: 사용자 로그인 기능 구현"
또는feat: 사용자 로그인 기능 구현 - 로그인 폼 및 API 연동
- 토큰 기반 인증 처리
PR은 리뷰어가 변경 사항을 빠르고 정확하게 이해하도록 돕습니다.## 변경 사항
- 사용자 로그인 페이지 추가 (JWT 발급 연동)
- 로그인 성공 시 메인 페이지로 라우팅 ## 테스트 방법
1. /login 페이지 접속
2. 이메일/비밀번호 입력 후 로그인
3. 인증 성공 시 토큰 저장 및 메인 페이지로 이동 ## 관련 이슈
- Closes #12
Note Closes #이슈번호 등을 사용하면 머지 시 자동으로 이슈가 닫힙니다.
리뷰어가 원활하게 확인할 수 있도록 테스트 방법, 주요 변경 파일 등을 간단히 작성해 주세요. ]]></description><link>https://64etuor.github.io/600_tech-stack/git/git-branch-stategy_rough-ver..html</link><guid isPermaLink="false">600_Tech Stack/git/git branch stategy_rough ver..md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 24 Jan 2025 06:32:56 GMT</pubDate></item><item><title><![CDATA[Subqueries]]></title><description><![CDATA[
Subqueries (also known as inner queries) are queries nested inside other SQL statements, such as SELECT, INSERT, UPDATE, or DELETE. They allow you to dynamically use the results of one query as input or conditions for another.
Correlated subqueries are a special type of subquery that references one or more columns from the outer query. Unlike a regular subquery, a correlated subquery is evaluated once for each row processed by the outer query, making it more dynamic but potentially less performant.
Subqueries can be categorized based on the type of results they return and how they are used:A scalar subquery returns a single value (one row, one column). It is often used in the SELECT clause or WHERE clause.SELECT EmployeeID, FirstName, LastName, (SELECT MAX(Salary) FROM Employees) AS MaxSalary
FROM Employees; Explanation: The subquery returns the maximum salary. The outer query then shows each employee's details along with this maximum salary.
A row subquery returns a single row with multiple columns. It is used with conditions that expect multiple values, such as WHERE or IN clauses.SELECT *
FROM Employees
WHERE (DepartmentID, Salary) = ( SELECT DepartmentID, MAX(Salary) FROM Employees WHERE DepartmentName = 'Sales'
); Explanation: The subquery finds the DepartmentID and the highest salary for the "Sales" department. The outer query returns employees who match both these criteria.
A column subquery returns a single column with multiple rows. It is typically used with the IN clause to filter based on multiple values.SELECT EmployeeID, FirstName, LastName
FROM Employees
WHERE DepartmentID IN ( SELECT DepartmentID FROM Departments WHERE Location = 'New York'
); Explanation: The subquery retrieves all DepartmentIDs located in New York. The outer query returns employees who belong to any of these departments.
A table subquery returns multiple rows and columns, essentially functioning like a derived table. It is used in the FROM clause.SELECT d.DepartmentName, e.EmployeeCount
FROM ( SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM Employees GROUP BY DepartmentID
) e
INNER JOIN Departments d ON d.DepartmentID = e.DepartmentID; Explanation: The subquery aggregates employees by department. The outer query joins this result with the Departments table to get department names and employee counts.
An EXISTS subquery checks if any rows meet the conditions specified in the subquery and returns a Boolean value (TRUE or FALSE).SELECT FirstName, LastName
FROM Employees e
WHERE EXISTS ( SELECT 1 FROM Orders o WHERE o.EmployeeID = e.EmployeeID
); Explanation: The subquery checks if there are any orders linked to each employee. The outer query returns employees who have processed at least one order.
A regular subquery is a query enclosed in parentheses and embedded inside a larger query. It can be executed independently of the outer query. Filtering Results in a WHERE Clause:
SELECT EmployeeID, FirstName, LastName
FROM Employees
WHERE DepartmentID = ( SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Sales'
); Using Subqueries in the FROM Clause (Derived Tables):
SELECT d.DepartmentName, e.EmployeeCount
FROM ( SELECT DepartmentID, COUNT(*) AS EmployeeCount FROM Employees GROUP BY DepartmentID
) e
INNER JOIN Departments d ON d.DepartmentID = e.DepartmentID; Subqueries in the SELECT List:
SELECT FirstName, LastName, (SELECT COUNT(*) FROM Orders WHERE Orders.EmployeeID = Employees.EmployeeID) AS OrderCount
FROM Employees; A correlated subquery references columns from the outer query, making it dependent on the outer query's current row.SELECT e.EmployeeID, e.FirstName, e.LastName
FROM Employees e
WHERE e.Salary &gt; ( SELECT AVG(Salary) FROM Employees e2 WHERE e2.DepartmentID = e.DepartmentID
); Explanation: The subquery calculates the average salary for each employee's department. The outer query returns employees whose salaries exceed this average. Choose the Right Subquery Type: Use scalar subqueries for single-value lookups.
Use table subqueries when you need derived tables.
Use correlated subqueries for row-specific logic. Optimize Correlated Subqueries: Replace with joins, CTEs, or window functions where possible.
Ensure columns used in subquery conditions are indexed. Example Optimization:
WITH DeptAvgSalary AS ( SELECT DepartmentID, AVG(Salary) AS AvgSalary FROM Employees GROUP BY DepartmentID
)
SELECT e.EmployeeID, e.FirstName, e.LastName
FROM Employees e
JOIN DeptAvgSalary das ON e.DepartmentID = das.DepartmentID
WHERE e.Salary &gt; das.AvgSalary; ]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/subqueries.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/Subqueries.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 24 Jan 2025 06:23:38 GMT</pubDate></item><item><title><![CDATA[Views]]></title><description><![CDATA[
Views and Materialized Views are essential database objects that allow you to simplify and optimize your SQL queries. They provide a way to store query results for easier and faster access.
Views are virtual tables representing the result of a query, while Materialized Views physically store the query results for faster retrieval. A View is a virtual table based on the result of a SELECT query.
It does not store data physically but provides a saved query that dynamically retrieves data from underlying tables when queried.
Changes to the underlying tables are reflected in the view.
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;
CREATE VIEW HighSalaryEmployees AS
SELECT EmployeeID, FirstName, LastName, Salary
FROM Employees
WHERE Salary &gt; 50000;
SELECT * FROM HighSalaryEmployees; If the view is based on a simple query, you can sometimes update the underlying table through the view.
UPDATE HighSalaryEmployees
SET Salary = 60000
WHERE EmployeeID = 101; Simplifies Complex Queries: Store frequently used complex queries for easy reuse. Security: Restrict access to specific columns or rows by granting permissions on the view, not the base table. Abstraction: Provide a layer of abstraction, allowing changes to underlying tables without affecting queries using the view. Performance: Since views are virtual, querying a view can be slower for large datasets due to dynamic computation. Cannot Always Be Updated: Views with complex joins, aggregations, or subqueries may not be updatable. A Materialized View is a physical copy of the result of a query that is stored on disk.
Unlike regular views, materialized views store the data, making queries against them much faster.
Materialized views need to be refreshed periodically to stay up-to-date with the underlying data.
CREATE MATERIALIZED VIEW mv_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;
CREATE MATERIALIZED VIEW HighSalaryEmployeesMV AS
SELECT EmployeeID, FirstName, LastName, Salary
FROM Employees
WHERE Salary &gt; 50000; Materialized views can be refreshed manually or automatically to reflect changes in the underlying tables.
REFRESH MATERIALIZED VIEW HighSalaryEmployeesMV;
CREATE MATERIALIZED VIEW HighSalaryEmployeesMV
BUILD IMMEDIATE
REFRESH FAST ON COMMIT
AS
SELECT EmployeeID, FirstName, LastName, Salary
FROM Employees
WHERE Salary &gt; 50000; Performance: Faster query performance for large datasets because data is precomputed and stored. Precomputed Data: Useful for complex calculations or aggregations that don't change frequently. Reduced Database Load: Reduces the load on the database by avoiding repeated complex computations. Storage Overhead: Requires additional storage space for the precomputed data. Stale Data: Data can become outdated unless the materialized view is refreshed regularly. Maintenance Overhead: Refreshing materialized views can add maintenance complexity and resource usage. Use Views When: You need to simplify complex queries.
You want to provide a security layer by restricting access to specific columns or rows. Use Materialized Views When: Performance is critical for querying large datasets.
You have complex aggregations or calculations that do not change frequently. Optimize Refresh Strategies: For frequently changing data, use incremental (FAST) refresh where possible.
For infrequently changing data, use manual or periodic refresh to save resources. ]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/views.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/Views.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 24 Jan 2025 06:23:29 GMT</pubDate></item><item><title><![CDATA[SQL Syntax]]></title><description><![CDATA[SQL (Structured Query Language) is a standard language for interacting with relational databases. SQL is used to perform operations such as querying data, updating records, and managing database objects. Understanding SQL syntax is crucial for writing clear, efficient, and error-free SQL statements.SQL statements generally follow this structure:SELECT column1, column2, ...
FROM table_name
WHERE condition
GROUP BY column
HAVING condition
ORDER BY column ASC | DESC; SELECT: Specifies the columns to retrieve.
FROM: Specifies the table(s) to retrieve data from.
WHERE: Filters rows based on specified conditions.
GROUP BY: Groups rows that have the same values into summary rows.
HAVING: Filters grouped rows based on conditions.
ORDER BY: Sorts the result set.
SQL keywords are case-insensitive, but it's a common practice to write them in uppercase for readability.Retrieves data from a table.SELECT FirstName, LastName
FROM Employees
WHERE Department = 'Sales';
Adds new rows to a table.INSERT INTO Employees (FirstName, LastName, Department, Salary)
VALUES ('Alice', 'Smith', 'HR', 60000);
Modifies existing rows in a table.UPDATE Employees
SET Salary = 70000
WHERE EmployeeID = 1;
Removes rows from a table.DELETE FROM Employees
WHERE EmployeeID = 1;
Filters rows based on a condition.SELECT * FROM Products
WHERE Price &gt; 100;
Groups rows with the same values.SELECT Department, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Department;
Filters groups based on conditions (used with GROUP BY).SELECT Department, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Department
HAVING COUNT(*) &gt; 5;
Sorts results in ascending or descending order.SELECT FirstName, LastName, Salary
FROM Employees
ORDER BY Salary DESC;
Combines results of two or more SELECT statements (removes duplicates).SELECT FirstName FROM Employees
UNION
SELECT FirstName FROM Customers;
Combines results without removing duplicates.SELECT FirstName FROM Employees
UNION ALL
SELECT FirstName FROM Customers;
CREATE TABLE Employees ( EmployeeID INT PRIMARY KEY, FirstName VARCHAR(50) NOT NULL, Salary FLOAT CHECK (Salary &gt; 0)
);
]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/sql-syntax.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/SQL Syntax.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 24 Jan 2025 06:23:14 GMT</pubDate></item><item><title><![CDATA[Git 명령어 총정리]]></title><description><![CDATA[Git은 분산 버전 관리 시스템(Distributed Version Control System)으로, 소스 코드나 문서 등의 파일 변경 이력을 효율적으로 관리하고 협업을 돕습니다. 로컬 저장소(Local Repository)와 원격 저장소(Remote Repository)를 함께 사용함으로써 협업 시 충돌 관리, 히스토리 추적, 백업 및 복원이 용이합니다. 사용자 정보 설정 Git은 모든 커밋에 작성자 정보를 담습니다.
전역 설정(모든 저장소에 적용)
git config --global user.name "사용자이름"
git config --global user.email "사용자이메일@example.com" 특정 저장소 내에서만 설정
git config user.name "사용자이름"
git config user.email "사용자이메일@example.com" 기본 에디터 설정 Git 명령어 실행 중 편집기 호출 시 사용할 에디터 지정
git config --global core.editor "vim" 환경 설정 확인 현재 Git 설정값 확인
git config --list 저장소 초기화 현재 디렉토리를 로컬 Git 저장소로 초기화합니다.
git init 실행 후 .git 디렉토리가 생성되며, 여기에는 Git 히스토리와 설정파일이 들어있습니다. 원격 저장소 복제 (Clone) 원격 저장소(remote repository)를 로컬로 복제
git clone &lt;원격저장소URL&gt; [로컬디렉토리명] 옵션 --depth 1: 히스토리를 가장 최근 커밋까지만 가져오는 "shallow clone"
예제
git clone https://github.com/username/repo.git 상태 확인 (Status) 현재 작업 디렉토리의 변경 사항 추적 상황을 표시합니다.
git status 추적되지 않은 파일, 수정되었으나 스테이징하지 않은 파일, 스테이징된 파일을 구분해서 보여줍니다. 변경사항 비교 (Diff) 작업 디렉토리와 스테이징 영역의 차이 비교
git diff 스테이징 영역과 마지막 커밋의 차이 비교
git diff --staged 특정 파일 변경사항 비교
git diff &lt;파일명&gt; 파일 추가 (Add) 작업 디렉토리의 변경 사항(추가/수정/삭제)을 스테이징 영역으로 올립니다.
git add &lt;파일명 또는 디렉토리명&gt; 모든 변경사항 스테이징
git add . 특정 확장자 파일 전체 스테이징
git add *.txt 커밋 (Commit) 스테이징 영역에 있는 변경사항을 기록(커밋)합니다.
git commit -m "커밋 메시지" 마지막 커밋 메시지 수정
git commit --amend -m "수정된 커밋 메시지" 수정된 커밋은 새로운 커밋 해시를 가지며, 원격에 이미 푸시된 경우 주의가 필요합니다.<a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fn-2" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fn-2" target="_self">2</a> 브랜치 조회
git branch 현재 로컬에 존재하는 브랜치를 보여주며, 현재 체크아웃된 브랜치는 앞에 * 표시가 있습니다. 브랜치 생성
git branch &lt;브랜치명&gt; 현재 HEAD 기준으로 새로운 브랜치를 생성합니다. 브랜치 변경(체크아웃, Checkout)
git checkout &lt;브랜치명&gt; 다른 브랜치로 이동(HEAD 포인터를 해당 브랜치로 변경)합니다.
새 브랜치 생성과 동시에 체크아웃
git checkout -b &lt;브랜치명&gt; 브랜치 삭제
git branch -d &lt;브랜치명&gt; 해당 브랜치를 삭제합니다.
병합되지 않은 변경사항이 있으면 안전을 위해 -D 옵션을 사용해야 합니다. 브랜치 병합(Merge)
git merge &lt;합칠브랜치명&gt; 현재 체크아웃된 브랜치에 &lt;합칠브랜치명&gt;의 변경사항을 병합합니다. Merge 두 브랜치의 히스토리를 통합하는 명령어입니다.
별도의 병합 커밋(Merge commit)을 생성하는 경우, 히스토리가 분기 후 다시 합쳐지는 형태를 남깁니다. Rebase
git rebase &lt;기준브랜치&gt; 히스토리를 재정렬하여, 마치 한 줄로 이어진 것처럼 만듭니다.
<br>병합 커밋 없이 깔끔한 히스토리를 유지하지만, 이미 공유된 커밋을 재베이스하는 것은 충돌 및 혼선을 야기할 수 있으므로 주의가 필요합니다.<a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fn-3" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fn-3" target="_self">3</a> 원격 저장소 추가 (Remote Add)
git remote add &lt;원격이름&gt; &lt;원격URL&gt; 보통 origin이라는 이름으로 원격 저장소를 추가합니다. 원격 저장소 조회 (Remote -v)
git remote -v 현재 로컬 저장소와 연결된 원격 저장소 목록 및 URL을 확인합니다. 원격 저장소로 푸시 (Push)
git push &lt;원격이름&gt; &lt;브랜치명&gt; 로컬의 변경사항을 원격 저장소로 업로드합니다.
예:
git push origin main 원격 저장소로부터 가져오기 (Fetch, Pull) 원격 저장소의 변경사항을 로컬에 가져오기
git fetch &lt;원격이름&gt; 이 명령어는 원격의 변경사항을 로컬 저장소의 원격 추적 브랜치(remote tracking branch)에 반영하지만, 현재 작업 브랜치에는 합치지 않습니다. 원격 변경사항을 로컬 브랜치에 병합(Fetch + Merge)
git pull &lt;원격이름&gt; &lt;브랜치명&gt; 예:
git pull origin main git pull은 내부적으로 git fetch 후 git merge를 자동으로 수행합니다. 충돌(Conflict) 발생 시 충돌 파일을 수정한 뒤 스테이징, 커밋을 통해 해결합니다. 원격 브랜치 추적하기
git checkout -b &lt;로컬브랜치명&gt; &lt;원격이름&gt;/&lt;원격브랜치명&gt; 원격 브랜치를 로컬 브랜치로 체크아웃하여 추적 브랜치를 생성합니다. 로그 조회 (Log)
git log 커밋 히스토리를 표시합니다.
옵션 --oneline: 한 줄로 간단히 표시
--graph: 그래픽 형태(텍스트 기반)로 브랜치 구조 표시
--decorate: 레퍼런스(브랜치, 태그) 표시
예:
git log --oneline --graph --decorate 특정 파일 히스토리 조회
git log -- &lt;파일명&gt; 해당 파일의 변경 히스토리만 추적합니다. 커밋간 차이 비교
git diff &lt;커밋해시1&gt; &lt;커밋해시2&gt; 두 특정 커밋 간의 변경사항을 비교합니다. Reset
git reset &lt;옵션&gt; &lt;커밋해시&gt; 로컬 히스토리를 특정 커밋 시점으로 되돌립니다.
옵션 --soft: 워킹 디렉토리와 스테이징 영역은 유지, HEAD만 옮김
--mixed: 스테이징 영역은 초기화, 워킹 디렉토리는 유지
--hard: 워킹 디렉토리, 스테이징 영역 모두 해당 커밋 상태로 돌아감 주의: 이미 원격에 푸시한 커밋을 reset하는 것은 협업에 혼선을 줄 수 있습니다. Revert
git revert &lt;커밋해시&gt; 지정한 커밋을 취소하는 "새로운 커밋"을 추가합니다.
커밋해시는 7자만 적어도 가능!
<br>기존 히스토리는 유지하면서, 특정 변경사항을 되돌리는 안전한 방식입니다.<a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fn-4" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fn-4" target="_self">4</a> Checkout (커밋 혹은 파일 상태로 돌아가기)
git checkout &lt;커밋해시&gt; -- &lt;파일명&gt; 특정 커밋 시점의 파일 상태로 돌아가고, 그 상태를 현재 워킹 디렉토리에 반영합니다.
이후 git add와 git commit으로 변경사항을 반영할 수 있습니다. Stash 생성
git stash 현재 워킹 디렉토리의 변경사항을 스택처럼 쌓아두어 임시 보관합니다.
워킹 디렉토리를 깨끗한 상태로 만들며, 추후 다시 복원할 수 있습니다. Stash 목록 확인
git stash list 쌓여있는 stash들의 목록을 표시합니다. Stash 복원 (적용)
git stash apply [stash@{n}] stash에 임시 보관했던 변경사항을 다시 워킹 디렉토리에 반영합니다.
stash@{n}을 지정하지 않으면 가장 최근 stash를 적용합니다. Stash 삭제
git stash drop [stash@{n}] 지정한 stash 항목을 삭제합니다. Stash 팝
git stash pop 가장 최근 stash를 적용하고 해당 stash를 목록에서 제거합니다. 태그 생성
git tag &lt;태그명&gt; [커밋해시] 현재 커밋(HEAD)이나 지정한 커밋에 태그를 추가합니다.
예:
git tag v1.0.0 태그 목록 확인
git tag 태그 푸시
git push &lt;원격이름&gt; &lt;태그명&gt; 특정 태그만 원격으로 푸시합니다.
모든 태그 푸시
git push &lt;원격이름&gt; --tags 태그 삭제
git tag -d &lt;태그명&gt; 로컬 태그 삭제 후 원격 태그도 삭제하려면
git push &lt;원격이름&gt; :refs/tags/&lt;태그명&gt; 브랜치 리네임(Rename)
git branch -m &lt;기존브랜치명&gt; &lt;새브랜치명&gt; 커밋 메시지 변경 (Amend)
git commit --amend -m "새로운 메시지" 스테이징된 변경사항을 마지막 커밋에 포함시키고 메시지도 수정합니다. 원격 브랜치 삭제
git push &lt;원격이름&gt; --delete &lt;브랜치명&gt; 원격 저장소에서 특정 브랜치를 삭제합니다. Git 무시 파일(.gitignore) .gitignore 파일을 생성하여 Git이 추적하지 않을 파일 패턴을 지정할 수 있습니다.
예: *.log, node_modules/ 등을 .gitignore에 추가하면 해당 파일/디렉토리는 Git이 추적하지 않습니다. <br>Chacon, S., &amp; Straub, B. (2014). Pro Git. Apress. <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-1" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-1" target="_self">↩</a>
<br>이미 원격에 푸시한 커밋을 변경하는 것은 git push --force와 함께 사용할 수 있으나 협업 시 주의가 필요합니다. <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-2" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-2" target="_self">↩</a>
<br>rebase는 팀원들과의 협의 후 사용하는 것이 좋습니다. 이미 공유된 히스토리를 재작성하면 충돌과 혼선을 야기할 수 있습니다. <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-3" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-3" target="_self">↩</a>
<br>revert는 기존 히스토리를 파괴하지 않기 때문에 협업 시 안전한 선택입니다. <a data-tooltip-position="top" aria-label="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-4" rel="noopener nofollow" class="external-link is-unresolved" href="https://chatgpt.com/c/675d9986-4754-800a-9db5-e342cb762543#user-content-fnref-4" target="_self">↩</a>
]]></description><link>https://64etuor.github.io/600_tech-stack/git/git-commands.html</link><guid isPermaLink="false">600_Tech Stack/git/git commands.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 23 Jan 2025 08:23:43 GMT</pubDate></item><item><title><![CDATA[Git 브랜치 규칙]]></title><description><![CDATA[일관된 네이밍 규칙을 유지하기 위해 브랜치 이름을 패턴에 맞춰 사용합니다.
새로운 기능을 개발할 때 사용
패턴: feature/{issue번호}-{설명}
예시:
feature/123-user-login
feature/456-api-rate-limiting 개발 중 발견된 버그를 수정할 때 사용
패턴: bugfix/{issue번호}-{설명}
예시:
bugfix/789-fix-login-error
bugfix/101-correct-date-format 긴급 버그를 수정할 때 사용 (배포된 코드 수정)
패턴: hotfix/{버전}-{설명}
예시:
hotfix/1.2.1-patch-security
hotfix/2.0.3-fix-memory-leak 배포 전 테스트 및 버전 정리
패턴: release/{버전}
예시:
release/1.0.0
release/2.1.0 LTS(Long Term Support) 버전 유지보수
패턴: support/{버전}
예시:
support/1.0
support/2.3 develop 브랜치에서 새로운 브랜치를 생성
git checkout develop
git checkout -b feature/123-user-login 작업 완료 후 develop에 병합 (PR 제출)
git checkout develop
git merge feature/123-user-login
git branch -d feature/123-user-login 병합 후 브랜치는 삭제 배포 준비가 완료되면 release 브랜치를 생성
git checkout develop
git checkout -b release/1.0.0 QA 및 안정화 후 main으로 병합
git checkout main
git merge release/1.0.0
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0 develop에도 병합 후 브랜치 삭제
git checkout develop
git merge main
git branch -d release/1.0.0 main에서 긴급 수정 브랜치 생성
git checkout main
git checkout -b hotfix/1.2.1-patch-security 수정 완료 후 main과 develop에 병합
git checkout main
git merge hotfix/1.2.1-patch-security
git checkout develop
git merge hotfix/1.2.1-patch-security
git branch -d hotfix/1.2.1-patch-security 커밋 메시지는 다음 형식을 따릅니다.[타입] #이슈번호 - 메시지
예시feat: #123 - Add user authentication API
fix: #456 - Fix login bug in mobile version
docs: #789 - Update README with installation guide PR 제목은 브랜치 네이밍과 유사한 패턴을 따름
[Feature] #123 - User Login 기능 추가
[Bugfix] #456 - 로그인 에러 수정 코드 리뷰 후 Squash &amp; Merge 권장
main 브랜치는 직접 push 금지, PR을 통한 병합만 허용
Merge 전략: feature/* → develop
bugfix/* → develop
hotfix/* → main + develop
release/* → main + develop main, develop 브랜치는 보호(Protected Branch) 설정 직접 push 금지
최소 1~2명의 코드 리뷰 필수
squash merge 권장 force push 금지
]]></description><link>https://64etuor.github.io/600_tech-stack/git/git-branch-ruleset.html</link><guid isPermaLink="false">600_Tech Stack/git/git branch ruleset.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 23 Jan 2025 07:06:57 GMT</pubDate></item><item><title><![CDATA[2.공공SW사업-제안요청서-작성을-위한-요구사항-가이드-20210219]]></title><link>https://64etuor.github.io/700_studies/2501-2507-한화beyond-sw캠프/5_resources/요구사항-정의서-작성법/2.공공sw사업-제안요청서-작성을-위한-요구사항-가이드-20210219.html</link><guid isPermaLink="false">700_Studies/2501-2507 한화BEYOND SW캠프/5_Resources/요구사항 정의서 작성법/2.공공SW사업-제안요청서-작성을-위한-요구사항-가이드-20210219.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 23 Jan 2025 01:04:22 GMT</pubDate></item><item><title><![CDATA[2025-01-23 휴식이 필요한지, 일탈한 기억]]></title><description><![CDATA[
"휴식이 필요하다고 느끼는가? 무엇으로부터? Do you need a break? From what?" 휴식은 평소에 간간이 잘 취하고 있다. 휴식의 방법은 다양하지만, 보통은 로테이션 형태라고 생각하면 된다. 게임을 하거나, 책을 보거나, 웹툰을 보거나. 로테이션 주기는 헤아려 본 적은 없으나 보통 웹툰이 기준이다. 웹툰을 180일 정도 안 보고 기다리고(의도한 게 아니라 이제 웹툰 좀 볼까? 하고 생각해서 들어가 보면 마지막 방문일이 신기하게도 180일 전이었다.) 밀린 걸 차근차근 보는 편이다. 밀린 걸 다 보면 다음 루틴으로 넘어간다. 게임을 깊게 빠져서 하는 편은 아니고 그냥 스윽 품평하는 기분으로 가볍게 즐기다 만다. 웹툰을 보는 동안 새로 출시된 명작이 있는지 찾아 보고 즐긴다. 시간이 없으니 굳이 평이 나쁜 게임은 하지 않는다. 책도 마찬가지이다.
마음이 가볍다 보니 아주 좋아하는 게임이 있어도 굳이 출시일에 맞춰 플레이하진 않는다. 딱히 간절히 기다리거나 기대하는 게 없다 보니 뭐든 내가 주도적으로 때를 정해서, 기분에 맞춰 하는 편. 아마 이런 느긋한 성격 덕에 별 탈 없이, 큰 감정의 기복 없이 살고 있는 듯 하다. 너의 인생에서 가장 큰 일탈은 뭐였어? 내가 생각했을 땐 일탈이 아니지만 남이 보기에 일탈이었던 걸 꼽자면, 대학교를 시원하게 때려친 거? 사람들은 아깝게 왜 대학을 그만 뒀냐고 하지만 애초에 목적 없이(존경하던 분이 그 학교 출신이었다.) 입학한 터라 별 생각이 없었던 거 같아.
고등학교를 다니지 않았기 때문에 문과, 이과가 나뉘어 있다는 것도 몰랐고 무슨 학과를 가야 할 지, 무엇이 될 지 고민해 볼 기회도 없었어. 아버지는 내가 교대에 가길 원했는데 난 전혀 흥미가 없었고, 근데 그렇다고 딱히 정말 하고픈 게 있던 것도 아니야. 굳이 하고 싶었던 걸 꼽자면 게임? 아주 질리도록 했지.
아무튼 지금에 와선 몹시x9999 후회하는 편.
대학 졸업장이 없는 게 사회에서 얼마나 불이익이 되는지 살면서 엄청나게 체감하는 중.
근데 반대로 생각하자면, 나를 포장해주는 그런 수식어 같은 것들이 없었기 때문에 나는 매번 매순간 내 자신을 증명해야 했어. 이게 나를 발전 시키는데 큰 도움이 되준 건 사실.
BUT 그래도 굳이 선택하자면,
그래도 대학은 나오자…… 가시밭길도 이런 가시밭길이 없다.
오늘의 '생각을 자극'하는 글귀
"더 강한 사람이 되려면 먼저 손 내밀 수 있어야 한다.
조언을 구하는 것이 무능을 뜻하지는 않는다. 타인의 통찰을 존중하는 것뿐이다. 피드백을 부탁한다고 해서 자존심이 없는 사람이 되는 것은 아니다. 배움이 자존심보다 중요할 뿐이다. 도움을 구한다고 약한 것은 아니다. 결국 더 강한 사람이 될 수 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-23-휴식이-필요한지,-일탈한-기억.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-23 휴식이 필요한지, 일탈한 기억.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 22 Jan 2025 23:51:44 GMT</pubDate></item><item><title><![CDATA[2025-01-22 리스크 감수, 오랫동안 아낀 대상]]></title><description><![CDATA[
"안전을 추구하는가, 모험을 추구하는가? Are you seeking comfort or adventure? 기본적으론 안전을 퍽 추구하는 편이지만, 항상 세상에는 ‘안전’으로 둔갑한 ‘리스크’가 있다는 사실 또한 잘 알고 있다. ‘안전’은 평이한 것이고, ‘평이’한 것은 두각을 드러내지 못함을 점잖게 이르는 말이다. 아무리 자위하듯 ‘보통’의 삶을 칭송한 들, 적어도 눈은 바로 뜨고 세상을 또렷히 보라. ‘보통’을 칭송하는 건 보통 이미 한 번 이상은 ‘보통’이 아니었던 사람들의 입에서 읊어질 때에야 비로소 의미가 생기는 것이고, 그 외로는 ‘모험’하지 않은 자들의 공허한 메아리 같은 것이라 온 힘을 다해 뻗어나간들 집 문 밖 울타리를 넘지 못하는 것이다.
‘모험’은 이야기를 남기고, ‘안전’은 그 자체로 끈질긴 것이지만, 나는 ‘안전’한 그 어떤 이야기도 재미있게 들어본 일이 없다. 그냥 성향 탓이라 하자. 재미가 없는 것은 죽도록 싫다.
생떼 부리듯 말하자면 안전한 모험을 즐기고 싶다. 아마 대부분의 사람은 같은 생각이지 않을는지.
사람들은 그래서 그토록 ‘돈’을 원하나 보다. 오랫동안 아껴 온 대상이 있어? 꼭 사람이 아니더라도 말이야. 호주에서 쓰던 일기장 표지가 너덜너덜해져서 가루 날리는 게 보통 끔찍한 게 아닌데 차마 버릴 수가 없어. 공책을 불태우면 처절한 기억도 모조리 가루가 되어 날아갈 것만 같아서 그렇게 태우고 태우고 태워 버렸는데 항상 왜 지우고 깊은 기억은 머리 속에 뚜렷하게 각인이 되는 걸까. 그래서 기억을 안고 살기로 했어. 일기장의 너절함 또한 나의 한 모습인 양 동질감이 꽤 솔솔찮다. 그 모습이 뭐냐고 한 마디로 말하자면,
’그래도 밉지 않아.’
좀 너저분하면 어때.
오늘의 '생각을 자극'하는 글귀
인생의 롤모델을 정할 때는 구체적인 강점을 찾아야 한다.
누군가를 인생의 롤모델로 정하면 비현실적인 기대를 품었다가 결국 그렇게까지 동경할 이유가 없다는 것을 깨닫고 실망하게 된다. 그 사람의 모드 것이 아니라 구체적인 강점을 존경해야 한다. 모든 사람은 약점을 가지고 있다는 사실을 기억하라. 그래야 나도 롤모델이 가진 강점에 이를 수 있다는 자신감이 생간다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-22-리스크-감수,-오랫동안-아낀-대상.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-22 리스크 감수, 오랫동안 아낀 대상.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 22 Jan 2025 14:01:59 GMT</pubDate></item><item><title><![CDATA[Flow]]></title><description><![CDATA[ Work DirectoryStaging Area
init
fetch
push
add commitLocal RepositoryRemote Repository]]></description><link>https://64etuor.github.io/600_tech-stack/git/flow.html</link><guid isPermaLink="false">600_Tech Stack/git/Flow.canvas</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 22 Jan 2025 00:22:37 GMT</pubDate></item><item><title><![CDATA[2025-01-21 기대하는 일, 화풀이 방법]]></title><description><![CDATA[
"몹시 기다려지는 일이 있는가? Is there any event you have been eagerly awaiting?" 온갖 역경과 시련을 딛고 일어서서 마침내 개화하는 그 순간이 몹시 기다려진다. 서울에 오면서 또 생활 환경이 변해서 몹시 불편하고 생활 패턴 잡기가 어려운데 이 또한 단단하게 자라나는 양분으로 삼으련다.
많이 먹고, 많이 크자. 화가 났을 때는 어떻게 풀어? 너만의 방법이 있어? 주로 술을 마셨지. 사실 화가 안 났을 때도 마셨으니까 화를 푸는 방법이라고는 못하겠지만 ㅋㅋ
솔직히 최근에도 갑자기 나는 맨날 뭐가 잘 안 풀리는 거 같아서 화가 좀 났었는데, 그냥 술 마시고 친구랑 전화하다가 풀어졌어. 이렇게 보면 술이 아니라 친구가 위로인 거겠다.
예전에 호주 타지에서 맨날 혼자 끙끙 대고 앓았던 거에 비하면 많이 낫지 뭐.
위로가 되는 사람이 있다는 게 얼마나 다행인 일이야.
오늘의 '생각을 자극'하는 글귀
"올바른 사과란 변명이 아니라 달라지는 행동을 보여주는 것이다.
올바른 사과란 변명이 아니라 달라지는 행동을 보여주는 것이다. "상처를 줄 생각은 없었는데 상처 줘서 미안해. 다시는 이런 일이 없을 거라고 약속할게." 때로 우리는 자신의 의도를 합리화하는데 집중하는 나머지 자신의 행동이 가져온 결과를 인정하려 들지 않는다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-21-기대하는-일,-화풀이-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-21 기대하는 일, 화풀이 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 21 Jan 2025 10:13:51 GMT</pubDate></item><item><title><![CDATA[2025-01-20 앙심을 품는 대상, 요즘 하는 운동]]></title><description><![CDATA[
"앙심을 품고있는 대상이 있는가? 무슨 일 때문인가? Are you holding a grudge? About?" 없는데. 요즘 하는 운동이 뭐야? 없다면 해 보고 싶은 운동이 있어? 집에서 로잉 머신을 꾸준히 하고 있었는데 당분간 서울에 지낼 거라 그건 못할 듯.
대신 오늘은 집 근처 Gym에 PT 등록을 했어. 워낙 운동을 싫어하는 성격이라 꾸준히 습관을 들이는 게 중요한데 이번에야말로 운동에 재미 좀 붙였으면 좋겠다. 어느 정도 운동에 익숙해지면 AI 트레이너를 만들어서 운동 루틴을 제시해주는 걸 만들어 봐야겠어. 매번 조금씩 운동을 다르게 하면 그래도 너무 지루하진 않을 거 같은데, 잘 할 수 있을지 걱정.
뭐 할 수 있다고 믿고 될 때까지 도전해 봐야지. 인디언식 운동 습관 만들기 가즈아~
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-20-앙심을-품는-대상,-요즘-하는-운동.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-20 앙심을 품는 대상, 요즘 하는 운동.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 20 Jan 2025 07:39:25 GMT</pubDate></item><item><title><![CDATA[2025-01-19 한사람만 사랑할 수 있는가, 노동요 추천]]></title><description><![CDATA[
"평생 한 사람만 사랑하면서 살 수 있다고 생각하는가? Is it possible to love only one person for the rest of your life?" 내 생각이지만, 이 세상에 사랑만큼 다양한 정의를 갖고 있는 단어는 흔치 않을 거 같다. 일단 질문이 일반론을 묻는 게 아니라 위 영문 질문과 같이 내게 한정된 거라면, 나의 대답은 ‘어렵다.’가 되겠다.
나의 사랑은 철회될 수 있고, 변할 수 있다. 어떤 시점에서도 동일하게 적용될 수 있는 명제다. 더군다나 남은 생이 얼마나 될 지는 모르겠지만 적어도 수십년은 더 살 거란 가정을 한다면 더더욱이 어렵다. 모든 가능성이 열려 있는 차원에서 어떠한 감정이 변치 않고 보전된다면 그건 감정이 아니라 신념에 가까울 테다. 그러나 평생 한 사람만 사랑해야 한다는 원칙 내지 신념 또한 없으므로 나는 아무래도 평생 한 사람만 사랑하면서 사는 것은 어렵다고 말할 수 밖에 없다.
아쉽지만 세상에는 내가 사랑하는, 그리고 믿는 모든 것들이 조화를 이루고 있지 않다. 오히려 상충될 때가 더 많을 거라 생각한다. 그러므로 내 선택에 의해 내 사랑의 일부는 종종 철회되거나 변하게 마련이고, 이건 사람에 대해서도 동일한 논리로 적용될 거다.
가령, 내가 사랑하는 사람이 자의로 더 이상 날 사랑하지 않게 되었을 때, 나는 나의 불행과 슬픔을 회피하기 위해 어떻게든 사랑을 포기할 것이다.
이런 식으로 예전 여자친구의 질문에 답변을 한 적이 있는데 뒤지게 혼난 기억이 난다. 일할 때 즐겨 듣는 노동요를 소개해 줄래? 집중하면 어차피 아무 것도 안 들려서 노래는 안 듣는 편. 혹여 듣더라도 가사가 있는 노래는 집중을 어렵게 만들어서 피하지. 가끔 Lo-fi 음악을 틀어 놓는 경우는 있음.
가끔 게임을 할 때 노래를 틀어 놓는 경우는 있는데 이럴 땐 베이스 뽕이 차오르는 음악을 틀어. 아래 것들은 굳이 베이스를 좋아하는 게 아니어도 좋은 음악이니까 추천..!
Harry Styles - Music for a sushi restaurant
Miley Cyrus - Flowers
Joey Burbach - Back on my feet
Phil Perry - Forever
Men I Trust -Lauren
Red hot chili peppers - Sick love
Alexander Oscar - Bad intentions
Vansire - That I miss you
트웰브 - ALL IN
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-19-한사람만-사랑할-수-있는가,-노동요-추천.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-19 한사람만 사랑할 수 있는가, 노동요 추천.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 19 Jan 2025 14:45:06 GMT</pubDate></item><item><title><![CDATA[2025-01-18 최근 꾼 인상적인 꿈, 다시 태어난다면]]></title><description><![CDATA[
"최근 꾼 꿈 중에 인상적인 것은? Did you have any memorable dreams recently?" 영화 같은 꿈을 꾼 적이 있다. 그 꿈에선 만물이 추상성으로 채워지고, 상징으로 존재하는 여러 장소를 배경으로 나에 얽힌 일련의 사건이 벌어졌다. 모든 게 모순이고 비논리적인 것들이라 표현하기가 참 어려운데, 잠에서 깨자마자 그 느낌을 놓치지 않으려고 잔뜩 메모를 휘갈겨 놓았다. 어렴풋이 기억하기로는 지식 근원의 변천에 관련된 내용이었다.(아마 AI 시대에 잔뜩 도취되어 꾼 꿈이려나.)
내일 서울에 가져갈 짐 속 어딘가에 있을 텐데, 정리가 끝나면 생각난 김에 다시 한 번 찾아봐야겠다. 다시 태어난다면 무엇으로 태어나고 싶어? 다시 태어난다면, 그건 내가 아닐테니까, ‘내’가 생각해 볼 문제로 보이지 않고 별 관심도 없는 거 같아.
다시 태어나는 게 아니라 트럭에 치여서 이세계의 용사님이 되는 종류의 것이라면 좀 고민해 볼게.
오늘의 '생각을 자극'하는 글귀
자녀의 올바른 인성은 부모의 가장 중요한 책임이다.
자녀의 행복이나 성공은 부모의 의무가 아니다. 부모는 자녀를 올바르게 키울 책임이 잇다. 올바른 아이는 부모가 자신의 가치관을 주입시키는 것이 아닌, 스스로 중요한 가치를 찾을 수 있도록 도울 때 만들어진다. 아이가 어떤 사람이 되고 싶은지 설정할 수 있도록 준비시켜주는 부모야말로 진정으로 성공한 부모다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-18-최근-꾼-인상적인-꿈,-다시-태어난다면.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-18 최근 꾼 인상적인 꿈, 다시 태어난다면.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 18 Jan 2025 10:59:29 GMT</pubDate></item><item><title><![CDATA[2025-01-15 자신 있는 요리, 날 위해 산 물건]]></title><description><![CDATA[
"가장 자신있게 만들 수 있는 요리는? Name one food you can cook with complete confidence." 딴 건 그저 그런데, 아직까지 김치 볶음밥은 어딜 가서 먹어봐도 내가 한 게 제일 맛있다. 김, 들기름, 스위트콘, 얇게 저민 고기나 슬라이스햄, 김치, 굴소스(선택), 토핑은 모짜렐라 치즈나 계란 후라이! 들어 가는 재료가 특별한 건 없는데 아주 맛도리다. 최근에 너를 위해 산 물건은 뭐야? 마음에 들어? 발라트로 게임. 하도 유명해서 샀다. 이게 무슨 재미가 있어? 라고 시작했다가 아 별로 재미 없네하고 껐는데 3시간이 사라져 있었다.ㅎㅎㅎ 오늘의 '생각을 자극'하는 글귀 "타인의 기대가 아닌 자신의 이상을 따라야 한다. ” 정체성에 관한 가장 중요한 질문은 "남들이 나를 어떻게 생각하는가?"가 아니라 "내가 어떤 사람이 되고 싶은가?"다. 70개의 연구 결과, 정신 건강은 타인의 기대가 아니라 삶에서 자신의 이상을 얼마나 따르느냐에 달려 있다. 행복은 태도와 가치관의 간격이 좁혀질 때 찾아온다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-15-자신-있는-요리,-날-위해-산-물건.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-15 자신 있는 요리, 날 위해 산 물건.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 18 Jan 2025 08:02:04 GMT</pubDate></item><item><title><![CDATA[2025-01-17 오래된 옷, 마음에 드는 칭찬]]></title><description><![CDATA[
"오늘 입은 옷차림 중에서 가장 오래된 것은? What's the oldest thing you're wearing today?" 옷을 잘 사지도 버리지도 않는 편이라 내가 가진 옷은 대부분 해가 묵었다. 그나마 오늘 입은 옷은 나름 파릇파릇한 신상인 셈인데, 가장 오래된 건 롱코트로 이제 5살 되시겠다.
호주에서 연을 맺었던 가족이 한국에 잠깐 왔을 때 선물로 받은 옷이다. 한사코 거절한 걸 내 옷차림이 불쌍해 보였는지(…) 억지로 입혀주셨는데 아무튼 해마다 잘 입고 다니고 있다. 다시 호주로 출국하실 때, 결혼하면 신혼여행은 꼭 호주로 오라고 굳이 중학생이던 따님과 새끼손가락까지 걸게 하고 약속했는데 아무튼 뭐가 잘 안된다. 다시 뵙고픈 마음은 간절하지만 어디 결혼을 혼자 하나.
참 이상적인 가족이다. 착한 부모님 밑에서 자란 착한 아이들. 서로가 서로를 위하는 모습이 작은 행동 행동 하나 하나에서 느껴져서 그냥 보고만 있어도 기분이 좋은 그런 가족이다. 그 모습이 몹시 부러워서 처음에 어떻게 만나셨나 물어보니, 의외로 (남편분은 내성적인 편이었고, 아내분은 외향적인 편이다.) 남자 쪽에서 강력하게 접근을 했다더라.
호주 유학생이던 남편 분이 시드니 공항에서 우연히 아내분을 보게 됐고, 그렇게 운명적인 첫 만남에 남편분의 적극적인 대쉬. 아주 드라마 한 편을 다 봤다. 의외성이란 언제나 서사의 감초 역할이 아닌가.
여하튼 기억이 깃든 물건이란 이래서 어렵다. 내가 아무 생각 없이 코트를 꺼내 들고 입는 동안에도 불현듯 저 가족을 떠올릴 것이고, 결혼에 대한 무언의 압박도 느낄 테고, 행복한 가정을 이룰 수는 있을까 걱정하게 되는 것이고, 아니 그걸 다 떠나서 연애조차 멀게 느껴지면 아예 답이 없는 인생처럼 질문의 초점도 요지경 속으로 빨려 들어가는 것이라서 잠깐 이렇듯 생각하는 동안에 물건에는 더 많은 생각이 깃드는 것이고, 나중에는 또 이런 생각을 했고 이런 글을 썼다는 기억까지 나게 되면, 예전부터 나는 하나도 발전이 없는가 짐짓 자조 섞인 성찰을 하게 될 것이고, 그러다 보면…
이라고 할 뻔. 지금까지 들었던 칭찬 중에 가장 마음에 드는 말은? 칭찬은 대부분 흘려 듣는 탓인지 기억에 남는 게 딱히 없어. 그러나 가장 기쁜 순간은 그거지. 글로 예를 들면, 내가 시에서 어떤 표현을 하였을 때, 왜 ‘그런 표현’이어야 했는지 궁금해 하고 종국에는 이해하는 사람을 만났을 때. 나는 그럼 정말 기뻐서 날아갈 것만 같지 뭐야.
오늘의 '생각을 자극'하는 글귀"지식을 가장한 신념을 조심하라. 확신은 우리를 착각에 빠뜨린다.내 생각을 남에게 강요한다고 사실이 되지는 않는다. 설득당하는 사람은 자기 자신뿐이다. 지식을 가장한 신념을 조심하라. 세상에 확실한 것은 없으며 확신은 우리를 쉽게 착각에 빠뜨린다. 죽을힘을 다해 올라간 언덕이 처음부터 올라가지 말았어야 할 언덕일 수도 있다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-17-오래된-옷,-마음에-드는-칭찬.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-17 오래된 옷, 마음에 드는 칭찬.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 17 Jan 2025 01:51:25 GMT</pubDate></item><item><title><![CDATA[2025-01-16 돈을 빌려준 경험, 좋아하는 단어]]></title><description><![CDATA[
"빌리거나 빌려준 돈이 있는가? Do you owe someone money? Does someone owe you? 어릴 때는 돈을 빌리고 빌려줄 일이 많았지만 나이가 차니 그런 일도 잘 안 생긴다. 최근에 돈을 빌려준 적이라면, COVID 팬데믹 당시 필리핀 친구에게 500달러를 빌려준 거? 여즉 갚지 않긴 했지만 돌려 받을 생각도 없었기 때문에 갚으란 말을 한 적도 없다.
여담이지만 내가 돈을 빌려준 친구는 내가 태어나서 처음으로 인정한 “나보다 훨씬 똑똑한” 사람이다. 필리핀 영어학원의 강사와 학생의 관계로 인연을 맺게 되었는데, 세상에서 내가 제일 똑똑하다고 믿던 우물 안 개구리 시절(나만 이런 게 아니라고 굳게 믿는다.) 내 오만함이 다소 잠잠해질 수 있게 된 계기에는 저 친구의 지분이 매우 크다.
”똑똑함”이라는 단어에 대한 다른 사람들의 개념과 나의 개념이 조금은 다를 수 있기 때문에 부연설명을 하자면, 나는 단순히 지식의 총량이 많은 걸 “똑똑함”이라고 부르지 않았다. 그보다는 지식 간 연결의 개방성을 “똑똑함”의 조건이라고 생각했는데, 한마디로 표현하자면 응용과 창의성이 그것이다.
불행하게도 이 친구는 그 “똑똑함”으로 찬양 받기 보다는, 못생긴 외모 때문에 사람들 입에 오르는 게 전부였으나 구태여 당시 그런 다른 사람들의 태도를 탓할 이유도 없다. 나는 내 사업이 어느 정도 궤도에 오르면 반드시 저 친구를 데려다가 COO를 시켜야겠다고 생각하고 있는데, 저런 인재를 내가 분에 넘치게 욕심낼 수 있는 것도 다 세상에 눈깔이 삔 사람이 많아서 그러한 것이다.(실제로 아직 그 친구가 본인의 역량에 걸맞지 않은 일을 하고 있기도 하고)
나에게는 양쪽 모두 고마운 사람들이니 더할나위 없이 좋다. 좋아하는 단어를 적어 볼래? 좋아하는 단어인지는 잘 모르겠는데 이 질문을 보고 그동안 내가 쓴 시를 훑어 보니 “글자”라는 단어와 “고독”이란 단어가 많이 등장했어. 하긴 오랫동안 내 글쓰기의 대명제였던 “외로우니까 쓴다.” 라는 말을 생각하면 당연한 수순 같기도 하지만, 내가 과연 이게 좋아서 한 일일까, 아니면 상황이 나를 그렇게 만든 것일까는 아무래도 모르겠네. 그렇지만 확실한 건 “글자”라는 단어는 좋아. 엄밀히 따지자면 글자가 갖는 의미를 좋아하다보니 표상적인 “글자”라는 단어의 형태까지 좋아지게 된 거 같아.
오늘의 '생각을 자극'하는 글귀첫 만남에서 성공적인 대화를 나누려면 ""뭘 좋아하세요?""라고 물어보라.처음 만난 사람에게 ""무슨 일 하세요?""라고 묻지 마라. 이 질문을 받은 상대방은 일과 회사에 관한 이야기 이외에 다른 이야기를 할 의지를 꺾인다. 대신 이렇게 물어보자. ""뭘 좋아하세요?"" 상대방의 호기심을 자극하고 관심사를 표현할 수 있는 질문을 던져야 한다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-16-돈을-빌려준-경험,-좋아하는-단어.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-16 돈을 빌려준 경험, 좋아하는 단어.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 16 Jan 2025 02:58:59 GMT</pubDate></item><item><title><![CDATA[2025-01-14 리더십, 팔로우쉽, 좋았던 여행지]]></title><description><![CDATA[
"나는 이끄는 쪽인가 따르는 쪽인가? Are you a leader or a follower?" 나는 굳이 따지자면 본질적으로 아웃사이더의 성향에 가까운 사람이다. 그 성향에 맞게 독립적인 업무 수행을 선호하면서도, 아이러니하게도 회사에서는 늘 리더의 자리에 있었다. 그러나 냉철히 돌아보면, 내 모습이 이상적인 리더와는 거리가 상당히 멀었음을 인정하지 않을 수 없다.
내 리더십의 한계는 분명했다. 팀원들의 잠재력을 끌어내거나 업무에 대한 열정을 고취시키기보다는, 부족한 부분을 내가 직접 메우는 데 급급했다. 이는 일시적인 문제 해결에는 효과적이었을지 모르나, 팀원들의 자율성과 책임감을 키우는데는 완전히 실패하고 말았다.
특히 성과가 미진한 팀원들에 대한 건설적인 피드백을 회피했다. 이는 갈등을 두려워하고(반대로 나의 상사와의 관계에선 갈등을 마다하지 않았지만), 적극적인 코칭에 수반되는 정서적 부담과 노력을 감당하기 꺼려했기 때문이다. 하지만 적절한 도전과 시련이야말로 성장의 촉매제라는 점을 간과했다. 결과적으로 나는 팀원들에게 필요한 성장의 기회를 제공하지 못했고, 리더로서의 자기 성장도 포기한 셈이다. 이때쯤에 나는 갈굼에도 애정이 필요하다(?)는 사실을 알게 됐다.
그런 깨달음 이후로 크게 바뀐 게 있는가 곰곰이 생각해 보면 여전히 나의 리더십이란 오리무중이고, 내가 남을 품을 그릇이 못되는가 의문도 들지만, 사실 크게 개의치 않는 부분이다.
리더십은 아직 내겐 때 이른 질문이라고 생각한다.
내 자신도 한없이 부족한데, 누가 누굴 이끌겠는가. 가장 좋았던 여행지는 어디야? 나에게 바닷속 세계를 알게 해 준 호주의 케언즈, 그레이트 배리어 리프! 아직도 그 여행을 떠올리면 가슴이 설레. 몸을 쓰는 액티비티라면 질색을 하던 내가 무슨 바람이 불어서 체험 다이빙을 신청했는지, 그 넓은 바다에 스스로를 아주 퐁당 빠뜨렸는지, 다 기적 같은 일들이었지만 그레이트 배리어 리프에서 봤던 바다 속 만한 기적은 더 없을 거야!
케언즈 여행 이후에 바로 발리를 가는 일정이었는데, 발리에 도착하자마자 스쿠버 다이빙 자격증부터 땄지 뭐야! 너도 꼭 도전해 보길 바라!
오늘의 '생각을 자극'하는 글귀
"토론의 궁극적인 목적은 비판적 사고를 자극하는 것이다.
다른 의견을 가진 사람과의 대화에서 '네가 옳아.'라는 말을 듣는 것이 최고의 칭찬일까? 아니다. ""네 덕분에 다시 생각해볼 수 있었어.""라는 말이 최고의 칭찬이다. 좋은 토론은 단순했던 것의 복잡한 측면을 보게 해준다. 토론의 궁극적인 목적은 합의가 아니라 비판적 사고를 자극하는 것이다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-14-리더십,-팔로우쉽,-좋았던-여행지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-14 리더십, 팔로우쉽, 좋았던 여행지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 14 Jan 2025 11:11:53 GMT</pubDate></item><item><title><![CDATA[Log-likelihood Function]]></title><description><![CDATA[로그우도 함수는 주어진 데이터가 특정 파라미터 하에서 관측될 가능성을 나타내는 우도 함수의 로그 변환입니다. 이 함수는 통계학과 기계 학습에서 파라미터 추정을 위해 널리 사용되며, 최대우도 추정법(MLE)의 핵심 개념입니다. 본 노트에서는 로그우도 함수의 정의와 활용, 최적화 방법, 다양한 확률 모델에의 적용, 그리고 실전 예제를 다룹니다. 우도 함수 (): 주어진 데이터 가 특정 파라미터 하에서 관측될 확률을 나타냅니다. 로그우도 함수 (): 우도 함수에 로그를 취한 함수입니다. 왜 로그를 사용하는가? 계산의 간편성: 곱셈을 덧셈으로 변환하여 수학적 계산을 단순화.
수치 안정성: 매우 작은 확률 값을 처리할 때 로그를 사용하면 언더플로우 문제를 방지.
최적화 편의성: 미분과 최적화에서 계산이 더 간단해짐. 독립성 가정: 데이터 이 서로 독립적으로 분포한다고 가정.
결합 확률은 각 데이터의 개별 확률의 곱으로 표현됩니다: 계산 단순화: 곱셈을 로그를 통해 덧셈으로 변환: 최적화 가능성: 로그우도를 최대화하여 파라미터를 추정: 목적: 주어진 데이터가 가장 가능성 높게 관측될 수 있는 파라미터 를 찾는 것.
MLE는 다음을 최대화하는 를 찾습니다: 방법론: 로그우도 함수 를 구한다.
를 에 대해 미분하여 극값(최대값 또는 최소값)을 구한다.
두 번째 미분을 통해 극값이 최대값인지 확인한다. MLE의 특징: 불편성 (Unbiasedness): 표본 크기가 충분히 크면 가 참값 에 가까워짐.
일치성 (Consistency): 표본 크기가 증가하면 는 참값 에 수렴.
효율성 (Efficiency): MLE는 최소 분산 추정량 중 하나. 문제: (정규분포)에서 평균 와 분산 를 추정하시오. PDF: 우도 함수: 로그우도 함수: 간소화: 최적화: 에 대해: 에 대해: 문제: (베르누이 분포)에서 성공 확률 를 추정하시오. PMF: 우도 함수: 로그우도 함수: 최적화: 통계 모델링: 다양한 분포 (정규분포, 이항분포, 포아송분포 등)의 파라미터 추정. 기계 학습: 선형 회귀, 로지스틱 회귀, 딥러닝 모델 학습에서 손실 함수로 활용. 베이즈 추정: 우도 함수는 베이즈 정리에서 사후 확률 계산의 핵심 요소. Wasserman, L. (2010). All of Statistics: A Concise Course in Statistical Inference. Springer.
Hastie, T., Tibshirani, R., &amp; Friedman, J. (2009). The Elements of Statistical Learning. Springer.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/log-likelihood-function.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/Log-likelihood Function.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 13 Jan 2025 13:36:29 GMT</pubDate></item><item><title><![CDATA[2025-01-13 여행하고 싶은 곳, 가방에 있는 것]]></title><description><![CDATA[1.&nbsp; "다음에 여행하고 싶은 곳은 어디인가? Where do you want to travel next?" 사이판의 그루토나 이집트의 다합. 종종 해외로 스쿠버 다이빙을 하러 나가는데 필리핀이나 발리 말고 다른 곳도 한 번 가보고 싶다. 근데 지금은 딱히 여행을 하고픈 생각은 없어서 언제 가볼 수 있을는지는 모르겠다. 좀 더 시간적으로도, 금전적으로도 여유가 생기면 이집트에서 Liveaboard는 꼭 해보고 싶다.
그 외에 가보고 싶은 곳이라면 최빈국으로 통칭되는 나라들을 가보고 싶다. 또다른 ‘불편한 진실’을 목도하려는 목적이다.
호주에 있을 때 “Wasteland”라는 다큐멘터리 영화를 보고 큰 충격을 받은 적이 있다. 배경은 브라질로 쓰레기장에서 재활용 쓰레기를 수집해서 살아가는 ‘카타도르’의 삶을 주제로 한다. 이 영화에는 사진작가 ‘빅 무니즈’가 그들이 수거하는 쓰레기로 ‘작품명: 쓰레기로 만든 작품’이라는 예술 작품을 만드는 과정이 담겨 있다.(수작이며, 꽤나 감동적이고 당연하게도 다수의 상을 수상했다.)
이 작품을 본 이후에 찾아본 현실은 나의 상상을 압도적으로 초월한 비극이었다. 재활용하는 줄로만 알았던 플라스틱은 상당수가 ‘수출’이라는 명목 하에 가난한 나라에 투기 되고 있으며, 그 쓰레기를 ‘수입’한 나라에는 또 다른 ‘카타도르’가 생겨나고 있었다.(필리핀의 경우 ‘Scavenger’라고 부르더라.)
소비지상주의로 번영한 이 시대의 발전의 이면에는 저런 불편한 진실이 곳곳에 숨겨져 있게 마련이다.
최빈국을 방문하겠다는 데 큰 뜻 따위가 있는 것은 아니다.
다만 혹여 이 시대가 후대의 심판을 받게 될 적에 나는 ‘몰랐다’는 핑계로 나를 변호하기 보단,
최소한 그 사실을 알았으며, 그러나 알고도 모른 척했다고 말하련다. 2.&nbsp;지금 가방에 뭐가 들어 있어?
휴대용 듀얼 모니터, 노트북 충전기.
오늘의 '생각을 자극'하는 글귀 "현명판 판단을 내리려면 무엇을 모르는지 알아야 한다. 지성은 지식을 대체할 수 없다. 시간을 들여 많은 정보를 얻는 것이 똑똑해진다는 의미는 아니다. 지식은 지혜를 대신할 수 없다. 많은 정보를 가졌다고 해서 현명한 판단력을 지니게 되는 것은 아니다. 현명한 판단을 내리려면 무엇을 모르는지 스스로 아는 겸손함이 필요하다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-13-여행하고-싶은-곳,-가방에-있는-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-13 여행하고 싶은 곳, 가방에 있는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 13 Jan 2025 13:26:57 GMT</pubDate></item><item><title><![CDATA[신대방 삼거리 근처 원룸]]></title><description><![CDATA[<a rel="noopener nofollow" class="external-link is-unresolved" href="http://redirect.dabangapp.com/cf/BLXl" target="_self">http://redirect.dabangapp.com/cf/BLXl</a>
“Pasted image 20250113141821.png” could not be found.
“Pasted image 20250113141910.png” could not be found.<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://sp.zigbang.com/share/oneroom/43286690?userNo=undefined&amp;stamp=250113142211" target="_self">https://sp.zigbang.com/share/oneroom/43286690?userNo=undefined&amp;stamp=250113142211</a>
“Pasted image 20250113142006.png” could not be found.
“Pasted image 20250113142024.png” could not be found.주차가능 : 월 7만원<br>
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://cafe.naver.com/kig/18868783" target="_self">https://cafe.naver.com/kig/18868783</a>
“Pasted image 20250113142314.png” could not be found.
“Pasted image 20250113142137.png” could not be found.
“Pasted image 20250113142250.png” could not be found.<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://cafe.naver.com/kig/18868509" target="_self">https://cafe.naver.com/kig/18868509</a>
“Pasted image 20250113142559.png” could not be found.
“Pasted image 20250113142653.png” could not be found.<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://sp.zigbang.com/share/oneroom/43331536?userNo=undefined&amp;stamp=250113143120" target="_self">https://sp.zigbang.com/share/oneroom/43331536?userNo=undefined&amp;stamp=250113143120</a>
“Pasted image 20250113142900.png” could not be found.
“Pasted image 20250113143204.png” could not be found.
“Pasted image 20250113143017.png” could not be found.<br><a rel="noopener nofollow" class="external-link is-unresolved" href="https://sp.zigbang.com/share/oneroom/43254795?userNo=undefined&amp;stamp=250113143818" target="_self">https://sp.zigbang.com/share/oneroom/43254795?userNo=undefined&amp;stamp=250113143818</a>
“Pasted image 20250113143751.png” could not be found.
“Pasted image 20250113143758.png” could not be found.]]></description><link>https://64etuor.github.io/500_resources/00_achieves/서울-원룸-알아보기/신대방-삼거리-근처-원룸.html</link><guid isPermaLink="false">500_Resources/00_Achieves/서울 원룸 알아보기/신대방 삼거리 근처 원룸.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 13 Jan 2025 05:38:24 GMT</pubDate></item><item><title><![CDATA[2025-01-12 좋아하는 악세사리, 영감을 주는 사람]]></title><description><![CDATA[
"가장 좋아하는 악세서리는? What's your favorite accessory?" 어릴 땐 화려한 귀걸이도 많이 차고 다녔는데, 조금 나이가 들어 보니 이제는 그냥 자연스러운 게 좋다.
어릴 땐 왠지 어려워 보이는 책을 옆구리에 끼고 악세사리처럼 들고 다니기도 했는데, 조금 머리가 굵어지니 이젠 혹시 내 무지를 들킬까 겁이 나 몰래 책을 읽는다.
어릴 땐 어떻게 하면 비싼 시계를 좀 싸게 사서 차볼까 중고나라에 매일 출근했는데, 이젠 누가 그냥 준대도 차기 싫다.
그 땐 아마 내 외모의 자신 없는 부분을 가리고 싶었고,
내 지식의 모자람을 가리고 싶었고,
나의 가난함을 가리고 싶었는지 모르겠다.
내 가장 못난 부분은 바로 그런 행동이었던 걸 모르고. 너에게 영감을 주는 사람은 누구야? You and I Both
- Jason mraz
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-12-좋아하는-악세사리,-영감을-주는-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-12 좋아하는 악세사리, 영감을 주는 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 13:21:29 GMT</pubDate></item><item><title><![CDATA[세컨드 브레인]]></title><description><![CDATA[나는 그동안 내가 쌓아온 지식과 정보에 무의식적으로 국경을 긋고, 행정 지역을 분류하듯 지역화하는 버릇이 있던 듯 하다. 문제는 그렇게 지역을 구분하고, 그들을 연결할 도로 공사에는 게을렀다는 점이다. 그간의 내 활동을 돌아보면 이 나의 세계는 그다지 무역이 활발히 이루어지는 세계는 아니었으니까. 가령 세컨드 브레인에서 설명하는 중간 패킷 개념은 객체 지향 프로그래밍과 굉장히 유사하지만, 이런 개념을 내 생활에 직접 적용해 보려고 시도해본 적은 한번도 없었다는 사실 같이.그러나 희망적인 사실도 하나 있다. 항상 모든 곳에서 힌트와 실마리를 얻고자 하는 문학적 영감에 익숙한 탓에, 나의 편견, 즉, 각 지역 간의 경계를 일부 허물고 교류의 장을 만들기만 한다면 앞으로 지식 활용 가능성은 수월하게 확장하길 기대할 수 있단 점이다. 당장 그 시도를 해보기로 한다. 난 그동안 제조업계에서 근무하면서 공정 엔지니어링 효율화와 업무의 시스템화를 통해 많은 개선을 이루어낸 경험이 있다. 이 경험을 활용해 이제는 나를 위한 시스템을 만들고, 차근차근 내 자신도 개선해나갈 계획을 세운다.세컨드 브레인은 내 계획의 네비게이션 역할을 해줄 좋은 도구가 될 것이고, 도구는 ‘누가, 어떻게’ 사용하는지에 따라 천차만별의 결과를 가져온다. 따라서 내 계획의 순항 여부는 전적으로 키를 잡은 나에게 달려 있다는 점을 분명히 직시하고, 나는 나를 책임자라 명시하기로 한다. 늦은 감은 좀 있지만 어떠한가. "Better late than never.”개선과 발전에는 여러 방법이 있지만 가장 쉽고 빠르게 접근할 수 있는 방법 중 하나는 ‘배울 점이 많은 사람들의 곁에 있는 것이다.’ 이런 관점에서 내 계획 중 적어도 반은 이미 실행됐다. 작년에 많은 일들을 했지만 가장 잘한 일은 더베러 커뮤니티에 가입한 것이라 자평한다. 생생한 모범 사례들이 즐비해 있으니 내 눈이 멀지만 않는다면, 적어도 길을 잃고 헤멜 걱정은 없겠다. 외부 저장소를 내부 저장소의 확장이라는 얘기하는 개념이 너무 좋다. 그동안 내부적으로 처리하느라 한계가 있던 데이터 스토리지를 확장한다는 느낌? 김익한 교수의 “메모 방법”과 결합해서 내 기록 관리 시스템을 지속적으로 개선해야겠다.
PARA 관리 시스템의 적용할 수 있는 부분은 즉시 적용하고 추이를 관찰하고, 필요하지 않다고 생각하는 건 버린다.
내가 해오던 방식과 유사한 부분이 상당히 많이 있어서 수월하게 적용해 갈 수 있을 거 같다. 단지 다른 점은 나는 “인터넷 검색”에 훨씬 더 많이 의존하고, 저자의 방식은 저장소에 저장한다는 점이다. 장단점이 있는데 저자가 말한 대로 “메모”가 너무 많이 쌓여서 정보의 홍수에 빠질 수 있다는 점. 이건 괜찮을 거 같다. 정보의 필요성을 판단하는 내 직관을 믿는다.
비우는 건 이미 잘하고 있다. 이제 쌓는 법을 약간 보완한다면 나에게 정말로 필요한 정보들을 모으는 데에, 그리고 그런 정보를 활용하여 새로운 걸 창조하는 데 보탬이 될 거 같다. 🖍️ Highlight:
이야기의 흐름을 처음부터 끝까지 따라가는 현대 독자들과는 달리, 근대 초기 영국인들은 책을 끝까지 읽지 않고 띄엄띄엄 읽거나 이 책 저 책을 동시에 읽곤 했다. 그들은 내용의 일부를 발췌한 다음 노트의 서로 다른 부분에 옮겨 적어 새로운 패턴을 만들었다. 그런 식으로 발췌문을 계속 추가하며 내용을 다시 읽고 패턴을 재배열했다. 따라서 독서와 작문은 분리할 수 없는 활동이었다. 세상은 부호로 가득했으므로 그 두 가지 활동은 사물을 이해하기 위해 계속해야 하는 노력의 일환이었다. 사람들은 책을 읽으며 이 세상을 이해했고, 읽은 내용을 기록하여 자신만의 개성이 드러나는 책을 만들었다.
📝 Memo:
호주에서 College에서 강의를 들을 때, 논문을 Paraphrasing하는 과제를 많이 받았던 기억. 🖍️ Highlight: 아이디어를 구체화한다. 아이디어 사이의 연관성을 새롭게 밝혀낸다. 시간을 두고 아이디어를 발전시킨다. 나만의 독특한 관점을 정교하게 다듬는다. 이 기능들을 하나씩 자세히 살펴보자. 🖍️ Highlight:
디지털 메모는 물리적인 형태가 없어도 눈으로 확인할 수 있다. 디지털 메모는 모호한 개념을 분명한 실체로 전환하여 관찰하고 재배열하며 편집하고 서로 결합할 수 있게 한다. 가상 형태로만 존재할 수도 있지만, 그래도 디지털 메모를 눈으로 인식할 수 있으며 손가락을 움직여 다른 곳으로 옮길 수도 있다. 데버라 챔버스Deborah Chambers와 다니엘 라이스버그Daniel Reisberg가 정신적 시각화의 한계에 관한 연구에서 알아냈듯이, “외부 세계에 대처하기 위해 개발한 기술은 내부 세계를 다루는 기술을 능가한다”.
📝 Memo:
반대로 자기 머리 속에서는 완벽하게 느껴졌던 어떤 생각이 실제로 글이나 기타 미디어로 구체화되면 사실 얼마나 형편 없을 수도 있는지 깨닫는 계기가 되기도 한다. 그리고 생각을 계속 물리적으로 구체화하고 자신이나 남에게 피드백을 받다 보면 그 이후로는 생각의 질도 엄청나게 향상된다. 🖍️ Highlight:
창의적인 사람들은 관계를 인지하고 연관성을 찾아 연결하는 일에 더 능숙하다”
📝 Memo:
"응용을 잘한다." 라는 말로 축약할 수 있겠다.
자기에게 도움이 되는 지식과 그렇지 않은 지식을 철저하게 분류하는 사람들과,
"문학"은 그 자체로 아무런 가치가 없다고 얘기하는 사람들에게서 발견한 공통점은 그들에게서 "창의성"의 실마리를 찾기 어려웠다는 점이다.
글쎄, 적어도 예술은 나에게 풍부한 정서적 안정감을 주었고 예리한 감각도 주었다.
프로그램을 개발할 때 UX에 엄청나게 공을 들이는 편인데, 예리한 감각 덕에 미세한 불편까지 잘 캐치하는 편이라 도움이 많이 되었다. 꼭 이런 예가 아니더라도 기타 사례 또한 무궁무진하게 많을 것이다. 3개를 배워서 3만큼의 아웃풋을 내는 사람이 있는 반면에 3개를 배워서 그들간의 조합으로 3이상을 하는 사람들이 세상에 얼마나 많은가.
*밈을 즐겨 보는 것은 일반적인 관점에서 무가치한 일 같지만, 가끔 유튜브 영상에서 이 밈을 적재적소에 활용한 편집 영상을 보면 일반적인 영상보다 훨씬 재밌고 집중되는 거처럼. 🖍️ Highlight:
뜻밖의 결과가 나타날 때까지 아이디어 순서를 이리저리 섞어본다. 세컨드 브레인에 저장한 자료가 다양하고 특이할수록 더욱 독창적인 연결 관계가 나타날 것이다.
📝 Memo:
특별한 문장에 대한 영감을 얻었을 때도 이와 같다. 시에 쓸 지, 산문에 쓸 지 아니면 단어를 이리 바꾸고 저리 바꾸고 하는 과정을 통해 예술성을 배가한다. 🖍️ Highlight:
우리는 이벤트를 계획하고 상품을 설계하거나 주도적으로 일을 추진하는 등의 과제를 담당할 때, 바로 그 순간에 쓸 수 있는 아이디어에만 의존할 때가 너무 많다. 나는 이런 접근 방식을 ‘헤비 리프트(heavy lift, 굴착기 작업 시 힘이 부족할 때 순간적으로 인양력을 높이는 장치)’라고 부른다. 이것은 지원 시스템의 도움 없이 우리의 뇌에서 결과를 즉시 내놓으라고 요구하는 방식이다.
📝 Memo:
업무 회의를 하면서 많이 느꼈던 부분.
지속 가능성이 없는 "보여주기"식 프로젝트가 반복되는 이유. 🖍️ Highlight:
오늘날 기업들은 특정 의견을 제기하고 다른 사람들이 그 의견을 채택하도록 설득하는 능력에 그 어느 때보다도 더 의존하고 있다.
뛰어난 카리스마 또는 거부할 수 없는 매력이 있다고 해서 특정 견해를 지지하는 건 아니다. 이를 뒷받침할 자료가 필요하다.
📝 Memo:
논리적인 말로 설득되는 사람은 또다른 논리적인 사람 뿐이다. 🖍️ Highlight:
완벽한’ 앱부터 찾아야 한다는 덫에 걸려들지 않아야 한다는 것이다.
📝 Memo:
완벽한 앱을 찾는 것보다 나의 필요에 딱 맞는 앱이 중요하다. 그런 관점에서 최근 AI 발전으로 앱 개발이 쉬워진 건 환영할 만한 일이다.
다루는 데이터가 방대해 질 수록 복잡성이 증가하므로 고급 기능이나 확장성도 중요하지만, 너무 먼 곳을 바라 보는 것도 바람직한 일만은 아니다. 대체로 이런 이유로 "실행"을 망설이는 사람이나 개발 기간이 늘어지고 유지보수가 어려워지는 문제 등이 발생할 수도 있다. 기능은 필요에 맞게 추가하면 된다. 🖍️ Highlight:
책을 읽다가 깨우침을 얻었던 비유는 다른 프레젠테이션에 인용되어 빛을 발한다.
📝 Memo:
인용을 "권위"에 의존하여 내 의견을 포장하는 듯 느껴져서 이런 행위를 지양하였으나, 이 또한 옳은 방법은 아니었단 걸 깨달았다. 🖍️ Highlight:
세컨드 브레인을 구성하는 과정을 안내하기 위해 네 가지 단계로 구성된 간단하고 쉬운 방법을 개발했다. 각 단계는 수집Capture, 정리Organize, 추출Distill, 표현Express이며, 이를 간단히 ‘CODE’ 방법이라고 부른다. 🖍️ Highlight:
인간관계에 관한 조언을 가능한 한 많이 듣고 검토하지만 누구에게도 먼저 데이트 신청을 하는 법이 없다.
📝 Memo:
깜박이 킵시다 🖍️ Highlight:
개인적이고 구체적이며 검증된 정보는 실제로 사용할 때에 비로소 ‘지식’이 된다. 당신은 알고 있는 것이 효과가 있다는 걸 알게 되어야 자신감을 얻는다. 그전까지는 이론에 불과하다.
📝 Memo:
코딩을 배울 때, 이론 공부도 좋지만 우선 필요한 걸 만들어 보는 데서 출발하라는 조언이 많은 것도 비슷한 맥락이다. 별 기능이 없는 시시한 프로그램일 지언정 실제로 자신이 프로그램을 우여곡절 끝에 개발했다는 사실은 학습 욕구를 도취하고 자신감을 주기에 충분하다. 고민 끝에 얻은 경험이 바로 지식이다. 🖍️ Highlight:
MIT 경제학자 세자르 히달고(César Hidalgo)는 《정보의 진화》라는 저서에서 ‘상상력의 결정체(crystals of imagination)’라 부르는 생산물이 우리가 알고 있는 것을 다른 사람들이 접근할 수 있는 구체적인 사물로 변화시키는 방법에 대해 다음과 같이 설명한다. “우리의 생각을 구체적인 실체가 있는 디지털 객체로 결정화(結晶化, crystallize)하면 생각을 다른 사람들과 공유할 수 있다.” 또 이렇게도 썼다. “상상을 구체적으로 결정화하는 능력이 있으면 다른 사람들의 신경계에 존재하는 지식과 노하우를 실제로 사용할 수 있다.” 🖍️ Highlight:
▪ 핵심 내용: 책이나 기사를 읽고 찾아낸 통찰력 있는 구절
▪ 인용문: 팟캐스트나 오디오북을 듣고 기억에 남는 구절
▪ 북마크와 ‘좋아요’: 흥미로운 인터넷 링크나 소셜미디어의 ‘좋아요’ 게시물
▪ 음성 메모: 모바일 기기에 저장한 짧은 녹음 파일
▪ 회의 메모: 회의나 통화 중에 논의한 주요 내용 메모
▪ 이미지: 감흥을 불러일으키는 흥미로운 사진 또는 기타 이미지
▪ 강의 내용: 수업, 콘퍼런스, 프레젠테이션 등에서 얻은 교훈 🖍️ Highlight:
▪ 스토리: 좋아하는 일화(당신의 이야기이든 다른 사람들의 이야기이든 상관없다)
▪ 통찰력: 크고 작은 깨달음
▪ 기억: 잊고 싶지 않은 인생 경험
▪ 감상: 수첩이나 일기에 적은 개인적인 생각과 교훈
▪ 사색: 불현듯 우연히 떠오른 생각 🖍️ Highlight:
좋아하는 열두 가지 문제를 끊임없이 마음에 새기고 있어야 합니다. 그 문제들이 대체로 휴면 상태에 있더라도 말입니다. 새로운 연구나 결과에 대해 듣거나 읽을 때마다 그 질문들에 하나씩 대입해서 테스트하고 해결에 도움이 되는지 살펴봅니다. 가끔 이거다 싶을 때가 있습니다. 그러면 사람들은 이렇게 말할 겁니다. “어떻게 해낸 거지? 그는 천재가 틀림없어!” 🖍️ Highlight:
그런 건 전혀 중요하지 않아요. 중요하고 말고는 신경 쓸 필요가 없죠. 그냥 재미있잖아요?” 🖍️ Highlight:
생각이 글로 나타나는 것과 마찬가지로 글을 쓰는 행위 역시 생각을 확장시킨다. 일방통행이 아니라 쌍방의 상호작용이라는 뜻이다.
*이 현상을 ‘분리 이득(detachment gain)’이라고 한다. 다니엘 라이스버그가 쓴 《분리 이득: 생각을 자유롭게 나타낼 때의 장점(The Detachment Gain: The Advantage of Thinking Out Loud)》에 따르면, 이것은 말하기나 쓰기처럼 ‘생각을 외부화된 형태로 표현할 때 얻을 수 있는 기능적인 장점’을 의미하며, ‘다른 방법을 썼더라면 찾을 수 없었을지도 모를 새로운 발견을 해낼 가능성’을 만들어낸다. 스펠링을 기억하려고 단어를 써보는 연습을 했다면 이미 분리 이득을 경험했다. 🖍️ Highlight:
어떤 아이디어를 처음 접하는 순간은 그게 어떤 의미인지 결정하기에 가장 나쁜 순간이다.
📝 Memo:
이 때문에 아이디어를 품평하는 과정을 만들었다. 아이디어는 떠올랐을 당시에는 굉장히 그럴듯해 보이지만, 시간이 지나고 중립적인 시선에서 보면 여러 단점이 보이기 마련이다. 🖍️ Highlight: 프로젝트: 일이나 생활에서 현재 진행 중이며 단기간 노력이 필요한 일 영역: 오랫동안 관리하고 싶고 장기적으로 책임지는 일 자원: 향후 도움이 될 수 있는 주제 혹은 관심사 보관소: 전에는 위의 세 가지 유형에 속했지만, 지금은 비활성화된 항목 🖍️ Highlight:
PARA 정리 방식과 부엌 정리 방식에는 유사점이 있다. 부엌에 있는 물건들은 전부 어떤 결과, 즉 최대한 효율적으로 식사를 준비하도록 설계되고 정리된다. 보관소는 냉동고와 같다. 식사 재료는 필요할 때까지 냉동 보관된다. 실제로 재료가 냉동고에서 나오는 건 아주 먼 미래일 수도 있다. 자원은 식료품 저장고와 같다. 어떤 요리에든 사용할 수 있지만, 그전에는 눈에 띄지 않는 곳에 깔끔하게 치워져 있다. 영역은 냉장고와 비슷하다. 비교적 이른 시일 내에 사용할 계획이고 더 자주 확인하는 항목들을 보관한다. 프로젝트는 불 위에서 끓고 있는 냄비나 팬과 같다. 바로 지금 활기차게 준비하고 있는 항목들이다. 음식 종류는 당신이 먹고 싶은 메뉴를 만들려면 얼마나 요리하기 쉬운지에 따라 준비된다.
📝 Memo:
너무 훌륭한 비유이다! 🖍️ Highlight:
사람들은 뭔가를 창조하려면 깨끗하게 정리된 작업 공간이 필요하다는 사실이다. 과거의 ‘잡동사니’가 지금의 공간을 꽉 채우고 어지럽히면 사고력과 업무 역량을 최대한 발휘할 수 없다. 그러므로 보관소 저장 단계가 매우 중요하다. 아무것도 잃어버리는 게 없으며 검색하면 다 찾을 수 있지만, 보이지 않는 곳으로 옮기고 생각나지 않게 해야 한다.
📝 Memo:
완전히 유사한 사례는 아니지만 이런 생각이 들었다.
옛날에 수리 공부를 할 때 느꼈던 일이다. 시간을 들여도 도무지 문제가 안 풀릴 때 아예 그 문제를 놔버리고 시간이 한참 지난 후에 다시 풀곤 했다. 그럼 의외로 대부분의 문제가 해결됐다. 난 이런 방식을 나의 뇌 내 메모리에 들어있는 정크를 초기화하는 개념으로 사용하고 있다.
난 이런 현상이 AI의 할루시네이션과 굉장히 비슷하다고 생각한다. 가령 문제를 푸는 과정이 1부터 10까지 있다고 가정해 보자. 예를 들어 2번 과정에서 뭔가 잘못 되어서 정답을 도출할 수 없는데, 나는 2번이 반드시 맞다는 전제를 "나도 모르게" 하고 있을 수도 있다. 왜냐면 과정이란 것은 모두 명시적으로 표현하기가 어렵기 때문이다. 컴퓨터처럼 모든 과정을 로그로 표현하고 에러 메세지를 통해 문제를 유추하는 과정을 실생활에 접목하기는 어려우니, 메모리를 리셋해서 2번 과정이 맞다는 가정 또한 초기화하는 게 내 경우에는 대부분 주효했다. 🖍️ Highlight:
지식을 얻으려면 매일 조금씩 더하라.
지혜를 얻으려면 매일 조금씩 버려라. 노자 - 🖍️ Highlight:
이렇게 복잡하고 다면적인 영화를 만든 코폴라 감독의 전략은 그가 대학에서 연극을 공부하며 터득한 기법인 ‘프롬프트 북prompt book’에 바탕을 두었다. 우선 원작 소설을 읽으며 가슴에 와 닿는 부분을 수집해 노트에 담는 일부터 시작했다. 그것은 트와일라 타프 상자의 코폴라 감독 버전이다. 하지만 그가 만든 프롬프트 북의 목적은 보관이 전부가 아니었다. 자료를 재검토하고 개선하여 새로운 것으로 바꾸는 과정의 출발점이었다.
프롬프트 북은 세 개의 링으로 된 튼튼한 바인더 형태였는데, 코폴라 감독은 그 안에 원작 소설 페이지들을 잘라 붙였다. 본격적으로 작업에 들어갈 무렵에는 영화 대본과 프로덕션 디자인을 계획하는 데 사용할 메모와 지시를 추가했다.
2001년 공개된 단편 다큐멘터리 〈프란시스 코폴라 감독의 노트〉에서 코폴라는 그 과정을 자세히 설명했다. 그는 먼저 원작을 처음부터 끝까지 읽는 일부터 시작했으며 눈에 띄는 것은 무엇이든 메모했다. “책을 처음 읽을 때 어떤 느낌이 들었는지 적어두는 게 중요합니다. 좋다고 생각한 점, 이해하지 못한 점, 또는 나쁘다고 생각한 점에 대해 본능적으로 느꼈기 때문입니다.”
다음으로는 자신만의 해석을 추가했고 자신이 생각한 스토리 버전을 추출하고 재구성했다. 그는 다섯 가지 주요 기준, 즉 장면 개요(또는 요약), 역사적 배경, 장면의 ‘분위기’ 설정을 위한 이미지와 톤, 핵심 의도, 반드시 피해야 할 잠재적인 함정에 따라 각 장면을 나누고 분석했다. 그가 한 말에 따르면 “각 장면의 핵심을 한 문장으로 추출하려고 부단히 노력했고, 그 장면의 핵심을 몇 마디로 표현했다”. 🖍️ Highlight:
그렇지만 발견 용이성은 사람들의 메모에서 가장 자주 빠지는 요소이다. 산더미처럼 많은 콘텐츠를 저장하는 일은 쉽지만, 그것을 향후 접근할 수 있는 형태로 전환하는 일은 전혀 다른 문제이다. 메모의 발견 용이성을 높이려면 학교에서 배운 간단한 습관을 적용하면 된다. 즉, 가장 중요한 핵심 내용을 하이라이트 처리하여 강조하는 것이다. 하이라이트 처리는 모든 사람이 잘 아는 방식이고 힘들게 노력하지 않아도 되며 어떤 앱에서든 잘 작동한다. 🖍️ Highlight:
도구인 하이라이트 기능을 이용하는 동시에 하이라이트 기능을 훨씬 더 유용하게 쓸 수 있도록 업그레이드한다. 방법은 간단하다. 전체 내용 중 중요한 부분을 하이라이트 처리한 다음, 그 부분의 핵심을 한 번 더 하이라이트 처리한다. 그리고 메모의 핵심을 여러 ‘단계layer’를 거쳐 추출한다. 각 단계는 서로 다른 형식을 사용하므로 쉽게 구별할 수 있다.
단계별 요약을 구성하는 네 가지 단계는 위와 같이 간단하게 나타낼 수 있다. 나는 첫 번째 단계를 ‘토양’이라 생각하고 싶다. 그것은 가장 기본적인 단계로,어떤 출처 혹은 나만의 생각에서 처음 발췌하여 수집한 것이다. 글이나 그림, 이미지, 오디오 등 어떤 형태이든 상관없이 메모는 지식이 튼튼하게 쌓일 단단한 땅 같은 존재이다. 두 번째 단계는 ‘석유가 매장된 곳을 찾아냈어!’라는 표현처럼 ‘석유’이며, 토양보다 좀 더 가치 있는 자원이다. 이 단계는 검고 굵은 글씨로 간단히 표시한다. 세 번째 단계는 ‘황금’으로, 더 가치가 있으며 노란색으로 하이라이트 처리해 밝게 빛나도록 한다. 네 번째 단계는 ‘보석’이다. 이는 가장 희귀하고 빛나는 발견으로, 내가 직접 핵심을 추출하여 작성한 개요서이다. 🖍️ Highlight:
단계별 요약을 하면 세컨드 브레인에서 찾아낸 최고의 아이디어를 모은 지도를 만들 수 있다. 하이라이트 처리한 부분은 마치 표지판과 경로 좌표처럼 아이디어 네트워크를 탐색하며 돌아다닐 때 길을 안내한다. 아무것도 옮기거나 삭제하지 않고 이 지도를 제작하는 셈이다 🖍️ Highlight:
단계별 요약을 하면 메모의 ‘콘텐츠’에, 그리고 메모를 보여주는 ‘방식’에 집중할 수 있다. 라벨을 붙이고 태그를 설정하며 링크를 걸거나, 수많은 정보 관리 도구들이 제공하는 고급 기능을 적용하느라 시간을 너무 많이 빼앗기지 않아도 된다. 더 어려운 과제를 수행할 에너지가 없을 때도 이 의미 있고 실용적인 작업은 쉽게 할 수 있다. 가장 중요한 것은, 이 일을 하면 당신이 읽거나 배우는 핵심 내용에 계속 관심을 유지할 수 있다. 이것이야말로 장기적으로 봤을 때 중요한 점이다. 🖍️ Highlight:
패널로 참석한 강연에서 연설자가 이 용어를 언급했고, 나는 내 의견을 발표할 차례가 되기 전에 재빨리 태블릿(내 메모가 모두 동기화된 기기)에서 그 용어를 검색해 이 메모를 찾았다.
📝 Memo:
이런 경우에 한해서라면 요새는 구글링이나 AI 검색이 최신성을 보장하기 때문에 더 좋은 옵션인 거 같다. 🖍️ Highlight:
입사 지원자 누구에게나 면접 질문과 방식을 똑같이 적용하는 구조화된 인터뷰를 시행하면 채용 시 편견을 대폭 감소시킨다
📝 Memo:
저자가 하이라이트 해놓은 부분을 똑같이 하이라이트했다. 🖍️ Highlight:
숀케 아렌스(Sönke Ahrens)가 저서 《제텔카스텐》에서 밝혔듯이, 이것은 글쓰기의 핵심에 자리한 근본적인 역설이다. 즉, 무엇을 쓸지 알기 전에 먼저 조사부터 해야 한다. “우리는 펜을 손에 쥔 채 읽고 써 가며 아이디어를 발전시키고 외부에 저장한 생각을 끝없이 성장시켜 강화해야 한다. 신뢰할 수 없는 두뇌가 아무렇게나 만들어낸 계획이 아니라, 우리의 관심사와 호기심, 직관에 따라 안내받을 것이다. 직관은 읽고 생각하고 토론하고 쓰고 아이디어를 개발하는 실제 작업에 따라 형성되고 영향을 받으며, 계속 성장하며 우리의 지식과 이해를 외부 세계로 보여주는 것이다.” 🖍️ Highlight:
우리는 우리가 만들어내는 것만 안다. 지암바티스타 비코, 철학자 - 🖍️ Highlight:
버틀러는 공상 과학 소설이 단순한 오락거리 이상이라는 사실도 잘 알았다. 🖍️ Highlight:
성공하지 못할 거라며 날 조롱하던 사람들의 말이 맞을 수도 있었어요. 🖍️ Highlight:
‘너무 과장된 내용’ 🖍️ Highlight:
중간 패킷은 작업을 구성하는 구체적이면서 개별적인 블록이다. 🖍️ Highlight:
에세이를 쓰다가 한 단락을 삭제한다면 후속편을 쓸 경우를 대비해 따로 저장해둘 수 있다. 🖍️ Highlight:
중간 패킷을 재사용하면 그 시간을 아껴 더 중요하고 창의적인 생각에 집중할 수 있다. 작게 생각하기는 시야를 넓히고 더 큰 목표로 향하는 좋은 방법이다.
📝 Memo:
이 개념을 기본으로 내 기록 시스템을 점검해 봐야겠다. 🖍️ Highlight:
내가 매우 좋아하는 경험 법칙 중 한 가지는 ‘이미 80퍼센트 진행한 프로젝트만 시작하라’이다. 역설처럼 들릴 수도 있다. 하지만 관련 자료를 수집하고 정리하고 추출하는 작업을 거의 다 마쳐야만 프로젝트를 끝내겠다고 한다면, 그건 내가 끝낼 수 없는 것을 시작할 위험을 아예 감수하지 않겠다는 뜻이다. 🖍️ Highlight:
중간 패킷의 관점으로 작업을 재구성한다는 말은 작업만 작은 조각들로 나눌 뿐 예전과 똑같은 방식으로 일하자는 뜻이 아니다. 그렇게 해서는 진정한 잠재력을 발휘하지 못한다.
📝 Memo:
객체 지향 프로그래밍과 굉장히 유사하다. 🖍️ Highlight:
누군가에게 완제품을 보여주기보다는 작은 부분을 보여주고 의견을 구하는 일이 훨씬 더 수월하다. 수정할 시간이 아직 남은 초기에 작품의 작은 측면에 대한 비판을 들으면 몇 달간의 노고 끝에 부정적인 반응을 얻는 것에 비해 좌절감이 덜하다. 중간 단계 피드백을 한 번에 그치지 않고 여러 번 받아 활용할 수도 있다.
📝 Memo:
문학회에서 서로의 글에 대한 의견을 나눌 때도 똑같다. 완성본을 가지고 와서 피드백을 받는 사람들은 피드백이 부정적이면 좌절하거나, 아니면 "네 까짓 게 뭘 알아?" 라는 반응이 대부분이다. 나는 이걸 겸허한 수용이 부족한 태도라고 줄곧 여겼는데 저자의 말대로 글을 쓰는 중간 단계에서의 비판이라면 훨씬 수용하기 쉬울 거 같다.
나는 완성본이 너무 엉망이면 피드백을 아예 안하는 편인데, 그래서 내 글에 대한 피드백이 없는 순간이 가장 두렵다. 🖍️ Highlight:
일을 할 때 근본적인 어려움은 자신의 일을 객관적으로 바라볼 수 없을 때가 많다는 점이다. 피드백을 받을 때는 초보자만 알아볼 수 있는 걸 파악하기 위해 다른 사람의 시각을 빌리는 일이 정말 중요하다. 주관적인 관점에서 벗어나 작품에서 무엇이 빠졌는지 알아내야 한다.
📝 Memo:
이 현상은 단순히 아이디어가 머리 속에 있을 때 더 심각해진다. 1차적으로 구체화를 통해 자기 객관화를 해도 여전히 객관적인 건 어려운 일인데, 머리속에 있을 땐 오죽할까 🖍️ Highlight:
창의적인 제품은 항상 빛나고 새롭지만,
창의적인 과정은 오래되었고 변하지 않는다. 실바노 아리에티, 《창의력Creativity》 저자 - 🖍️ Highlight:
창의적인 과정의 기초가 되는 가장 중요한 패턴 중 하나는 ‘발산divergence과 융합convergence’이다.
*나는 ‘디자인 씽킹(Design Thinking)’에서 발산과 융합 모델을 처음 배웠다. 디자인 씽킹이란 1980년대와 1990년대 스탠퍼드 디자인스쿨에서 태동하고 컨설팅 회사인 아이디오(IDEO)가 전 세계에 널리 알린 창의적 문제 해결 방식이다. 🖍️ Highlight:
아이디어 군도The Archipelago of Ideas 기법은 사용 설명서, 훈련 워크숍, 새 프로젝트 지침서, 혹은 블로그에 게시할 에세이 등 새로운 작업을 시작할 때 언제든지 매우 유용하게 쓰인다. 결과를 전혀 예측할 수 없는 작업을 수행할 때도 진행 상황을 계획할 방법을 알려준다. 🖍️ Highlight:
습관이 형성되면 신경 쓸 일이 줄어들어
더 중요한 일에 집중할 수 있다.
삶의 기본 원칙들을 단순하게 만들어야
창의력을 발휘하는 데 필요한
정신적인 공간을 만들 수 있다. 제임스 클리어, 《아주 작은 습관의 힘》 저자 - 🖍️ Highlight:
정리 정돈을 잘한다는 말은 습관이다. 다시 말해 정보를 접하고 작업하고 활용하며 반복하는 행동이다.
📝 Memo:
내가 정리를 시작하게 된 계기가 이거다. 다시 찾기가 어려워서. 이게 습관이 되니 집안일을 할 때도 정리를 하는 게 습관처럼 되었다. 🖍️ Highlight:
요리사들에게는 이렇게 힘들고 벅찬 목표를 달성하는 특별한 시스템이 있다. ‘미즈 앙 플라스mise en place’라는, 전 세계 식당에서 따르는 요리 철학이다. 1800년대 후반 프랑스에서 태동한 이 개념은 고급 식당에서 요리를 효율적으로 만들어내기 위한 단계별 과정이다. 요리사들은 주방을 청소해야 한다는 이유만으로 일을 멈출 여유 따위는 없다. 따라서 물 흐르듯 매끄럽게 음식을 준비하는 동안 작업 공간도 깨끗이 유지하고 정리 정돈하는 법을 배운다. 가령 믹싱 스푼은 다음에 사용할 때를 위해 항상 같은 자리에 놓기, 칼은 언제든지 바로 쓸 수 있게 사용하자마자 깨끗이 닦기, 식자재는 언제 써야 하는지 고민하지 않도록 사용 순서대로 정렬하기 같은 작은 습관들을 익히는 것이다. 🖍️ Highlight:
사전 검토 질문에 답하라: 무엇을 배우고 싶은가? 불확실성을 유발하는 가장 큰 원인, 또는 가장 중요한 질문은 무엇인가? 실패할 가능성이 가장 큰 것은 무엇인가?
*사전 검토란 프로젝트가 어떻게 잘못되었는지 분석하는 데 사용하는 사후 검토와 달리 프로젝트가 시작되기 전에 무엇이 잘못될 것 같은지 질문하고 검토하여 그 문제가 발생하지 않도록 예방하는 것을 목적으로 한다.
▪ 관계자들과 소통하라: 상사, 동료, 의뢰인, 고객, 주주, 외주업체 등에 프로젝트가 얼마나 중요한지, 왜 중요한지 설명하라.
▪ 성공 기준을 규정하라: 이 프로젝트가 성공적이라고 간주하려면 어떤 일들이 일어나야 하는가? 성취해야 할 최소한의 결과 또는 달성하려 애쓰는 ‘도전 목표’는 무엇인가?
▪ 프로젝트 시작을 공식화하라: 확인 전화 일정을 잡고 예산과 추진 일정을 수립하라. 목표와 목적을 문서로 작성하여 관련자들에게 전달하고 방향성을 공유하며 그들의 역할을 명확히 한다. 혼자 하는 프로젝트일지라도 시작을 공식화하면 좋다.
📝 Memo:
Project Charter가 필요한 이유. 🖍️ Highlight:
경영진 대상 전문 코치이자 작가인 데이비드 앨런은 저서인 《쏟아지는 일 완벽하게 해내는 법》에서 ‘주간 리뷰’를 실시하는 습관을 소개했다. 그는 일주일에 한 번씩 주기적으로 ‘확인check-in’하는 과정을 강조하며, 이때 일과 삶을 계획하고 재설정하며 검토한다고 설명했다. 또한 주간 리뷰를 활용해 새롭게 할 일들을 기록하고 진행 중인 프로젝트를 검토하며 다음 주에 처리할 우선순위 업무들을 정하라고 권고한다. 🖍️ Highlight:
지금까지 소개한 세 가지 습관, 즉 프로젝트 시작과 완료 체크리스트를 사용하고, 주간 리뷰와 월간 리뷰를 시행하며, 알아차리는 습관을 활용하는 일은 모두 일하면서 잠깐씩 비는 시간에 재빨리 수행하자는 의도이다. 그 세 가지 습관은 우리가 이미 어떤 형태로든 하고 있을 활동들을 기반으로 해서 체계적인 모습을 조금 더 추가하도록 설계되었다. 따라서 탁월한 재주가 필요한 게 아니며 필요해서도 안 된다. 또한 막대한 시간을 들여 고독한 수행에 들어가도록 요구해서도 안 된다. 그건 현실과는 거리가 멀다. 그런 완벽한 조건들을 갖출 때까지 기다리겠다면 한 걸음도 내딛지 못할 것이다. 🖍️ Highlight:
아이디어는 공유하는 과정에서
더 복잡하고 흥미로워지며,
더 많은 사람에게 유용하게 쓰일 가능성이 커진다. 아드리엔 마리 브라운, 작가 겸 활동가 - 🖍️ Highlight:
어떤 맥락에서 우리의 사고방식을 형성하는 믿음과 태도는 다른 맥락에서도 그대로 나타나기 마련이다.
생산성과 창의성, 성과를 창출하려는 투쟁과 도전의 근간에는 삶에서 얻는 정보와 근본적인 관계가 있다. 그 관계는 우리가 새로운 일을 겪으며 성장하는 동안 형성되었고, 개인의 성격과 학습 스타일, 인간관계와 유전자의 영향을 받았다. 당신은 새로운 아이디어를 접하면 특정 방식으로 반응하도록 배웠다. 새로 유입되는 정보에 어떻게 반응할지, 즉 기대하거나 두려워하거나 흥분하거나 자신감을 잃거나 하는 자신만의 ‘청사진’을 갖게 된 것이다.
📝 Memo:
아주 중요한 개념이다. 그리고 이런 성장을 극단적으로 자극하는 예시가 "시련"이다. 🖍️ Highlight:
라이더 캐롤Ryder Carroll이 자신의 저서 《불렛저널》에서 주장했듯이, “당신의 뛰어난 사고방식으로 거대하지만 다 낡아빠진 인간 조직에 뚫린 조그만 구멍을 메울 수도 있다”.
당신이 먼저 손을 내밀어야만 손이 닿는 사람들이 있다. 당신이 줄 수 있는 지침을 다른 데서는 구하지 못하는 사람들이다. 자신에게 있을지도 모를 문제의 해결책을 어디서 찾아야 할지 모르는 사람들이다. 당신은 그들을 안내하고 도와줄 수 있다. 부모님이 당신을 지극정성으로 양육하고 선생님과 멘토들이 공들여 가르쳤듯이, 이번에는 당신이 다른 사람들을 보살필 수 있다. 몇 마디 말과 글로 상상도 하지 못했던 세상의 문을 주변 사람들에게 열어줄 수 있다. 🖍️ Highlight:
헝가리 출신의 영국 철학자 마이클 폴라니Michael Polanyi는 ‘폴라니의 역설Polanyi’s Paradox’로 세상에 알려졌다. 그의 책 《암묵적 영역》에서 태동한 이 개념은 ‘우리는 말할 수 있는 것보다 더 많이 알고 있다’라고 요약할 수 있다. 폴라니는 우리가 인간으로서 힘들이지 않고 수행할 수 있는 과제가 많지만, 어떻게 그게 가능한지 완전히 설명할 수는 없다고 주장했다. 예를 들어 운전이나 얼굴 인식하기 등이다. 그것은 우리가 정확하고 자세하게 묘사할 수 없는 ‘암묵적 지식tacit knowledge’에 의존하기 때문이다. 우리에게 그 지식이 있어도, 그것은 언어가 닿을 수 없는 인간의 잠재의식과 근육 기억에 존재한다. 🖍️ Highlight:
마지막으로 조언을 하나 남기자면, 당신을 흥분시키는 것을 추구하라. 어떤 이야기, 아이디어, 새로운 가능성에 매료되고 마음을 빼앗길 때, 그 순간이 별로 중요하지 않은 듯 무심코 지나치지 마라.
📝 Memo:
내 경우에는 너무 재미와 흥분만 추구한다는 게 문제긴 하다.
]]></description><link>https://64etuor.github.io/200_books/00_achives/2025/세컨드-브레인.html</link><guid isPermaLink="false">200_Books/00_Achives/2025/세컨드 브레인.md</guid><dc:creator><![CDATA[티아고 포르테, 서은경]]></dc:creator><pubDate>Sun, 12 Jan 2025 12:16:13 GMT</pubDate></item><item><title><![CDATA[4W - 유통&이커머스 데이터 분석]]></title><description><![CDATA[2024-12-14 Adidas 미국 판매 데이터 분석 일원배치 분산분석 (ANOVA) 및 최소자승법 (OLS)을 활용해 판매 데이터에 대한 통계적 검증을 수행합니다. E-Commerce 데이터 분석 EDA 시각화를 기반으로 Streamlit 대시보드를 구축합니다. 일원배치 분산분석은 두 개 이상의 그룹 간 평균 차이를 검정하는 통계 기법입니다. 이 분석을 통해 판매 수량과 지역별 매출의 차이를 검증할 수 있습니다.
가설 설정: 귀무가설 (H₀): 그룹 간 평균에 차이가 없다.
대립가설 (H₁): 적어도 하나의 그룹에서 평균 차이가 있다. import pandas as pd
from statsmodels.formula.api import ols
from statsmodels.stats.anova import anova_lm # 데이터 로드
adidas = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Data/Adidas US Sales Datasets.csv') # 데이터 타입 변환 (Units Sold가 숫자형이 아닌 경우 변환)
adidas['Units Sold'] = adidas['Units Sold'].str.replace('[%$,]', '', regex=True).astype('float') # OLS 모델 생성 (Region에 따른 Units Sold 분석)
model = ols('Q("Units Sold") ~ C(Region)', data=adidas).fit() # ANOVA 수행
anova_results = anova_lm(model) # ANOVA 결과 출력
print(anova_results) # 결과 해석
p_value = anova_results['PR(&gt;F)'][0]
if p_value &lt; 0.05: print("귀무가설을 기각합니다: 그룹 간 평균에 차이가 있습니다.")
else: print("귀무가설을 채택합니다: 그룹 간 평균에 차이가 없습니다.") 데이터 타입 변환: Units Sold가 문자열로 되어 있는 경우, 특수문자를 제거하고 숫자형으로 변환합니다. OLS 모델 생성: Q("Units Sold"): 컬럼 이름에 공백이나 특수문자가 있을 경우 Q()로 감쌉니다.
C(Region): Region을 범주형 변수로 지정합니다. ANOVA 수행: anova_lm(model): 생성된 OLS 모델을 기반으로 ANOVA 분석을 수행합니다. 결과 해석: p-value가 0.05 미만이면 귀무가설을 기각하고, 그룹 간 평균에 차이가 있다고 결론을 내립니다. 최소자승법 (OLS)은 선형 회귀에서 가장 많이 사용되는 방법으로, 독립변수와 종속변수 간의 관계를 설명합니다. 목표: 판매 금액(Total Sales)과 제품 가격(Price per Unit) 및 판매 수량(Units Sold) 사이의 관계를 분석합니다.
import statsmodels.api as sm # 독립변수와 종속변수 설정
X = adidas[['Price per Unit', 'Units Sold']]
y = adidas['Total Sales'] # 상수항 추가 (절편 포함)
X = sm.add_constant(X) # OLS 회귀 모델 생성 및 적합
model = sm.OLS(y, X).fit() # 결과 요약
print(model.summary())
해석:
R-squared 값이 높을수록 모델이 데이터를 잘 설명합니다.
p-value가 0.05 미만인 변수는 통계적으로 유의미합니다. <a data-href="EDA(Exploratory Data Analysis)" href="https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/eda(exploratory-data-analysis).html#_0" class="internal-link" target="_self" rel="noopener nofollow">EDA(Exploratory Data Analysis)</a>(탐색적 데이터 분석)를 위해 Streamlit을 활용하면 웹 기반 대시보드를 간편하게 생성할 수 있습니다. Streamlit 설치:
pip install streamlit 대시보드 코드 (app.py):
import streamlit as st
import pandas as pd
import plotly.express as px # 데이터 로드
data = pd.read_csv('ecommerce_data.csv') # 제목
st.title("E-Commerce 데이터 분석 대시보드") # 월별 판매량 시각화
st.header("📈 월별 판매 수량")
monthly_sales = data.groupby('yearmonth')['Quantity'].sum().reset_index()
fig1 = px.line(monthly_sales, x='yearmonth', y='Quantity', title='Monthly Sales Quantity')
st.plotly_chart(fig1) # 카테고리별 판매량 시각화
st.header("📊 카테고리별 판매 수량")
category_sales = data.groupby('Category')['Quantity'].sum().reset_index()
fig2 = px.bar(category_sales, x='Category', y='Quantity', title='Sales by Category')
st.plotly_chart(fig2) 대시보드 실행:
streamlit run app.py 간편한 인터페이스: Python 코드만으로 웹 대시보드 생성
실시간 대화형 시각화: Plotly 그래프와 상호작용
빠른 배포: 데이터 분석 결과를 공유하기 용이 &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
통계 검증을 위한 간단한 방법을 배웠다.
느낀 점:
분명히 예전에 경영 통계에서 배웠던 내용인데 실무에서 쓸 일이 없으니 정말 하나도 기억이 나지 않았다.
다음에 개선할 점:<br>
직접 배운 내용을 반복해서 사용해보지 않으면 장기 기억으로 아무래도 치환되기가 어렵다. Kaggle을 병행해서 학습을 하면 좋을 것 같다! <a href="https://64etuor.github.io?query=tag:todo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#todo">#todo</a>
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/4w-유통&amp;이커머스-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/4W - 유통&amp;이커머스 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[KDE(Kernel Density Estimation)]]></title><description><![CDATA[
Kernel Density Estimation(KDE)은 데이터의 확률 밀도 함수(PDF)를 비모수(non-parametric) 방식으로 추정하는 기법입니다.
데이터의 분포를 시각화하거나 분석할 때 유용하며, 특히 히스토그램보다 매끄럽고 직관적인 결과를 제공합니다. 확률 밀도 함수는 연속형 확률변수의 분포를 나타냅니다.
PDF의 적분은 전체 확률 1을 만족합니다. 데이터 포인트를 기준으로 국소적인 밀도를 계산하는 데 사용됩니다.
주로 사용되는 커널 함수는 다음과 같습니다: 가우시안(Gaussian): 박스(Box): 삼각형(Triangular): 에피네치코프(Epanechnikov): 커널 함수의 범위를 조절하는 파라미터로, KDE의 부드러움을 결정합니다. 작은 : 높은 해상도, 과적합 가능성.
큰 : 매끄러운 추정, 과소적합 가능성. 적절한 대역폭 선택은 KDE 성능에 매우 중요합니다.
KDE는 다음과 같은 수식으로 정의됩니다:
: 에서의 밀도 추정값
: 데이터 샘플 수
: 대역폭
: 관측된 데이터
: 커널 함수 비모수적: 데이터 분포에 대한 가정이 필요하지 않습니다.
유연성: 데이터의 구조에 따라 밀도 추정을 매끄럽게 조정 가능.
적용성: 1차원뿐만 아니라 다차원 데이터에도 적용 가능.
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde # 샘플 데이터 생성
np.random.seed(42)
data = np.random.normal(loc=0, scale=1, size=1000) # KDE 수행
kde = gaussian_kde(data)
x_vals = np.linspace(-4, 4, 1000)
kde_vals = kde(x_vals) # 시각화
plt.hist(data, bins=30, density=True, alpha=0.5, label="Histogram")
plt.plot(x_vals, kde_vals, label="KDE", color="red")
plt.title("Kernel Density Estimation")
plt.xlabel("Value")
plt.ylabel("Density")
plt.legend()
plt.show() 데이터 시각화 데이터 분포를 매끄럽게 표현. 이상치 탐지 밀도가 낮은 영역에 위치한 데이터 포인트를 탐지. 샘플링 추정된 PDF를 기반으로 새로운 샘플 생성. 베이즈 추론 KDE로 추정된 PDF를 사전 확률(prior)로 활용. 데이터 크기가 클수록 계산량이 증가합니다.
대역폭 선택이 성능에 큰 영향을 미칩니다.
고차원 데이터에서 계산 효율성이 떨어질 수 있습니다. Silverman, B. W. (1986). "Density Estimation for Statistics and Data Analysis".
Scott, D. W. (1992). "Multivariate Density Estimation: Theory, Practice, and Visualization". <a href="https://64etuor.github.io?query=tag:Statistics" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Statistics">#Statistics</a><a href="https://64etuor.github.io?query=tag:KDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#KDE">#KDE</a> <a href="https://64etuor.github.io?query=tag:MachineLearning" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#MachineLearning">#MachineLearning</a> <a href="https://64etuor.github.io?query=tag:Python" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Python">#Python</a> <a href="https://64etuor.github.io?query=tag:DataVisualization" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#DataVisualization">#DataVisualization</a>]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/kde(kernel-density-estimation).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/KDE(Kernel Density Estimation).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 10:05:42 GMT</pubDate></item><item><title><![CDATA[정부지원창업 개요]]></title><description><![CDATA[ 사업 아이템 구체화 본인이 추진하고자 하는 아이템(제품/서비스)의 타깃 시장, 경쟁 우위, 사업 확장 가능성 등을 명확히 설정합니다. 아이디어가 기술 기반인지, 혹은 서비스 산업인지에 따라 정부지원사업 대상 범위가 달라질 수 있습니다. 시장 규모 및 트렌드 조사 K-Startup, KOTRA, 무역협회 등에서 제공하는 산업·시장 분석 보고서를 참고합니다<a data-footref="1" href="https://64etuor.github.io/500_resources/정부지원창업/정부지원창업-개요.html#fn-1-c4fcfa9098579bf8_0" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>. 유사 아이템의 매출 추이, 경쟁사 동향, 소비자 선호도 등 자료를 수집해 실제 수익성과 사업 확장 가능성을 검토합니다. 사업개요 기업명, 대표자 현황, 설립 예정일, 회사의 비전과 목표 등을 명시합니다. 제품(서비스) 소개 핵심 기술, 제품(서비스)의 특징, 시장 경쟁력, 지식재산권 현황 등을 구체적으로 기술합니다. 시장분석 및 마케팅 전략 타깃 시장, 경쟁사 분석, 브랜드 전략, 가격 책정, 홍보 채널 등을 체계적으로 정리합니다. 특히 정부지원사업에서는 시장성, 성장 가능성이 매우 중요하게 평가됩니다. 인력 및 조직 구성 창업 멤버(CEO, CTO, CFO 등) 및 외부 자문가 구성을 구체적으로 소개합니다. 인력 역량(학력, 자격증, 경력)도 중요한 심사 요소입니다. 재무계획 창업 자금(자기 자본, 투자 유치, 정부 지원금 등), 매출 전망, 비용 구조 등을 제시합니다. 추후 사업 안정성을 평가받기 위해서는 구체적인 예산안과 손익분기점 분석을 포함하는 것이 좋습니다. 예) 손익분기점(BEP) 계산:
[
\text{BEP} = \frac{\text{고정비}}{\text{공헌이익(단위당 판매가격 - 단위당 변동비)}}
] 중소벤처기업부 홈페이지 및 K-Startup <br>중소벤처기업부 공지사항, K-Startup 홈페이지를 통해 자금지원, R&amp;D지원, 창업경진대회 등 다양한 사업 공고를 확인합니다<a data-footref="2" href="https://64etuor.github.io/500_resources/정부지원창업/정부지원창업-개요.html#fn-2-c4fcfa9098579bf8_0" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>. 온라인 사업 설명회, FAQ, 사용자 매뉴얼을 참고해 지원 절차를 숙지합니다. 지자체 및 공공기관 지원사업 해당 지역의 창조경제혁신센터, 테크노파크, 소상공인시장진흥공단 등에서 진행하는 지역 특화 지원사업을 점검합니다. 지역별로 특화된 지원 프로그램(예: 청년 창업 지원, 농수산 창업 지원 등)이 존재할 수 있으므로 꼼꼼히 확인합니다. 창업보육센터 및 액셀러레이터 프로그램 대학 산학협력단, 액셀러레이터, 창업보육센터 등의 프로그램을 활용해 시제품 개발, 멘토링, 네트워킹 기회를 찾을 수 있습니다. 정부지원금과 별도로 초기 사업 안정화를 위한 사무 공간, 장비 지원도 받을 수 있습니다. 지원 대상 자격 확인 예비창업자, 창업 7년 이하, 청년 창업(만 39세 이하), 기술 기반 창업 등 조건이 다릅니다. 일부 지원사업은 특정 산업 분야(예: 바이오, 핀테크, AI 등)에 한정될 수 있으므로, 해당 사항을 필히 검토하세요. 구비 서류 준비 사업계획서(필수), 주민등록등본, 사업자등록증(기창업자의 경우), 재무제표(기창업자), IR 자료(투자유치형 사업), 각종 증빙자료(특허, 인증서, 수상내역 등)를 미리 준비합니다. 사업에 따라 추가로 요구되는 서류(고용계획서, 동의서 등)가 있을 수 있으므로 공고문을 꼼꼼히 확인합니다. 사업계획서 프레젠테이션 심사단에 대한 발표가 요구되는 경우 PPT나 기타 자료를 활용해 핵심 내용을 간결하고 임팩트 있게 전달할 수 있도록 준비합니다. 시간 배분, 발표 순서, 예상 질문 등에 대해 리허설을 충분히 진행합니다. 가산점 확보 전략 특허, 실용신안, 등록상표, 수상 경력, 관련 자격증, ESG 경영전략 등은 평가에서 가산점을 받을 수 있습니다. 청년 창업, 여성 창업, 지역 특화 산업 등 특정 요건에 부합하면 추가 혜택이 있는지 확인합니다. 사업비 관리 정부지원금을 사용 시 반드시 지원 목적에 맞게 운용해야 하며, 부정 사용 시 환수 조치가 있을 수 있습니다. 비용 청구, 증빙 서류(영수증, 세금계산서 등), 보고서 등 문서관리에 각별히 주의해야 합니다. 중간·최종 보고 사업 수행 기간 동안 중간점검, 최종 보고서 제출이 요구되는 경우가 많습니다. 기술개발형 사업은 시제품 개발, 테스트 결과, 특허 출원 여부, 연구 성과 등을 체계적으로 보고합니다. 성과 관리 및 후속 지원 매출 창출, 투자 유치, 고용 창출 등 성과를 적극적으로 관리하고 홍보합니다. 후속 지원사업(사업 고도화, 수출 지원, 해외 전시회 참가 지원 등)으로 연계해 사업을 확장할 수 있는 기회를 모색합니다. 정부지원사업을 통해 창업을 진행하려면 시장 조사 및 아이템 선정부터 사업계획서 작성, 지원사업 정보 탐색, 심사 준비 및 사후관리까지 전반적으로 철저한 준비가 필수적입니다. 또한 각 프로그램마다 요구하는 사항과 서류가 다르므로, 공고문을 꼼꼼히 살펴보고 자격 요건을 충족하도록 준비해야 합니다. 필요한 경우 전문가 멘토링이나 법인설립 컨설팅 등을 활용해 준비 과정을 보완하면 도움이 됩니다. <br>K-Startup: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.k-startup.go.kr/" target="_self">https://www.k-startup.go.kr/</a> <a href="https://64etuor.github.io/500_resources/정부지원창업/정부지원창업-개요.html#fnref-1-c4fcfa9098579bf8_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>중소벤처기업부 홈페이지: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.mss.go.kr/" target="_self">https://www.mss.go.kr/</a> <a href="https://64etuor.github.io/500_resources/정부지원창업/정부지원창업-개요.html#fnref-2-c4fcfa9098579bf8_0" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://64etuor.github.io/500_resources/정부지원창업/정부지원창업-개요.html</link><guid isPermaLink="false">500_Resources/정부지원창업/정부지원창업 개요.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 07:41:36 GMT</pubDate></item><item><title><![CDATA[2025-01-10 내 인생을 바꾼 사람, 올해 이루고 싶은 것]]></title><description><![CDATA[
"내 인생을 바꿀 만한 영감을 준 사람이 있다면? Who gave you life-changing advice?" 너무 많아서 쓰기가 어렵다. 실제 내 가까이에 있는 사람도 있었고 아예 단절된 시대를 살았던 인물들도 있겠으나, 근대로 한정 짓자면 독립 운동가들이 특히 그렇고, 일부의 정치인이 그렇고, 일부의 종교인 또한 그렇다. 그리고 내 주변 가까이서 내가 변화할 수 있도록 도와준 친우들, 그리고 나의 어머니가 그렇다.
할 얘기야 많겠지만, 나의 색과 방향을 덜 의심 받고도 말할 만한 한 가지만 꼽아 보자.
법정 스님께서 입적하셨을 당시의 일이다. 그의 생전 사상과 저서에 받은 감명이 깊었던 나와 내 친구는 함께 성수동 인근이었던가, 물어 물어 추모식장에 마침내 도달했다. 그곳에서 마주한 광경은 꽤나 생경하고 그러나 또 일면 거룩한 점이 있었다.
식장에선 천주교 수녀분들이 내부를 정돈하고 사람들을 안내하고 계셨고, 제단 앞에 앉은 사람들은 각각 제 자신만의 방식으로 법정 스님을 추모하고 있었다. 기도를 올리는 사람, 절하는 사람, 가만히 두 손을 마주 잡고 묵념하는 사람.
또 사람도 다양했다. 아이를 데려온 사람, 여자인 사람, 남자인 사람, 나이 든 사람, 젊은 사람.
찰나의 순간이었지만, 그 순간은 정치와 종교, 남성과 여성, 혹은 노년과 청년, 인간을 갈라놓고 대립하게 만드는 그 어떤 경계도 존재하지 않는 ‘이상향’ 처럼만 느껴졌다. 그리고 그것이 법정 스님이 생전 믿고 실천한 이념임을 깨달았다.
그리고 나는 이처럼 무시무시할 정도로 순수한 인간이 품은 지긋한 향기들이,
작은 육신 안에 너무나 밀도 높게 채워지는 바람에,
어느 순간부터는 자연히 세상에 퍼져 나와서,
이 세상을 좀 더 따뜻하고 아름답게 만들고 있던 게 아닐까하는 생각을 하였다.
신념은 말과 글자로 이루어진 몇 문장의 책임 없는 수식이 아닌,
사람의 삶으로 기록된다. 올해 꼭 이루고 싶은 것이 있다면? 기록 관리 습관 꾸준히 유지하기, 술 끊기, 나의 첫 사업 서비스 출시하기.
오늘의 '생각을 자극'하는 글귀
"사람을 판단할 때는 선택적인 예의를 주시하라상대가 당신을 대하는 태도만으로는 어떤 사람인지 판단하기 어렵다. 진짜 인성을 판단하려면 그 사람이 싫어하거나 필요 없는 사람을 어떻게 대하는지를 보라. 아무리 나에게 친절한 사람이라도 다른 사람에게 불친절한 모습을 보인다면 조심해야 한다. 선택적인 예의는 마음속에 적대감이 있다는 뜻이다."]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-10-내-인생을-바꾼-사람,-올해-이루고-싶은-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-10 내 인생을 바꾼 사람, 올해 이루고 싶은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 12 Jan 2025 07:33:01 GMT</pubDate></item><item><title><![CDATA[Scikit-learn getting Started]]></title><description><![CDATA[The purpose of this guide is to illustrate some of the main features that scikit-learn provides. It assumes a very basic working knowledge of machine learning practices (model fitting, predicting, ...]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/scikit-learn-library.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/Scikit-learn Library.md</guid><dc:creator><![CDATA[[[+/scikit-learn]]]]></dc:creator><pubDate>Sat, 11 Jan 2025 15:02:10 GMT</pubDate></item><item><title><![CDATA[Linux n8n Installation_draft]]></title><description><![CDATA[sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc echo \ "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \ $(. /etc/os-release &amp;&amp; echo $VERSION_CODENAME) stable" | \ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo docker volume create n8n_data
sudo docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n
sudo apt install nginx
sudo nano /etc/nginx/sites-available/n8n
server { listen 80; server_name YOUR_DOMAIN_HERE; location ~ ^/(.*)$ { proxy_pass http://localhost:5678; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; chunked_transfer_encoding off; proxy_buffering off; proxy_cache off; }
}
sudo ln -s /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx
sudo docker run -it --rm --name n8n -p 5678:5678 -e WEBHOOK_URL="https://YOUR-DOMAIN-HERE/" -v n8n_data:/home/node/.n8n n8nio/n8n
sudo apt install ddclient
sudo nano /etc/
daemon=300
protocol=cloudflare
use=web
zone=YOUR_DOMAIN_HERE
login=token
password=Your_API_Token
YOUR_DOMAIN_HERE
sudo service ddclient restart
sudo docker run -it --rm --name n8n -p 5678:5678 -e WEBHOOK_URL="https://your-domain-here/" -v n8n_data:/home/node/.n8n -d n8nio/n8n
sudo docker ps -a # 컨테이너 리스트 확인
sudo docker stop n8n # 컨테이너 중지
sudo docker rm n8n # 컨테이너 삭제
]]></description><link>https://64etuor.github.io/500_resources/n8n/linux-n8n-installation_draft.html</link><guid isPermaLink="false">500_Resources/n8n/Linux n8n Installation_draft.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 11 Jan 2025 14:48:59 GMT</pubDate></item><item><title><![CDATA[Linux n8n Installation Guide]]></title><description><![CDATA[This guide provides step-by-step instructions to install and configure n8n on a Linux-based server using Docker and Nginx, including optional IP tracking using DDNS.Docker is required to run n8n as a containerized application.Run the following commands to update your package list and install prerequisites:sudo apt-get update
sudo apt-get install ca-certificates curl
Download and install Docker’s GPG key:sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
Add Docker’s official repository to your APT sources:echo \ "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \ $(. /etc/os-release &amp;&amp; echo $VERSION_CODENAME) stable" | \ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
Update your package list and install Docker:sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
Docker volumes are used to persist data outside of the container. Create a volume for n8n data storage:sudo docker volume create n8n_data
Run the n8n container with the following command:sudo docker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n n8nio/n8n --name: Specifies the container name as n8n.
-p 5678:5678: Maps port 5678 on the host to port 5678 on the container.
-v n8n_data:/home/node/.n8n: Uses the Docker volume for persistent storage.
Nginx will act as a reverse proxy to handle requests to your n8n instance.Install Nginx with:sudo apt install nginx
Edit the Nginx configuration file for n8n:sudo nano /etc/nginx/sites-available/n8n
Add the following configuration:server { listen 80; server_name YOUR_DOMAIN_HERE; location ~ ^/(.*)$ { proxy_pass http://localhost:5678; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; chunked_transfer_encoding off; proxy_buffering off; proxy_cache off; }
}
Link the configuration to the sites-enabled directory:sudo ln -s /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
Check for syntax errors:sudo nginx -t
Reload Nginx to apply the new configuration:sudo systemctl restart nginx
Run n8n with the webhook URL pointing to your domain:sudo docker run -it --rm --name n8n -p 5678:5678 -e WEBHOOK_URL="https://YOUR-DOMAIN-HERE/" -v n8n_data:/home/node/.n8n -d n8nio/n8n
For dynamic IPs, use a DDNS service to keep your domain updated with your server's public IP.sudo apt install ddclient
Edit the configuration file:sudo nano /etc/ddclient.conf
Add the following:daemon=300
protocol=cloudflare
use=web
zone=YOUR_DOMAIN_HERE
login=token
password=Your_API_Token
YOUR_DOMAIN_HERE
Restart the ddclient service:sudo service ddclient restart
To see all running and stopped containers:sudo docker ps -a
Stop the n8n container:sudo docker stop n8n
Remove the n8n container:sudo docker rm n8n
]]></description><link>https://64etuor.github.io/500_resources/n8n/linux-n8n-installation-guide.html</link><guid isPermaLink="false">500_Resources/n8n/Linux n8n Installation Guide.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 11 Jan 2025 14:48:31 GMT</pubDate></item><item><title><![CDATA[GitButler는 이제 Fair Source 입니다 | GeekNews]]></title><description><![CDATA[GitButler는 이제 Fair Source 운동의 첫 번째 회원 중 하나로, 기본적으로 폐쇄 소스를 공개 소프트웨어로 전환하는 데 기여함몇 달 전, GitButler는 GitHub에 클라이언트 소스 코드를 공개하여 모두가 사용하고 배우고 기여할 수 있게 함소스를 공개하기 전 몇 주 동안, GitButler 팀은 이를 어떻게 할지에 대해 많은 논의를 함사]]></description><link>https://64etuor.github.io/500_resources/오픈소스-개발/gitbutler는-이제-fair-source-입니다-geeknews.html</link><guid isPermaLink="false">500_Resources/오픈소스 개발/GitButler는 이제 Fair Source 입니다  GeekNews.md</guid><dc:creator><![CDATA[[[xguru]]]]></dc:creator><pubDate>Sat, 11 Jan 2025 14:36:09 GMT</pubDate></item><item><title><![CDATA[2025-01-11 오늘 잃은 것, 어릴 적 꿈]]></title><description><![CDATA[
"나는 오늘 __을(를) 잃었다. Today you lost ____." 나는 오늘 집중을 잃었다. 아침부터 무슨 드라마 정주행 하는 사람 모양으로 강의를 몰아 봤는데, 중간 중간 자리도 많이 비우고 기억에 남는 건 많이 없다. 영상보다 글자를 선호하는 사람이라 아무래도 책 읽으며 독학하는 게 취향에 맞다. 강제로 시청해야 하는 영상은 그래서 참 고역이다. 그러고 보면 왜 많은 부모들은 공부를 하기 싫어하는 애를 억지로 책상 앞에 앉히고 고문들을 하는 걸까? 아이는 그 고문 때문에 공부가 더 싫어질 텐데.
그냥 집중이 안되니까 주저리주저리. 어릴 때 꿈은 뭐야? 초등학교 다닐 무렵에는 프로그래머, 중학생 때는 없음, 고등학생 때는 국어 선생 겸 작가, 대학 때는 없음. 고시 볼 무렵에는 대통령. 그 이후로는 또 한동안 꿈이 없다가 지금은 좋은 부모가 되는 게 꿈이야.
암만 봐도 갈 수록 난이도가 더 어려워 지네.
오늘의 '생각을 자극'하는 글귀
"번아웃에 빠지지 않으려면 불필요한 일을 걸러내야 한다.
효율성을 높인다고 일상이 바로 서지 않는다. 책임을 줄여야 균형이 생긴다. 우선순위가 많을수록 밀려드는 일을 감당하기 어려워진다. 책임감에 짓눌려 당황하고 어쩔 줄 모르게 되는 것보다 적은 일을 잘 해내는 편이 좋다. 번아웃을 피하기 위해서는 불필요한 일을 걸러내야 한다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-11-오늘-잃은-것,-어릴-적-꿈.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-11 오늘 잃은 것, 어릴 적 꿈.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 11 Jan 2025 12:28:06 GMT</pubDate></item><item><title><![CDATA[7W - 02_확률과 확률변수]]></title><description><![CDATA[확률과 확률변수는 통계의 기초로, 불확실한 사건의 발생 가능성과 그 사건에 수치를 부여하는 방법을 학습한다.
정의: 랜덤한 실험에서 가능한 모든 결과의 집합.
예시: 동전을 두 번 던질 때, 표본공간 . 표본공간의 부분집합.
예시: 동전을 두 번 던져 앞면이 한 번 나올 사건 . 고전적 정의
사건 의 확률: 경험적 정의
실험을 여러 번 반복했을 때, 사건이 발생한 상대 빈도. 공리적 정의 확률은 0 이상 1 이하의 값: 전체 표본공간의 확률: 배반 사건의 합의 확률: . 여사건의 확률: 덧셈 법칙 (일반):
사건 와 가 배반 사건이 아닐 때: Example
두 개의 주사위를 던질 때,
: "합이 7",
: "적어도 하나가 6"의 확률을 계산. 사건 가 발생했을 때, 사건 가 발생할 확률: 사건 와 가 독립일 때: Example
주사위를 던질 때 : "1이 나옴", : "짝수가 나옴".
독립 여부 판단: 베이즈 정리는 기존 정보를 기반으로 사건의 확률을 갱신하는 방법을 제공한다. 사전확률 (): 사건 가 발생할 확률에 대한 초기 추정.
사후확률 (): 사건 가 발생한 정보를 반영한 의 갱신된 확률.
공식:
의학 테스트: 특정 질병에 대한 양성 반응이 나왔을 때 실제 질병 확률을 계산.
스팸 필터: 이메일이 스팸인지 여부를 판단.
Example
의학적 예제
질병 의 발병률()은 1%, 테스트 양성 반응이 질병이 있는 경우에 정확히 나타날 확률()은 95%, 질병이 없는 경우에도 테스트가 양성을 나타낼 확률()은 5%이다.
테스트 결과가 양성()일 때 실제 질병일 확률()을 계산하라. 풀이: 정의: 표본공간의 각 사건에 실수 값을 할당한 함수.
예시: 동전을 두 번 던질 때, 앞면의 수를 확률변수 로 정의 ().
Note 실수값 함수로 이해하도록 하자.
일정 확률을 가지고 발생하는 사건에 수치를 부여한다. → 함수로 사용하기 위해서 하는 작업. 정규 분포와 사람의 키에 대한 예시
사람의 키는 다양한 요인(유전, 환경 등)의 합으로 결정되며, 이러한 합의 결과로 정규 분포를 따르는 경향이 있다.
이는 중심극한정리에 의해 독립적인 랜덤 변수들의 합이 정규 분포로 수렴하기 때문이다.
또한, 키 데이터를 정규 분포로 모델링하면 평균과 표준편차로 전체 분포를 쉽게 설명할 수 있어 통계적 분석과 예측에 유리하다. 이게 확률분포를 적극적으로 사용하는 이유이다.
Note
Q. 이산 확률변수란?
: 확률변수 가 취할 수 있는 값의 집합(표본공간)이&nbsp;유한 집합(finite set)&nbsp;또는&nbsp;가산 무한집합(countably infinite set)에 속하는 확률변수 확률질량함수 (PMF: Probabily Math Function): 이산 확률변수의 각 값에 할당된 확률을 정의. <a href="https://64etuor.github.io?query=tag:pmf" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#pmf">#pmf</a> <br>확률밀도함수 (PDF: Probablity Density Function): <a href="https://64etuor.github.io?query=tag:pdf" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#pdf">#pdf</a>
- 연속 확률변수의 확률 분포를 나타냄. 특정 값의 확률은 0이며(연속 값 사이에는 무한히 많은 값이 존재하기 때문), 대신 구간에 대한 확률을 PDF를 적분한 값으로 계산.
- 자체는 특정 값에서의 “확률”이 아니라, 그 값에서의 “확률 밀도”를 나타냄. 따라서 이를 적분해서 구간 전체의 확률을 계산. Q. 그럼 확률은 어떻게 구하는가?
: PDF를 적분하여 CDF를 계산 <br>
누적분포함수 (CDF, Cumulative Distribution Function) <a href="https://64etuor.github.io?query=tag:cdf" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#cdf">#cdf</a> 확률변수 가 특정 값 이하가 될 확률을 나타냄.
정의: 는 CDF. 는 PDF. 는 적분 변수. 구간 확률 계산 (Probability for an Interval): CDF로 구간 확률 계산. 구간 에서 확률은 CDF 차이로 계산. 특징: 는 을 만족. 는 가 증가하면 증가. 누적된 확률로 표현. 적분으로 매끄럽고 연속적인 함수가 됨. 예시: 정규분포를 따르는 확률변수 에서 을 구함. 과 에서의 CDF 값을 빼서 계산. 이산 확률변수:
연속 확률변수:
확률변수 $X$가 $[l, u]$ 구간의 모든 값을 취하고 $X$의 확률밀도함수가 $f(x)$일 때, 기대값의 성질: 는 상수이고 는 확률변수 이산확률변수: 연속확률변수: (단, 독립가정의 경우 는 사라짐.) 강의 노트 정리
추가 자료 조사 배운 점: 확률과 확률변수는 다양한 분야에서 활용되며, 베이즈 정리는 특히 조건부 확률의 이해에 필수적이다.
느낀 점: 이걸 어떻게 활용할 지 생각이 안 떠오른다는 건 내가 이해를 못 했다는 뜻이다. 어떻게 쓰는 지 예시가 없으니 잘 이해가 안된다.
다음 목표: 사례 중심으로 한 번 노트를 정리해 봐야 겠다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/7w-02_확률과-확률변수.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/7W - 02_확률과 확률변수.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 02 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Execution Policy]]></title><description><![CDATA[+ CategoryInfo : 보안 오류: (:) [], PSSecurityException
+ FullyQualifiedErrorId : UnauthorizedAccess Powershell 실행 정책 확인: Get-ExecutionPolicy
실행 정책 변경: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
실행 정책 Scope별 확인: Get-ExecutionPolicy -List
실행 정책 기본 설정 복원: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Restricted
]]></description><link>https://64etuor.github.io/600_tech-stack/powershell/execution-policy.html</link><guid isPermaLink="false">600_Tech Stack/PowerShell/Execution Policy.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 11 Jan 2025 00:43:21 GMT</pubDate></item><item><title><![CDATA[241228 - 믿으면 병신이 되는 사회]]></title><description><![CDATA[너희들은 역사 깊은 연좌제의 값으로
정열을 치르고 거슬러 받은 잔돈만으로
흙냄새 맡으며 시작한 인생이다.갑갑한 몸뚱어리를 정 벗지 못하겠거든
대저 혼을 남에게 위탁하여 두고
한물간 영화의 배우처럼 살다가
비단 삶이 그처럼 연기(演技)와 같고, 또 연기(煙氣)와 같다 깨달았을 적에
눈물 흐르는 게야 정 네 고유한 권리의 눈물도 아니 되어서,
그 세상은 여보란듯 장마가 오도록 천지가 다 울어 제낄 마당이니
오는 것은 정녕 물벼락이라도 좋다 하며
사람이 일찍이 번성한데는 다 이런 진리가 있었던 줄 모르고
너희는 왜 서로를 안아줄 줄을 모르느냐?아니, 이제보니 너희는 나중에 혼을 도로 담을 그릇에
어찌 그리 무거운 돌들을 담아 놓았나
몸이 무거워 남을 안아 주지 못하고
가고자 하는 방향으로 걷질 못하니,
너희들은 그제야 맡겨 두었던 혼을 떠올릴 것이다.그러나 위탁한 모든 것은 엉뚱한 곳으로 가게 되는 것이고
기필코 마지막 희망처럼 엉금엉금 혼을 인출하러 나선 길,
사사로운 희망을 품어 네 순수했던 영혼에 복리로 이자가 붙길 바랐다면,정녕 복리로 붙긴 붙었으나 그게 당신이 바란 이자일 거라 장담을 못하겠습니다.
혼(魂)을 맡겼으니 마땅히 혼을 내주는 것이 유서 깊은 자본주의 신용 사회 아니겠습니까.인류 전성기라 불리는 이 시대의 타이틀은 아무렴
“믿으면 병신이 되는 사회”여야 옳다.]]></description><link>https://64etuor.github.io/900_writings/poems/241228-믿으면-병신이-되는-사회.html</link><guid isPermaLink="false">900_Writings/Poems/241228 - 믿으면 병신이 되는 사회.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 12:02:54 GMT</pubDate></item><item><title><![CDATA[Charter]]></title><description><![CDATA[
Project Title: 기록 관리 Motivation
Project Background: 기록 관리를 지속적으로 할 수 있도록 동기 부여할 수 있는 시스템의 필요성을 느꼈다.
Project Objective: 기록 관리 앱을 지속적으로 사용하기 위한 구체적인 동기 부여 방법을 설계하고 나의 기록 관리 시스템에 적용
Project Duration: 14d
Project Manager: 박양하
Project Sponsor:
Communication: Management Rule: 1주 단위 스프린트를 구성하고 문서 관리는 Obsidian으로 진행한다.
2025-01-06 ~ 2025-01-12: 자료 수집
2025-01-13 ~ 2025-01-20: 시스템 설계 및 적용
2025-01-26 ~ 미정: 시스템 고도화박양하 / 개인 프로젝트 Quick Links
]]></description><link>https://64etuor.github.io/500_resources/시간-기록-관리-motivation/charter.html</link><guid isPermaLink="false">500_Resources/시간 기록 관리 Motivation/Charter.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:39:16 GMT</pubDate></item><item><title><![CDATA[부트캠프 정리]]></title><description><![CDATA[
기관명: 더조은컴퓨터
후기: 좋은 편
링크: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://kn.tjoeun.co.kr/front/systemguide/2024kdigital/" target="_self">https://kn.tjoeun.co.kr/front/systemguide/2024kdigital/</a> <br><img alt="Pasted image 20250104140614.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104140614.png" target="_self">
<br><img alt="Pasted image 20250104140627.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104140627.png" target="_self"> 프론트엔드(React) 위주 + AI 활용 과정
2025년도 개설로, 최신 기술 스택과 실무 사례가 반영될 가능성 높음
더조은컴퓨터는 다년간 교육을 운영해 왔으며, 수강생 후기 대체로 양호 이미 React 사용 경험이 있다면, AI 모델과의 데이터 연동 로직, 고급 상태 관리, 성능 최적화 등을 더 심화해서 학습 가능
프로젝트 기반 교육으로, 실무에서 바로 활용할 수 있는 엔터프라이즈급 프론트엔드 아키텍처를 실습할 수 있음
더조은컴퓨터의 풍부한 운영 경험 덕에 프로젝트 지원(멘토링, 실무 코칭 등)이 안정적일 가능성 높음 프론트엔드에 특화된 과정이라, 백엔드·AI 인프라 수준의 통합 학습은 제한적일 수 있음
이미 React 숙련도 높은 경우, 일부 커리큘럼이 기존 지식과 겹칠 수 있어 기대하는 만큼의 심화 학습이 제공되지 않을 수도 있음 기관명: 더조은컴퓨터
후기: (상세 후기 정보 미표기) <br><img alt="Pasted image 20250104144900.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104144900.png" target="_self"> 생성형 AI와 백엔드 아키텍처 심화 과정
실전 프로젝트를 통해 대규모 트래픽 처리, 서버 인프라, AI 서비스 연동 등을 학습
2기 과정으로, 어느 정도 운영 경험이 쌓인 상태 생성형 AI 모델을 서비스에 적용하며, API 설계나 확장성 있는 백엔드 구조를 배울 수 있음
기존에 백엔드 경험이 있다면, 고난이도 트래픽 처리나 애플리케이션 성능 최적화 등의 심화 내용을 습득하기에 적합
2기 과정으로, 첫 기수에서 발생한 운영 이슈가 어느 정도 보완되었을 가능성 높음 생성형 AI 모델 구현이나 데이터 파이프라인 경험이 없다면, 짧은 시간 내에 학습량이 많을 수 있음
프로젝트 성격상 비즈니스 측면(예: 데이터 수집, 사용자 요구사항 분석 등)도 포함되므로, 순수 기술만 원하는 경우엔 다소 분산된 학습이 될 수 있음 기관명: 플레이데이터
후기: 좋은 편
<br>링크: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://boottent.com/camps/swcamphanwha-web_20241230165416" target="_self">https://boottent.com/camps/swcamphanwha-web_20241230165416</a> <br><img alt="Pasted image 20250104150459.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104150459.png" target="_self">
<br><img alt="Pasted image 20250104143428.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104143428.png" target="_self"> 한화시스템과의 협업으로 진행되는 SW캠프
실무 프로젝트, 기업 연계 프로젝트 가능성 높음
플레이데이터는 대체로 실무형 프로젝트에 집중하는 교육 운영 기업 연계 프로젝트에서 현업 수준 요구사항을 다룰 수 있어, 실제 엔터프라이즈 환경을 체험 가능
플레이데이터의 프로젝트 중심 수업 방식과 결합되어, 포트폴리오를 더욱 탄탄하게 만들기 쉬움
후기 평가가 좋으므로, 멘토링, 테크 리드 등 강사진 역량이 어느 정도 검증됨 기관명: 중앙HTA
후기: 좋은 편 <br><img alt="Pasted image 20250104144316.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104144316.png" target="_self">
<br><img alt="Pasted image 20250104144421.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104144421.png" target="_self"> Java 기반 백엔드 핵심 기술 습득 + 클라우드 Docker 배포 교육
DevOps, 클라우드 인프라 일부까지 커리큘럼에 포함
중앙HTA는 오랜 기간 Java 교육을 진행해온 기관 이미 Java 기초가 있다면, 대규모 애플리케이션 설계와 배포 자동화(CI/CD) 등으로 스킬을 확장할 수 있음
Docker와 클라우드에 대한 이해도가 더해지면, 배포·운영 능력까지 갖출 수 있어 풀스택에 가까운 역량 가능
중앙HTA의 교육 노하우와 자료가 잘 축적되어 있으므로, 심화 질문이나 케이스 스터디도 받을 수 있음 Java 생태계 외의 다른 언어·프레임워크(Node.js, Python, Go 등)에 대한 학습은 상대적으로 제한적
이미 Java와 기본적인 배포 경험이 많은 경우, 기대하는 수준의 심화 내용(예: 고급 아키텍처, 분산 시스템 설계 등)이 다뤄지지 않을 수도 있음 기관명: 더조은컴퓨터 구로
후기: (상세 후기 정보 미표기)
프로젝트 구성이 마음에 듦 <br><img alt="Pasted image 20250104150440.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104150440.png" target="_self">
<br><img alt="Pasted image 20250104150244.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104150244.png" target="_self">
<br><img alt="Pasted image 20250104150220.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250104150220.png" target="_self"> AWS 클라우드 환경에서 자바, 스프링, 리액트, 코틀린 등 풀스택 기술 학습
지역 산업 기반 프로젝트를 진행하여 지역 특화 서비스 개발 가능
5기로 운영 경험이 누적되어, 커리큘럼 및 운영 체계가 안정적일 가능성 높음 이미 웹 개발 경험이 있다면, AWS 인프라 활용 + 코틀린을 함께 익혀 멀티 스택 역량을 강화할 수 있음
프로젝트 구성이 알차면, 실제로 AWS Lambda, CloudFormation 등 고급 기능까지 체험 가능할 수도 있음
5기 과정이라, 기존 피드백을 바탕으로 실무와 밀접한 업데이트가 이루어졌을 것으로 기대 다수의 언어와 프레임워크를 동시에 익히므로, 어느 한 분야를 깊이 파기보다 폭넓게 학습하는 편에 가까움
이미 Java/React/AWS 경험이 깊다면, 코틀린이나 특정 AWS 서비스 외에는 신규 학습 여지가 제한될 수도 있음 장점 대부분 실무 프로젝트 중심 → 프로젝트 수료 후 포트폴리오 경쟁력 향상
취업 연계 또는 기업 협업 프로젝트 가능 → 네트워크 형성 및 실제 서비스 운영 경험
최신 트렌드(AI, 클라우드, DevOps 등) 반영 → 이미 기본기를 갖춘 상태에서 스킬 확장 용이 단점 단기간에 다양한 기술을 습득 → 학습 분량이 많을 수 있고, 특정 분야의 심도 있는 연구가 부족할 수 있음
교육 기관별 커리큘럼 편차가 크므로, 원하는 수준(고급 백엔드, 대규모 트래픽, 고급 AI 모델 등)을 정확히 제공하는지 사전 확인 필요
기업 연계 과정은 경쟁률이 높아, 선발 과정에서 추가 준비(코딩 테스트, 인터뷰 등)가 필요할 수 있음 AI 심화: 더조은컴퓨터(생성형 AI 백엔드 아키텍처) → 백엔드 확장 및 고성능 서버 구축 역량
메가넥스트(웹 서비스) → 프론트-백 연계 AI 서비스 개발 역량 백엔드 아키텍처/클라우드: 중앙HTA(Java, Docker, Cloud) → 탄탄한 Java 기반 + 배포 자동화에 집중
더조은컴퓨터 구로(AWS 풀스택) → 멀티 스택 + AWS 인프라에 대한 이해도 상승 프로젝트: 한화시스템 Beyond SW캠프(플레이데이터) → 기업 연계 실무 경험 및 협업 프로젝트 강화 프론트엔드 &amp; AI 융합: 더조은컴퓨터(React + AI) → 프론트엔드 심화와 AI 활용 접목 ]]></description><link>https://64etuor.github.io/500_resources/00_achieves/부트캠프-정리/부트캠프-정리.html</link><guid isPermaLink="false">500_Resources/00_Achieves/부트캠프 정리/부트캠프 정리.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:37:42 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250104140614.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250104140614.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2025-01-09 오늘은 평범했나, 내가 가진 특별한 능력]]></title><description><![CDATA[
"오늘은 평범한 하루였는가? 그렇거나 그렇지 않은 이유는? Was today typical? Why or why not?" " 새로운 도전을 위해 여러가지 자료를 정리하고 책을 읽고 하다 보니 밖이 어두워 졌다. 내일 아침 해를 보려면 또 이 밤을 견뎌야 한다는 사실이 퍽 반갑지 않고, 매일 똑같은 밤인 듯 하면서도 늘 낯설다. 지구가 공전하는 탓인가 많이들 인생을 쳇바퀴에 비유하지만, 2025년 1월 9일은 2026년 1월 9일에 되돌아 오는 게 아니다. 눈에 잘 보이지도 않는 각질처럼 떨어져 나가 영영 되찾지 못할 그 시간들이 아쉬워서, 아마 사람들은 그래서 기록을 하지 않을까 생각한다. 이 보통의 날들은 적어도 본인들에게만큼은 전혀 평범하지 않은 것들이니까.
그래서 나도 오늘도 내 특별한 일상을 기록했다. 내 하루는 항상 소중하고 특별하니까! 네가 가진 특별한 능력은 뭐야? 사람 냄새를 잘 맡는 거 같아. (내 기준에서) 좋은 사람인지, 그렇지 않은 사람인지. 왜 이걸 냄새라고 표현하는지는 나도 잘 모르겠는데 어느새부턴가 이렇게 얘기하는 습관이 들었어.
자칫하면 편견이 될 수도 있어서 굳이 표를 내는 편은 아닌데, 아직까지 그런 예감이 틀린 적은 없네.
오늘의 '생각을 자극'하는 글귀
인생에 후회를 남기지 않으려면 적당한 위험은 감수해야 한다.
커리어를 쌓고 싶다면 위험을 피하는 대신 관리해야 한다. 커리어를 주식 포트폴리오라고 생각하자. 수익률이 높을수록 위험도 커진다. 너무 안전한 배팅만 하고 있다면, 균형을 맞출 필요가 있다. 나중에 뒤돌아보았을 때 위험을 감수하지 않은 것이 인생의 가장 큰 후회로 남을 수 있다. "
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-09-오늘은-평범했나,-내가-가진-특별한-능력.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-09 오늘은 평범했나, 내가 가진 특별한 능력.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:53 GMT</pubDate></item><item><title><![CDATA[2025-01-08 올해 목표를 잘 지키고 있는지, 난 스스로에게 친절한 사람인지]]></title><description><![CDATA[
올해 목표를 오늘까지 잘 지키고 있는가? 이 호랑말코같은 자식아 목표를 작심삼일은 커녕 하루도 못 지키고 나자빠져 가지고, 아주 그냥 레그 프레스 사이에 끼워서 2만번 접었다 폈다 반죽을 만들어 버리고 싶네. 술 좀 작작 쳐먹어라, 아주 뭔 술 못 먹고 죽은 귀신이 붙어서 저녁만 되면 쪼로록 편의점에 달려가서~ 너 술 사는 꼬라지를 보면 그냥 니가 이하늬의 한숨 그 잡채야. 건강도 생각해야 되고 앞으로 할 일이 많은데, 또 이래~ 잔소리하면 “황순원 선생님도 평생 매일 하루에 소주를 한 병 드셨다. 그러고도 90세까지 장수하셨다.”라고 답도 없는 변명을 하겠쥬? 그런데 술을 안 드셨으면 더 오래 사셨을지는 아무도 모르쥬? 할 말 없쥬? 아주 그냥 구멍이 슝슝난 연탄 쪼가리 논리쥬? 이러고도 술을 또 먹으면 사람 아니쥬? 너는 너에게 친절한 사람이야? 나는 나한테 그만 친절해야 돼. 날 너무 오랜 시간 용납해 왔어. 잘못된 것을 고쳐야 겠어. 바로 지금 이 순간부터.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-08-올해-목표를-잘-지키고-있는지,-난-스스로에게-친절한-사람인지.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-08 올해 목표를 잘 지키고 있는지, 난 스스로에게 친절한 사람인지.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:51 GMT</pubDate></item><item><title><![CDATA[2025-01-07 운이 좋은 편인지, 다시 돌아가고 싶은 날]]></title><description><![CDATA[
"나는 운이 좋은 편이라고 생각하는가? Do you think you're lucky? How so?" 굳이 분류를 하자면, 상대적으로 나쁜 편이 아닌가 싶다. 모든 일의 결과를 운의 탓으로 매도하기도 어렵지만, 그럼에도 불구하고 객관적으로 운이 안 좋았다라는 말 외에 다른 위안의 말을 찾기 어려운 일이 꽤나 많으니까. 다만 운에 대해서 그다지 신경은 쓰지 않는 편인데 운을 탓할 시간과 정성을 아껴서, 좀 더 “Remarkable”한 결과를 만드는데 투자하는 게 훨씬 현명하다고 생각하기 때문이다. 운이 저절로 따르지 않으면, 운이 나를 따를 수 밖에 없게 만들면 되는 일이다.
큰 시련이 있었을 때, 큰어머니가 말하셨다.
”하나님이 널 큰 사람으로 만들려고 자꾸 시련을 주시는 거다.”
여러 번 그 얘기를 곱씹었고, 시련이 있을 적엔 더욱 이 말을 떠올렸다.
뭐, 이상하게 아무리 다시 키를 재봐도, 1cm도 자라지 않긴 했지만. 다시 돌아가고 싶은 과거의 날은 언제야? 그날로 돌아가서 바꾸고 싶은 게 있어? 2003년 9월 8일 새벽 6시, 기차역에 바래다 주신 엄마한테 졸음 때문에 잔뜩 골을 내면서 말 한 마디 없이 헤어진 날의 그 순간,
아무 문맥도 서사도 없이 그냥 사랑한다고 말할 거야.
오늘의 '생각을 자극'하는 글귀
우리가 가장 두려워해야 하는 것은 자신과의 약속을 어기는 일이다.
우리는 타인에게 실망을 주면 큰 죄책감을 느끼지만, 자신을 실망시키는 것은 두려워하지 않는다. 다른 사람의 기대에 부응하는 것은 우리 통제 밖의 일이다. 하지만 나의 기대치는 스스로 정할 수 있다. 우리가 가장 중요한 약속은 자신과의 약속이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-07-운이-좋은-편인지,-다시-돌아가고-싶은-날.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-07 운이 좋은 편인지, 다시 돌아가고 싶은 날.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:50 GMT</pubDate></item><item><title><![CDATA[2025-01-06 오늘이 힘들었던 이유, 갖고 싶은 것]]></title><description><![CDATA[
"오늘 하루(또는 어제)가 힘들었던 이유는 _ (이)다. Today (or yesterday) was tough because ___." 어제가 힘들었던 이유는 술 때문이다. 아주 질리지도 않고 마신다. 이래저래 복잡한 상황인 걸 핑계로 매일 저녁 술을 마신다. 마음의 위안을 얻을 다른 활동을 지금부터 찾아봐야겠다. 어제 저녁을 먹으면서 그새를 못 참고 술을 마셨다. 그러다가 세컨드 브레인 북클럽 화상 모임 시간이 되서 부랴부랴 참석했다. 난 기록 관리 앱과 대시보드에 대한 소개를 했는데 술기운에 횡설수설하니 정리되지 않은 모습이 참 가관도 아니었다.
당분간 책을 읽으면서 마음을 다 잡자! 요즘 가장 갖고 싶은 건 뭐야? 딱히 갖고 싶은 건 없는데 굳이 하나를 고르자면 서버용 컴퓨터를 살까 생각중이다. 로컬LLM 및 RPA 서버를 만들어서 완벽하게 개인화된 클라우드 서버를 하나 갖자는 목표인데 사실 아직까진 큰 사용 용도가 없어서 미루고 있다. routing과 chain of thoughts를 적절히 조합하면 상대적으로 성능이 부족한 Llama로도 꽤 그럴듯한 아웃풋을 내줄 거란 기대가 있다. 계획하고 있던 BtoC 사이드 프로젝트가 어느 정도 구체화되고 웹앱에 에이전트로 붙여주면 환상적이지 않을까 싶다.
오늘의 '생각을 자극'하는 글귀
당신에게 중요한 가치는 무엇인가. 자신의 이상이 담긴 생각을 공유하라.
진정성이란 자신의 의견을 전부 표현하는 것이 아닌, 자신이 소중히 여기는 가치가 반영된 소리를 내는 것이다. 존중과 친절이 당신에게 중요한 가치라면, 솔직함을 무기로 경멸과 비난을 담아 말해선 안 된다. 생각은 자신의 이상을 담고 있을 때 공유할 가치가 있다."
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-06-오늘이-힘들었던-이유,-갖고-싶은-것.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-06 오늘이 힘들었던 이유, 갖고 싶은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:48 GMT</pubDate></item><item><title><![CDATA[2025-01-05 최근 방문 식당, 좋아하는 가사]]></title><description><![CDATA[1.&nbsp; "가장 최근에 방문한 식당은? 무엇을 먹었는가? What was the last restaurant you went to? What did you have there?" 최근에 집에만 있다 보니 외식할 일이 많이 없다. 몇 주 전엔가 친구와 청주의 백로식당을 갔다. 파는 음식은 한방양념불고기 하나 뿐이다. 강원도 춘천에 있던 지점에서 이 식당을 다니기 시작해서 햇수로 따지면 벌써 24년째. 그 동안 지점들이 문을 닫으면서 춘천, 천안, 청주 본점까지 본의 아닌 원정을 다니게 되었으나, 이제는 제법 익숙해져서 먼 길 가는 게 그다지 꺼려지지도 않는다. 아니, 어쩌면 그 먼 길을 가는 동안 내가 백로식당을 좋아한다는 사실을 되새기며 애정이 더욱 깊어졌는지도.
사랑에도, 관계에도 연출이 필요하다는 얘기를 들었다. 마치 자를 대고 깎은 원칙처럼 효율을 따지던 사람이다 보니 그깟 효율을 좇자고 그동안 사람들에게 잘못한 일들이 많이도 떠오른다.
“거리가 머니까 나중에 만나자.”
그렇게 말하곤 하던 오랜 시간동안,
사람들과 나의 관계도,
딱 그만큼 멀게 됐으리라. 좋아하는 노래 가사가 있어? 너무 많아서 하나만 꼽기가 어렵다. 김광석이 다시 부른 민중가요의 가사들을 특히 좋아했고, 황혼의 문턱이나 Nella Fantasia를 처음 들었을 땐 눈물을 주체하지 못해서 남들 앞에서 광광 울었다. Michael Jackson의 Heal the world는 시간이 지나도 항상 똑같은 감동을 주고, The feeling의 Sewn을 들었을 땐 말 그대로 넋이 나갔다. LP의 Lost on you를 들었을 때의 충격은 여전히 생생하다. Pumas의 Colors를 듣고는 항상 비워 놓던 카톡 프로필에 All my favourite colours라는 멋진 문구를 여지껏 달아 놓고 있다.
좋은 노래는, 참 좋은 시고, 참 좋은 시는 참 좋은 노래인 듯 하다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-05-최근-방문-식당,-좋아하는-가사.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-05 최근 방문 식당, 좋아하는 가사.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:47 GMT</pubDate></item><item><title><![CDATA[2025-01-04 결별하고 싶은 것, 요새 만나는 사람]]></title><description><![CDATA[
내 삶에서 가장 결별하고 싶은 것은? Is there something you want to discard in your life?
나의 아주 오래된 단짝과 결별하고 싶다. 우린 너무 자주 만난다.
”네 덕에 힘든 시간을 버텼지만, 너와 이런 식으로 매일 만나면 나중엔 너 때문에 힘든 시간을 보낼 거 같아.”
매일 같이 이렇게 말하고 싶지만, 매일 같이 맘이 약해져서 또 만나러 가는 일의 반복.
결국 끝엔 파멸 밖에 없다는 걸 알면서도 그놈의 인연이 무엇인지, 정이 무엇인지.가야 할 때가 언제인가를 분명히 알고 가는 이의 뒷모습은 얼마나 아름다운가.봄 한철 격정을 인내한 나의 사랑도 이제야말로 저물 때가 되었다.올해는 꼭 말할 것이다.
”이슬아, 우리 헤어져.”요즘 누구와 가장 많은 시간을 보내고 있어? 너를 편하게 만드는 사람이야?이슬이. 같이 놀 땐 편한데 다음 날이 안 편하다.]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-04-결별하고-싶은-것,-요새-만나는-사람.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-04 결별하고 싶은 것, 요새 만나는 사람.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:45 GMT</pubDate></item><item><title><![CDATA[2025-01-02 사람은 변하는가, 기분이 좋아지는 방법]]></title><description><![CDATA[
사람은 변할 수 있을까? Can people change? 변하지 않는 것은 없다. 우리가 일반적으로 사람은 변하지 않는다고 할 때 대게 의도하는 건 사람의 기질이나 성격이 변하지 않음을 뜻할 텐데, 이 또한 옳다고 보지 않는다. 사람은 정적인 존재가 아니다. 사람은 끊임없이 환경과 타인, 그리고 기타 측정할 수 없을 만큼 다양한 변수들과 상호작용하면서 카멜레온처럼 몸의 색깔을 바꾼다. 그 정도가 눈에 띄거나, 눈에 띄지 않을 정도로 미미하단 양적 차이만 있을 뿐. 그렇다면 여기서 주목해야 할 점은 그 다양한 변수들 중에 “눈에 띄는 변화”를 이끌어 낸 사람들의 결정적 계기가 무엇이냐는 문제다. 그런데 여기서 그 계기를 독립적인 몇 개의 변수로 모형화하는 게 가능할까? 라는 질문이 따라온다.
사라예보에 총성이 울려 퍼진 날, 세상은 급변했다. 그러나 그 총의 Trigger가 그 모든 대사건의 단독적인 Trigger가 된 것은 아니다. 모든 사건에는 배경이 있다. 그리고 사건과 마찬가지로 사람의 변화에도 수많은 상호작용이 필요하다.
우선은 반응성이다. 아무리 좋은 지식이 넘쳐 나는 세상이라도 스스로 배울 의지가 없으면, 그 모든 지식에 대한 반응성의 계수는 0에 수렴한다. 그러나 의지와 능력을 함양한 사람에게 그 계수는 1일 수도, 2일 수도 있으며 지식간의 화학 작용으로 그 가치를 배가할 수도 있다.
그리고 환경, 정확히는 물리적인 환경 뿐 아니라 정서적인 환경, 종교적 환경 등 사람의 정신에 영향을 줄 수 있는 모든 환경적 요인을 포함한 그 환경이다.
(다음에 계속…) 네 기분을 좋아지게 하는 가장 빠른 방법은? 아기들을 보면 절로 웃음이 난다. 아이들이 너무 좋아서 입시 때 유아 교육학과에 지원한 적이 있다. 뭐, 면접날을 까먹고 안 가서 떨어지긴 했지만.
Anyway,
아기가 좋은 이유를 누군가가 묻는다면 아무래도 설명을 잘 못하겠다. 그리고 가만히 생각해 보면 이게 대체로 “좋은 것들의 속성”이다.
좋은 건, 그 이유를 찾기 위해 극성스레 의심을 하고 파고들 필요가 전혀 없다. 때로 세상에는 모름으로써 완성되는 것들이 있는 법이다.
그러니 사람들아, 연인의 ex에 대한 어리석은 질문을 하지 말라.
오늘의 '생각을 자극'하는 글귀
내향인은 사회성이 부족한 게 아니라 고요함을 즐기는 사람일 뿐이다.
내향인을 판단하는 기준은 에너지를 어디에서 얻느냐가 아니다. 자극을 다루는 방법에 있다. 내향인도 사람들과의 관계에서 에너지를 얻는다. 시끄러운 모임, 너무 친한 척하는 사람들, 끊임없이 밀려 드는 손님을 맞이하는 일에 쉽게 지칠 뿐이다. 내향인은 사회성이 부족한 사람이 아니다. 그저 고요함을 즐기는 사람이다.
]]></description><link>https://64etuor.github.io/700_studies/2501-2502-한달-노트-챌린지/2025-01/2025-01-02-사람은-변하는가,-기분이-좋아지는-방법.html</link><guid isPermaLink="false">700_Studies/2501-2502 한달 노트 챌린지/2025-01/2025-01-02 사람은 변하는가, 기분이 좋아지는 방법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 11:31:40 GMT</pubDate></item><item><title><![CDATA[Windows 필수 프로그램 정리]]></title><description><![CDATA[
<a data-tooltip-position="top" aria-label="https://apps.microsoft.com/detail/9n7r5s6b0zzh?hl=ko-kr&amp;gl=KR" rel="noopener nofollow" class="external-link is-unresolved" href="https://apps.microsoft.com/detail/9n7r5s6b0zzh?hl=ko-kr&amp;gl=KR" target="_self"><strong></strong></a>MyAsus
노트북 관리 및 최적화를 위한 ASUS 전용 소프트웨어.
<br><a data-tooltip-position="top" aria-label="https://rog.asus.com/laptops/rog-zephyrus/rog-zephyrus-g14-2022-series/helpdesk_download/" rel="noopener nofollow" class="external-link is-unresolved" href="https://rog.asus.com/laptops/rog-zephyrus/rog-zephyrus-g14-2022-series/helpdesk_download/" target="_self"><strong></strong></a>GA402RK 드라이버
ASUS Zephyrus G14 드라이버 다운로드.
<br><a data-tooltip-position="top" aria-label="https://www.amd.com/ko/support/download/drivers.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.amd.com/ko/support/download/drivers.html" target="_self"><strong></strong></a>AMD Driver
AMD 그래픽 및 칩셋 드라이버 다운로드 페이지.
<br><a data-tooltip-position="top" aria-label="https://github.com/seerge/g-helper" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/seerge/g-helper" target="_self"><strong></strong></a>G-helper
ASUS 노트북의 팬 속도 및 전력 설정 관리. <br><a data-tooltip-position="top" aria-label="https://www.google.com/chrome" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.google.com/chrome" target="_self"><strong></strong></a>Google Chrome
속도와 확장성이 뛰어난 브라우저.
<br><a data-tooltip-position="top" aria-label="https://www.mozilla.org/ko/firefox/new/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.mozilla.org/ko/firefox/new/" target="_self"><strong></strong></a>Firefox
개인 정보 보호 중심의 브라우저. <br><a data-tooltip-position="top" aria-label="https://learn.microsoft.com/ko-kr/sysinternals/downloads/zoomit" rel="noopener nofollow" class="external-link is-unresolved" href="https://learn.microsoft.com/ko-kr/sysinternals/downloads/zoomit" target="_self"><strong></strong></a>Zoomit
화면 확대 및 주석 작성 도구. <br><a data-tooltip-position="top" aria-label="http://x.photoscape.org/" rel="noopener nofollow" class="external-link is-unresolved" href="http://x.photoscape.org/" target="_self"><strong></strong></a>PhotoScape X
이미지 편집 및 디자인 소프트웨어.
<br><a data-tooltip-position="top" aria-label="https://www.figma.com/downloads/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.figma.com/downloads/" target="_self"><strong></strong></a>Figma Desktop
UI/UX 디자인 도구.
<br><a data-tooltip-position="top" aria-label="https://www.framer.com/downloads/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.framer.com/downloads/" target="_self"><strong></strong></a>Framer Desktop
웹 및 인터랙션 디자인 도구. <br><a data-tooltip-position="top" aria-label="https://www.python.org/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.python.org/" target="_self"><strong></strong></a>Python
프로그래밍 언어 Python 공식 다운로드.
<br><a data-tooltip-position="top" aria-label="https://code.visualstudio.com/download" rel="noopener nofollow" class="external-link is-unresolved" href="https://code.visualstudio.com/download" target="_self"><strong></strong></a>VSCode
오픈소스 코드 에디터.
<br><a data-tooltip-position="top" aria-label="https://www.cursor.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.cursor.com/" target="_self"><strong></strong></a>Cursor AI
AI 기반 코드 생성 도구.
<br><a data-tooltip-position="top" aria-label="https://codeium.com/windsurf" rel="noopener nofollow" class="external-link is-unresolved" href="https://codeium.com/windsurf" target="_self"><strong></strong></a>Windsurf
AI로 코드 편집을 지원하는 도구.
<br><a data-tooltip-position="top" aria-label="https://github.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/" target="_self"><strong></strong></a>GitHub Desktop
GitHub 관리용 데스크톱 앱.
<br><a data-tooltip-position="top" aria-label="https://git-scm.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://git-scm.com/" target="_self"><strong></strong></a>Git Bash
Git 명령어를 실행하는 터미널 도구.
<br><a data-tooltip-position="top" aria-label="https://www.docker.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.docker.com/" target="_self"><strong></strong></a>Docker
컨테이너 기반 가상화 플랫폼. <br><a data-tooltip-position="top" aria-label="https://dev.mysql.com/downloads/" rel="noopener nofollow" class="external-link is-unresolved" href="https://dev.mysql.com/downloads/" target="_self"><strong></strong></a>MySQL
관계형 데이터베이스 관리 시스템.
<br><a data-tooltip-position="top" aria-label="https://www.postgresql.org/download/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.postgresql.org/download/" target="_self"><strong></strong></a>PostgreSQL
오픈소스 관계형 데이터베이스 시스템. <br><a data-tooltip-position="top" aria-label="https://msty.app/" rel="noopener nofollow" class="external-link is-unresolved" href="https://msty.app/" target="_self"><strong></strong></a>msty
AI 기반의 텍스트 생성 및 분석 도구. <br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/ko-kr/power-platform/products/power-bi/desktop" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.microsoft.com/ko-kr/power-platform/products/power-bi/desktop" target="_self"><strong></strong></a>Power BI Desktop
데이터 분석 및 시각화 도구.
<br><a data-tooltip-position="top" aria-label="https://www.tableau.com/products/public/download" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.tableau.com/products/public/download" target="_self"><strong></strong></a>Tableau
데이터 시각화 전문 도구. <br><a data-tooltip-position="top" aria-label="https://store.steampowered.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://store.steampowered.com/" target="_self"><strong></strong></a>스팀
게임 구매 및 관리 플랫폼.
<br><a data-tooltip-position="top" aria-label="https://store.epicgames.com/en-US/" rel="noopener nofollow" class="external-link is-unresolved" href="https://store.epicgames.com/en-US/" target="_self"><strong></strong></a>에픽 게임즈
게임 다운로드 및 관리 플랫폼.
<br><a data-tooltip-position="top" aria-label="https://ds4-windows.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://ds4-windows.com/" target="_self"><strong></strong></a>DS4Windows
게임 컨트롤러 윈도우 지워 <br><a data-tooltip-position="top" aria-label="https://www.millie.co.kr/v3/customer/download?nav_hidden=y" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.millie.co.kr/v3/customer/download?nav_hidden=y" target="_self"><strong></strong></a>밀리의 서재
전자책 구독 서비스. <br><a data-tooltip-position="top" aria-label="https://obsidian.md/download" rel="noopener nofollow" class="external-link is-unresolved" href="https://obsidian.md/download" target="_self"><strong></strong></a>옵시디언
노트 및 지식 관리 도구. <br><a data-tooltip-position="top" aria-label="https://www.voidtools.com/ko-kr/" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.voidtools.com/ko-kr/" target="_self"><strong></strong></a>Everything
초고속 파일 검색 소프트웨어.
<br><a data-tooltip-position="top" aria-label="https://kr.bandisoft.com/bandizip/" rel="noopener nofollow" class="external-link is-unresolved" href="https://kr.bandisoft.com/bandizip/" target="_self"><strong></strong></a>반디집
무료 압축/해제 도구.
<br><a data-tooltip-position="top" aria-label="https://www.logitechg.com/ko-kr/innovation/g-hub.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.logitechg.com/ko-kr/innovation/g-hub.html" target="_self"><strong></strong></a>G-hub
Logitech 장치 관리 도구.
<br><a data-tooltip-position="top" aria-label="https://picpick.net/download/" rel="noopener nofollow" class="external-link is-unresolved" href="https://picpick.net/download/" target="_self"><strong></strong></a>픽픽
스크린 캡처 및 이미지 편집 도구. <br><a data-tooltip-position="top" aria-label="https://discord.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://discord.com/" target="_self"><strong></strong></a>디스코드
음성, 비디오, 텍스트 기반 커뮤니티 플랫폼.
<br><a data-tooltip-position="top" aria-label="https://www.kakaocorp.com/page/service/service/KakaoTalk" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.kakaocorp.com/page/service/service/KakaoTalk" target="_self"><strong></strong></a>카카오톡
메시징 및 소셜 네트워크 앱.
]]></description><link>https://64etuor.github.io/500_resources/windows-프로그램-정리/windows-필수-프로그램-정리.html</link><guid isPermaLink="false">500_Resources/Windows 프로그램 정리/Windows 필수 프로그램 정리.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 10 Jan 2025 07:45:41 GMT</pubDate></item><item><title><![CDATA[노무현 사법고시 합격후기]]></title><description><![CDATA[많은 사람들이 고등학교만 졸업하고도 어떻게 그 힘들다는 사법고시에 합격했냐고 묻곤 한다. 젊은 사람들 가운데는 좀더 구체적으로 '공부를 어떤 식으로 했냐'고 묻는 사람도 있다. 1975년 내가 제 17회 사법시험에 합격했을 당시는 물론이고, 20년이 거의 다된 지금까지도 내게 묻는 분들이 의외로 많다. 칭찬도 반인 것 같고 호기심도 반인 것 같다.그런데 그때마다 제대로 대답을 해주지 못했다. 워낙 오래 전의 일이고 또한 조금은 쑥스럽기도 해서였다. 그러나 혼자 그때의 일을 생각하면 지금도 가슴이 뛰고 흐뭇해진다. 남들보다 많이 힘든 상황에서 공부를 했고 시험에 합격해서 그런지, 내 인생을 되돌아볼 때 사법 고시에 합격했던 그 순간만큼 행복했고 성취감을 느꼈던 적은 없는 것 같다.시험에 합격하고 나서 수험 잡지인 [고시계] 75년 7월호에 '과정도 하나의 직업이었다'라는 제목으로 고시 합격기를 쓴 적이 있다. 이번에 책을 내기 위해 [고시계] 75년 7월호를 어렵게 구해 오랜 만에 내 합격기를 읽어보았다. 괜스레 눈시울이 붉어졌다. 아, 참으로 절망도 깊었고 일도 많았던 고시 공부 시절.....어릴 때 쓴 것이라 여기저기 어색한 데도 많고 유치하게 느껴지는데도 있지만, 그 당시의 느낌을 생생하게 전하고 싶어 손보지 않고 그대로 싣는다. 그 동안 나의 고시 공부 시절에 대해 물어 보았던 분들께 만족스런 대답이 될는지는 모르겠지만.
머리에
지나간 일은 언제나 아름답게만 보인다지요? 산꼭대기에서는 힘겹게 올라온 가파른 산길마저도 한 폭의 그림처럼 보이듯이 말입니다. 또 승자의 과거는 그것이 자서전이든 타인의 작품이든 가끔 신화적으로 수식되어 있음을 봅니다.사 법시험의 합격, 이것이 긴 여정에서 하나의 중간 목적지에 불과하지만 하나의 성취와 조그마한 승리로 평가될 수도 있기에, 막상 합격기라는 것을 쓰려 하니 자칫 어떤 승리감에 도취되거나 과거를 돌아보는 낭만적인 기분에 도취되어 힘겹고 괴로웠던 긴 수험 과정의 체험을 스스로 미화시켜 얘기하는 잘못을 범하게 될까 여간 두렵지 않습니다.그러나 고졸 합격자라는 다소 특이한 제 입장이 독학도들에게 어떤 관심의 대상이 될 수도 있지 않을까 하여, 둔한 솜씨나마 될 수 있는 한 사실대로 기억을 더듬고 그때의 생생한 감정들을 살려서 몇 자 쓰고자 합니다.
동기 - 꿈을 키우던 시절
나 는 경남 진영이라는 읍에서 약 10리나 떨어진 산골 가난한 농가에서 태어났다. 위로는 형님이 두 분으로, 큰형님은 부산 대학교 법대를 졸업하고 고등고시를 준비하였으나, 본래 가난한 살림에 벅찬 대학 공부 때문에 가세는 더욱 기울어 내가 국민학교 5학년 때쯤 끝내 응시도 해보지 못한 채 그만두고 말았다.당시 나는 형님을 따라 마을 뒤에 있는 봉화사라는 절에 가서 그곳에서 고시 공부를 하는 형님 친구들의 법이론이나 시국에 대한 토론을 자주 듣곤 했으며, 또 형님은 자신의 좌절에서 오는 울적한 심정을 털어놓기를 좋아했던 모양으로 가끔 상기된 어조로 나에게 여러 가지 얘기를 들려주곤 했다.물론 나는 그때의 얘기들이 너무 어려워서 잘 이해되지 않는 것이 많았으나, 그들의 엄숙한 표정과 격한 어조의 토론은 만만한 젊음의 패기와 이상을, 그리고 격렬한 논쟁의 뒤에 주고받는 소탈한 웃음은 사나이들의 인간미와 호기를 상징하는 것으로 느꼈고, 이것들이 고시 학도들의 속성이요 또 그들만이 가지고 있는 특권으로까지 생각했다. 결국 이런 분위기는 나에게 고시를 해보겠다는 막연한 꿈을 갖게 해주었다.그러나 살림은 더욱 기울어 작은형님은 학업을 중단했다. 부모님의 노동 능력은 차츰 줄어갔고, 마침내 최후의 명줄로 남아 있던 조그만 과수원마저 빚에 쪼들려 처분해야 했다.나 는 3학년이 되면서 일찌감치 고교 진학을 포기하고, 5급 공무원 시험을 거쳐 독학으로 고등고시에까지 밀고 나가 보겠다는 결심으로 옛날 형님께서 보시던 누렇게 바랜 [법제 대의]와 [헌법의 기초 이론(유진오)]을 꺼내 읽기 시작했다. 그러나 그 해 10월에는 일자리를 찾아 나갔던 형님께서 돌아와 내가 하는 꼴을 보고 크게 나무라시며 진학을 권하셨다. 나도 가정 사정을 들어 고집을 부려 보긴 했으나 끝내 강권에 못 이겨 부산 상고에 장학생으로 들어가게 되었다. 그러나 예순이 넘으신 부모님들의 생활은 아무런 토지의 근거도 없이 자신들의 노동으로 해결하시도록 내버려 둔 채 작은형님이 어렵고 힘든 직장을 전전하며 벌은 돈으로 내 숙식비를 부담해야 했으니, 대학 진학은 아예 엄두도 내어 보지도 못하고 취직반에 들어갔다.그래도 역시 막연하게나마 길러 오던 고시에의 꿈을 버릴 수는 없었던지 3학년 말 농협에 취직시험을 치른 후 발표도 나기 전에 65년도 11월호 [고시계]를 한 권 샀다. 고시의 냄새를 알기 위하여.....
출범, 그리고 표류
농 협에의 낙방에 이어 개인 회사에 취직했으나 생각보다 급료가 박했고 근무 시간이 많았던 것은 고시로 향한 출범의 결정적 계기가 되었다. 야산 돌밭을 개간하여 심은 고구마와 영세민 취로 사업장에서 내주는 밀가루로 연명하시는 부모님들의 실망을 모른 체하고 직장을 그만두었다. 한 달 반의 급료 6천원으로 몇 권의 책을 사고 마을 건너편 산기슭에 토담집을 손수 지어 '마옥당(磨玉堂)'이라 이름 붙인 후, '사법 및 행 정 요원 예비 시험'을 준비하기 시작했다(당시에는 학력 제한이 있었다). 책값을 벌겠다고 울산 한국비료 공장 건설 공사장에 막노동을 하러 갔다가 이빨이 3개나 부러지고 턱이 찢어지는 불운을 겪으면서도, 용케 11월에는 제7회 예시에 합격하였다.4개월 정도의 준비로 예시에 합격하는 행운과 함께 이제까지의 나의 처절한 투쟁은 막을 내렸다. 나의 예시 합격에 자극받아 큰형님은 67년에, 작은형님은 68년에 각각 5급 공무원 시험에 합격했기 때문이었다. 그러나 67년에는 법률 서적을 살 형편이 못되어 예비 시험 과목을 새로 공부하고 있다가 68년에는 군에 입대했다. 군에 있는 동안에도 공부를 해 보려고 애썼으나 영어 단어 하나 암기를 못하고 3년을 표류하고 말았다.
열풍에 돛을 달고 - 그리고 좌초
71 년 제대를 하고 집에 오니 집안 사정은 상당히 호전되어 있었다. 4월부터 옛날의 '마옥당'을 수리하여 공부를 시작, 5월 2일에 3급 1차에 합격, 그리고 사법시험으로 전환. 처음 법률 책을 대하니 다소 흥분되기도 했으나 과연 이 어려운 것을 해낼 수 있을지 더럭 겁부터 났다. 그러나 소설을 읽듯이 마구 읽었다. 생각보다 쉬웠다. 겉만 슬슬 핥으니 그럴 수밖에……. 전 과목을 무질서하게 읽었다. 행정법과 상법이 좀 어려운 듯했다. 민법을 모르니 그럴 수 밖에……. 소송법은 전혀 무슨 말인지 알 수가 없었다. 실체법을 전혀 모르니 그럴 수밖에……. 4개월에 걸쳐 오리무중을 헤매면서 전 과목 3회독을 마쳤다.「고시 계」를 66년도부터 소급해서 샀다. 그러나 합격기 말고는 아무 것도 읽을 수 없었다. 그 동안의 체험과「고시계」합격기에서 읽은 것을 정리하여 얻은 것은 책을 읽는 순서 정도였다. 이리하여 민법을 먼저 읽고 상법과 행정법에 들어가고 실체법을 먼저 읽고 소송법에 들어 간다는 순서를 정하여 9월부터 시작했다. 새로 읽으니 과거의 3회독은 간 곳 없고 전혀 새로 읽는 기분이었다. 한 페이지 한 페이지가 다시 어려워졌다.그러던 중 10월에 14회 공고가 났다. 외면하려 했으나 자꾸만 들떴고 마침내는 고시 사상 최단기 기록을 목표로 하여 무작정 덤볐다. 문제 집을 샀다. 1차의 합격은 나의 이러한 만용을 더욱 부채질했다. 이젠 문제집마저도 내 나름대로 밑줄을 긋고 그 부분만 골라 읽었다. 8개월 정도의 준비로 2차 시험에 응했다.시 험장에서 고향의 중학교 후배를 만났다. 사법시험 준비는 나보다 훨씬 선배였다. 나의 공부 기간을 듣고는 "전 과목을 한 번 다 보지도 못했겠네요?" 했다. 어리석게도 나는 자신이 무시당하는 기분에 저으기 분개하면서 우습게 받아 넘겼다. "두고 보라지……. " 정말 하룻강아지 범 무서운 줄을 모르는 막강한 뱃심이었다. 이런 뱃심으로 시험에 응했다. 기막히게 더 잘 썼다. 내가 아는 건 다 썼고 또 아는 건 그 뿐이었으며 집에 와서 책을 대조해 보지도 않았으니, 기막히게 잘 썼다고 생각할 수밖에……. 점수는 50점 얼마였다.뒤에 읽어보니 문제집에 밑줄을 그어 두었던 부분이 모두 엉터리였다. 다른 색깔로 새로 밑줄을 고쳐야 할 형편이었다. 이러한 결과에도 불구하고 수많은 응시자를 젖히고(?) 과락 없이 300명 선 안에 들어갔으니 다음에는 틀림없을 거라고 또 한 번 낙관했다.그러나 발표 후 5-6개월을 이유 없이 허송했다. 제대 후 공부도 시작하기 전부터 마을 처녀에게 마음을 뺏기기 시작하여 상대방의 단호한 거부에도 불구하고 열을 올리게 되고 8개월에 걸쳐 집요하게 추근거려 1차 시험 직전에야 겨우 처녀의 마음을 함락시키고는 안도했는데, 이제 그녀가 결혼 적령을 넘었다는 사실과 고시와 연애는 양립할 수 없다는 중론 사이에서 그녀와 나는 고민의 연쇄반응을 일으켰고, 또 이틀이 멀다 하고 만나지 않고는 배길 수 없는 애정의 열도에 비례하여 공부를 위한 시간에의 집착이 강하여 심리적 갈등이 심했기 때문이다.그러다가 9월에야 정신을 바짝 차리고 장유암이라는 절에 들어갔다. 국사의 추가로 부담이 늘었지만 시험이 연기된 것을 다행으로 여겨 '수석 합격'이라는 표어를 내걸고 열심히 공부를 했다.73년 1월에는 예년의 시험 대신에 그녀와 결혼했고 5월에는 아들도 낳았으나 나는 여전히 절에서 계속 열을 올리고 있었다.아! 그런데…… 글쎄 정말 이럴 수가! 그렇게 끔찍이도 나를 아껴주시며 자신의 못 다한 소망을 나에게 걸어 꿈을 키워 주시던 큰형님이 5월 14일 교통사고로 저 세상으로 떠나 버리셨다. 한 줌 잿가루로 화해 버린 형님의 유해를 고향에 묻고 절로 올라 올 때는 길도 제대로 보이지 않았고 이제부터 전혀 공부도 되지 않았다. 단지 타성에 의하여 책장을 넘기고 있는 동안에도 마음은 삶과 죽음에 대한 밑도 끝도 없는 생각들과 고시와 출세에 대한 회의로 가득 차 있을 뿐이었다.그래도 결론은 하나, 형님의 꿈 그리고 나의 꿈, 어떻든 고시는 필연적이었다. 15회 시험까지 남은 기간은 40여일 뿐, 차츰 초조해지기 시작하고 마침내 책을 읽기만 하면 가슴이 울렁거리며 답답해지는 알지 못할 병에 걸리고 말았다. 하는 수 없이 시험을 한 달 앞두고 보따리를 싸 들고 집으로 내려왔다.그러나 아직 산고가 풀리지 않아 부자유스러운 아내와 핏덩이 신걸이, 자식을 잃은 부모님의 비탄……. 공부가 될 리 없으니 병은 점점 더해지고……. 수석 합격이라는 화려한 표어와는 달리 응시조차 포기하고 싶은 것을 부모님의 시선이 두려워 마지 못해 상경하였으나, 시험 첫 날부터 가슴이 답답하고 목구멍에 무엇이 치밀어 올라 우유와 계란 외에는 아무것도 먹지 못했고 그래도 기를 쓰고 책을 볼라치면 몸에서 식은 땀이 배어 나왔다.「고시계」의 통계란에 따르면 결과는 90위 정도, 정리만 잘하면…… 하는 자신을 얻은 셈이었다.
새로운 좌표 - 직업 의식
그 러나 좀 쉬어야 했다. 책을 잡기만 하면 예의 증세가 나를 괴롭혔다. 고시를 그만둘까도 싶었다. 학교 성적이 우수했다는 사실이 반드시 고시를 해야 할 필연적 이유로 되는 것도 아니라는 것을 깨닫게도 되었고,법을 공부하면서 차츰 정의의 이념을 배워 가는 동안 '고시=권력=출세'라는 과거에 내가 생각했던 등식이 우스운 것임을 느끼게 될 무렵 형님의 뜻 아닌 타계는 예시 과목의 철학 개론을 공부하면서부터 어렴풋하게나마 생각해 오던 삶의 의미를 보다 깊이 생각하게 하는 계기가 되었고, 맹목적 출세주의와 ' 그 수단으로서의 고시'라는 과거의 생각에 결정적인 쐐기를 박았다.그러나 상고를 졸업한지 너무 오래되어 새로운 진로를 찾기는 어렵고 하여 고시를 그만두지는 못했다. 다만 이제는 고시 아니면 파멸이라는 배수의 진은 거두어 버리고, 하나의 직업인이 자기의 생각에 충실히 종사하듯이 고시 공부도 평범한 생활의 일부로 생각하려 했다. '수석 합격'이라는 표어 대신에 '천직 =소명'이라 써붙이고, 숙소를 마옥당에서 집으로 철수하여 직장에 출퇴근하는 기분으로 낮에는 마옥당에서 공부하고 밤에는 집에 와서 여유가 있을 때만 공부하기로 하였다.아기가 울면 달래기도 하고 기저귀도 갈아 채우고 밤이 늦도록 아내와 정담을 나누며 잠을 덜 자면 이튿날 낮잠을 잤다. 그러나 가슴과 목의 증세는 쉽게 낫질 않아 16회 시험까지는 부담 없이 쉬었다. 16회 시험도 주위의 시선이 두려워 응시한 정도였고 성적은 15회보다 내려 130위 안팎으로 생각되었다. 17회 준비 1년간은 정말 순조로웠다. 절에 있을 때 만들었던 독서대의 실용 신안 특허 출원 관계로 9-10월에 조금 쉰 것 말고는 가금 아내와의 대판으로 선풍기 목이 부러지거나 문짝이 떨어져 나가는 활극이 연출되기도 하는 가운데에도 예전과 같이 재미있는 생활이 계속되었다. 10월 하순부터는 풀었던 긴장을 바짝 조여 이때부터는 아내가 들 건너 마옥당까지 점심을 날라다 주었고 잠은 여전히 집에서 잤으나 신걸이가 잠들기 전에는 우리 방에 못 오게 하고 책을 보았다.그러나 17회 때에도 역시 정리가 다 되지는 않았다. 단지 다른 어느 때보다 정리 기간이 착실했으니 훨씬 낫겠지……. 집을 나서면서 아내에게 "신문 기자들이 수석 합격자 인터뷰하러 올 테니 당신도 피력할 소감 한 마디 준비해 두지 그래."하고 허풍을 쳤다. 건강은 좋았고 시험은 순조로웠다. 집에 와서도 역시 출발 전의 호언장담을 되풀이했다. 3월 27일 아침 먹고는 불안을 떨쳐 버릴 수 없어 진작부터 낮잠에 들어갔다. 꿈결에 "무현아! 무현아!"하는 친구의 떨리는 목소리, 그도 뒷말을 잇지 못했고 더 들을 필요도 없이 아내는 내 무릎에 엎드려 부끄러운 줄도 모르고 엉엉 소리 내어 울었다."형님! 지하에서도 신문을 보십니까? 아버지 어머니도 형님 생각에 자꾸만 우십니다."
더하고 싶은 이야기
공부 방법, 책의 선택, 공부 장소, 독서 방법 등에 관한 문제는 각각 제 것이겠지요. 그래도 일반론이 있다면 이미 많은 선배님들의 합격기가 말한 것과 나도 같습니다.그 래서 제 특이한 입장에 관한 것과 또 제가 따로 하고 싶은 얘기만 골라서 제 경험을 예로 들어 쓰렵니다. 다만 개인의 경험을 일반화하여 얘기하는 것은 객관성을 잃지 않을까 하는 걱정도 됩니다마는, 어느 정도 참고는 되리라 믿습니다.
독학에 대하여
응 시자 중에 4년제는 물론 초급대학에도 안 간 사람들만을 독학도로 계산해도 그 수는 600명을 넘는데, 이 수는 서울대 출신 응시자 800명에 거의 육박하는 수임에도 합격자 수는 수년만에 하나씩 나올 뿐으로 도저히 비교가 안된다. 이런 점을 보면 대학교에는 꼭 가는 것이 좋을 것 같다.주로 경제 사정과 연령이 문제인 것 같으나, 경제 문제라면 요즘 일부 사립 대학에서 고시반을 편성하여 학비는 물론 숙식 일체까지 밀어 준다고 하니 오히려 독학보다 경제적으로 부담이 가벼울 것이다. 연령 문제도 생각 나름이 아닐까?
그래도 구태여 독학을 하겠다면 독학도들의 고시 합격률이 지극히 저조한데 반하여 대학 출신자 중에는 법대 출신이 아니고도 고시에 합격하는 사람이 많고 17회에는 수석 합격자가 공대 출신이다. 이러한 결과는 여러 가지 원인으로 연유하는 것이겠으나 나는 이 점을 대학에서 얻게 되는 일반 교양 과정의 지식 탓이 아닌가 생각한다.
나는 과거 예비 고시에 합격한 후에도 법서를 살 형편이 못되어 군에 입대하기까지 1년간을 예시 과목의 책을 그대로 읽었고 이것이 제대 후 법서를 공부할 때 상당한 도움을 준 것 같았다. 이런 점에서 학력 제한이 철폐된 오늘의 제도보다 과거의 예비 시험 제도가 보다 합리적인 제도가 아닐까?흔히 독학도들은 소위 공부 방법이나 수험 정보, 고시 기술론, 고시 분위기 등에 생소함을 걱정하게 되나 그런 점은 고시 잡지로 충분하다고 생각한다. 나는 수험 기간 중 많은 사람들과 많은 얘기들을 나누어 보았으나, 수험 잡지의 합격기나 좌담회, 통계 기타 안내편에 나오는 이상의 아무 것도 얻을 수 없었다.
병역 문제
군 에서 공부하기는 어렵지 않을까? 그러나 어차피 가야 한다면 일찍 갔다 오는 것이 좋을 것이다. 나는 현역 복무 중 가는 세월을 한없이 초조하게 생각했으나, 마치고 나니 부담이 없어 좋았고 또 졸병 생활 자체가 하나의 수업이 되지 않았나 생각한다. 수험 과정 중에 필요했던 끈기 있는 자세는 군에서 몸에 익힌 바 큰 것이었다.
연애와 결혼
처음 8개월에 걸친 일방적 구애 작전은 시간과 정력의 손실이 너무 컸다. 그러나 일단 결혼한 후에는 오히려 도움이 되었다. 아내의 세심한 배려는 말할 것도 없고 점심을 가지고 올 때면 언제나 따라오는 개구장이 신걸이의 재롱은 식사시간을 즐겁게 해 주었다. 붉은 낙조를 바라보며 집에 건너오면 또 반겨 주는 신걸이의 고사리 손이 하루의 긴장과 피로를 깨끗이 잊게 해 주어, 나는 침체기를 몰랐고 따로 휴식이나 기분 전환 거리가 필요 없었다.애타는 애인들 있으면 결혼들 합시다.
건강
절 대적 조건임은 두말 할 것 없고 다만 공부로 오는 정신적 육체적 피로보다 초조, 불안 등의 심리적 파탄에서 오는 손실이 훨씬 더 심각하고 장기적인 것이다. '고시 아니면 파멸'이라는 생각이나 출세에의 지나친 집착, '최단기' '수석합격' 등의 욕심은 사람을 견딜 수 없이 초조하게 만들었다. 오히려 하나의 직업인이 성실하게 직장에 임하듯 수험 생활에 임했더니 장기에 걸쳐 장소를 옮기지도 않고 공백 기간도 없이 공부를 할 수 있었다. 많은 사람들이 직업을 바꾸고도 곧잘 대성하더라. 일정시까지 안되면 직업을 바꾸면 그만이다. 여하튼 다소간의 긴장은 필요하겠으나 지나친 긴장 불안 초조는 금물이다.또 며칠을 허송했다 하여 갑자기 초조해지고 그를 보상하겠다고 급하게 열을 올리고 무리를 하는 것은 잇달아서 또다시 며칠의 침체와 시간의 낭비를 강요하는 결과가 되기 십상이다. 지나간 시간은 아무리 아까워도 깨끗이 잊는 것이 좋다. 장기전에서의 며칠의 허송은 그리 문제되 지 않는다. 나는 최종 정리 기간에도 부부 관계는 억지로 금욕하지는 않았다.여하튼 나는 이런 느슨한 자세로 공부했다. 그러나 결코 남보다 노력을 덜하지는 않았다. 보통 10시간은 넘게 공부했고 일단 책상에 앉으면 무서운 집중력을 구사했다. 머리가 혼란해지고 잡념이 생길 때에는 책을 보면 머리가 맑아지고 안정이 되었다. 그러나 일단 책을 떠나면 고시는 깨끗이 잊었다. 이런 느슨하면서도 투철한 자세는 확고한 직업관에서 왔다고 생각되지만, 또 합격에의 신념으로 보완될 때 더욱 안정적이라 생각된다]]></description><link>https://64etuor.github.io/500_resources/향상심을-북돋는-글/노무현-사법고시-합격후기.html</link><guid isPermaLink="false">500_Resources/향상심을 북돋는 글/노무현 사법고시 합격후기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 09 Jan 2025 22:56:11 GMT</pubDate></item><item><title><![CDATA[Apps Script를 활용하여 웹에서 제품 정보 표시 구현(for battery passport)]]></title><description><![CDATA[Apps Script란?
Google Apps Script는 Google Workspace (예: Gmail, Google Sheets, Google Docs, Google Forms 등)와 함께 사용되는&nbsp;JavaScript 기반의 스크립트 언어이다. Google의 여러 서비스 및 앱을 자동화하고 확장하는 데 활용할 수 있다. 직접 코드를 작성할 수 있기 때문에 활용법은 무궁무진. <a data-href="Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1" href="https://64etuor.github.io/600_tech-stack/appsheet/appsheet를-활용한-작업-일보-어플리케이션-최단기간-구현-1.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1</a> <br><a data-href="Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1" href="https://64etuor.github.io/600_tech-stack/appsheet/appsheet를-활용한-작업-일보-어플리케이션-최단기간-구현-1.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1</a>의 앱을 만들 때부터 어떤 툴을 활용해서 어떤 식으로 필요한 기능들을 구현해야 겠다는 구상이 있었다.
앱을 통해 엔드유저로부터 입력된 데이터를 기반으로 대시보드는 간단하게 Sheets로, 그리고 QR 제품 이력 조회는 Apps Script로 구현하면 호스팅 같은 번거로운 문제 없이 최단 기간 내에 원하는 모든 프로토타입을 만들고 시연해 볼 수 있다.
아이디어 검증과 향후 프로젝트의 방향성을 좀 더 구체화하기 위해 간단히 제품 이력이 조회되는 스크립트를 구현해 본다.//Code.gs function doGet(e) { var rackNo = e.parameter.rackNo; var config = getConfig(); var sheet = SpreadsheetApp.openById(config.SHEET_ID).getSheetByName(config.SHEET_NAME); if (!sheet) { return createErrorPage("Sheet not found. Please check the sheet name."); } var data = getFilteredData(sheet, rackNo); if (data.length &gt; 0) { return createSuccessPage(data[0]); } else { return createErrorPage("No information found for Rack S/N: " + rackNo); }
} function getFilteredData(sheet, rackNo) { var data = sheet.getDataRange().getValues(); return data.filter(function (row) { return row[10] === rackNo; });
} function createSuccessPage(data) { var fields = [ { label: "ID", value: data[0] }, { label: "Manufacturer", value: data[2] }, { label: "Country of Origin", value: data[3] }, { label: "Manufacturing Site", value: data[4] }, { label: "Mfg datetime", value: data[5] }, { label: "Operator", value: data[6] }, { label: "Product No", value: data[7] }, { label: "Battery Capacity", value: data[8] }, { label: "Rack No", value: data[10] }, { label: "BPU No", value: data[11] }, { label: "Module1(Top) S/N", value: data[12] }, { label: "Module2 S/N", value: data[13] }, { label: "Module3 S/N", value: data[14] }, { label: "Module4 S/N", value: data[15] }, { label: "Module5 S/N", value: data[16] }, { label: "Module6 S/N", value: data[17] }, { label: "Module7 S/N", value: data[18] }, { label: "Module8 S/N", value: data[19] }, { label: "Module9(Bottom) S/N", value: data[20] }, { label: "Inspector", value: data[21] }, { label: "Pass the inspection?", value: data[27] } ]; var template = HtmlService.createTemplateFromFile('Index'); template.fields = fields; return template.evaluate().setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
} function createErrorPage(message) { var template = HtmlService.createTemplateFromFile('Error'); template.errorMessage = message; return template.evaluate().setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
} function include(filename) { return HtmlService.createHtmlOutputFromFile(filename).getContent();
} index.html
error.html
stylesheet.html config.gs
code.gs 총 5개의 파일로 구성했고 코드는 간단하다.
“URL로부터 Query Parameter로 S/N을 입력 받고, 해당 S/N 제품의 정보를 출력한다. “
이게 이 스크립트의 전부다. 스크립트를 배포하고 테스트를 해본다.
웹앱이라 표시된 레이블 아래 URL이 표시되었을 것이다. 이제
http://yourScriptURL?parameter=value 과 같이 쿼리 파라미터를 URL에 추가하면 해당하는 정보를 조회할 수 있다.
위 URL을 Embedded한 QR 코드를 출력하여 DV 제품에 부착하고 조회해 보면,
위에서 테스트 삼아 설정한 공정 이력들이 아래와 출력된다.
<br><img alt="batch_2024-12-09 08 37 33.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-37-33.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/apps-script/apps-script를-활용하여-웹에서-제품-정보-표시-구현(for-battery-passport).html</link><guid isPermaLink="false">600_Tech Stack/Apps Script/Apps Script를 활용하여 웹에서 제품 정보 표시 구현(for battery passport).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 08 Jan 2025 09:53:36 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-37-33.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-37-33.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[250108_이제현_AI활용전략세미나_배포본]]></title><link>https://64etuor.github.io/500_resources/generative-ai/인공지능을-활용한-연구/250108_이제현_ai활용전략세미나_배포본.html</link><guid isPermaLink="false">500_Resources/Generative AI/인공지능을 활용한 연구/250108_이제현_AI활용전략세미나_배포본.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 08 Jan 2025 09:36:02 GMT</pubDate></item><item><title><![CDATA[인생을 바꾸는 고수의 습관：조금만 바꾸면 당신의 인생이 완전히 달라진다!]]></title><link>https://64etuor.github.io/200_books/bookshelf/고수의-습관.html</link><guid isPermaLink="false">200_Books/Bookshelf/고수의 습관.md</guid><dc:creator><![CDATA[허병민]]></dc:creator><pubDate>Wed, 08 Jan 2025 01:07:50 GMT</pubDate></item><item><title><![CDATA[놀라움의 힘：내 삶을 바꾸는 놀라움의 비밀]]></title><link>https://64etuor.github.io/200_books/bookshelf/놀라움의-힘.html</link><guid isPermaLink="false">200_Books/Bookshelf/놀라움의 힘.md</guid><dc:creator><![CDATA[마이클 루셀, 김지연]]></dc:creator><pubDate>Wed, 08 Jan 2025 01:07:27 GMT</pubDate></item><item><title><![CDATA[Tableau Reference Band]]></title><description><![CDATA[
Tableau에서는 Reference Line (또는 Reference Band) 기능을 활용하여 특정 시간 구간의 배경을 음영 처리할 수 있습니다.
보통 "오전 7시~오후 11시" 또는 "오후 11시~오전 7시"처럼 연속 시간(Continuous Axis) 을 가진 차트에서 적용 가능1.
아래에서는 “오후 11시~오전 7시” 구간을 회색 배경으로 표시하는 가장 일반적인 방법(Reference Band 이용)을 단계별로 설명합니다. 시각화에 사용하는 시간(Time) 차원이 ‘연속(Continuous)’으로 설정되어 있는지 확인합니다. 시트에서 시간 필드를 마우스 오른쪽 클릭 → “Convert to Continuous” 를 선택해둡니다. Tableau 상단의 Analytics 패널을 클릭하면, Reference Line/Band/Distribution 등을 추가할 수 있습니다.
Reference Line 영역에서 “Reference Band” 옵션을 차트에 드래그 앤 드롭합니다. Reference Band 추가 창에서, 배경을 칠하고자 하는 구간(오후 11시~오전 7시)을 설정합니다. From: 23:00 (혹은 11:00 PM)
To: 07:00 (혹은 7:00 AM) 날짜/시간 필드가 24시간 기준(예: HH:MM)으로 처리되고 있어야 하며, 다음과 같은 형태로 설정할 수 있습니다: 예: DATEPART('hour', [시간필드]) &gt;= 23 또는 DATEPART('hour', [시간필드]) &lt; 7
혹은 실제 날짜+시간 형태(YYYY-MM-DD HH:MM:SS)라면, Band 구간을 “23:00:00” ~ “07:00:00”처럼 지정합니다.
참고로 날짜가 넘어가는 구간(자정~새벽 7시)이므로, 분석할 데이터가 여러 날짜에 걸칠 경우 별도의 계산이 필요할 수 있습니다2. Reference Band를 추가한 뒤, 아래와 같이 서식(Format) 을 조정합니다: Fill(배경색) → 원하는 회색(Gray) 계열로 선택
불필요한 라벨(Label)이나 툴팁(Tooltip)은 숨길 수 있음
Opacity(투명도), Border(경계선) 등도 필요에 따라 설정 여러 날짜 범위를 동시에 표시하려면 Calculated Field를 이용한 방법도 있습니다: IF DATEPART('hour', [시간필드]) &gt;= 23 OR DATEPART('hour', [시간필드]) &lt; 7 THEN "수면시간" ELSE "기타시간" END 와 같은 계산 필드 생성
수면시간 값을 색상 범례(Color Shelf)에 드래그
“수면시간”에 대해서만 Gray 색상을 할당
“기타시간”은 투명에 가깝게 처리하거나, 아예 제외해 배경만 표시하는 식으로 조정3 Reference Band vs. Calculated Field Reference Band는 축 자체의 배경에 밴드를 씌우는 방식이므로, “차트 전체 배경”을 한 번에 음영 처리하기 편리합니다. Calculated Field는 Marks(데이터 마크)에 색을 입히는 방식이므로, 배경 전체가 아니라 특정 마크만 색이 입을 수 있습니다. (차트 유형과 요구사항에 따라 적절한 방식을 선택해 사용합니다.) 날짜가 바뀌는 구간(23:00 ~ 07:00)은 하루를 넘어서는 시간이므로, 데이터가 날짜+시간 형식인지, 단순히 시(Hour)만 갖는지에 따라 구현 방식이 달라질 수 있습니다. 가능하다면 Daily Separate Views(하루 단위로 구분된 뷰)를 구성하고, 각 일자별로 오전 7시 전, 오후 11시 이후 구간에 대해 별도 Reference Band를 적용하는 방식도 고려할 수 있습니다.
// "수면시간" 계산 필드 (23시~23:59 + 0~7시 구간)
IF ( DATEPART('hour', [시간필드]) &gt;= 23 OR DATEPART('hour', [시간필드]) &lt; 7
) THEN "수면"
ELSE "기타"
END ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/tableau-reference-band.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Tableau Reference Band.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 06 Jan 2025 06:32:22 GMT</pubDate></item><item><title><![CDATA[시간대 별 Reference Line]]></title><description><![CDATA[<a rel="noopener nofollow" class="external-link is-unresolved" href="https://community.tableau.com/s/question/0D58b0000B6TSldCQG/fixed-daily-time-duration-reference-" target="_self">https://community.tableau.com/s/question/0D58b0000B6TSldCQG/fixed-daily-time-duration-reference-</a>
If you create two calculations that return the date being viewed + the start and end time, then you can use those for your reference lines. DATEADD(...). A parameter instead of a filter would make this easiest, but with a filter you could try WINDOW_MAX(DATE([Ctm ORNurse InRoom])) and use that in your date add. Post back if you need more advice - ideally including some sample data.
[EDIT]. PS - alternativelty you can convert your date/time to the same time on a set date ... then the date on the axis never changes. Works well when someone can only select a single date ... which is probably your use case anyway!
<br><img alt="Pasted image 20250106145117.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20250106145117.png" target="_self">]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/시간대-별-reference-line.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/시간대 별 Reference Line.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 06 Jan 2025 05:52:05 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20250106145117.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20250106145117.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[모든 것은 예측 가능하다_발매전]]></title><link>https://64etuor.github.io/200_books/bookshelf/모든-것은-예측-가능하다_발매전.html</link><guid isPermaLink="false">200_Books/Bookshelf/모든 것은 예측 가능하다_발매전.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 05 Jan 2025 06:20:50 GMT</pubDate></item><item><title><![CDATA[Must Have 머신러닝·딥러닝 문제해결 전략]]></title><link>https://64etuor.github.io/200_books/bookshelf/must-have-머신러닝·딥러닝-문제해결-전략.html</link><guid isPermaLink="false">200_Books/Bookshelf/Must Have 머신러닝·딥러닝 문제해결 전략.md</guid><dc:creator><![CDATA[신백균]]></dc:creator><pubDate>Sun, 05 Jan 2025 06:19:51 GMT</pubDate></item><item><title><![CDATA[7W - 04_통계적 추정과 검정]]></title><description><![CDATA[통계적 추정과 검정은 표본 데이터를 이용해 모집단의 모수를 추정하거나, 가설을 설정하고 검증하는 방법을 학습합니다. 이를 통해 데이터 분석 및 결론 도출 과정을 다룹니다.
정의: 모집단 모수를 단일 값으로 추정하는 방법.
예: 표본 평균으로 모집단 평균을 추정.
한계: 신뢰도를 나타낼 수 없음.
예시 한 공장에서 생산된 부품의 평균 무게를 추정하려고 할 때, 50개의 표본 부품의 평균 무게가 2.5kg이라면, 이 값이 점추정 값입니다. 정의: 모수가 포함될 것으로 예상되는 구간을 제시.
신뢰구간: 신뢰수준: (예: 95% 신뢰구간). 예시 시험 점수 평균이 75점이고, 표준편차가 5점인 경우, 95% 신뢰구간은: 따라서 모집단 평균은 73.21~76.79 사이에 있을 것으로 예상됩니다. 불편성 (Unbiasedness): 추정량의 기댓값이 참값과 동일.
유효성 (Efficiency): 추정량의 분산이 최소.
일치성 (Consistency): 표본 크기가 증가할수록 추정량이 참값에 수렴.
충분성 (Sufficiency): 표본 정보의 손실이 없도록 최대한 활용.
예시 기계의 오류율을 추정하기 위해 100개의 표본 데이터를 분석한 결과, 평균 오류율이 2.5%로 나타났다면, 추정량은 불편성을 충족한다고 볼 수 있습니다. 모분산을 아는 경우: 모분산을 모르는 경우: : 표준 정규분포 값.
: t-분포 값. 예시 한 샘플의 평균 수명이 100시간, 표준편차가 10시간이고, 표본 크기가 25인 경우, 95% 신뢰구간은: 귀무가설 (H₀): 현재 상태에 대한 가정 (예: 차이가 없다).
대립가설 (H₁): 입증하고자 하는 가설 (예: 차이가 있다).
예시 한 약의 효과를 테스트하려는 경우: 귀무가설 (H₀): 약물이 효과가 없다. 대립가설 (H₁): 약물이 효과가 있다. 제1종 오류 (α): 귀무가설이 참일 때 기각.
제2종 오류 (β): 귀무가설이 거짓일 때 채택.
예시 한 신약이 효과가 없는데도 효과가 있다고 결론 내리면 제1종 오류, 효과가 있는데도 효과가 없다고 결론 내리면 제2종 오류입니다. 가설 설정 (H₀, H₁).
유의수준 설정 (보통 5%).
검정 통계량 계산.
p-value와 비교하여 H₀ 기각/채택.
예시 평균 키가 170cm인지 검정하려고 할 때: 유의수준: 0.05. 표본 평균: 169cm. 검정 결과 , p-value가 0.13 → H₀ 채택. 양측 검정: 관심이 평균 차이에 대한 "큰/작음" 모두.
단측 검정: 평균이 특정 방향(크거나 작음)으로만 차이가 있는지 확인. 모분산을 아는 경우: Z 검정.
모분산을 모르는 경우: t 검정.
예시 한 기계의 평균 생산량이 500개인지 검정하려는 경우, Z 검정을 사용하여 평균이 500인지 확인할 수 있습니다. Z 검정 통계량: t 검정 통계량: 표준오차: 강의 노트 정리
추가 자료 조사 배운 점: 통계 추정과 검정을 복습했다.
느낀 점: 그나마 이건 기억이 잘 난다.
다음 목표: 내 기록 관리 데이터에 적용해 봐야겠다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/7w-04_통계적-추정과-검정.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/7W - 04_통계적 추정과 검정.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 05 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Knowledge Note]]></title><description><![CDATA[지식 기록 이해 단계: 책을 읽거나 강의를 들으면서 이해를 한다.
기록 단계: 핵심적 키워드 위주로 내용을 회상하며 자신의 “생각”을 써본다. ===&gt; Fix
일상 노트와 통합]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/knowledge-note.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Knowledge Note.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 04 Jan 2025 12:28:57 GMT</pubDate></item><item><title><![CDATA[파르메니데스]]></title><description><![CDATA[ <img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119182924.png" draggable="false" target="_self">Pasted image 20240119182924.png테레자와 토마시는 무거움의 분위기 속에서 죽었다. 그녀는 가벼움의 분위기에서 죽고 싶었다. 그 가벼움은 공기보다도 가벼울 것이다. 파르메니데스에 따른다면 부정적인 것이 긍정적인 것으로 변모하는 것이다.죽음 = 비존재 = 없는 것 = 부정적인 것 '그 가벼움은 공기보다도 가벼울 것이다.'
→ 가벼움이 현실 세계의 물리적 법칙을 초월
→ 정신적 자유와 해방(사비나가 추구하는 가치)__죽음(부정적인 것)으로 정신적 자유와 해방(긍정적인 것)을 성취
https://ko.wikipedia.org/wiki/%ED%8C%8C%EB%A5%B4%EB%A9%94%EB%8B%88%EB%8D%B0%EC%8A%A4<br><a data-href="참을 수 없는 존재의 가벼움" href="https://64etuor.github.io/200_books/00_achives/2024/참을-수-없는-존재의-가벼움.html#_0" class="internal-link" target="_self" rel="noopener nofollow">참을 수 없는 존재의 가벼움</a> 원본 링크]]></description><link>https://64etuor.github.io/200_books/00_achives/canvas/파르메니데스.html</link><guid isPermaLink="false">200_Books/00_Achives/Canvas/파르메니데스.canvas</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 04 Jan 2025 06:47:11 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240119182924.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119182924.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[프란츠의 부인]]></title><description><![CDATA[ <img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119185645.png" target="_self">Pasted image 20240119185645.png<img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119185902.png" target="_self">Pasted image 20240119185902.png]]></description><link>https://64etuor.github.io/200_books/00_achives/canvas/프란츠의-부인.html</link><guid isPermaLink="false">200_Books/00_Achives/Canvas/프란츠의 부인.canvas</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 04 Jan 2025 06:47:11 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240119185645.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119185645.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[einmal ist keinmal]]></title><description><![CDATA[ <img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119221555.png" draggable="false" target="_self">Pasted image 20240119221555.png]]></description><link>https://64etuor.github.io/200_books/00_achives/canvas/einmal-ist-keinmal.html</link><guid isPermaLink="false">200_Books/00_Achives/Canvas/einmal ist keinmal.canvas</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 04 Jan 2025 06:47:11 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240119221555.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119221555.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[7W - 03_이산확률분포와 연속확률분포]]></title><description><![CDATA[이산확률분포와 연속확률분포는 랜덤 변수의 값이 불연속적이거나 연속적일 때 발생 가능한 확률을 나타내는 분포를 다룹니다. 이를 통해 데이터의 분포 특성과 응용을 학습합니다.
정의: 성공/실패 두 가지 결과가 가능한 실험을 (n)번 반복했을 때 특정 성공 횟수의 확률.
확률질량함수 (PMF : Probability Mass Function): 기댓값: 분산: 예시 10번 동전을 던져 앞면이 4번 나올 확률: 정의: 단위 시간/공간에서 사건이 발생하는 횟수를 나타냄.
확률질량함수 (PMF : Probability Mass Function): 기댓값: (\lambda)
분산: (\lambda)
예시 콜센터에 평균 5건의 전화가 올 때, 3건의 전화가 올 확률: 정의: 특정 구간 내 모든 값이 동일한 확률로 발생.
확률밀도함수 (PDF : Probability Density Function): 기댓값: (E[X] = \frac{a+b}{2})
분산: (Var(X) = \frac{(b-a)^2}{12})
예시 랜덤 번호 생성기에서 1과 10 사이의 값이 균등하게 발생. 정의: 평균을 중심으로 좌우 대칭인 종 모양의 분포.
확률밀도함수 (PDF : Probability Density Function): 표준정규분포 (SND : Standard Normal Distribution): 예시 평균 70, 표준편차 10인 시험 점수에서 60~80점의 확률: 표본 통계량(평균, 분산 등)의 확률분포를 나타냄.
동일한 모집단에서 여러 표본을 추출할 때 각 표본의 통계량이 따르는 분포. 표본 크기 ( n )이 클수록 표본 평균의 분포는 정규분포에 가까워짐.
표본 평균의 기대값과 분산: (모평균과 동일) 독립이고 동일한 분포를 따르는 랜덤 변수의 합 또는 평균은 표본 크기 이 충분히 클 때 정규분포에 근사. 표본 크기가 커질수록 정규분포에 근사.
모집단의 분포와 관계없이 적용 가능. 표본 평균의 정규분포 근사: 예시 학생의 시험 점수 평균을 조사하기 위해 모집단 평균이 70이고 표준편차가 10인 모집단에서 표본 크기 을 사용.
표본 평균의 분포는: 정의: 표본 분산과 관련된 분포로, 자유도 (k)를 가짐.
특징: 항상 양수, 단봉 분포로 오른쪽 꼬리.
예시 주사위 실험에서 관측 빈도와 기대 빈도 비교. 정의: 표본 크기가 작고 모분산을 모를 때 평균 추정에 사용.
특징: 꼬리가 두꺼운 종 모양, 표본 크기 이면 정규분포에 근사. 정의: 두 정규집단의 분산 비교 시 사용.
특징: 두 카이제곱 분포의 비율로 정의.
예시 공장에서 두 라인의 생산 품질 변동성 비교. 강의 노트 정리
추가 자료 조사 배운 점: 정규 분포의 등장
느낀 점: 이게 어디 쓰이는지 모르니 전혀 이해가 안된다.
다음 목표: M/L에서 적용해 보자.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/7w-03_이산확률분포와-연속확률분포.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/7W - 03_이산확률분포와 연속확률분포.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 03 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[Bayes Theorem]]></title><description><![CDATA[베이즈 정리는 확률론과 통계학에서 조건부 확률을 계산하는 데 사용하는 정리입니다. 관찰된 데이터와 사전 지식을 기반으로 사건의 가능성을 갱신하는 데 매우 유용합니다. 이는 특히 의사결정, 머신러닝, 베이지안 추론 등 다양한 응용 분야에서 중요한 역할을 합니다.베이즈 정리는 다음과 같이 수식으로 표현됩니다:
: 사건 가 발생했을 때 사건 가 발생할 확률 (사후확률)
: 사건 가 발생했을 때 사건 가 발생할 확률 (우도)
: 사건 가 발생할 사전 확률 (사전확률)
: 사건 가 발생할 전체 확률 (정규화 상수) 사전확률 (Prior Probability) 사건 가 관찰 이전에 발생할 가능성을 나타냅니다.
우리의 초기 신념이나 가정에 해당합니다. 우도 (Likelihood) 사건 가 발생한 경우에 사건 가 발생할 가능성을 나타냅니다. 사후확률 (Posterior Probability) 사건 를 관찰한 이후, 사건 에 대한 신뢰도를 갱신한 값입니다. 전체 확률 (Marginal Probability) 사건 가 발생할 확률로, 모든 가능한 경우를 고려하여 계산됩니다. 사전 정보 설정 사건 와 에 대한 사전확률과 우도를 설정합니다. 우도 계산 관측된 데이터에 따라 값을 설정합니다. 전체 확률 계산 값을 계산하여 정규화 상수를 구합니다. 사후확률 계산 베이즈 정리를 통해 를 계산합니다. 암 진단 테스트에서 양성(true positive) 확률과 관련된 예제: 암에 걸릴 확률: 테스트가 암을 정확히 검출할 확률 (민감도): 테스트가 잘못 양성(false positive)을 반환할 확률: # 초기 값 설정
P_cancer = 0.01 # P(암)
P_no_cancer = 1 - P_cancer # P(비암) P_positive_given_cancer = 0.9 # P(양성 | 암)
P_positive_given_no_cancer = 0.05 # P(양성 | 비암) # 전체 확률 계산
P_positive = ( P_positive_given_cancer * P_cancer + P_positive_given_no_cancer * P_no_cancer
) # 베이즈 정리로 사후확률 계산
P_cancer_given_positive = ( P_positive_given_cancer * P_cancer / P_positive
) # 결과 출력
print(f"양성일 때 실제 암일 확률: {P_cancer_given_positive:.4f}")
양성일 때 실제 암일 확률: 0.1538
import numpy as np
import matplotlib.pyplot as plt # 데이터 생성
x = np.linspace(0, 1, 100)
prior = 0.01
likelihood = 0.9
false_positive_rate = 0.05 # 사후확률 계산
posterior = (likelihood * prior) / ( likelihood * prior + false_positive_rate * (1 - prior)
) # 시각화
plt.bar(["Prior", "Posterior"], [prior, posterior], color=["blue", "orange"])
plt.title("Prior vs Posterior Probability")
plt.ylabel("Probability")
plt.ylim(0, 1)
plt.show() 의사결정 의학 진단, 스팸 필터링, 법적 증거 해석 등 다양한 분야에서 활용. 머신러닝 베이지안 네트워크, 베이지안 추론 등에서 모델의 가중치를 갱신하는 데 사용. 자연어 처리 단어의 조건부 확률을 계산하여 문장 생성을 돕거나 번역 작업 수행. 비즈니스 분석 고객 행동 예측, 제품 추천, A/B 테스트 결과 분석. 신호 처리 노이즈가 포함된 데이터에서 유용한 정보를 추출하는 데 사용. 사전확률 설정 사전확률은 결과에 큰 영향을 미칠 수 있으므로 신중히 설정해야 합니다. 우도 계산의 정확성 우도가 잘못 설정되면 사후확률이 왜곡될 수 있습니다. 데이터 크기와 품질 작은 샘플 크기에서는 결과가 불안정할 수 있으므로 충분한 데이터가 필요합니다. 정규화 상수 계산 는 모든 가능한 경우를 고려해야 하며, 이를 간과하면 부정확한 결과를 초래할 수 있습니다. 베이즈 정리는 확률을 갱신하여 새로운 정보를 반영할 수 있는 강력한 도구입니다.
조건부 확률 계산과 다양한 응용 분야에서 핵심적인 역할을 합니다.
베이즈 정리를 통해 사전 지식과 새로운 데이터를 통합하여 더 나은 의사결정을 내릴 수 있습니다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/bayes-theorem.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/Bayes Theorem.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 07:58:10 GMT</pubDate></item><item><title><![CDATA[7W - 01_통계량]]></title><description><![CDATA[통계란 데이터의 수집, 분석, 요약, 추론의 방법론으로, 데이터를 이해하고 의사결정을 내리는 데 도움을 주는 도구이다. 통계는 모든 데이터 기반 학문과 산업에 필수적으로 사용된다.
설계 (Design): 데이터 수집과 실험 계획을 수립.
요약 (Description): 데이터를 시각적(Graphical) 또는 수치적(Numerical)으로 표현.
추론 (Inference): 표본 데이터를 통해 모집단에 대한 결론 도출. 모집단 (Population): 조사 대상 전체.
모수 (Parameter): 모집단 특성을 나타내는 수치.
표본 (Sample): 모집단의 일부를 대표하는 데이터.
통계량 (Statistic): 표본 특성을 나타내는 수치.
Example
예시 모집단: 한 국가의 모든 성인. 표본: 특정 지역에 거주하는 1,000명의 성인. 모수: 전체 국민의 평균 소득. 통계량: 표본에서 계산된 평균 소득. 범주형 자료: 명목형: 속성 분류 (예: 혈액형).
순서형: 상대적 크기 비교 가능 (예: 만족도, 학력). 양적 자료: 이산형: 셀 수 있는 값 (예: 불량품 수).
연속형: 특정 구간 내 값을 가질 수 있음 (예: 길이, 시간). Example
자료 예시 명목형: "사원", "주임", "과장". 연속형: 키, 몸무게, 온도. 이산형: 주사위 결과(1, 2, 3, 4, 5, 6). 가장 빈번하게 나타나는 값.
극단값에 영향을 받지 않음. 크기 순으로 정렬된 자료의 중간 값.
극단값에 영향을 받지 않음. 모든 데이터를 더하고 개수로 나눈 값.
공식: 극단값의 영향을 크게 받음. 각 데이터에 가중치를 부여하여 평균 계산.
공식: 비율 또는 증가율 계산에 유용.
공식: Example
산술평균 vs. 기하평균 예시
3년간의 투자 수익률이 10%, 20%, -10%일 때: 산술평균: 기하평균: 데이터의 퍼짐 정도를 측정.
공식 (표본): 분산의 제곱근.
공식: 분포의 비대칭성 측정.
양의 왜도: 꼬리가 오른쪽. 음의 왜도: 꼬리가 왼쪽. 분포의 뾰족한 정도 측정. 높은 첨도: 데이터가 평균 근처에 집중. 낮은 첨도: 데이터가 고르게 분포.
Example
왜도와 첨도 예시 음의 왜도: 부유층 소득 분포. 높은 첨도: 시험 점수에서 대부분이 평균 근처. 두 변수 간의 선형 관계 강도를 측정.
공식: : 절댓값이 1에 가까울수록 강한 선형 관계. 두 변수 간의 관계를 나타내는 척도.
공식: Example
상관관계 예시 양의 상관관계: 공부 시간과 성적. 음의 상관관계: 운동 시간과 체중. 자료 유형 및 특성 이해.
중심 경향 및 변동성 계산.
상관 관계와 분포 형태 분석. 배운 점: 통계는 데이터를 이해하는 도구로, 다양한 척도를 통해 데이터 특성을 파악할 수 있다.
느낀 점: 학습한 내용을 실제 데이터 분석에서 사용해야만 진정한 이해로 이어질 수 있다.
다음 계획: Kaggle 데이터를 활용하여 배운 개념을 실제 분석에 적용해보겠다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/7w-01_통계량.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/7W - 01_통계량.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate></item><item><title><![CDATA[5W - 예매 가능한 기차표 찾기 프로젝트]]></title><description><![CDATA[2024-12-18 Selenium과 BeautifulSoup을 활용하여 코레일 기차표 데이터를 크롤링한다.
예약 가능한 기차표 정보를 자동으로 탐색하고 추출한다.
동적 웹 페이지 크롤링을 위한 기본 원리를 익힌다. 브라우저 자동화: Selenium을 이용하여 코레일 웹사이트의 동적 HTML 데이터를 추출.
동적 웹 페이지 처리: JavaScript로 렌더링되는 요소를 확인하고, 페이지 소스를 받아 BeautifulSoup과 연계. HTML 파싱: Selenium에서 수집한 페이지 소스를 BeautifulSoup으로 파싱하여 구조화된 데이터를 추출.
테이블 데이터 추출: find 및 find_all 메서드를 활용해 원하는 테이블 데이터를 식별 및 추출. Selenium으로 브라우저 세션 시작 및 HTML 소스 가져오기
BeautifulSoup으로 HTML 데이터 파싱
예약 가능한 기차표 데이터 필터링 및 테이블화
from bs4 import BeautifulSoup
import pandas as pd from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
import time service = Service(executable_path=ChromeDriverManager().install())
url = 'https://www.letskorail.com/ebizprd/EbizPrdTicketPr21111_i1.do?&amp;txtGoAbrdDt=20241224&amp;txtGoHour=085800&amp;selGoYear=2024&amp;selGoMonth=12&amp;selGoDay=24&amp;selGoHour=00&amp;txtGoPage={page}&amp;txtGoStartCode=0001&amp;txtGoStart=%EC%84%9C%EC%9A%B8&amp;txtGoEndCode=0020&amp;txtGoEnd=%EB%B6%80%EC%82%B0&amp;selGoTrain=05&amp;selGoRoom=&amp;selGoRoom1=&amp;txtGoTrnNo=&amp;useSeatFlg=&amp;useServiceFlg=&amp;selGoSeat=&amp;selGoService=&amp;txtPnrNo=&amp;hidRsvChgNo=&amp;hidStlFlg=&amp;radJobId=1&amp;SeandYo=&amp;hidRsvTpCd=03&amp;selGoSeat1=015&amp;selGoSeat2=&amp;txtPsgCnt1=1&amp;txtPsgCnt2=0&amp;txtMenuId=11&amp;txtPsgFlg_1=1&amp;txtPsgFlg_2=0&amp;txtPsgFlg_3=0&amp;txtPsgFlg_4=0&amp;txtPsgFlg_5=0&amp;txtPsgFlg_8=&amp;chkCpn=N&amp;txtSeatAttCd_4=015&amp;txtSeatAttCd_3=000&amp;txtSeatAttCd_2=000&amp;txtGoStartCode2=&amp;txtGoEndCode2=&amp;hidDiscount=&amp;hidEasyTalk=&amp;adjcCheckYn=Nhttps://www.letskorail.com/ebizprd/EbizPrdTicketPr21111_i1.do?'
driver = webdriver.Chrome(service=service) data_rows = [] for _ in range(5): driver.get(url) time.sleep(2) html = driver.page_source soup = BeautifulSoup(html, 'html.parser') ticket_table = soup.find('tbody') for tr in ticket_table.find_all('tr'): data=[] for td in tr.find_all('td'): img_tag = td.find('img') if img_tag: text = img_tag.get('alt', '') else: text = td.get_text(strip=True) data.append(text) data.append(url) data_rows.append(data) try: next_button = driver.find_element(By.XPATH, '//*[@id="divResult"]/table[2]/tbody/tr/td/a[2]/img') except: next_button = driver.find_element(By.XPATH, '//*[@id="divResult"]/table[2]/tbody/tr/td/a[1]/img') next_button.click() time.sleep(2) url = driver.current_url driver.quit() columns = ['구분', '열차번호', '출발시각', '도착시각', '특실/우등실', '일반실', '유아', '자유석/입석', '인터넷특가(멤버십혜택)', '예약대기', '정차역(경유)', '차량유형/편성정보', '운임요금', '소요시간', 'url'] df = pd.DataFrame(data_rows, columns=columns)
df.drop_duplicates(subset=['열차번호', '출발시각'], keep='first', inplace=True)
df.reset_index(inplace=True, drop=True) df &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
기초 크롤링 기법을 학습했다. 느낀 점:
크롤링 방식이 아니라 그냥 코드가 동작하는 방식에만 초점을 두고, 복습하는 형태로 강의를 들으면 될 거 같다. 기본적으로 하드 코딩을 싫어하는 입장이지만, 입문자 강의로는 딱 적당한 난이도라고 생각된다. 다음에 개선할 점:
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/5w-예매-가능한-기차표-찾기-프로젝트.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/5W - 예매 가능한 기차표 찾기 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[6W - 실습 과제]]></title><description><![CDATA[후기 HTML 구조에 대해 조금 더 이해하게 됐다.
Injection 방지를 위한 쿼리 튜플 처리를 했다. # 수행방법
# 1. 라이브러리 import webdriver
# 2. webdriver를 통해 Chrome 실행
# 3. 주소는 tstory url : https://www.tistory.com 입력
from bs4 import BeautifulSoup from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
import time
import pandas as pd tistory_url = 'https://www.tistory.com' driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
driver.get(tistory_url)
wait = WebDriverWait(driver, 10) html = driver.page_source driver.quit()
# 수행방법
# tag와 class 정보 확인
# 반복문을 통해 정보 출력 soup = BeautifulSoup(html, 'html.parser') best_popularity = soup.select('#mArticle &gt; div &gt; div.marticle_left &gt; div.best_popularity strong.tit_g') for title in best_popularity[:5]: print(f"{title.text.strip()}\n")
# 메타코드 입력하고 검색
# 해당 페이지 정보 수집하고 상위 10개 데이터 출력 driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
wait = WebDriverWait(driver, 10) search_keyword = "메타코드"
search_url = f'https://tistory.com/search?keyword={search_keyword}&amp;type=post&amp;sort=ACCURACY' driver.get(search_url)
time.sleep(2) items = wait.until(EC.presence_of_all_elements_located( (By.CSS_SELECTOR, '#mArticle &gt; div &gt; div.cont_result &gt; div.list_tistory_top &gt; div.item_group')
)) posts_list = []
try: for item in items: try: posts_info = {} try: posts_info['작성자'] = item.find_element( By.CSS_SELECTOR, 'div &gt; a &gt; span' ).text except: posts_info['작성자'] = "" try: posts_info['제목'] = item.find_element( By.CSS_SELECTOR, 'a &gt; div.wrap_tit &gt; strong' ).text except: posts_info['제목'] = "" try: info_spans = item.find_elements( By.CSS_SELECTOR, 'a &gt; div.wrap_tit &gt; div.wrap_info &gt; span' ) try: posts_info['좋아요'] = info_spans[0].find_element( By.CSS_SELECTOR, 'span.txt_g' ).text except: posts_info['좋아요'] = "0" try: posts_info['댓글수'] = info_spans[1].find_element( By.CSS_SELECTOR, 'span.txt_g' ).text except: posts_info['댓글수'] = "0" try: posts_info['작성일'] = info_spans[2].text except: posts_info['작성일'] = "" except: posts_info.update({ '좋아요': "0", '댓글수': "0", '작성일': "" }) posts_list.append(posts_info) except Exception as e: print(f"항목 처리 중 오류: {e}") continue except Exception as e: print(f"프로세스 오류: {e}") finally: driver.quit() metacode_df = pd.DataFrame(posts_list) print(metacode_df.head(10)) # Q4. 자료형 변경 및 시각화
# - 현재 데이터프레임 자료형 확인
# - 출력 결과와 동일하게 자료형 변형 # 좋아요 상위 5개 글의 작성자, 글의 좋아요, 댓글수 확인
# 출력 화면과 동일한 시각화 진행 import pandas as pd from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC import time
from datetime import datetime, timedelta
import re search_keyword = "메타코드"
search_url = f'https://tistory.com/search?keyword={search_keyword}&amp;type=post&amp;sort=ACCURACY' driver = webdriver.Chrome(service=Service(ChromeDriverManager().install())) posts_list = []
page_num = 1
driver.get(search_url) wait = WebDriverWait(driver, 10) def convert_relative_date(date_str): today = datetime.now() if '일 전' in date_str: days = int(re.search(r'(\d+)일 전', date_str).group(1)) return (today - timedelta(days=days)).strftime('%Y.%m.%d') else: return date_str try: for page_num in range(1, 20): paginate_div = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'wrap_paging_tistory'))) list_container = wait.until(EC.presence_of_element_located( (By.CSS_SELECTOR, '#mArticle &gt; div &gt; div.cont_result &gt; div.list_tistory_top') )) items = list_container.find_elements(By.CLASS_NAME, 'item_group') if len(items) == 0: print("더 이상 결과가 없습니다.") break print(f"현재 페이지: {page_num}") for item in items: try: posts_info = {} try: posts_info['작성자'] = item.find_element( By.CSS_SELECTOR, 'div &gt; a &gt; span' ).text except: posts_info['작성자'] = "" try: posts_info['제목'] = item.find_element( By.CSS_SELECTOR, 'a &gt; div.wrap_tit &gt; strong' ).text except: posts_info['제목'] = "" # try: # posts_info['본문'] = item.find_element( # By.CSS_SELECTOR, 'a &gt; div.wrap_tit &gt; div.wrap_desc &gt; p' # ).text # except: # posts_info['본문'] = "" try: info_spans = item.find_elements( By.CSS_SELECTOR, 'a &gt; div.wrap_tit &gt; div.wrap_info &gt; span' ) try: posts_info['좋아요'] = info_spans[0].find_element( By.CSS_SELECTOR, 'span.txt_g' ).text except: posts_info['좋아요'] = "0" try: posts_info['댓글수'] = info_spans[1].find_element( By.CSS_SELECTOR, 'span.txt_g' ).text except: posts_info['댓글수'] = "0" try: posts_info['작성일'] = info_spans[2].text except: posts_info['작성일'] = "" except: posts_info.update({ '좋아요': "0", '댓글수': "0", '작성일': "" }) posts_list.append(posts_info) except Exception as e: print(f"항목 처리 중 오류: {e}") continue try: if page_num % 10 != 0: time.sleep(1) paginate_div = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'wrap_paging_tistory'))) try: next_link = paginate_div.find_element( By.XPATH, f".//a[contains(text(), '{page_num+1}')]" ) driver.execute_script("arguments[0].click();", next_link) except: print(f"\n마지막 페이지에 도달했습니다. (페이지 {page_num})") break else: try: next_button = wait.until(EC.element_to_be_clickable( (By.CSS_SELECTOR, 'button.btn_paging.btn_next') )) driver.execute_script("arguments[0].click();", next_button) except: print(f"\n마지막 페이지에 도달했습니다. (페이지 {page_num})") break time.sleep(2) except Exception as e: print(f"\n마지막 페이지에 도달했습니다. (페이지 {page_num})") break except Exception as e: print(f"프로세스 오류: {e}") finally: driver.quit() #결과 프린트
posts_df = pd.DataFrame(posts_list) print("1. 변환 전:")
print(posts_df.info()) posts_df['작성일'] = posts_df['작성일'].apply(convert_relative_date) posts_df['좋아요'] = posts_df['좋아요'].astype(int)
posts_df['댓글수'] = posts_df['댓글수'].astype(int) print("=======================================") print("\n2. 변환 후:")
print(posts_df.info()) print("=======================================") print("\n3. 좋아요 상위 5개 게시물:")
print(posts_df[['작성자', '좋아요', '댓글수']].sort_values(by='좋아요', ascending=False).head()) #차트 시각화 import matplotlib.pyplot as plt
import numpy as np plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False top_5_authors = posts_df.nlargest(5, '좋아요') plt.figure(figsize=(10, 6)) x = np.arange(len(top_5_authors))
width = 0.35 plt.bar(x - width/2, top_5_authors['좋아요'], width, label='좋아요', color='#3182bd')
plt.bar(x + width/2, top_5_authors['댓글수'], width, label='댓글수', color='#fd8d3c') plt.xticks(x, top_5_authors['작성자'].values, rotation=45) plt.legend()
plt.grid(True, alpha=0.3) plt.tight_layout() plt.show() #위 코드에 이미 적용됨
# 티스토리 접속
# Python 검색창에 입력
# 검색 버튼 클릭 # 5페이지까지 자동 이동
# 페이지가 넘어갈 때, 글 정보도 함께 수집
# 제목, 작성자, 좋아요, 댓글수 작성일 정보 수집
# 모든 페이지 글 정보를 하나의 데이터프레임에 저장 # Q5의 코드에서 search_keyword 값과 페이지 수만 조정해줬다.
search_keyword = "Python" 데이터 : 한국도로교통공단_무단횡단 교통사고 다발지역 정보
출처 : 공공데이터 포털 <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.data.go.kr/data/15058578/openapi.do" target="_self">https://www.data.go.kr/data/15058578/openapi.do</a>
# 수행방법
# 1. serviceKey 발급
# 2. 사이트의 Sample 코드를 활용하여 정보 가져오기
# 3. 요청 변수는 "샘플 데이터"와 동일하게 설정
# 4. 가져온 데이터 출력 import requests
from config import DECODING_KEY url = "http://apis.data.go.kr/B552061/jaywalking/getRestJaywalking" params = { 'ServiceKey' : DECODING_KEY, 'searchYearCd' : '2015', 'siDo' : '11', 'guGun' : '320', 'type' : 'xml', 'numOfRows' : '10', 'pageNo' : '1'
} response = requests.get(url, params=params) print(response.content)
#### Q8. 2015~2020년까지의 아래 해당하는 정보들을 가져와서 데이터프레임으로 구성 및 csv 저장
# 연도 외에 나머지 요청변수는 그대로 사용
# 반복문을 통해 해당 연도의 데이터 수집 # 중간 수집 결과 출력은 선택사항
# 마지막 데이터프레임 출력은 필수 import os
import requests
import pandas as pd
from bs4 import BeautifulSoup
from config import DECODING_KEY URL = "http://apis.data.go.kr/B552061/jaywalking/getRestJaywalking"
DEFAULT_PARAMS = { 'siDo': '11', 'guGun': '320', 'type': 'xml', 'numOfRows': '10',
} def fetch_accident_data(year, page_no=1): params = { 'ServiceKey': DECODING_KEY, 'searchYearCd': str(year), 'pageNo': str(page_no), **DEFAULT_PARAMS, } try: response = requests.get(URL, params=params, timeout=10) response.raise_for_status() return response.content except requests.exceptions.RequestException as e: print(f"⚠️ {year}년 {page_no}페이지 API 요청 실패: {e}") return None def parse_accident_data(xml_content, year): soup = BeautifulSoup(xml_content, 'xml') accident_data = [] items = soup.find_all('item') for item in items: try: data = { 'ID': item.find('afos_fid').text if item.find('afos_fid') else None, '연도': year, '경찰서': item.find('sido_sgg_nm').text if item.find('sido_sgg_nm') else None, '위치': item.find('spot_nm').text if item.find('spot_nm') else None, '사고건수': item.find('occrrnc_cnt').text if item.find('occrrnc_cnt') else '0', '중상자수': item.find('se_dnv_cnt').text if item.find('se_dnv_cnt') else '0', '사망자수': item.find('dth_dnv_cnt').text if item.find('dth_dnv_cnt') else '0', } accident_data.append(data) except AttributeError as e: print(f"⚠️ 데이터 파싱 중 오류 발생: {e}") return accident_data def collect_accident_data(start_year, end_year, max_pages=None): all_data = [] for year in range(start_year, end_year + 1): page_no = 1 while True: if max_pages and page_no &gt; max_pages: print(f"{year}년 지정된 페이지 수({max_pages}) 도달") break xml_content = fetch_accident_data(year, page_no) if not xml_content: print(f"{year}년 {page_no}페이지 데이터 없음 또는 요청 실패") break year_data = parse_accident_data(xml_content, year) if not year_data: print(f"{year}년 {page_no}페이지 데이터 없음") break all_data.extend(year_data) print(f"{year}년 {page_no}페이지 데이터 수집 완료 (총 {len(year_data)}건)") page_no += 1 df = pd.DataFrame(all_data) numeric_columns = ['사고건수', '중상자수', '사망자수'] df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce') return df df = collect_accident_data(2015, 2020, 1) DATA_DIR = './data'
FILE_NAME = f'accident_data_{df["연도"].min()}_{df["연도"].max()}.csv'
FILE_PATH = os.path.join(DATA_DIR, FILE_NAME) if not os.path.exists(DATA_DIR): os.makedirs(DATA_DIR) df.to_csv(FILE_PATH, index=False, encoding='utf-8') df
#### Q9. 데이터베이스와 테이블 세팅 # DATABASE는 Python 연결하지 않고, SQL 환경에서 생성하는 것도 허용
# 테이블은 Python과 연결한 상태에서 생성할 것
# 데이터베이스, 테이블 이름은 자유
# 자료형은 데이터 삽입에 문제 생기지 않도록 설정
# 쿼리 실행 이후 commit 수행 # 위 문제에서 얻은 데이터를 해당 데이터베이스 테이블에 삽입할 것 import mysql.connector
from mysql.connector import Error
from config import db_config def create_connection(): try: connection = mysql.connector.connect(**db_config.DATABASE_CONFIG) if connection.is_connected(): print("Connected to MySQL database") return connection except Error as e: print(f"Error: {e}") return None def create_table(connection): create_table_query = """ CREATE TABLE IF NOT EXISTS accident_data ( id INT AUTO_INCREMENT PRIMARY KEY, afos_fid VARCHAR(50), year INT, police_station VARCHAR(50), location VARCHAR(100), accident_count INT, serious_injury INT, death_count INT, UNIQUE KEY (afos_fid, year, police_station, location) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; """ try: cursor = connection.cursor() cursor.execute(create_table_query) connection.commit() print("테이블 생성 완료") except Error as e: print(f"Error: {e}") finally: if cursor: cursor.close() def insert_data(connection, df): insert_query = """ INSERT INTO accident_data (afos_fid, year, police_station, location, accident_count, serious_injury, death_count) VALUES (%s, %s, %s, %s, %s, %s, %s) """ try: cursor = connection.cursor() values = df.apply(lambda row: ( row['ID'], row['연도'], row['경찰서'], row['위치'], row['사고건수'], row['중상자수'], row['사망자수'] ), axis=1).tolist() cursor.executemany(insert_query, values) connection.commit() print(f"{len(df)}개의 데이터 INSERT 완료.") except Error as e: print(f"⚠️ Error: {e}") connection.rollback() finally: if cursor: cursor.close() connection = create_connection()
if connection: try: create_table(connection) insert_data(connection, df) finally: connection.close()
# 위에서 생성한 데이터 중 서울 데이터 삭제
# 서울 데이터만 존재한다면 모든 데이터가 삭제 def delete_data_by_keyword(connection, keyword): delete_query = """ DELETE FROM accident_data WHERE location LIKE %s """ try: cursor = connection.cursor() pattern = f"{keyword}%" cursor.execute("SELECT COUNT(*) FROM accident_data WHERE location LIKE %s", (pattern,)) count_before = cursor.fetchone()[0] cursor.execute(delete_query, (pattern,)) connection.commit() cursor.execute("SELECT COUNT(*) FROM accident_data") count_after = cursor.fetchone()[0] print(f"'{keyword}'로 시작하는 {count_before}개의 데이터가 삭제되었습니다.") print(f"현재 총 {count_after}개의 데이터가 남아있습니다.") return count_before, count_after except Error as e: print(f"⚠️ Error: {e}") connection.rollback() finally: if cursor: cursor.close() connection = create_connection()
if connection: try: delete_data_by_keyword(connection, "서울") finally: connection.close() ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/6w-실습-과제.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/6W - 실습 과제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[210228 - 인격읽기]]></title><description><![CDATA[&nbsp;설 다음 날, 호주에 있을 때 알게 된 교수님으로부터 메시지 하나가 도착했다. 교수님이 블로그에 쓰신 글의 링크였다. 아니, 정확히는 교수님의 어머니께서 쓰신 자서전의 일부였다. 그 글을 읽고 나서는 시간이 날 때마다 틈틈이 자서전의 나머지를 찾아 읽었다. 다 읽고 나니 2주가 지났다. 생각해보니 설 인사를 먼저 드렸어야 했는데 답장 하나 없이 글만 찾아 읽었으니 나도 참 버릇이 없다. 늦게나마 감사하다는 말과 함께 진심을 담은 소감을 전했다. 되려 고맙습니다 라는 답문이 와서 죄송스러운 맘이 들었다.&nbsp;남의 글을 평하는 재주가 없을 뿐 더러 평을 해야 하는 성격의 글도 아니고, 지식 또한 얕아 그 자서전의 내용을 축약하는 일은 하고 싶지 않다. 그냥 하나의 사람으로서 한 사람의 인생을 엿봤고, 자서전의 맺음과 함께 끝나지 않고 자손들로 이어진 ‘어머니’의 삶과 역사를 짐작이나 할 뿐이다. 그리고 곧바로 감출 수 없이 즐겁고 예쁜 기분이 드는 건 그 대물림이 얼마나 훌륭했는지 대변한다고 생각한다. 그저 글에서 훔쳐본 것이 다이지만, 그 어머니의 부모의 좋은 성품이, 그 어머니에게 전해지고, 또 그 어머니의 자손들로 전해진 것만은 자명하다. 큰 시련 또한 그 연속을 끊어내지 못했으니, 약한, 작디 작은 나약한 존재인 인간은 도대체 얼마나 강한 것인가.&nbsp;내 어머니는 글을 많이 남기신 편은 아니다. 어머니 사후에 책을 한 권 냈지만, 지면의 대부분이 소설이고 어머니 당신의 삶을 기술한 글은 거의 찾아볼 수가 없다. 실제로도 당신의 얘기를 입 밖에 꺼내는 일이 드물었다. 어머니의 어린 시절에 관한 얘기는 죄다 다른 사람의 입을 통해 들었을 뿐이다. 그중 하나 의문인 건 외삼촌에게 듣자 하니 학창시절에 공부를 그렇게 잘했다고 하던데, 그런 빌미를 꺼내어 공부에 통 관심을 안 보이던 본인의 아들을 자신과 비교하며 구박 한 번한 적 없는 사실이다. 아무튼 그런 혜택 아닌 혜택을 받고 자란 셈이니 그런 어머니의 아들로 태어나 자란 것은 참 해 볼만 한 일이었다. 군대를 두 번 가라면 못 가겠지만, 어머니의 아들로 두 번 태어나는 것만은 마다하지 않으리라.&nbsp;교수님께도 똑같은 말을 전했다. 제 어머니는 일찍 돌아가셔서 남기신 글이 적어 내내 아쉬웠는데 교수님은 참 무엇보다 값진 유산을 받으신 것 같아 부럽다고. 틀림없이 진심을 담은 말이었다. 내 어머니는 만 45세에 돌아가셨다. 그다지 짧지는 않은 생이며 할 얘기도 많을 텐데, 항상 글도 쓰셨는데, 너무나 아쉽고, 또 아쉬운 일이다.&nbsp;갑자기 글을 많이 써야 겠다는 생각이 들었다. 내 글이 얼마나 형편없고, 글에 담긴 생각이 얼마나 형편없고, 글을 쓰는 사람이 얼마나 형편없는지는 논외로 두더라도, 혹여 나 또한 언젠가 기적과 같이 결혼을 하게 되고 자손을 두게 된다면, 다른 무엇보다 내 형편없는 글들이 그들에게 더 가치 있는 유산이 되리라는 생각이 들었다. 막상 쓰려니 부끄러워서 잘 손에 잡히지는 않지만, 첫술에 배부를 수 있을까. 언젠가 쓰다 보면 하나쯤 쓸 만한 것이 나오겠거니 배부른 희망을 가져 본다.]]></description><link>https://64etuor.github.io/900_writings/essays/210228-인격읽기.html</link><guid isPermaLink="false">900_Writings/Essays/210228 - 인격읽기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 03:59:33 GMT</pubDate></item><item><title><![CDATA[210228 - 내가 결혼하지 못하는 이유에 대한 변]]></title><description><![CDATA[&nbsp;설에 만나 보니 벌써 조카 하나가 서른이 되었다. 내 나이 듦이 실감됨과 동시에 일찍이 경찰관이 되어 한 사람 구실을 하고 있는 그 조카가 대견스럽기도 하고 못난 삼촌으로 부끄러운 맘이 들기도 하였다. 조카는 아주 오랫동안 연애를 하고 있었다. 근 십 년, 꽤 길다면 긴 시간이다. 여자 친구와 결혼을 생각하고 있는지 조카에게 물으니, 이제는 그 자신의 여자 친구가 없으면 뭔가 이상하고 허전할 거 같다는 답을 하였다. 왜 즉시 결혼하지 않는지 또 물으니 답이 참 예의도 바르다. 조카는 ‘순서를 지켜야죠.’라고 답했다. 나는 바로 수치스러운 기분이 들고 말았다. 내가 나도 모르는 사이 조카의 짐이 되고 있었다는 게 첫 번째 이유요, 이런 우리 집 식구들의 고지식한 면을 미리 알고 있었으면서도 장가갈 능력이 미처 안 되어 조카의 앞길에 물꼬를 순순히 터 줄 수 없음이 두 번째 이유다.&nbsp;따지고 보면 삼십 년을 넘게 살면서 남들은 한 번씩 다 해봤다는 소개팅 한번 한 적이 없다. 주선해준다는 사람이 없었던 바도 아닌데 본디 낯선 이를 지독히 꺼리는 성격(내가 사회에서 만난 사람들은 나더러 친화력이 좋다고들 했지만 그건 후천적인 경험으로 얻은 능력이지 본성이라 할 수는 없겠다.)과 몇 가지의 사연 탓에 맘을 열고 기꺼이 수락해 본 기억이 없다. 한 번은 내 새어머니 친한 동생이 주선을 하여 준다 했는데, 꼭 가서 만나보라 닦달하시는 어머니와 실랑이를 하다가 눈물까지 쏟은 일이 있다. 그게 눈물을 뺄 정도로 그렇게 심각한 일인가 자문해봐도 도통 영문을 알 수 없다. 허나 이점에 대해 곰곰이 생각하다 보면 필시 아까 언급한 나의 사연 중 하나를 말하지 않을 수 없다.&nbsp;내 친어머니는 내가 17살 때 돌아가셨다. 어머니가 어떠한 성품의 사람이었는가를 말하자면 한도 끝도 없지만, 내가 그다지 착한 아들이 아니었음에도 한번 꾸중을 들은 일이 없다는 걸로 짧게 요약한다. 어머니 돌아가신 날, 새벽에 어머니는 나를 깨웠다. 서울에 있는 검정고시 학원에 보내기 위해서였다. 잠이 부족하고 일어나기가 괴로워 어머니께 몹시 짜증을 낸 기억이 난다. 남춘천역에 아들을 태워다 주고 인사도 없이 떠나는 그 아들의 뒷모습을 보시며 어머니는 무슨 생각을 하셨을까. 나는 어려서부터 기억력이 좋다는 말을 많이 들었다. 그 탓에 어머니에게 잘못한 세세한 일 하나하나들이 생생하게 기억이 난다. 그러나 그 때문에 몇 번이나 울었는지 만큼은 도무지 잘 기억이 나질 않는다.&nbsp;내가 초등학교에 다닐 무렵, 한 동급생 여자아이에게 못된 짓을 한 기억이 있다. 그 아이는 내게 일종의 고백 편지 같은 것을 보냈는데 그에 험한 말을 가득 써서 답장을 하였다. 문제는 어쩌다 보니 큰어머니께서 내가 쓴 그 욕설 가득한 답장을 보게 된 일이다. 이에 자연히 내 어머니 귀에도 들어갔다. 그리고 왜 그런 답장을 했는지 내게 물어보셨다. 난 누가 날 귀찮게 하는 게 너무 싫다고 했다. 그러고 나서 어머니가 하신 말씀을 평생 되새기고 있다.&nbsp;'모든 여자아이들은 엄마가 된다.'&nbsp;난 살면서 이처럼 강렬한 말을 몇 번 들은 적이&nbsp;없다. 이후로는&nbsp;여자들에게&nbsp;함부로&nbsp;대하기 어려웠다. 그런데&nbsp;이상한 점은 내가 어머니가 하신 말씀의 의도를 잘 파악했는지 아닌지 관계없이 언젠가부터 이 말에 속박되어 버렸다는 것이다. 오히려 나이가 들 수록, 그리고 내가 어머니께 했던 잘못들을 자책하고 괴로워하는 횟수가 늘어날수록 점점 더 나는 나 자신을 혹여 연애를 하거나, 결혼을 해서는 안 되는 못난이로만 여기게 되었다. 어머니께서 이런 의도를 가지시고 한 말은 아니라고 분명하게 짐작할 수 있다. 머리로는 이해하지만, 한쪽 뇌가, 마음이 세뇌되어 버렸다. 아마 거기에 인생이 잘 풀린 축에 속하지 못한 내 처지에 대한 비관도 조금 섞여 좀처럼 헤어나지 못하는 것일 게다. 언젠가부턴 여자들에게 아주 사소한 죄를 짓는 것조차 두려웠다.&nbsp;이게 내 정신상태에 대한 올바른 해석이라고 여기는 까닭은, 내가 여태껏 읊은 바와는 반대로 실제로는 평소에 생활함에 자존감이 높고, 매사에 자신감이 넘치기 때문이다. 좋고 싫은 것이 확실하고 단단한 신념 또한 있다. 인물에게 까다로운 성격 탓에 존경하고 좋아하며 가까이 지내는 사람이 몇 되지 않지만, 나는 나 자신을, 나의 존경을 받을 만한 사람이라고 여기고 있다. 여자들을 대한다고 주눅 들지도 않으며 필요하다면 대화 또한 잘하는 편이다. 이게 가능한 이유는 누구를 만나든지 그 사람을 이성으로 보지 않는 삶의 방식을 고수하고 있기 때문이다. 반대로 말하자면 상대를 이성으로 느낀다면 난 수분이 다 빠진 사과 마냥 한없이 쭈그러들어, 지은 죄도 없이 죄인이 될 자신이 있다는 소리다.&nbsp;이런 기괴한 기질이 연애나 결혼 등에 대한 전제를 가지고 사람을 만나게 되는 자리를, 즉 애정이 피어날 수 있는 분홍빛 비밀의 화원을, 포르말린 냄새에 절여진 공포감 물씬 나는 유령의 집쯤으로 둔갑시킨다. 뭐가 그렇게 무서운지 모르면서도, 너무나 확실하고 선명하게만 느껴지는 두려움이다. 이게 죄를 짓는 게 무서워서 아무것도 하지 않겠다는 일차원적 어리석음에서 비롯되었다는 사실을 스스로 잘 알면서도, 자기가 만들어 찬 족쇄를 매번 풀지 못하고 늘 제자리걸음만 반복한다.&nbsp;행복한 가정은 대게 서로 비슷비슷하고, 불행한 가정은 제각기 다른 이유로 불행하다는 말이 있다. 참으로 지당한 말이라 생각한다. 어떻게 행복한 가정을 꾸려 나가는지, 그것을 위해 어떤 일들을 해야 하는지 등은 가정을 이룬 두 사람의 관점에서 비롯된다고 생각한다. 그리고 최고의 결혼은 한 가정을 이루어 나갈 두 사람의 관점이, 여러 행복한 가정들을 관통하는 그 관점을 닮은 거라 생각된다. 서로 사랑하는 것. 이렇게 보면 행복한 가정을 만드는 일은 터무니없을 정도로 쉽다. 행복하게 사는 사람들을 흉내만 내도 되는 일이 아닌가. 갑자기 두서없이 이런 말을 꺼내는 까닭은, 그 쉬운 일이 세상 사람들에게 좀체 쉬운 일이 아닌 거처럼, 내게도 쉽지만 쉽지 않은 일이 있다고 말하고 싶어서이다.&nbsp;이렇게 늘어 쓴 변명조차 심히 구차하여 전례 없이 큰 부끄러움을 느낀다. 조카를 볼 낯이 없다.]]></description><link>https://64etuor.github.io/900_writings/essays/210228-내가-결혼하지-못하는-이유에-대한-변.html</link><guid isPermaLink="false">900_Writings/Essays/210228 - 내가 결혼하지 못하는 이유에 대한 변.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 03:59:22 GMT</pubDate></item><item><title><![CDATA[190213 - 딸입니다]]></title><description><![CDATA[아내는 죽음을 잉태했다
편편한 땅처럼 아직 기운만 머금고 있는 배꼽 언저리에 귀를 갖다 대 보았다
앞으로 아홉 달을 더 죽어야 이 싹이 돋아 세상 아가리에 먹힌단다
아내의 얼굴에는 미소가 잠깐 피고 지었다소멸하는 사람이 소멸할 생각을 저 편으로&nbsp;밀어내는&nbsp;동안
이 나의 자식이란 것은 똑같이 하루를 늙었다
이 마귀는 제 어미의 양분을 먹고 살을 찌우고 곧 지표를 밀쳐낼 거다
등줄기에 소름이 돋는 통에 존재감조차 갖지 못한 존재를 맹렬히 미워하였다부지불식간에 존재는 적막을 먹고 자랐다
아내의 몸에는 봉긋한 무덤이 하나 생겼고
무슨 재주에선지 그 안에 제 관을 짜고 드러누운 침입자 또한 있었다
독불장군 하나가 남의 신혼집에 들어선 터에
사람의 살림이 제대로 성사될 리 없다
모양새는 차라리 송장 둘이 무덤을 지키는 꼴이었으며
가세가 기운 기색도 없이 집은 무너지는 폐허다아내가 청춘을 다&nbsp;도둑맞기&nbsp;전에 어서 이 불청객이 떠나 주길 백방으로 빌었다
아마 그게 소용이 됐을까 예정과 달리 난데없이 배를 두들기는 통증에 아내가&nbsp;까무러친다
사람 하나 낳겠다고 생사람 잡는 일이 있느냐
너는 질병이다 너는 도둑놈이다
병원을 맨발로 달리면서
의사 선생님 아내가 죽게 생겼으니 이 병균 좀 떼어내&nbsp;달라고ㅡ정신은 있는지 없는지 아내가 죽고 나도 죽고 생각도 다 죽게 되었다
혼돈한 세상이 그보다 더 어질러진 머리 안에서 뱅뱅 돌며 아내의 비명은 심장을 야무지게 찌른다
목숨 하나로 목숨 둘을 앗아가니 과연 사람은 다 죽어가는 존재다
아 여기서 모두 끝장이 나게 생겼다 배라먹을 거지 하나가 우리네 부부 사주에&nbsp;붙어먹어서&nbsp;행복을 게걸스럽게 죄 먹어 치웠다마귀야
질병아
염치없는 불청객아
나를 때려라 나를 괴롭혀라 나를 먹어 치워라
세상이 널 삼키기 전에 나부터 다 먹어 치워라웬걸 응답하듯이 너는 왔다응애ㅡ할 말을 잃고 주춤했다가 출타했던 정신이 돌아온다
못난 생김새
주름진 얼굴
그리고 제 죄를 아는 듯이 꼭 감은 두 눈한마디 톡 쏘아 댄다
마귀야 이 예쁜 마귀야]]></description><link>https://64etuor.github.io/900_writings/poems/190213-딸입니다.html</link><guid isPermaLink="false">900_Writings/Poems/190213 - 딸입니다.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 03:57:48 GMT</pubDate></item><item><title><![CDATA[241024 - 공양의 시]]></title><description><![CDATA[글을 남기는 데에는 항상 원시적인 두려움이나 마뜩치 않은 기분이 말미에 따라온다. 우선 어리석은 사람의 어리석음을 한 곳에 박제해 놓고 그 이후로 두고 두고 스스로 관찰하게 될 거란 꽤 그럴 듯한 짐작이 모든 일에 적잖이 무심한 내딴에도 썩 마음에 들지 않는 일인 게 첫 번째 이유이고, 이렇게 문장이 길게 늘어지는 것과 완전히 같은 양상으로 내 생각도 한 없이 뻗어 나가서 꿈의 종착역을 지나치고 불면에 시달릴 게 뻔한 게 두 번째 이유이다. 그러나 그런 이유들을 다 무시할 정도로 내게도 간절하게 집착하는 무언가가 하나 있다면, 바로 나의 어머니가 일기를 남기지 않은 것이 일면 내게는 어떠한 한처럼 남아서 내 영혼의 얼마만큼은 분명 영구히 상실된 상태로 도저히 회복되지 않을 거란 확연한 계산이요, 나에게도 기적 같이 아이가 생기는 일이 있게 된다면 도무지 아무리 생각해 봐도 그 아이 또한 영혼의 지분 얼마간은 영험한 심기체의 신비가 아닌 글줄로 쓰여 있을 거란 예상이 지워지지가 않는 것이다. 이름도 지어준 적 없는, 있지도 않은 아이에게 잘못 하게 되는 일이 지레 벌써부터 나는 참으로 두렵다. 아무래도 그보다 더 무서운 일은 내 깜냥으론 도무지 짐작할 수도 없다. 그러므로 이런 시시한 시 아닌 시 같은 것을 한바탕 지어 내고는 공양 하듯 제사를 다 지내고 술잔을 올리고 하는(물론 이건 내가 냉큼 마셔버릴 것이지만은) 어리석은 사람은 그저 바라는 말도 조금 덜 어리석기만을 바랄 뿐이어서,“잘못을 하더라도 조금은 덜 잘못하게 해주십사 이리 간청을 올리옵나이다.”하며 공양하는 시를 짓다.]]></description><link>https://64etuor.github.io/900_writings/poems/241024-공양의-시.html</link><guid isPermaLink="false">900_Writings/Poems/241024 - 공양의 시.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 03:56:20 GMT</pubDate></item><item><title><![CDATA[241224 - 누더기 입은 성자]]></title><description><![CDATA[낡은 종이 내려다 보는 밤을 버릇 삼아
가위질 같이 서슬 퍼런 시선으로
여는 여의 조각난 시간을 기워 붙였네“이 볼품없는 누더기를 보는 일이 참 오래 됐을 겁니다.”
지나간 날의 Radio에선 대략 그런 상용할 말이 흘러 나오는 것이나
찢기고 기워진 말들로 온연히 이 밤을 설명할 묘책이란 없어서“추운 날에 서로 포옹하는 것들에게 따로 이유가 있겠습니까.”
여는 스스로 청중으로 답하곤 할 뿐이어라가르치는 이, 배우는 이 없는 강연이란
응당 겨울에 애고지고 서러운 것 일색이라
별 까닭 없이 모여 들어 부둥켜 안는 누추한 영혼들임에양 잃은 저 가여운 목자여언제나 나의 성자란,
이렇듯 궁상스런 누더기 입고,
어슷어슷 오시니라.]]></description><link>https://64etuor.github.io/900_writings/poems/241224-누더기-입은-성자.html</link><guid isPermaLink="false">900_Writings/Poems/241224 - 누더기 입은 성자.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 01 Jan 2025 03:56:06 GMT</pubDate></item><item><title><![CDATA[Spicus Business Pro 코스 후기]]></title><description><![CDATA[요약 - 2024. 12. 01
학습 플랫폼 : Spicus
코스명 : 전화영어 Business Pro 장점 : 수업의 방식을 지정할 수 있다. (Textbook에 충실, 혹은 Free-talking 비중을 높이거나)
Feedback이 충실하다.
통화 내용이 mp3로 제공 된다.
Textbook에 Role-play를 하는 Unit이 중간중간 있는데, 도움이 많이 된다.
통화 품질(필리핀-한국)이 이전에 비해 많이 개선되었다.
전화영어 외적으로 활용할 수 있는 각종 학습 도구들을 제공한다. (예습 기능 등)
가격이 저렴하다. 단점 : AI 기능은 아직까지 썩 학습에 도움이 되지 않는다.
기업 회원은 학습 시간 변경이 불가능하다. <img alt="Pasted image 20241208180237.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241208180237.png" target="_self" style="width: 400px; max-width: 100%;">
회사 영어 프로그램의 일환으로 몇 개의 코스가 있었는데 그 중 Spicus 전화영어를 약 2달간 진행했다. 예전에도 전화영어를 해본 적이 있어서 그다지 낯선 시스템은 아니었다.
회사의 한국 법인 철수 결정으로 인해 예정되었던 3달을 못 채우고 코스가 종료됐지만 나름의 성과는 있었다고 생각한다. 일단 영어로 말할 기회가 너무 없다 보니 기억을 되살린 정도로도 만족한다.
코스는 Business Pro를 등록했고, 처음은 레벨 테스트를 진행하고 수업은 방식은 항상 정해진 포맷대로 진행하는 걸 골랐다. 이것 저것 사용자의 취향에 맞게 선택할 요소를 준다.
AI 시스템이 미리 예습을 도와주거나(발음 테스트 등), 수업 리허설을 진행해 보는 등 확실히 이전에 비해 많이 발전된 모습이었으나 실제로 적극적으로 활용하진 않았다. 암기노트, AI첨삭노트와 같은 기능이 있었는데 잘 활용하면 공부에 도움이 될 라고 생각한다.
강사는 모두 필리핀인으로, 전담 강사는 정해져 있었지만 강사에게 사정이 생길 경우 Sub-teacher가 배정 되었다. 정해진 형태의 수업을 진행하다 보니 수업의 질은 대체로 평이했다고 생각한다. 강사들은 Spicus 외에도 여러 교육 플랫폼과 계약된 것으로 보였다. 다들 굉장히 바쁜 느낌.
수업이 끝나면 보통 10분 내로 Feedback을 받을 수 있고, 이건 한글, 영어 양쪽으로 볼 수 있다. 한글본을 자세히 읽은 적은 없지만 오역은 거의 못 본 거 같다. 번역의 질이 상당하다.<br>
<img alt="Pasted image 20241208181940.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241208181940.png" target="_self" style="width: 400px; max-width: 100%;"><br>
<img alt="Pasted image 20241208182008.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241208182008.png" target="_self" style="width: 400px; max-width: 100%;">
수업은 mp3로 저장되어 2주간 다운 받을 수 있다.(물론 이걸 듣는 데는 상당한 용기가 필요하다.)
교재로 제공되는 텍스트북의 내용도 훌륭했다. 확실히 경쟁이 치열한 업계의 서비스 질은 빠르게 발전하는 것 같다. 나중에 기회가 되면 다시 한번 등록해 보려고 한다.<br>
<img alt="Pasted image 20241208182922.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241208182922.png" target="_self" style="width: 400px; max-width: 100%;">
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/spicus-business-pro-코스-후기.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Spicus Business Pro 코스 후기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 29 Dec 2024 06:59:42 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241208180237.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241208180237.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2W - 공공데이터 분석]]></title><description><![CDATA[2024-12-01 공공데이터를 분석해 본다. seaborn으로 차트를 구현해 본다.
folium으로 지도 시각화를 구현해 본다. 공공 데이터 포털(<a rel="noopener nofollow" class="external-link is-unresolved" href="https://data.go.kr" target="_self">https://data.go.kr</a>) Seaborn은 Python의 데이터 시각화 라이브러리로, 통계적 그래프를 쉽게 그릴 수 있습니다. Matplotlib을 기반으로 만들어졌으며, 고급 그래프를 간단한 코드로 생성할 수 있습니다. 간편한 시각화: 복잡한 통계 그래프를 간단한 코드로 생성 가능.
통계적 그래프: 히스토그램, 상관관계 히트맵, 박스 플롯 등 통계 시각화 지원.
다양한 테마 및 스타일: 그래프의 스타일을 쉽게 설정 가능.
Pandas 데이터프레임과의 호환성: 데이터프레임을 바로 사용할 수 있음. 데이터 분포를 확인할 때 사용합니다.
import seaborn as sns
import matplotlib.pyplot as plt sns.histplot(data=df, x='column_name', bins=30, kde=True)
plt.show() 두 변수 간의 관계를 시각화합니다.
sns.scatterplot(data=df, x='column1', y='column2', hue='category')
plt.show() 변수 간 상관관계를 색상으로 나타냅니다.
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show() 데이터의 분포와 이상치를 확인합니다.
sns.boxplot(data=df, x='category', y='value')
plt.show() 여러 변수 간의 관계를 한 번에 시각화합니다.
sns.pairplot(df, hue='category')
plt.show() 시계열 데이터나 연속형 데이터의 추세를 시각화합니다.
sns.lineplot(data=df, x='date', y='value')
plt.show() Folium은 지도 기반 시각화를 위한 Python 라이브러리입니다. Leaflet.js를 기반으로 하며, 인터랙티브한 지도를 생성할 수 있습니다. 지도 시각화: 인터랙티브한 지도 생성 가능.
다양한 마커 지원: 위치를 표시하는 마커 및 팝업 기능.
다양한 타일 제공: OpenStreetMap, Stamen, CartoDB 등 여러 타일 사용 가능.
GeoJSON 및 Choropleth 지도: 지역별 데이터 시각화 지원.
간단한 코드로 지도 생성: Python 코드 몇 줄로 지도 생성 가능. 기본 지도를 생성합니다.
import folium m = folium.Map(location=[37.5665, 126.9780], zoom_start=12) # 서울 위치
m 특정 위치에 마커를 추가합니다.
folium.Marker( location=[37.5665, 126.9780], popup='Seoul City Hall', icon=folium.Icon(icon='info-sign')
).add_to(m) m 반경을 가진 원형 마커를 추가합니다.
folium.CircleMarker( location=[37.5665, 126.9780], radius=50, color='blue', fill=True, fill_color='cyan'
).add_to(m) m 지역별 데이터를 색상으로 시각화합니다.
folium.Choropleth( geo_data='path/to/geojson/file.geojson', data=df, columns=['region', 'value'], key_on='feature.properties.region', fill_color='YlGnBu', fill_opacity=0.7, line_opacity=0.2
).add_to(m) m GeoJSON 파일을 지도에 추가합니다.
folium.GeoJson('path/to/geojson/file.geojson').add_to(m)
m &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
folium은 한번도 사용할 일이 없었는데 생각보다 너무 간단하게 지도와 마커를 구현할 수 있어서 놀랐다.
느낀 점:
코스의 강의들이 자연스러운 흐름을 따른다기 보다는 짜집기 된 느낌이 너무 강하다. 강의 시청 피로도가 상당하다.
다음에 개선할 점:
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/2w-공공데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/2W - 공공데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[Idea Note]]></title><description><![CDATA[영감 기록(사업) 떠오른 영감은 즉시 기록한다.
영감에 담긴 배경이나, 영감을 떠올린 요인을 함께 기록한다.
영감이 떠오른 직후가 아닌 후일에 아래의 요소를 고려하여 종합 점수를 매긴다. 실현 가능성(Feasibility)
기대 이익 (Potential Profit)
시장 수용성 (Market Acceptance)
혁신성과 차별화 (Innovation &amp; Differentiation)
사회적 &amp; 환경적 영향 (Social &amp; Environmental Impact)
리스크와 불확실성 (Risk and Uncertainty)
확장성 (Scalability)
나의 역량 (My Capabilities) 주기적인 품평회를 가지고, 가장 높은 점수를 받은 실현 가능한 아이디어를 실천에 옮긴다. ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/idea-note.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Idea Note.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 28 Dec 2024 03:47:03 GMT</pubDate></item><item><title><![CDATA[Inspiration Note]]></title><description><![CDATA[영감 기록(문학) 떠오른 영감은 즉시 기록한다.
영감에 담긴 감정을 함께 기록한다.
매 주 토요일, 영감 기록을 확인하고 한 편의 글을 작성한다. ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/inspiration-note.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Inspiration Note.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 28 Dec 2024 03:46:31 GMT</pubDate></item><item><title><![CDATA[5W - API를 이용한 데이터 수집]]></title><description><![CDATA[2024-12-21 데이터 크롤링: 다양한 웹 데이터 수집 기법 학습 및 구현
MySQL 데이터 저장: 데이터베이스와 연동하여 수집한 데이터를 효율적으로 저장
데이터 처리 자동화: 백필링과 스케줄링을 통해 누락 데이터 처리 및 관리 Selenium 및 BeautifulSoup Selenium: 동적 웹 페이지에서 데이터 수집에 적합
BeautifulSoup: HTML/XML 데이터 파싱 및 필요한 정보 추출 API 활용 REST API 호출을 통해 공공데이터 활용
requests 라이브러리로 API 데이터 수집 및 XML 구조 데이터 파싱 연결 설정 mysql.connector를 사용해 데이터베이스 연결
연결 상태 확인 및 에러 처리 기법 데이터 저장 INSERT 문으로 수집 데이터를 MySQL 테이블에 삽입
데이터 중복 방지를 위한 삭제 후 삽입 방식 구현 Backfill 잘못된 데이터 삭제 후 정확한 데이터 삽입
DELETE + INSERT 조합으로 데이터 정합성 확보 Cron 스케줄링 스크립트 자동 실행을 위한 CLI 기반 매개변수 설정
Python sys.argv 활용으로 유연한 매개변수 처리 공공데이터 api를 파이썬으로 호출할 때는 DECODING KEY를 사용한다.
공공데이터포털 API 호출로 일자별 예상 승객수 데이터 가져오기
BeautifulSoup으로 html 파싱
파싱한 데이터를 Pandas 데이터프레임으로 변환
변환된 데이터프레임을 csv로 export
import requests
from bs4 import BeautifulSoup
from config import ENCODING_KEY, DECODING_KEY url = 'http://openapi.airport.co.kr/service/rest/dailyExpectPassenger/dailyExpectPassenger'
params ={'serviceKey': DECODING_KEY, 'schDate': '20240101', 'schAirport' : "GMP"} response = requests.get(url, params=params) xml_data = response.content soup = BeautifulSoup(xml_data, 'html') items = soup.find_all('item') for item in items: for data in item.find_all(): print(f"{data.name} : {data.text}") print("--------------------------------") import pandas as pd datas = [] for item in items: item_data = { data.name : data.text for data in item.find_all()} datas.append(item_data) df = pd.DataFrame(datas) df.to_csv('airport_data.csv', index=False, encoding='utf-8')
import mysql.connector
from mysql.connector import Error
from config import db_config #일반 커넥션 코드
def create_connection(): try: connection = mysql.connector.connect(**db_config.DATABASE_CONFIG) if connection.is_connected(): print("Connected to MySQL database") return connection except Error as e: print(f"Error: {e}") return None #kwargs 활용 코드
def connect_to_db_k(**kwargs): host = kwargs.get('host', 'localhost') user = kwargs.get('user', 'root') password = kwargs.get('password', '****') database = kwargs.get('database', 'airport') print(f"Connecting to {database} on {host} as {user} with password {password}") connect_to_db_k()
create_connection()
import mysql.connector
from mysql.connector import Error
from config import db_config
import pandas as pd def create_connection(): try: connection = mysql.connector.connect(**db_config.DATABASE_CONFIG) if connection.is_connected(): print("Connected to MySQL database") return connection except Error as e: print(f"Error: {e}") return None connection = create_connection()
cursor = connection.cursor() query = """ SELECT * FROM airport.airport_data """ cursor.execute(query) result = cursor.fetchall() columns = [desc[0] for desc in cursor.description] df = pd.DataFrame(result, columns=columns)
import mysql.connector
from mysql.connector import Error
from config import db_config def create_connection(): try: connection = mysql.connector.connect(**db_config.DATABASE_CONFIG) if connection.is_connected(): print("Connected to MySQL database") return connection except Error as e: print(f"Error: {e}") return None connection = create_connection() cursor = connection.cursor() #문자열 포맷 코드 %s 활용
insert_query = """
INSERT INTO airport.daily_psg
(ARR_OR_DEP, AIRPORT_NAME, YYYYMMDD, HH_HOUR, PASSENGER_AMT, PASSENGER_TEAM_AMT, TYPE_OF_FLIGHT, CONGEST_YN)
VALUES
(%(ARR_OR_DEP)s, %(AIRPORT_NAME)s, %(YYYYMMDD)s, %(HH_HOUR)s, %(PASSENGER_AMT)s, %(PASSENGER_TEAM_AMT)s, %(TYPE_OF_FLIGHT)s, %(CONGEST_YN)s)
"""
#딕셔너리 활용
data = { 'ARR_OR_DEP': 'D', 'AIRPORT_NAME': 'GMP', 'YYYYMMDD': '20241225', 'HH_HOUR': '07', 'PASSENGER_AMT': '232', 'PASSENGER_TEAM_AMT': '2421', 'TYPE_OF_FLIGHT': 'D', 'CONGEST_YN': 'Y' } cursor.execute(insert_query, data)
connection.commit()
import requests
from bs4 import BeautifulSoup
from config import DECODING_KEY import mysql.connector
from mysql.connector import Error
from config import db_config def fetch_data(schDate, schAirport='GMP'): url = 'http://openapi.airport.co.kr/service/rest/dailyExpectPassenger/dailyExpectPassenger' params ={'serviceKey': DECODING_KEY, 'schDate': schDate, 'schAirport' : schAirport, 'numOfRows' : 100} response = requests.get(url, params=params) xml_content = response.content soup = BeautifulSoup(xml_content, features='xml') items = soup.find_all('item') datas = [] for item in items: item_data = { data.name : data.text for data in item.find_all()} datas.append(item_data) return datas def create_connection(): try: connection = mysql.connector.connect(**db_config.DATABASE_CONFIG) if connection.is_connected(): print("Connected to MySQL database") return connection except Error as e: print(f"Error: {e}") return None def delete_data(connection, schDate, schAirport): try: cursor = connection.cursor() delete_query = """ DELETE FROM airport.daily_psg WHERE YYYYMMDD = %s AND AIRPORT_NAME = %s """ cursor.execute(delete_query, (schDate, schAirport)) connection.commit() print(f"Deleted {schDate} {schAirport} {cursor.rowcount} rows") except Error as e: print(f"Error: {e}") finally: cursor.close() def insert_data_fromlist(datas, connection) : cursor = connection.cursor() insert_query = """ INSERT INTO airport.daily_psg (ARR_OR_DEP, AIRPORT_NAME, YYYYMMDD, HH_HOUR, PASSENGER_AMT, PASSENGER_TEAM_AMT, TYPE_OF_FLIGHT, CONGEST_YN) VALUES (%(ARR_OR_DEP)s, %(AIRPORT_NAME)s, %(YYYYMMDD)s, %(HH_HOUR)s, %(PASSENGER_AMT)s, %(PASSENGER_TEAM_AMT)s, %(TYPE_OF_FLIGHT)s, %(CONGEST_YN)s) """ total_inserted = 0 for item in datas: data_withvalues = { 'ARR_OR_DEP': item['aod'], 'AIRPORT_NAME': item['arp'], 'YYYYMMDD': item['sdt'], 'HH_HOUR': item['hh'], 'PASSENGER_AMT': item['pct'], 'PASSENGER_TEAM_AMT': item['pcg'], 'TYPE_OF_FLIGHT': item['tof'], 'CONGEST_YN': item['congestYn'] } cursor.execute(insert_query, data_withvalues) total_inserted += 1 connection.commit() print(f"{total_inserted} rows inserted") cursor.close() def backfill(schDate, schAirport="GMP"): connection = create_connection() if connection: try: delete_data(connection=connection, schDate=schDate, schAirport=schAirport) datas = fetch_data(schDate = schDate, schAirport=schAirport) insert_data_fromlist(datas = datas, connection = connection) except Error as e: print(f"Error: {e}") finally: connection.close() backfill(schDate = '20240831', schAirport='GMP') &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점: API 호출과 데이터베이스 연동의 조합을 통해 더 체계적인 데이터 수집과 저장 방식을 익혔다. 느낀 점: 누누이 생각하지만 코드는 어렵지 않다. 특히나 이렇게 파편화된 모듈 형태로 학습할 때는 더더욱 그렇다. 더군다나 AI는 더욱 발전할 것이고 이러한 과정은 더욱 쉬워질 것이 자명하다. 다만 데이터를 “어떤 목적을 가지고”, “어떻게”, “얼마나” 분석할 것인가 등에 집중하여 내 역량을 향상 시키는 게 바람직하다. 물론 아는 게 많아야 보이는 것도 많다. 따라서 학습은 계속할 것이다. 다행스러운 건 이 과정이 참 재미있다는 점이다. 다음에 개선할 점:
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/5w-api를-이용한-데이터-수집.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/5W - API를 이용한 데이터 수집.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[5W - 리뷰 데이터 크롤링 및 분석 프로젝트]]></title><description><![CDATA[2024-12-21 Selenium을 활용하여 관광상품 리뷰 데이터를 크롤링한다.
수집한 데이터를 구조화하여 분석 가능한 형태로 정리한다.
리뷰 데이터를 기반으로 여행 유형별 선호도 및 리뷰 특징을 분석한다. 동적 웹 페이지 데이터 추출: Selenium으로 JavaScript로 렌더링된 리뷰 데이터를 수집.
데이터 필터링 및 구조화: 리뷰 텍스트, 별점, 작성자 정보 등 주요 항목을 추출하여 리스트 형태로 저장.
안정적 크롤링: WebDriverWait를 활용하여 웹 페이지 요소 로딩 완료 후 데이터 추출. 카테고리별 리뷰 분석: 리뷰 데이터를 카테고리별로 집계하여 여행 유형(가족여행, 친구 모임 등)에 따른 리뷰 수를 비교.
평점 분포 분석: 평점의 분포를 시각화하여 긍정적/부정적 리뷰 패턴 파악.
키워드 분석: 리뷰 텍스트 내 자주 등장하는 단어를 분석하여 여행자들의 주요 관심사 도출. # 1. 하나투어 리뷰 크롤링
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By import time import pandas as pd service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service) url='https://www.hanatour.com/trp/pkg/CHPC0PKG0200M200?pkgCd=AVP231240401VJA&amp;prePage=major-products&amp;directSale=PL00113904' driver.get(url) review_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="sticky06-bottom"]'))) review_button.click() time.sleep(1) reviews = [] for page_num in range(1, 13): paginate_div = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, 'paginate'))) print("현재 페이지: ", page_num) lis = driver.find_elements(By.CSS_SELECTOR, 'ul.list_review_v2 &gt; li') for li in lis: review_info = {} rating_info = li.find_element(By.CLASS_NAME, 'rating_info') rating = rating_info.find_element(By.TAG_NAME, 'strong').text if rating_info.find_element(By.TAG_NAME, 'strong') else "" review_info['rating'] = rating spans = rating_info.find_elements(By.TAG_NAME, 'span') review_info['user'] = spans[1].text if spans[1].text else "" review_info['category'] = spans[2].text if spans[2].text else "" review_info['ageRange'] = spans[3].text if spans[3].text else "" review_info['date'] = spans[-1].text if spans[-1].text else "" review = li.find_element(By.CLASS_NAME, 'review_cont') review_text = review.text if review.text else "" review_info['review'] = review_text review_cate = li.find_element(By.CLASS_NAME, 'review_cate') review_cate_text = review_cate.text if review_cate.text else "" review_info['review_cate'] = review_cate_text reviews.append(review_info) try: if page_num % 10 != 0: next_link = paginate_div.find_element(By.XPATH, f"//span/a[text()='{page_num+1}']") next_link.click() else: next_link = paginate_div.find_element(By.XPATH, '//*[@id="sticky06"]/div/div[4]/div[3]/div/div/a[3]') next_link.click() time.sleep(2) except: print("더이상 페이지가 없습니다.") break driver.quit() reviews_df = pd.DataFrame(reviews)
reviews_df
# 리뷰 데이터 시각화
%matplotlib inline import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns plt.rcParams['font.family'] = 'Malgun Gothic' df = pd.read_csv('.\\data\\tour_review_backup.csv') #1. 카테고리별 리뷰 수
category_count = df['category'].value_counts() plt.figure(figsize=(10, 6))
category_count.plot(kind='bar', color='skyblue') plt.title('카테고리별 리뷰 수')
plt.xlabel('카테고리')
plt.ylabel('리뷰 수')
plt.xticks(rotation=20)
plt.grid(axis='y', alpha=0.2, linestyle='--')
plt.tight_layout()
plt.show() #2. 날짜별 리뷰 분포 시각화 import matplotlib.dates as mdates df['date'] = pd.to_datetime(df['date']) date_count = df['date'].value_counts().sort_index() plt.figure(figsize=(30, 6))
sns.lineplot(x=date_count.index, y=date_count.values, color='orange', marker='o') plt.title('날짜별 리뷰 분포')
plt.xlabel('날짜')
plt.ylabel('리뷰 수') date_format = mdates.DateFormatter('%Y-%m') plt.gca().xaxis.set_major_formatter(date_format)
plt.gca().xaxis.set_major_locator(mdates.MonthLocator()) plt.grid(axis='y', alpha=0.2, linestyle='--')
plt.tight_layout()
plt.xticks(rotation=45)
plt.show() #3. 연령대별 평균 평점 비교 df_age = df[df['age'].str.endswith('대')]
df_age = df_age[df_age['rating'].notnull()] rating_by_age = df_age.groupby('age')['rating'].mean().sort_values()
rating_by_age.sort_index(inplace=True) plt.figure(figsize=(10, 6))
sns.barplot(x=rating_by_age.index, y=rating_by_age.values, palette='viridis') plt.title('연령대별 평균 평점 비교')
plt.xlabel('연령대')
plt.ylabel('평균 평점') plt.ylim(4.0, 5.0) plt.grid(axis='y', alpha=0.2, linestyle='--') plt.tight_layout()
plt.show() &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
기초 크롤링, 시각화 방법을 학습했다. 느낀 점:
강의를 많이 고심하고 준비한 티가 난다. 학습자가 오류를 낼 수 있는 부분을 짚어주면서 강의를 하는 건 참 유익한 거 같다. 별개로 크롤링에 관한 문서를 찾다가 재미난 문서를 발견했다. <a data-tooltip-position="top" aria-label="https://velog.io/@mowinckel/%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81-I" rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@mowinckel/%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81-I" target="_self">‘웹 크롤러 좀 그만 만들어라’</a> 익살스럽게 표현했지만 크롤러의 아키텍쳐를 잘 소개하고 있다. 다음에 개선할 점: ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/5w-리뷰-데이터-크롤링-및-분석-프로젝트.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/5W - 리뷰 데이터 크롤링 및 분석 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 21 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[특강 - 프로덕트 데이터 분석 실무 프로세스]]></title><description><![CDATA[강사명 : 황수현
강연자 배경: 문과 출신에서 데이터 분석가로 전향. 파이썬을 배우며 데이터 분석에 흥미를 느끼고 데이터 관련 학문을 복수 전공.
데이터 분석가의 역할: 조직의 의사결정을 데이터 기반으로 지원하며, 프로덕트 개선 및 전략 도출.
프로덕트 데이터 분석가: 앱/웹에서 유저 행동 데이터를 분석하여 프로덕트 개선 기여.
강의 주요 내용: 데이터 분석에 필요한 툴, 스킬, 애티튜드.
KPI 모니터링, 인사이트 도출, 결과 분석 등 실제 업무 사례.
Q&amp;A를 통해 데이터 분석가 직무에 대한 이해 제공. 주요 업무: KPI 모니터링 및 인사이트 도출.
데이터 파이프라인 생성 참여 및 데이터 엔지니어링 작업.
통계 및 머신러닝을 활용한 전략 도출. 조직 구조: 전통적 대기업: 기능 중심 사업부 조직.
IT/스타트업: 스쿼드 조직으로 빠른 협업 가능. 프로젝트 성격: 기능 중심 조직: 데이터 팀 간 협업.
스쿼드 조직: 다양한 직군 간 협업, 빠른 의사결정. 로그 데이터 분석: 유저 행동 패턴 파악 및 개선안 도출.
AB 테스트: 개선안 검증을 위한 실험 설계 및 결과 분석.
기술 활용: 스파크로 대용량 로그 데이터 처리.
데이터 설계 및 ETL 작업 수행. 교육 및 데이터 리터러시: 팀 내 데이터 이해도 향상에 기여. 필수 기술: SQL, 파이썬: 대부분 과정에서 필수.
통계 지식: AB 테스트 분석 및 개선안 검증.
대시보드 툴: 데이터 시각화 및 모니터링. 기타 스킬: 커뮤니케이션: 분석 결과 공유 및 협업.
도메인 지식: 로그 설계 및 데이터 처리 이해.
데이터 마트 구축 및 자동화. A/B 테스트 설계: 테스트 기간(2주) 및 대상 설정.
최소 실험군 유저 수(약 14,000명) 계산. 데이터 처리: SQL 및 파이썬으로 CTR 계산 및 시각화.
p-value 분석을 통해 통계적 유의미성 검증. 결과 활용: 프로덕트 배포 및 전략 수립에 반영. 프로세스: 목표 지표 설정 → 로그 설계 → 데이터 마트 구축 → 대시보드 제작.
분석 결과를 바탕으로 피드백 공유 및 다음 계획 수립. RFM 분석: 유저 세그먼트 분류를 통해 맞춤형 전략 수립. (Recency, Frequency, Monetary)
사례: 유저 특성에 따른 맞춤형 광고 푸시 발송. 역량 요구: 다분야에 대한 지식 및 기술 요구.
초기에는 모든 역량을 갖추기 어려우며, 이후 데이터 엔지니어링 기술 습득. 머신러닝과의 차이점: 데이터 분석가는 유저 행동 및 의사결정 지원에 초점.
머신러닝 엔지니어는 모델 개발 및 고급 분석 담당. ]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/특강-프로덕트-데이터-분석-실무-프로세스.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/특강 - 프로덕트 데이터 분석 실무 프로세스.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 27 Dec 2024 03:48:32 GMT</pubDate></item><item><title><![CDATA[241126 - 뜻 있는 행동이 죄 뜻 없게 되는 걸 본다]]></title><description><![CDATA[명상이 되지 못하고 떠돌던 마음이,
가문 날씨 탓에 수분을 잃어,
더이상 사람의 태생임을 입증치 못 할 지경에 이르면,
빼빼 마른 글자가 되어 땅바닥에 널브러졌다.늘어진 글자를 보고 긍휼히 여길 사연 가진 이 없는 탓에,
소리는 역사 없이 놓였고,
기척 없이 쌓였다.사람이 다니는 자리는 길이 된다.
생을 잃은 것은 저절로 자라나는 법이 없다.
길을 따라 듬성듬성 파종된 글자가 나날이 키가 큰다.길을 침식하는 기세가 두려워 묻기를,
네게 무슨 양분 따위 있어 자라는가 하였더니,
이 글자는 살 오른 입술을 들썩이며
“소리를 먹고 자란다.”고 하였다.나,
또한 기쁘게
소리가 되었다.]]></description><link>https://64etuor.github.io/900_writings/poems/241126-뜻-있는-행동이-죄-뜻-없게-되는-걸-본다.html</link><guid isPermaLink="false">900_Writings/Poems/241126 - 뜻 있는 행동이 죄 뜻 없게 되는 걸 본다.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Dec 2024 14:40:07 GMT</pubDate></item><item><title><![CDATA[121007 - 신림9동 갈색줄무늬 고양이 보아라.]]></title><description><![CDATA[한참 씨름하고 있다.너의 이름을 말해주지 않으면 이 소세지를 주지 않을 테야.으름장을 놓고 들여다봐도 이 고양이는 흔한 것처럼 야옹 한마디를 않고 뚫어지게 나를 쳐다만 봐서,내 안에 있는, 허나 스스로 회의적일 수밖에 없는 자신의 정체성을 자꾸만 떠보는 게 아닌가.맘이 지레 겁을 먹으면 구체적인 취조 없이도 순순히 다 떠벌리곤 하는 게 나같이 되다만 사람들의 성질이라서 나는 바로,그렇다, 너의 짐작대로 나는 돼지일 것이다.하고 인정하는 것으로 끝을 내지 않고,그래, 부모님이 주는 밥을 더 얻어먹기가 어려워져서, 이번엔 고시를 쳐서 국가에 밥을 빌어 먹고자 하는 내가 바로 돼지다 꿀꿀ㅡ이라 부연을 구태여 잇고 나니 이 고양이의 태도는 한결 더 도도해진다.이건 의미심장한 웃음인지, 단순한 가소로움인지 인간의 상식을 동원하여 짐작하려 해도 큰 해답은 없고, 꼬리는 뒤로 감추고 뻔히 날 바라보는 고양이를 이제는 한낱 고양이로 부르는 것도 죄송스러워져서 내가 마침 깨갱하려던 차, 한 발짝 나에 다가오는 고양이님.나는 멍하니 쥐고 있던 소세지를 내밀고 고양이님은 그것을 취하려는 듯, 경계하는 듯 뜻 모를 몸짓을 잠시 하다가 이내 물고는 사라진다. 필연으로 골목에 남은 것은 돼지 한 마리와 돼지 그림자뿐. 그래서 이 가여운 조연을 뒤로하고 운명을 찾아 떠난 주연의 부재를 기회 삼아, 그리고 공허하게 비추이는 가로등 불빛을 조명 삼아 고독한 돼지, 조연의 맹랑한 독백을 시작하건대,나는 오늘 사람으로서의 일반적인 자존심을 한껏 망가뜨린 사람치고는 기특한 생각을 하여서, 고양이가 저의 새끼를 먹이는 다정한 모습을 상상하고,여전히 이 돼지에게 허락되어 있는 끝내주게 멋진 밤을 이렇게 몇 자 독백으로 찬사 하노라.나는 참으로 사는 것이 즐거워 미쳐버리겠다!]]></description><link>https://64etuor.github.io/900_writings/poems/121007-신림9동-갈색줄무늬-고양이-보아라..html</link><guid isPermaLink="false">900_Writings/Poems/121007 - 신림9동 갈색줄무늬 고양이 보아라..md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Dec 2024 14:35:23 GMT</pubDate></item><item><title><![CDATA[210605 - 가나다라마바사]]></title><description><![CDATA[올해 들어는 꼭 장가를 가겠다며 주변에 은근히 너스레를 떨었다.
그게 꼭 반년 전의 일일 것인데 그 짧지 않은 동안 한 번 선을 보기는커녕 결혼이며 연애며 할 방도를 궁리해본 일도 없다.
사람에게 소망이란 놈이 어떻게 작용하는지 고려해 보면 나는 맘에 있지 않은 말을 겁에 질려 떠 벌리고 다녔다는 생각이 든다.실로 나는 무서운 맘이 들고 만다. 내가 남 앞에 결혼을 하겠다며 호언장담하던 일은 실상 남과 하나로 되어 가정을 이루겠다는 옅은 염원이, 더해지는 시간에 휩쓸려 영영 사라질까 염려한 것에 불과하다.
염려는 훌륭히 현실이 된 듯 보인다.
이로써 누군가 내게 무언가 이루고 싶은 것이 있냐고 물었을 때,
나는 답할 모든 대답을 잃어 버리고 말았다. 이렇게 보면 이런 괴이한 사람이 홀로 남은 것은 다행스러운 일이다.
사람이란 때로 노을이 마음에 지고 붉게 물들기도 하며,
비에 젖어 추적한 습기를 뿜기도 하고,
때때로 수풀에 숨어 자기가 사람인 걸 까먹고 녹색이 되어야 좋다.나도 여러 번쯤은 그렇게 되리라 하였고, 딱 그만큼 여러 번 그렇게 되지 못했다.
바라는 것이 되지 못한 마음이 깊이 침전하여 결국 그 생사를 가늠할 수 없는 곳에 닿아서,
아니, 그보다 더 먼 곳으로 가 샅샅이 구석구석들이 나를 탐구할까 두려워,
나는 차라리 죽은 사람이고만 싶다. 올해 꼭 잔칫상을 먹어 보겠다한 다짐이,
말한 바와는 별 다르게 이루어진들,
하루 저물어 다같이 꿈에서 깨거든.
나는 죽어 없는 사람일 뿐이다.
사람의 마음이 죽거든 껍데기야 어데 쓸까. 언제 하나 둘 잃었는지 모르는 바람들이 사라지고,
물도 토양도 멈추면 썩는 이치대로 나도 그럼 이제
염원하는 동력을 싸그리 잃고 썩는 일만 남았다는 예상이 있다.
서서히 썩는 동안 내 악취를 맡지 못하게 될 것이 괴롭다.
허나 이렇게 보면 이런 괴이한 악취가 홀로 남을 것은 다행스런 일이다. 그다지 흥미 없으니 지나가는 건 지나가는 것에 지나지 않는다.
해는 지고, 해는 뜨고,
당연한 일은 도통 눈에 보이질 않는다. 담배에 불을 붙여 먹구름을 만들고
먹구름이 비를 내리고,
눈에 담기지 않은 모든 풍경이 기화하여
깡그리 마른 마음으로 얄궂게 빨려 들어가고, 이내 토해져
이 종이 위에 가나다라마바사를 나열하고 이내는
연기와 함께 흩어졌다]]></description><link>https://64etuor.github.io/900_writings/poems/210605-가나다라마바사.html</link><guid isPermaLink="false">900_Writings/Poems/210605 - 가나다라마바사.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Dec 2024 14:33:13 GMT</pubDate></item><item><title><![CDATA[Power BI_통합 대시보드 구현]]></title><description><![CDATA[예전에 Power BI로 대시보드를 만들 때, 내가 원하는 수준의 기능을 구현하기 위해 참고할 만한 국문 자료가 없어서 대부분 영문 자료를 참조하거나 Microsoft Power BI Documentation을 참조했다. 구축 이후 수정할 일이 크게 없어 방치하다 보니 세세한 요청 사항이 생겼을 때, 나도 어떻게 만들었는지 기억이 안 나서(…) 다시 자료 찾아보는 일이 생겼다. 그런데 아무래도 한국에서 많이 사용을 하는 툴이 아니다 보니 여전히 국문 자료가 부족한 듯 보인다. 그래서 리포트를 만들었던 과정을 복기하는 겸, 리포트 내에 적용했던 여러 사례를 이 블로그를 통해 소개하고자 한다.
기본적인 Power BI의 기능에 대한 강의나 블로그, 영상 자료 등은 이미 있으니 여기에서는 다른 사람들이 다루지 않은 부분으로 판단되는 것들만 적도록 하겠다.사내 정보 공유 목적으로 작성하였으나 공유할 사유가 없어져서 블로그 종료(…)파편화되어 있던 데이터들을 한 곳에서 관리하고 데이터의 일관성과 무결성을 확보하기 위해 엑셀로 정리하던 기존 자료들을 모두 없애고, 데이터를 Sharepoint 서버에 등록하는 방식으로 업무의 형태를 완전히 바꾸었다. 비구조적인 데이터를 정규화화여 구조화했으므로 데이터 분석 및 시각화가 용이해졌다.
업무 효율 극대화: raw data 원본만 서버에 등록하고 나머지 자료는 모두 raw data로부터 자동으로 파생되게 함으로써 기존에 보고 자료 등을 작성하기 위해 데이터를 2차 가공하던 일련의 과정을 모두 없앤다.
모든 개별 엑셀 보고 자료를 없애고 하나의 대시보드에서 모든 내용을 확인할 수 있도록 한다.
엔드유저의 필요에 맞게 데이터를 필터링 할 수 있는 동적 보고서를 구현한다.
기존에 집계하거나 분석하지 않던 데이터 또한 필요에 맞게 분석하여 이용할 수 있도록 한다. 엑셀 VBA로 작성한 데이터 입력 솔루션을 없애고(Oauto2.0 인증 문제로 데이터셋 자동 업데이트가 불가능한 문제 발생) 간이 ERP 제작(데이터 입력 시 무결성을 확보하기 위해 솔루션을 직접 제작)
데이터베이스 아키텍쳐 작성
데이터 정규화 차트 막대에 마우스 커서를 올려서 생산/계획 세부 내용 확인(툴팁)
<img alt="Pasted image 20241008162044.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008162044.png" target="_self">
<br><img alt="Pasted image 20241008162059.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008162059.png" target="_self"><br><img alt="Pasted image 20241008153224.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008153224.png" target="_self"><br><img alt="Pasted image 20241008161003.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008161003.png" target="_self"><br><img alt="Pasted image 20241008153533.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008153533.png" target="_self">
Defect Cost 분석
차트 막대에 마우스 커서를 올려서 불량 사진 및 내역 확인(툴팁)<br>
<img alt="Pasted image 20241008160901.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008160901.png" target="_self">
<br><img alt="Pasted image 20241008161431.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008161431.png" target="_self">
Target 값은 분기별 목표 실적과 날짜에 동적 연동<br>
<img alt="Pasted image 20241008161715.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008161715.png" target="_self">
<br><img alt="Pasted image 20241008162529.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008162529.png" target="_self"><br><img alt="Pasted image 20241008162745.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008162745.png" target="_self">
금액의 단위를 KRW와 USD로 출력 가능하게끔 구현(본사 보고용도)<br>
<img alt="Pasted image 20241008163807.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008163807.png" target="_self">
<br><img alt="Pasted image 20241008164028.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008164028.png" target="_self"><br><img alt="Pasted image 20241008164237.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008164237.png" target="_self"><br><img alt="Pasted image 20241008164425.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008164425.png" target="_self"><br><img alt="Pasted image 20241008164618.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008164618.png" target="_self"><br><img alt="Pasted image 20241008163445.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008163445.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/power-bi/power-bi_통합-대시보드-구현.html</link><guid isPermaLink="false">600_Tech Stack/Power BI/Power BI_통합 대시보드 구현.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Dec 2024 14:09:41 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20241008162044.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008162044.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ERP 대용 솔루션 최적화 및 핵심 기능]]></title><description><![CDATA[앱의 성능을 최적화할 수 있는 방법과 핵심 기능만 소개합니다.<img alt="Pasted image 20241209135038.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209135038.png" target="_self">
앱의 성능을 위해 Control과 Component의 수는 적을 수록 좋다. 계층 구조의 데이터나, 위와 같은 테이블 형태로 입력하는 게 유리한 형태의 데이터의 경우 Gallery Control 내부에 다른 Control을 삽입하여 출력하는 방법을 적극적으로 활용한다. (예: 사이드 메뉴 등)
(스프레드시트처럼 Grid 형태로 표시되는 위 사진의 테이블은 사실 Gallery Control에 텍스트 입력 컨트롤 등을 여러 개 삽입하고, 테두리를 적용한 눈속임에 불과하다.)
<br><img alt="Pasted image 20241209134400.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209134400.png" target="_self">
최종적으로 서버에 patch 하여 저장 해야 하는 데이터를 입력하는 경우, 입력 Control의 OnChange 속성에서 위와 같은 코드를 적용한다.
캐시에 콜렉션 형태로 데이터를 저장/업데이트하고 이후에 유저의 특정 조작으로 한번에 서버에 patch하는 게 핵심이다.
(개별 레코드로 patch할 경우, 서버 응답까지 감안하면 상당히 느릴 뿐더러 각 patch의 error에 대응해야 한다.)
<br><img alt="Pasted image 20241209135719.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209135719.png" target="_self">
Component(한글판: 구성 요소)는 자체적으로 독립된 개체이다. 외부에서 선언한 변수나 Control의 값을 직접 참조하거나 변경할 수 없기 때문에 “사용자 지정 속성 기능”을 이용해서 속성(화면, 변수 등)을 명시하고 Component와 외부 요소 간 데이터 통신을 한다.
<br><img alt="Pasted image 20241209140537.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209140537.png" target="_self">
Power Apps의 앱의 함수는 기본적으로 동기적으로 처리된다.
따라서 비동기처리가 필요한 경우 Concurrent 함수를 이용해서 명시적으로 처리해주어야 한다. 당연한 얘기지만 Concurrent 내의 각 함수는 서로 독립적이어야 한다.
대표적으로 Concurrent를 사용하는 예가 바로 “데이터 로드”, 혹은 위 사진의 “데이터 캐싱”이다.
<br><img alt="Pasted image 20241209134814.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209134814.png" target="_self">
Gallery Control 등 데이터 조회 기능의 items 속성은 앱 로드 시 미리 캐싱된 콜렉션 데이터를 활용한다. 지연시간을 줄여 사용자 경험을 향상 시킬 수 있다.
<br><img alt="Pasted image 20241209140207.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209140207.png" target="_self" style="width: 500px; max-width: 100%;">
위와 마찬가지로 앱 내에서 Lookup 함수 등으로 조회/필터 등이 필요한 정적 데이터도 미리 Collection 등으로 캐싱해 두는 게 바람직하다. <br><img alt="Pasted image 20241209141258.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209141258.png" target="_self">
어떻게 어플리케이션 내에서 Power BI의 데이터셋을 업데이트하는 작업을 수행할까 고민을 했었는데 굉장히 간단한 방법으로 해결했다.
위의 Commit Sign 프레임은 Sharepoint List와 연결되어 있고, Commit 버튼을 누르면 실제로는 폼을 제출하여 데이터가 저장되는 형태다.
Power Automate의 트리거를 바로 이 Sharepoint List에 새로운 레코드가 등록될 때로 지정하여, Power BI Rest Api를 호출하여 Dataset을 Refresh하는 플로우를 만들었다.<br>
<a data-href="Power BI Dataset update Flow" href="https://64etuor.github.io/600_tech-stack/00_achieves/power-automate/power-bi-dataset-update-flow.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Power BI Dataset update Flow</a>
<br><img alt="Pasted image 20241209142217.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209142217.png" target="_self"><br>
<img alt="Pasted image 20241209142506.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241209142506.png" target="_self">
기본 DropDown Control의 경우, 여러가지 항목을 동시에 선택하면 “다중 선택 값”이라고 표시되고 실제 선택된 항목을 직관적으로 알 수 없다.
이걸 해결하기 위해 Label을 하나 추가해서 DropDown Control의 Text 표시 부분에 오버랩하고 Concat 함수로 값을 붙여서 표시하게 했다. isBlank 결과에 따라 표시하는 결과가 다른 이유는, 서버에 저장된 값(레코드)은 키/값 쌍으로 이루어진 딕셔너리이고, 내부 형태는 id와 value로 이루어져 있으므로 Value를 표시한다. DropDown Control에 선택된 현재 값은 연결된 인사 정보 테이블의 데이터(DropDown Control의 Items source)이고, id, 이름, 사번 등의 데이터가 레코드 정보에 있기 때문에 ‘이름’을 표시한다. 마지막으로 전역 변수는 아래와 같은 특정 상황에서 제한적으로 활용하고 가급적이면 컨텍스트 변수나 컬렉션을 사용한다. 앱 전반에 걸친상태 관리(테마, 환경 설정 등) 개인화 설정을 지원하려는 경우, 별도의 DB 테이블로 관리한다.(Power Apps는 로컬 기기의 파일 시스템, 레지스트리, 설정 등과 직접적으로 상호 작용할 수 없다.) 화면 간 데이터 전달
조건부 UI 제어
사용자 세션 정보 저장
데이터 캐싱
기타 필요에 의한 상황 ]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/power-apps/erp-대용-솔루션-최적화-및-핵심-기능.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Power Apps/ERP 대용 솔루션 최적화 및 핵심 기능.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 26 Dec 2024 14:08:01 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241209135038.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241209135038.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Unit 10. Progress Update]]></title><description><![CDATA[ go over
last minute
worst-case scenario
over the phone I’m afraid that I won’t be able to next week.
I am booked solid with meetings and presentations for the next week or so. Q. Have you ever had issues with trying to meet with someone because of scheduling conflicts? How did you resolve those situations?A. I rarely encounter scheduling conflicts when it comes to business, but sometimes it’s challenging to meet my friends at a time when we can all get together. Unlike me, most of my friends are married, so they have their own families and need to take care of their children as well. This simply means that I have to adjust my schedule to fit theirs, but that’s no problem as long as we get to meet.Q. What type of software do you use to keep track of your meetings? Why?A. I use several Microsoft applications to manage my schedule and meetings, especially Teams, Planner, and Outlook. Our company provides licenses for these tools, and they’re quite effective for organizing my time and tasks. That said, I prefer Google Calendar for my personal life. With Google Assistant, I can easily add events by voice—like saying, ‘Hey Google, schedule a doctor’s appointment for this Saturday at 9 am’ It then reminds me when the time comes.Q. If an urgent issue came up and you had to reschedule a meeting, how would you handle the problem?A. I’ll inform the attendees as soon as possible and try to reschedule the meeting after addressing the urgent issue. If they’re unavailable at the new time, the meeting isn’t the only option—we can still discuss via email or chat. Another good option is holding a Zoom meeting. I typically have online meetings rather than in-person ones, as my company is international.Hello, Yangha! Looking at the sentences you wrote, I think a few adjustments would make them sound more natural in English. The first sentence,&nbsp;"I have only little vacation time."&nbsp;is almost perfect, but using&nbsp;"a little"&nbsp;instead of&nbsp;"little"&nbsp;would sound more natural.
Saying&nbsp;"I have only "a little" vacation time."&nbsp;makes it clearer that you have&nbsp;"little vacation time." The second sentence,&nbsp;"He always yell"&nbsp;would be more accurate with the addition of an&nbsp;"s"&nbsp;to the verb&nbsp;"yell."&nbsp;Saying&nbsp;"He always "yells"."&nbsp;means&nbsp;"He always shouts." The third sentence,&nbsp;"I bumped into my old friend who graduate from same elementary school."&nbsp;needs to change&nbsp;"graduate"&nbsp;to past tense.
Saying&nbsp;"I bumped into my old friend who "graduated" from the same elementary school."&nbsp;makes it clearer that you&nbsp;"bumped into an old friend who graduated from the same elementary school." The fourth sentence,&nbsp;"I was a bit discomfortable."&nbsp;needs&nbsp;"discomfortable"&nbsp;changed to&nbsp;"uncomfortable."&nbsp;Saying&nbsp;"I was a bit "uncomfortable"."&nbsp;means&nbsp;"I was a bit uncomfortable." The last sentence,&nbsp;"It is kind of waste of time."&nbsp;would be more accurate with an&nbsp;"a"&nbsp;before&nbsp;"waste."&nbsp;Saying&nbsp;"It is kind of "a" waste of time."&nbsp;means&nbsp;"It is kind of a waste of time." Yangha, it's great to see you working hard on your English studies! With a little effort, you'll be able to speak English more naturally and accurately. I'm cheering for you! I have to adjust my schedule to fit theirs.
→ I have to adjust my schedule to fit theirs.
Our company provide tool to organize our schedule.
→ Our company provides tools to organize our schedule.
I am just tried to be honest.
→ I I am just trying to be honest.
I will set priority of them.
→ I will set them as a priority.
The organizer give me time.
→ The organizer gives me time.
It’s my bad habit to omit “s” after verbs and nouns even though when I do know how to use it. The practice makes perfect. What I have to is only practice. I’m thinking how to make the environment around me changed for that practice.It’s a bad habit of mine to omit the ‘s’ after verbs and nouns, even though I know how to use it. Practice makes perfect—what I need is simply more practice. I’m considering how to create an environment that helps me build this habit.]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-10.-progress-update.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 10. Progress Update.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 22 Dec 2024 11:31:54 GMT</pubDate></item><item><title><![CDATA[5W - 뉴스 크롤링 자동화 프로젝트]]></title><description><![CDATA[2024-12-18 Selenium과 BeatifulSoup을 활용한 웹 크롤링 기법을 학습한다.
개발자 도구를 활용하여 HTML element를 확인하는 법을 배운다.
List, Pagination 결합으로 효율성 높이기 브라우저 자동화: Selenium은 웹브라우저를 프로그래밍적으로 제어할 수 있는 라이브러리로, 버튼 클릭, 스크롤, 폼 제출 등 사용자가 직접 수행하는 동작을 코드로 자동화할 수 있다.
동적 페이지 처리: JavaScript를 통해 동적으로 렌더링되는 페이지에서도 데이터를 추출할 수 있다.
Wait 사용: 페이지 로딩 완료 혹은 특정 요소 렌더링 완료를 위한&nbsp;WebDriverWait&nbsp;활용법을 익힐 수 있다. HTML 파싱: BeautifulSoup은 HTML문서에서 원하는 요소(div,&nbsp;span,&nbsp;a,&nbsp;table&nbsp;등)를 손쉽게 추출할 수 있는 파이썬 라이브러리이다.
정확한 요소 선택:&nbsp;find(),&nbsp;find_all()&nbsp;메서드를 통해 특정 태그나 클래스, id를 기반으로 요소를 선택하는 방법을 배운다.
텍스트 추출 및 구조화: 파싱한 요소에서 텍스트를 추출하고 데이터프레임 등으로 정리하여 구조화된 형태로 활용할 수 있다. 실습 코드에서 일부 기능을 변경하여 적용하였다. url 검증으로 중복 뉴스는 수집 건너뛰기
page의 수를 임의로 지정하는 것이 아니라 next-button의 속성이 disabled 될 때까지 버튼을 누르면서 데이터 수집.
페이지마다 웹 드라이버를 다시 호출하지 않고 크롤링이 완료되면 종료되도록 수정 #KBS 뉴스 크롤링 코드
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait import pandas as pd
import time service = Service(executable_path=ChromeDriverManager().install())
driver = webdriver.Chrome(service=service) url_list = []
title_list = []
body_list = []
date_list = []
collected_urls = set() try: driver.get('https://news.kbs.co.kr/news/pc/category/category.do?ref=pSiteMap') time.sleep(1) page = 1 while True: print(f"페이지 {page} 수집 중...") wait = WebDriverWait(driver, 10) wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'box-content'))) html = driver.page_source soup = BeautifulSoup(html, 'html.parser') box_contents = soup.find_all('a', class_='box-content flex-style') new_articles = 0 for box_content in box_contents: url = "http://news.kbs.co.kr" + box_content['href'] if url in collected_urls: continue title = box_content.find('p', class_='title').text body = box_content.find('p', class_='news-text').text date = box_content.find('span', class_='date').text url_list.append(url) title_list.append(title) body_list.append(body) date_list.append(date) collected_urls.add(url) new_articles += 1 print(f"이 페이지에서 {new_articles}개의 새로운 기사를 수집했습니다.") if new_articles == 0: print("새로운 기사가 없어 수집을 종료합니다.") break try: next_button = driver.find_element(By.CSS_SELECTOR, 'button.next-button:nth-child(4)') next_button.click() time.sleep(2) page += 1 except: print("다음 페이지 버튼을 찾을 수 없습니다.") break finally: driver.quit() data = { '뉴스url': url_list, '뉴스제목': title_list, '뉴스본문': body_list, '뉴스날짜': date_list
}
df = pd.DataFrame(data)
print(f"총 {len(df)}개의 고유한 뉴스 기사를 수집했습니다.")
df.to_csv('.\data\kbs_news_test.csv', index=True)
#SBS RSS 활용 피드 수집
import feedparser
import pandas as pd headline_url = 'https://news.sbs.co.kr/news/headlineRssFeed.do?plink=RSSREADER' headline_feed = feedparser.parse(headline_url) date_list = []
title_list = []
url_list = [] for entry in headline_feed.entries : date_list.append(entry.published) title_list.append(entry.title) url_list.append(entry.link) data = { "Date" : date_list, "Title" : title_list, "URL" : url_list} df = pd.DataFrame(data) df.to_csv('.\data\sbs_news_rss_headline.csv', index=True) &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
예전에 배웠던 내용에서 크게 달라진 건 없어서 큰 무리 없이 학습을 마쳤다. 기본적인 웹 크롤링 기법을 복습하였다. 느낀 점:
예전에 네이버 카페 데이터를 크롤링할 때 로그인 인증 방식이 자꾸 바뀌어서 골치였는데, 생각해보니 그렇게 고생한 덕분에 아직까지 이 챕터의 내용은 잘 기억이 난다. 적당한 시련은 항상 도움이 된다. 다만 DOM이 조금이라도 변경되면 유지보수가 필요한 이러한 코드를 ‘크롤러’라고 부를 수 있는지는 글쎄…
다음에 개선할 점:
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/5w-뉴스-크롤링-자동화-프로젝트.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/5W - 뉴스 크롤링 자동화 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[221029 - 여자로 살아간다는 것]]></title><description><![CDATA[고민해본 적 없는 일을 고민해보는 것은 제법 유쾌한 일이다. 성전환자의 심리를 궁금해한 적은 있지만서도 여자로 살아가는 것에 대해 생각해 본 일은 통 없다. 나기를 남자로 났으니 그럴 수도 있고, 굳이 성별을 나누어 무언가를 생각한다는 게 익숙하지 않은 탓도 있겠다. 그래서 한번 유쾌한 고민을 해본다. 내가 여자라고 가정을 해본다. 본래 주관이 강하니 지금 내 모습과 별반 다를 것도 없겠다는 생각을 한다. 그리고 나는 지금 아무 생각이 없다. 정말 아무 생각이 없기 때문이다. 없는 말을 지어내고 꾸미는 재주가 없으니 사는 일이 매양 건조하기 이를 데 없는 사람은 바로 이렇다. 남자라서 그러한 것이 아니고, 그냥 사람이 이러하니 이런 것이다. 아마 내가 여자였다면 조금은 더 감성적일까 같은 물음은 애초에 염두의 말미를 건드리지조차 못한다. 남자라서, 아니면 여자라서, 애초에 그 둘을 구별하여 얻을 실익이 어디에 있는지 분간이 없으니, 나는 상대에 대한 배려가 없는 통 못 쓸 인간일 수도 있겠다. 못 쓸 남자가 아니라, 못 쓸 인간 말이다. 한 명의 페미니스트였던 어머니의 등을 기억한다. 그 모습은 일면 여리지만 강인했고, 또 당신의 넓지 않은 그 등속에 마치 바다를 닮은 사랑을 간직했음을 기억한다. 소외된 사람, 약자를 지나치지 못하는 어머니의 심성과 행동들은, 내 속마음 깊숙이 당최 닿기 어려운 외딴곳에 작은 씨앗을 하나 심어 놓았다. 그리고 메마른 토지와 같은 내 마음에 심어진 그 씨앗이 기어코 살아남고 발아하여 사랑이라는 낱말이 되었다. 대상의 구별이 없는 지극하고 고귀한 사랑은 아닐지 언정, 내 주변 정도는 다소 아름답고 온화하게 가꾸는 고마운 말이다. 평등은 그 해석과 의미가 다양한 말이다. 배움이 짧아 아직 평등의 실마리를 잡지 못하였지만, 언뜻 느끼길 내 마음의 그 작고 소중한 낱말이 평등을 이해하는 데 큰 도움을 줄 것만 같다. 그러므로 나는 비록 ‘여성으로 살아가는 것’이 어떤 일인지 짐작조차 못 하면서도 그 어감의 단초를 잡아, 추론을 한다. 그리고 마땅히 세상에 여러 부류의 사람이 있음을 생각하고, 그저 작은 스푼 하나로 내 마음의 눈곱만한 좋은 부분을 눈곱의 눈곱만큼 정도는 덜어내어 주기를 결심한다.‘나와 다른 것을 인정하고, 이해하려고 노력하는 것.’ 같이 살아간다는 것은 단순한 이익관계에 의한 화합 따위는 아닐 테다. 계산이 있는 곳엔 숫자가 남을 것이고, 배려가 있는 곳엔 온기가 남을 것이다. 그리고 그 온기는 다른 사람의 마음 또한 온화하게 덥혀 또 다른 이의 시린 맘을 감싸주지 않겠는가. 다분히 이상적인 말일 테지만, 내가 없는 말을 보태어 특별히 여성을 옹호하는 가식을 내비치기 보단 이 편이 나은 듯싶다. 적어도 내가 본 많은 여성들은, 옹호할 대상이 아니라 존중할 대상이었고, 개개의 삶이 훌륭해 때로 우러러볼 일도 많았던 기억이 난다. 그리고 이 얘기는 꼭 여성에 국한된 얘기만은 아닐 것이다. 마찬가지로 내 어머니가 그토록 아름다울 수 있었던 이유가 꼭 여자이기 때문만은 아니길 소망하며 이즈음 한가지 기대를 품어 본다.
나 또한 먼 훗날 언젠가 내가 받은 씨앗에서 열매를 맺고, 그 씨앗을 또한 누군가의 마음에 심어줄 수 있기를. 그리고 그 씨앗 또한 언젠가 열매를 맺기를. 그 작고 볼품없는 씨앗은 보기와 달리 어찌나 강인한지,
한겨울에도,
꿋꿋하게 싹을 틔우더라.]]></description><link>https://64etuor.github.io/900_writings/essays/221029-여자로-살아간다는-것.html</link><guid isPermaLink="false">900_Writings/Essays/221029 - 여자로 살아간다는 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 19 Dec 2024 14:22:01 GMT</pubDate></item><item><title><![CDATA[4W - 실습 과제 2]]></title><description><![CDATA[후기 문제지가 2개로 나뉘어 있는 걸 모르고 하나만 제출했다.
Streamlit 관련된 문제 3개 답안을 보완해서 제출 완료.
엑셀에서 피벗 테이블을 많이 사용해 봐서 피벗 개념이 익숙한 건 많이 도움이 된다. Streamlit 라이브러리 활용한 대시보드 구성 버튼에 의한 동작 수행
하나의 화면 내에 열을 나누어서 요소를 표현 OS 라이브러리 활용 반복문 조건문을 통해 디렉토리내에서 원하는 파일만 선택 import streamlit as st
import pandas as pd
import os folder_path = '.\\Data_Streamlit' def scan_files(): if os.path.isdir(folder_path): files = os.listdir(folder_path) csv_files = [file for file in files if file.lower().endswith('.csv')] other_files = [file for file in files if not file.lower().endswith('.csv')] csv_df = pd.DataFrame(csv_files, columns=["CSV_파일"]) other_df = pd.DataFrame(other_files, columns=["기타_파일"]) col1, col2 = st.columns(2) with col1: st.subheader("CSV 파일 목록") if not csv_df.empty: st.write(csv_df) else: st.write("CSV 파일이 없습니다.") with col2: st.subheader("기타 파일 목록") if not other_df.empty: st.write(other_df) else: st.write("기타 파일이 없습니다.") else: st.write("폴더가 없습니다.") if st.button("csv 파일 확인"): scan_files() 시각화 라이브러리 활용 역량 Streamlit 환경에서의 시각화 라이브러리활용
값이 큰 순서대로 좌측부터 시각화 데이터 집계 능력 거래량 상위 3개 데이터 집계
해당 데이터에 대한 정렬 import streamlit as st
import pandas as pd
import plotly.express as px def load_data(): Olist = pd.read_csv('.\\Data_Streamlit\\List of Orders.csv') Detail = pd.read_csv('.\\Data_Streamlit\\Order Details.csv') state_orders = Olist.groupby('State').size() state_orders = state_orders.reset_index(name='Count') orderCount_df = state_orders.sort_values('Count', ascending=False).head(3) category_counts = Detail.groupby('Category').size() category_counts = category_counts.reset_index(name='Count') categoryCount_df = category_counts.sort_values('Count', ascending=False).head(3) col1, col2 = st.columns(2) with col1: st.dataframe(orderCount_df) orderCount_fig = px.bar(orderCount_df, x='State', y='Count', title='State 분석') st.plotly_chart(orderCount_fig) with col2: st.dataframe(categoryCount_df) categoryCount_fig = px.bar(categoryCount_df, x='Category', y='Count', title='Category 분석') st.plotly_chart(categoryCount_fig) if st.button("상위 데이터 집계"): load_data() 데이터 전처리, 집계 데이터 프레임 간 병합 역량
Pivot Table을 통한 데이터 집계수행 데이터 시각화 Streamlit 환경에서의 데이터 시각화 import streamlit as st
import pandas as pd
import plotly.express as px def load_data(): Olist = pd.read_csv('.\\Data_Streamlit\\List of Orders.csv') Detail = pd.read_csv('.\\Data_Streamlit\\Order Details.csv') merged_data = Olist.merge(Detail, on='Order ID') state_pivot = pd.pivot_table( merged_data, index='State', values='Profit', aggfunc='mean' ).reset_index() profit_state_df = state_pivot.sort_values('Profit', ascending=False) st.dataframe(profit_state_df) profit_state_fig = px.bar(profit_state_df, x='State', y='Profit', title='State별 평균 Profit 분석') st.plotly_chart(profit_state_fig) if st.button("병합 및 State Profit 분석"): load_data()
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/4w-실습-과제-2.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/4W - 실습 과제 2.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[4W - 실습 과제 1]]></title><description><![CDATA[후기 몇몇 문제의 내용을 이해할 수 없어서 시간을 너무 많이 허비했다.
결국 답안으로 제시된 출력 형태를 보고 역으로 문제가 뭔지 해석해야 되는 경우가 생겼다.
Q6 은 계속해서 답안의 출력물과 내가 작성한 쿼리 결과가 달라서 문제가 될 수 있는 부분을 하나하나 살펴 보았으나 잘못된 점을 찾을 수 없었다. 각 문제 10점(총점 100점), 부분 점수 없음 채점 기준 동일한 출력 결과를 나타내는 코드를 작성
"쿼리 작성"으로 적힌 문제는 쿼리로 문제 풀이, Python 코드로 풀 경우 0점 처리 BigQuery 데이터 추출 실패하면, csv 파일 참고 데이터 : bigquery-public-data - thelook_ecommerce
출처 : Google BigQuery 연동
사용 데이터 : thelook_ecommerce의 orders 테이블
가져올 정보 : order_id, user_id, status, gender, created_at
조건 : 2023년에 발생한 주문이면서, Complete 상태인 데이터, 쿼리로 데이터 추출
※ 최종적으로 추출한 데이터를 CSV 파일로 저장
※ BigQuery를 활용한 데이터 추출이 아닌 경우, 0점으로 처리
from google.oauth2 import service_account
from google.cloud import bigquery
import pandas as pd
import os SERVICE_ACCOUNT_FILE = "/content/drive/MyDrive/Colab Notebooks/bigquery-project-444103-bc9f716b6f5e.json" credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE) project_id = "bigquery-project-444103" client = bigquery.Client(credentials=credentials, project=project_id) def import_bigquery_data(query): query_job = client.query(query) return query_job.to_dataframe() # order_id, user_id, status, gender, created_at
# 2023년에 발생한 주문이면서, Complete 상태인 데이터, 쿼리로 데이터 추출
orders_2023_completed = import_bigquery_data(''' SELECT order_id, user_id, status, gender, created_at FROM `bigquery-public-data.thelook_ecommerce.orders` WHERE EXTRACT(YEAR FROM created_at) = 2023 AND status = 'Complete';
''') csv_path = "/content/drive/MyDrive/Assignment/4W/orders_2023_completed.csv" orders_2023_completed.to_csv(csv_path, index=False)
print(f"CSV saved: {csv_path}") def check_csv(file_path): if os.path.exists(file_path): print(f"CSV exists: {file_path}") df = pd.read_csv(file_path) print("CSV preview:") print(df.head()) else: print("CSV doesn't exist.") check_csv(csv_path)
from google.colab import drive
drive.mount('/content/drive')
이 작업의 목표는 BigQuery를 통해 thelook_ecommerce의 users 테이블에서 데이터를 추출하고, Pandas를 활용해 전처리를 수행한 후, Folium을 사용해 버블 차트를 시각화하는 것입니다. 버블 차트는 각 지역별 유저 분포를 직관적으로 표현하기 위한 시각화 방법입니다.
테이블 : thelook_ecommerce의 users 테이블
컬럼 : id,country, latitude, longitude, state 컬럼
따로 정렬은 수행하지 않고, 첫 5000개의 데이터만 가져올 것 ※ BigQuery를 활용한 데이터 추출이 아닌 경우, 0점으로 처리
데이터 추출 이후에는 Pandas를 통한 전처리 수행첫 번째 출력 데이터프레임
BigQuery를 통해 추출한 원본 데이터프레임
두 번째 출력 데이터프레임
latitude, logitude를 기준으로 중복 데이터를 삭제한 데이터프레임
state별 위도, 경도 정보를 가진 데이터프레임 생성
세 번째 출력 데이터프레임
latitude, logitude를 기준으로 user_id를 집계한 데이터프레임
state별 유저 숫자를 가진 데이터프레임 생성
집계방식에 있어서, count, nunique 등의 옵션 중 어떤 방법을 선택할지 잘 선택할 것
네 번째 출력 데이터프레임
두 번째와 세 번째 데이터프레임 merge 결과
방식은 inner를 통해 수행할 것
유저 집계 컬럼명은 'user_count'로 변경할 것
마지막 단계, 버블 차트 시각화
Folium 라이브러리를 활용하여 통해 버블 차트 시각화 진행
버블의 크기는 유저 집계 결과로 정할 것(=각 버블의 크기는 유저 수 (user_count)로 결정됩니다.)
지도 중심 위치는 데이터의 평균 위도와 경도를 사용하여 설정됩니다.
CircleMarker를 사용해 각 데이터 포인트를 시각적으로 표현합니다.
users = import_bigquery_data(''' SELECT id,country, latitude, longitude, state FROM `bigquery-public-data.thelook_ecommerce.users` LIMIT(5000) ;
''') duplicates = users['id'].duplicated()
print(f"중복 id: {duplicates.sum()}") # 첫 번째 출력 데이터프레임
# - BigQuery를 통해 추출한 원본 데이터프레임
users.info() display(users)
# 두 번째 출력 데이터프레임
# - latitude, logitude를 기준으로 중복 데이터를 삭제한 데이터프레임
# - state별 위도, 경도 정보를 가진 데이터프레임 생성 unique_coords_state = users.drop_duplicates(subset=['latitude', 'longitude']).drop(columns=['id','country'])
unique_coords_state.head(10) # 세 번째 출력 데이터프레임
# - latitude, logitude를 기준으로 user_id를 집계한 데이터프레임
# - state별 유저 숫자를 가진 데이터프레임 생성
# - 집계방식에 있어서, count, nunique 등의 옵션 중 어떤 방법을 선택할지 잘 선택할 것 coords_users = ( users.groupby(['latitude', 'longitude'])['id'] .nunique() .reset_index() .sort_values(by='id', ascending=False)
) # 결과 확인 (상위 10개)
print(coords_users.head(10))
# 네 번째 출력 데이터프레임
# - 두 번째와 세 번째 데이터프레임 merge 결과
# - 방식은 inner를 통해 수행할 것
# - 유저 집계 컬럼명은 'user_count'로 변경할 것 merged_df = pd.merge(unique_coords_state, coords_users, on=['latitude','longitude'], how='inner').sort_values(by='id', ascending=False).reset_index().rename(columns={'id' : 'user_count'})
merged_df = merged_df[['latitude', 'longitude', 'user_count', 'state']] merged_df.head(20)
# 마지막 단계, 버블 차트 시각화
# - Folium 라이브러리를 활용하여 통해 버블 차트 시각화 진행
# - 버블의 크기는 유저 집계 결과로 정할 것(=각 버블의 크기는 유저 수 (`user_count`)로 결정됩니다.)
# - 지도 중심 위치는 데이터의 평균 위도와 경도를 사용하여 설정됩니다.
# - CircleMarker를 사용해 각 데이터 포인트를 시각적으로 표현합니다. import folium
from folium import CircleMarker map_center = [merged_df['latitude'].mean(), merged_df['longitude'].mean()] bubble_map = folium.Map(location=map_center, zoom_start=3) for _, row in merged_df.iterrows(): CircleMarker( location=[row['latitude'], row['longitude']], radius=row['user_count'] ** 0.2 ).add_to(bubble_map) bubble_map
입력변수 : 데이터프레임 데이터는 위에서 추출한 orders 테이블 사용함수 이름은 gender_cal로 지정할 것함수 동작
created_at 컬럼을 월 단위로 변환하여 새로운 time 컬럼 생성 (dt.to_period('M') 사용).
time(연-월)과 gender(성별)를 기준으로 user_id의 고유 개수를 집계한 pivot table 생성. 결과는 각 연-월별로 'Female Users'(여성 사용자 수)와 'Male Users'(남성 사용자 수)로 구성된 데이터프레임. 최종적으로 전처리된 pivot table을 반환.
반환값:
성별 및 연-월별로 집계된 유저 수를 나타내는 전처리 완료된 데이터프레임.
시각화:
반환된 pivot table을 막대 그래프로 시각화하여 시간에 따른 성별 사용자의 추이를 분석합니다.
X축: 시간 (연-월 단위), Y축: 사용자 수, 색상: 성별(Female, Male).
이 시각화를 통해 시간에 따른 성별 사용자 분포의 변화를 확인할 수 있습니다.
import pandas as pd
import matplotlib.pyplot as plt def gender_cal(df): df['time'] = pd.to_datetime(df['created_at']).dt.to_period('M') pivot_table = df.pivot_table( index='time', columns='gender', values='user_id', aggfunc='nunique', fill_value=0 ) pivot_table.columns = ['Female Users' if col == 'F' else 'Male Users' for col in pivot_table.columns] return pivot_table gender_cal(orders_2023_completed)
# 시각화:
# - 반환된 pivot table을 막대 그래프로 시각화하여 시간에 따른 성별 사용자의 추이를 분석합니다.
# - X축: 시간 (연-월 단위), Y축: 사용자 수, 색상: 성별(Female, Male).
# - 이 시각화를 통해 시간에 따른 성별 사용자 분포의 변화를 확인할 수 있습니다. pivot_table = gender_cal(orders_2023_completed) pivot_table.plot( kind='bar', figsize=(8, 5)
) plt.xlabel('time')
plt.xticks(rotation=45) plt.show()
!pip install mysql.connector
목표
추출된 데이터를 통해 주문 상태가 'Shipped'인 제품과 고객 정보 확인
데이터베이스 : SQL &amp; Python 연결 수업 classicmodels
mysql.connector를 통해 classicmodels 데이터베이스 연결
status가 'Shipped'인 데이터만 가져올 것
JOIN은 INNER 방식으로 진행
해당 테이블들의 공통된 key는 ORDERNUMBER, CUSTOMERNUMBER
import mysql.connector
import pandas as pd
import matplotlib.pyplot as plt plt.rcParams['font.family'] = 'Malgun Gothic' DB_CONFIG = { 'host': '127.0.0.1', 'user': 'root', 'password': 'password', 'database': 'classicmodels', 'port': 3306
} def create_connection(): try: conn = mysql.connector.connect(**DB_CONFIG) return conn except mysql.connector.Error as err: print(f"연결 오류: {err}") return None def execute_query(query, title): conn = create_connection() if not conn: return try: df = pd.read_sql_query(query, conn) print(f"\n{title}") print(df) except Exception as err: print(f"데이터 추출 오류: {err}") finally: if 'conn' in locals() and conn.is_connected(): conn.close() def get_shipped_orders(): query = """ SELECT * FROM orders o INNER JOIN customers c ON o.customerNumber = c.customerNumber INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber INNER JOIN products p ON od.productCode = p.productCode WHERE o.status = 'Shipped' """ execute_query(query, "Shipped Orders") if __name__ == "__main__": get_shipped_orders()
유형 : "쿼리 작성" 사용 테이블 : ORDERS, ORDERDETAILSSHIPPEDDATE - ORDERDATE의 결과를 나타내는 컬럼 생성(컬럼 이름 'SHIPPING_DAYS'로 설정)배송 카테고리 분류 (CASE WHEN 활용)
아래 조건에 따라 텍스트를 나타내는 SHIPPING_URGENCY 컬럼 생성(컬럼 이름 'SHIPPING_URGENCY'으로 설정 필요) : SHIPPEDDATE - ORDERDATE가 2 이하면 'Express' : SHIPPEDDATE - ORDERDATE가 3 이상 5 이하이면 'Standard' : SHIPPEDDATE - ORDERDATE에서 이외의 경우는 'Delayed'로 처리
SALE 컬럼은 priceEach 컬럼과 QUANTITYORDERED 컬럼을 곱하여 만들 것
priceEach*QUANTITYORDERED
출력 컬럼 : ORDERNUMBER, SHIPPING_DAYS, SHIPPING_URGENCY, PRODUCTCODE SALESdef get_shipping_categories(): query = """ SELECT o.orderNumber, DATEDIFF(o.shippedDate, o.orderDate) AS shipping_days, CASE WHEN DATEDIFF(o.shippedDate, o.orderDate) &lt;= 2 THEN 'Express' WHEN DATEDIFF(o.shippedDate, o.orderDate) BETWEEN 3 AND 5 THEN 'Standard' ELSE 'Delayed' END AS shipping_urgency, od.productCode, (od.priceEach * od.quantityOrdered) AS sales FROM orders o INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber WHERE o.shippedDate IS NOT NULL ORDER BY o.orderNumber """ execute_query(query, "Shipping Categories") if __name__ == "__main__": get_shipping_categories()
country 정보는 CUSTOMERS 테이블에 존재 orderdate 정보는 ORDERS 테이블에 존재 amount 정보는 PAYMENTS 테이블에 존재테이블들의 공통된 key는 customerNumber 테이블들을 Join하면, c.customerNumber, c.country, o.orderNumber, p.amount 컬럼 테이블 생성 가능 JOIN 방식은 INNER JOIN으로 진행 alias는 원하는 이름으로 지정country별로 orders 횟수, amount 합계를 출력 order, amount 집계를 위해 어떤 컬럼을 사용할지, 어떤 집계 함수를 사용할지 잘 판단할 것각 컬럼의 이름은 order_info, amount_info로 설정def get_countrywise_order_summary(): query = """ SELECT c.country, SUM(order_summary.order_info) AS order_info, SUM(payment_summary.amount_info) AS amount_info FROM customers AS c INNER JOIN ( SELECT customerNumber, COUNT(orderNumber) AS order_info FROM orders GROUP BY customerNumber ) AS order_summary ON c.customerNumber = order_summary.customerNumber INNER JOIN ( SELECT customerNumber, SUM(amount) AS amount_info FROM payments GROUP BY customerNumber ) AS payment_summary ON c.customerNumber = payment_summary.customerNumber GROUP BY c.country """ execute_query(query, "Country-wise Order Summary") if __name__ == "__main__": get_countrywise_order_summary()
productName 정보는 PRODUCTS 테이블에 존재 priceEach 정보는 ORDERDETAILS 테이블에 존재 alias는 원하는 이름으로 지정두 테이블의 공통된 key는 productCode 테이블 JOIN하면 p.productName, o.priceEach 컬럼 테이블 생성 가능 JOIN은 INNER 방식으로 진행product별로 평균 priceEach 집계 집계 컬럼 이름은 price_info로 설장 price_info 상위 5개 productName 선택 출력시각화 타이틀은 "price_info 상위 5개 productName 평균 가격" 반드시 한글 출력을 지킬 것def get_top_5_products_by_avg_price(): query = """ SELECT p.productName, ROUND(AVG(od.priceEach), 2) AS price_info FROM products AS p INNER JOIN orderdetails AS od ON p.productCode = od.productCode GROUP BY p.productName ORDER BY price_info DESC LIMIT 5 """ conn = create_connection() if not conn: return try: df = pd.read_sql_query(query, conn) print(df) plt.figure(figsize=(8, 6)) plt.bar(df['productName'], df['price_info'], label='price_avg') plt.title("price_info 상위 5개 productName 평균 가격") plt.xlabel("Product Name") plt.legend() plt.xticks(rotation=45) plt.show() except Exception as err: print(f"데이터 추출 오류: {err}") finally: if 'conn' in locals() and conn.is_connected(): conn.close() if __name__ == "__main__": get_top_5_products_by_avg_price()
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/4w-실습-과제-1.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/4W - 실습 과제 1.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[0_교육 과정 가이드]]></title><description><![CDATA[<img alt="Pasted image 20241218150737.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241218150737.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/0_교육-과정-가이드.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/0_교육 과정 가이드.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Dec 2024 06:08:00 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241218150737.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241218150737.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[AI-related Tools List]]></title><description><![CDATA[AI 관련 유용한 툴 공식 홈페이지 및 GitHub Repositories 모음 이 문서는 다양한 AI 및 관련 분야의 생산성 툴, 데이터 분석 플랫폼, 코드 생성 보조 도구, 비즈니스 인텔리전스 도구 등을 한눈에 살펴볼 수 있도록 도와줍니다. 각 항목별 링크와 주요 기능을 상세히 담고 있으니, 관심 있는 분야의 프로젝트나 제품을 직접 확인해보세요.
Index: <a data-href="📖 610 Generative AI" href="https://64etuor.github.io/000_index/📖-610-generative-ai.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 610 Generative AI</a>]]></description><link>https://64etuor.github.io/500_resources/useful-ai-tools/ai-related-tools-list.html</link><guid isPermaLink="false">500_Resources/Useful AI Tools/AI-related Tools List.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 18 Dec 2024 04:13:09 GMT</pubDate></item><item><title><![CDATA[Integrated Bayesian Strategic Framework]]></title><description><![CDATA[관찰_가중치: 시장_관찰: 0.25 경쟁_관찰: 0.25 고객_관찰: 0.25 내부_관찰: 0.25 증거_수집_요소: 정량적_데이터: - 시장 규모/성장률 - 점유율/경쟁 지표 - 재무/운영 지표 정성적_데이터: - 고객 피드백 - 전문가 의견 - 트렌드 분석 데이터_분석_기준: - 신뢰도: [데이터 품질, 일관성] - 관련성: [목표 연관성, 시의성] - 영향도: [의사결정 영향, 중요도] 가설_검증_매트릭스: 사전확률: [기존 지식/경험] 우도함수: [새로운 증거/데이터] 사후확률: [업데이트된 신념]
[상황/분야]에서 [목표]를 달성하기 위한 베이지안 기반 전략을 수립하고자 합니다. 1. 관찰 단계
- 시장 동향: [주요 트렌드]
- 경쟁 현황: [경쟁사 활동]
- 고객 니즈: [요구사항 변화]
- 내부 역량: [강점/약점] 2. 증거 수집
- 정량적 데이터: [핵심 지표]
- 정성적 정보: [인사이트]
- 검증 방법: [신뢰도 확보] 3. 데이터 분석
- 패턴 분석: [주요 발견]
- 인과 관계: [영향 요인]
- 시사점 도출: [전략적 함의] 4. 가설 설정
- 핵심 가설: [전략적 가정]
- 검증 계획: [테스트 방법]
- 성공 기준: [평가 지표] 5. 추론 및 검증
- 실행 계획: [단계별 과제]
- 모니터링: [성과 추적]
- 피드백 루프: [개선 체계]
베이지안_업데이트_프로세스: 사전_지식: - 산업 경험 - 전문가 의견 - 과거 사례 새로운_증거: - 시장 데이터 - 고객 피드백 - 실행 결과 학습_및_조정: - 전략 수정 - 자원 재배분 - 목표 조정 성과_측정_체계: 정량적_지표: - 핵심성과지표(KPI) - 재무/운영 지표 - 효율성 지표 정성적_지표: - 고객 만족도 - 브랜드 가치 - 조직 역량 베이지안 사고 적용 사전 확률(Prior): 기존 지식과 경험
우도(Likelihood): 새로운 데이터와 증거
사후 확률(Posterior): 업데이트된 전략적 판단 증거 기반 의사결정 데이터 품질 검증
다각적 분석 수행
객관적 평가 체계 지속적 학습 및 개선 실시간 모니터링
신속한 피드백 반영
전략적 유연성 확보 리스크 관리 불확실성 정량화
시나리오 분석
대응 계획 수립
]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/integrated-bayesian-strategic-framework.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/Integrated Bayesian Strategic Framework.md</guid><dc:creator><![CDATA[달의이성]]></dc:creator><pubDate>Wed, 18 Dec 2024 04:10:09 GMT</pubDate></item><item><title><![CDATA[김익한 교수 - 메모 ‘제대로’ 하는 법]]></title><description><![CDATA[메모와 기록의 중요성 김익한 교수는 메모와 기록을 통해 개인의 성장과 삶의 변화를 이끌어내는 방법을 설명합니다. 메모는 단순한 기록이 아닌 자기 인식의 도구이며, 극단적 요약과 자기화가 핵심입니다. 계획과 구상 기록을 통해 전략적 사고가 가능해지고, 삶을 더욱 가치 있게 만들 수 있습니다. : <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=L7zWucx7TR8&amp;t=589s" target="_self">https://www.youtube.com/watch?v=L7zWucx7TR8&amp;t=589s</a> 🧠 기록을 통한 개인의 성장과 변화
📝 메모의 본질: 극단적인 요약과 자기화 2.1. 📝 메모를 하는 올바른 방법
2.2. 📝 메모의 기초: 자기화와 요약
2.3. 📝 비효율적인 메모 방식의 문제점
2.4. 📝 메모의 중요성과 현재 행위의 인식
2.5. 📝 지속적인 메모의 중요성 📝 구상 기록과 플래너의 중요성 3.1. 📝 생각 기록의 중요성
3.2. 📝 아침 플래닝의 중요성 및 효율적인 방법
3.3. 📝 구상 기록의 중요성과 방법
3.4. 📚 책 읽기의 목적과 자기 생각의 중요성 ✍️ 자기 인식과 기록의 중요성
🚀 기록형 인간으로의 변화 기록을 시작한 지 한 달 만에 머리 구조의 변화를 경험할 수 있다. [1-1]
매일 아침 플래닝을 통해 인생이 바뀔 수 있다. [1-2]
기록을 통해 전략적인 사람으로 발전할 수 있다. [1-3]
25년간 기록학을 전공한 김익한 교수는 기록 관리 경험을 개인의 삶에 적용하면 성장할 수 있다고 말한다. [1-4, 1-7] 메모는 극단적으로 요약하여 작성해야 한다. [2-5]
자기화가 중요하며, 이해한 내용을 내 방식으로 정리해야 한다. [2-14]
회의록도 핵심 키워드를 중심으로 작성해야 한다. [2-27]
메모는 기록 행위 자체가 각인을 돕는다. [2-56]
일상 기록은 자아 인식을 높이고 지적으로 풍요로운 삶을 만든다. [2-76] 메모는 조금 쓰는 것이 중요하다. [2-1]
깨달은 내용을 극단적으로 요약하고 명확히 정리해야 한다. [2-6]
많은 양을 기록하는 습관을 버려야 한다. [2-9] 정보를 자기화하여 기록하는 것이 핵심이다. [2-13]
이해한 내용을 자기 방식으로 정리해야 한다. [2-15]
극단적 요약은 시간 소모를 줄이고 전체 흐름을 파악하게 한다. [2-19] 회의에서 속기사처럼 메모하면 맥락 파악이 어렵다. [2-33]
키워드 메모와 자기 해석이 필요하다. [2-41]
효율적인 요약이 중요하며, 자기 이해와 자기화가 필수다. [2-50] 메모는 현재의 각인 과정이다. [2-55]
기록을 통해 과거 경험과 현재가 연결된다. [2-69]
비효율적인 메모는 정보를 소모하게 만든다. [2-72] 메모는 지적으로 풍요로운 삶을 만든다. [2-77]
자기 인식을 높이고 삶을 가치 있게 만든다. [2-81, 2-84] 구상 기록은 일 시작 전 목표를 상기하게 한다. [3-39]
하루 계획은 네 개에서 다섯 개의 목표로 줄이는 것이 효율적이다. [3-10] 일을 시작하기 전에 간단한 기록을 작성하면 명확한 방향성을 제공한다. [3-2, 3-3] 아침에 가장 중요한 목표를 설정하고 계획을 세우는 것이 중요하다. [3-7, 3-12]
큰 틀에서의 사고가 효율적이다. [3-9] 구상 기록은 일을 체계적으로 진행하게 돕는다. [3-39, 3-49]
핵심 성공 요인(CSF)을 고려하여 목표를 설정한다. [3-42] 책 읽기의 목적은 궁금증 해소에 있다. [3-63]
자기 생각을 가지고 질문하며 독서를 해야 한다. [3-64] 강의 내용을 검토하고 메모하는 과정이 중요하다. [4-1]
독서카드로 이해한 내용을 정리하면 지식의 깊이를 높인다. [4-25]
기록을 통해 자기 의심을 해소하고 성장할 수 있다. [4-31] 기록을 통해 전략적 사고가 가능해진다. [5-1]
삶을 주관적으로 이끌 수 있는 기반이 된다. [5-3]
메모는 개인의 성장과 변화에 기여한다. [5-1]
]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/김익한-교수-메모-‘제대로’-하는-법.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/김익한 교수 - 메모 ‘제대로’ 하는 법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Dec 2024 12:38:01 GMT</pubDate></item><item><title><![CDATA[Wheel of Life]]></title><description><![CDATA[ Physical Envirionment
Business/Career
Finances
Health
Family and Friends
Romance
Personal Growth
Fun and Recreation ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/wheel-of-life.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Wheel of Life.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Dec 2024 12:01:23 GMT</pubDate></item><item><title><![CDATA[Epic Life Audit Summary]]></title><description><![CDATA[
Lived Experience Recreation Hobbies
Travel
Leisure
Consuming
Experiences Environtment Physical Environment
Sensory Experience Body Sleep
Nutrition
Movement
Exercise Relationships Soul Life Purpose &amp; Personal Legend &amp; Personal Discovery
Spirituality Partnership Intimacy &amp; Closeness
Romance
Fun &amp; Lightness Family Family Connection
Famliy Health Friends Close Friends
Old Friends
Community &amp; Social Connections
Friends that are Protemoi Work Work Career/Business Helath &amp; Trajectory
Protemoi Relationships
Creation/Production
Sense of Contribution Finances Net Worth
Cash Flow
Sense of Control &amp; Confidence Mind Sense of Learning
Sense of Sensemaking
Sense of Personal Growth ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/epic-life-audit-summary.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Epic Life Audit Summary.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Dec 2024 11:45:57 GMT</pubDate></item><item><title><![CDATA[Daily Planner]]></title><description><![CDATA[구상 기록 목표 설정: 목표는 큰 틀에서 정한다. (총 4~5개) 아침 계획: 1~2개 가량
낮 계획: 1개 가량
밤 계획: 2개 가량 목적 설정: 목적을 기록하여 계속 상기한다.
CSF(Critical Success Factors): 반드시 수행해야 하는 요소를 고려
Process화: 계획은 단계적으로 설정하여 체계화 단계 설정 → 단계별 아웃풋 예측 시뮬레이션: 정한 목표를 가지고 오늘의 하루를 시뮬레이션 해본다. ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/daily-planner.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Daily Planner.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Dec 2024 10:18:52 GMT</pubDate></item><item><title><![CDATA[Daily Note]]></title><description><![CDATA[일상 기록 요약 기록: 시간 단위로 자신의 일상을 “한 줄” 정도로 기록한다.
회상 기록: 일기를 쓸 때 자신의 하루를 회상하여 본다. 기억이 잘 나지 않는 경우에는 일상 기록을 참고한다. ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/reference/daily-note.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/Reference/Daily Note.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Dec 2024 10:18:41 GMT</pubDate></item><item><title><![CDATA[project_index]]></title><description><![CDATA[
기록 관리를 통해 전략적인 인간으로 거듭난다. 일상 기록
구상 기록
지식 기록
영감 기록 ]]></description><link>https://64etuor.github.io/300_projects/00_achives/2412-2501-기록-관리-앱-개발/project_index.html</link><guid isPermaLink="false">300_Projects/00_Achives/2412-2501 기록 관리 앱 개발/project_index.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 17 Dec 2024 10:15:52 GMT</pubDate></item><item><title><![CDATA[2W - 실습 과제]]></title><description><![CDATA[후기
노코드 툴이 많아지면서 코드를 직접 칠 일이 없다 보니 기본적인 함수도 기억이 잘 안 났다. 그래도 몇 번 해보니 금방 적응은 된다. 전체적으로 입문 난이도라서 큰 어려움은 없었다. 과제 배점: 각 문제당 10점, 총점 100점입니다. 부분 점수는 제공되지 않습니다. 채점 기준: 출력 결과 일치: 제출한 코드가 제시된 출력 결과와 일치하는 경우에만 정답으로 인정됩니다. 코드의 다양성 인정: 출력 결과가 동일하다면 다양한 접근 방식을 존중하여 정답으로 인정합니다. 데이터 "데이터분석가 입문 Python 부트캠프ㅣ마케팅 데이터 매출 분석ㅣ제품 포트폴리오 데이터 시각화" 수업 데이터 eda_order.csv
eda_purchase.csv
eda_visit.csv # pandas 라이브러리 불러오기
# data_1 폴더에서 "eda_purchase.csv", "eda_order.csv" 파일 불러오기
# 입력변수 : 데이터프레임_1, 데이터프레임2, 기준 컬럼, 병합 방법
# 출력변수 : 병합된 데이터프레임 # 확인 역량
# merge, read_csv, dropna
from google.colab import drive
drive.mount('/content/drive') import pandas as pd
order_df = pd.read_csv('/content/drive/MyDrive/Assignment/2W/eda_order.csv')
purchase_df = pd.read_csv('/content/drive/MyDrive/Assignment/2W/eda_purchase.csv') tmp_merge_df = pd.merge( left = purchase_df, right= order_df, on = ('order_id', 'user_id'), how='inner' ).dropna() display(tmp_merge_df.head())
display(tmp_merge_df.isnull().sum())
# eda_visit.csv 파일 불러오기
# 집계함수를 활용하여 첫 방문일자와, 마지막 방문일자 확인 visit_df = pd.read_csv('/content/drive/MyDrive/Assignment/2W/eda_visit.csv') visit_df['timestamp'] = pd.to_datetime(visit_df['timestamp']) visit_summary = visit_df.groupby(by='user_id')['timestamp'].agg( first_date = 'min', recent_date = 'max' ).reset_index() visit_summary # 데이터 : eda_visit.csv
# 체크역량
# info, 날짜형 변경, 컬럼 간 계산 # 1단계 : 데이터 자료형 확인 visit_df.info() # 위에서 미리 바꿨습니다.
# 2단계 : 날짜형으로 자료형 변경 visit_df['timestamp'] = pd.to_datetime(visit_df['timestamp']) visit_df.info()
# 3단계 : 연산을 통해, service_period 컬럼 생성 visit_summary['service_period'] = (visit_summary['recent_date'] - visit_summary['first_date']).dt.days visit_summary.head()
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf
# Q3에서 생성한 데이터프레임 사용
# 막대는 20개로 설정
# 타이틀 이름은 "유저별 서비스 이용기간 분포"
# x축 제목은 "서비스 이용기간"
# y축 제목은 "유저수" import matplotlib.pyplot as plt plt.rc('font', family = 'NanumBarunGothic')
plt.rc('axes', unicode_minus = False) FIGURE_SIZE = (8, 6)
HISTOGRAM_BINS = 20 TITLE_FONTSIZE = 16
LABEL_FONTSIZE = 12
BAR_COLOR = "steelblue"
EDGE_COLOR = "black" service_periods = visit_summary['service_period'] plt.figure(figsize = FIGURE_SIZE)
plt.hist(service_periods, bins = HISTOGRAM_BINS, edgecolor = EDGE_COLOR, color = BAR_COLOR) plt.title("유저별 서비스 이용기간 분포", fontsize = TITLE_FONTSIZE)
plt.xlabel("서비스 이용기간", fontsize = LABEL_FONTSIZE)
plt.ylabel("유저수", fontsize = LABEL_FONTSIZE) plt.show() 데이터 : eda_order.csv
# 1단계 : 데이터프레임 생성
# 1) 상품별 총 주문량 집계
# 2) 상품별 총 할인비율 집계
# 3) 두 집계 결과 병합
# 출력 결과가 같다면, 다른 방법도 정답으로 인정 order_df = pd.read_csv('/content/drive/MyDrive/Assignment/2W/eda_order.csv')
order_summary = order_df.groupby( by = 'product_id').agg({ 'quantity': 'sum', 'discount_ratio': 'mean' }).reset_index() order_summary.head()
# 2단계 : quantity 기준 상위 5개 상품 확인 top_5_products = order_summary.sort_values(by = 'quantity', ascending=False).head(5) top_5_products
# 3단계 : pie 차트 시각화
# 차트 제목 : Quantity top5 product plt.figure(figsize = (8, 6))
plt.pie(top_5_products['quantity'], labels = top_5_products['product_id'], autopct = '%.1f%%' ) plt.title('Quantity top5 product', fontsize=15)
plt.show() 데이터 : 한국도로공사 로드킬 데이터 정보
출처 : 한국도로공사 - 공공데이터 포털 제공
링크 : <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.kaggle.com/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python/data" target="_self">https://www.kaggle.com/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python/data</a> # 데이터 읽기 data_2 폴더, 한국도로공사_로드킬 데이터 정보_20231231.csv
# 본부명, 지사명, 노선명을 기준으로 발생건수를 차례로 집계 및 상위 5개 출력
# 함수로 작성할 필요 없음 roadkill_df = pd.read_csv('/content/drive/MyDrive/Assignment/2W/한국도로공사_로드킬 데이터 정보_20231231.csv', encoding='euc-kr') def get_top_5_by_column(df, column): return df.groupby(column)['발생건수'].sum().head().reset_index() display(get_top_5_by_column(roadkill_df, '본부명'))
display(get_top_5_by_column(roadkill_df, '지사명'))
display(get_top_5_by_column(roadkill_df, '노선명')) # 여러 지사들의 정보를 리스트형으로 입력받고, 검색 결과를 차례대로 출력하는 함수 작성
# 데이터 정렬 기준은 동일. 각 결과는 상위 5개 행만 출력
# ['진천','부여','부안']에 대한 정보를 출력 def filter_func(data, branch_list): for branch in branch_list: branch_data = data[data['지사명'] == branch] result = branch_data.sort_values(by='발생건수', ascending=False) display(result.head()) filter_func(data = roadkill_df, branch_list = ['진천', '부여', '부안'])
# 서울경기 본부의 사고 발생건수 시각화
# 본부명 중에서, [서울경기] 데이터만 선택
# 지사들의 발생건수 barplot 시각화
import seaborn as sns df = roadkill_df[roadkill_df['본부명'] == '서울경기'] x_axis = '지사명'
y_axis = '발생건수' plt.figure(figsize=(8, 6))
sns.barplot(data=df, x = x_axis, y= y_axis)
plt.title('서울경기 본부 지사 사고 발생건수', fontsize=15)
plt.xlabel(x_axis)
plt.ylabel(y_axis) plt.show()
# 입력변수 : 데이터프레임
# 함수 동작
# (1) 본부명 입력받기
# (2) 해당 본부 지사의 발생건수 bar 차트 시각화
# (3) 존재하지 않는 본부면 "XX 본부는 존재하지 않습니다." 출력 def visualize_chart_by_branch(data): while True: headquarters = input("본부명을 입력하세요: ") if headquarters not in data['본부명'].unique(): print(f"{headquarters} 본부는 존재하지 않습니다.\n다시 입력하세요.") else: filtered_df = data[data['본부명'] == headquarters] x_axis = '지사명' y_axis = '발생건수' plt.figure(figsize=(8, 6)) sns.barplot(data=filtered_df, x = x_axis, y= y_axis) plt.title('서울경기 본부 지사 사고 발생건수', fontsize=15) plt.xlabel(x_axis) plt.ylabel(y_axis) print(f"{headquarters} 본부 지사 정보") plt.show() break visualize_chart_by_branch(roadkill_df) # 본부명 중에서, [서울경기] 데이터만 선택
# 발생 건수 내림차순 기준, 가장 상단에 위치한 지사를 folium map에 표시 import folium
from folium.plugins import MarkerCluster top_df = df.sort_values(by='발생건수', ascending = False).reset_index() center = top_df.iloc[0] map = folium.Map(location=[center['위도'], center['경도']], zoom_start=10) folium.Marker( location=[center['위도'], center['경도']] ).add_to(map) map
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/2w-실습-과제.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/2W - 실습 과제.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[4W - 재무&고객 데이터 분석]]></title><description><![CDATA[2024-12-14 Python과 MySQL 연동 이해
재무 및 고객 데이터 분석
시각화 및 실습 프로젝트 라이브러리:&nbsp;mysql.connector를 사용해 MySQL 데이터베이스와 Python을 연결 목표: 고객 중에서 구매 금액이 높은 VIP 고객을 식별합니다.
분석 방법: MySQL에서 고객별 총 구매 금액을 계산합니다.
특정 금액 이상을 지출한 고객을 VIP로 분류합니다. 목표: 고객의 반복 구매 패턴을 분석합니다.
분석 방법: 고객 ID별로 주문 횟수를 계산합니다.
Python의&nbsp;matplotlib이나&nbsp;seaborn을 사용해 시각화합니다. 목표: 고객을 여러 그룹으로 나누고 맞춤형 마케팅 전략을 수립합니다.
분석 방법: 구매 빈도, 평균 구매 금액, 마지막 구매 일자 등을 기준으로 고객을 세분화합니다.
<a data-tooltip-position="top" aria-label="K-Means Clustering Algorithm" data-href="K-Means Clustering Algorithm" href="https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/k-means-clustering-algorithm.html#_0" class="internal-link" target="_self" rel="noopener nofollow">K-평균 클러스트링</a>과 같은 머신러닝 기법을 활용합니다. 목표: 지역별 매출 차이를 분석합니다.
분석 방법: MySQL에서 각 지역의 총 매출을 집계합니다.
Python으로 지도 시각화 또는 바 차트를 그려 비교합니다. 목표: 카테고리별 매출을 분석하여 주력 제품군을 파악합니다.
분석 방법: 제품 카테고리와 판매 데이터를 결합합니다.
카테고리별 총 매출을 계산하고 시각화합니다. 목표: 가장 많이 판매된 제품을 확인합니다.
분석 방법: MySQL에서 제품별 판매 수량을 집계합니다.
상위 판매 제품을 분석하여 수요 예측에 활용합니다. 목표: 제품군별 연도별 매출 변화를 분석합니다.
분석 방법: 연도와 제품군별 매출 데이터를 수집합니다.
시계열 분석 및 라인 차트로 시각화합니다. 목표: 재고를 최적화하여 비용을 절감합니다.
분석 방법: 재고 데이터와 판매 데이터를 비교하여 과잉 재고 및 부족 재고를 파악합니다.
안전 재고 수준을 설정합니다. 목표: 각 제품의 수익성을 분석합니다.
분석 방법: 판매 가격과 원가 데이터를 활용해 제품별 마진을 계산합니다.
이익률이 높은 제품과 낮은 제품을 비교합니다. 목표: 시즌에 따른 판매 패턴을 분석합니다.
분석 방법: 월별 또는 분기별 판매 데이터를 수집합니다.
트렌드를 분석하고 마케팅 전략에 반영합니다. &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
고객 세분화에 널리 사용되는 K-평균 클러스터링이 간략하게 소개되어 추가적인 자료 조사를 했다.
느낀 점:
머신러닝 알고리즘의 적용 예가 처음으로 등장했다. 앞으로는 좀 재밌는 분석 방법이 많이 등장했으면 좋겠다.
다음에 개선할 점:<br>
제품 캐즘의 극복과 PLM 관리를 위해 위와 같은 분석을 적용하면 어떨까 찾아 보던 중 2019년에 작성된 기사를 하나 발견했다. <a data-tooltip-position="top" aria-label="https://www.2e.co.kr/news/articleView.html?idxno=205794" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.2e.co.kr/news/articleView.html?idxno=205794" target="_self">빅데이터 캐즘 극복 과제</a> 그런데 실제로 연구가 된 결과는 찾아 보기가 어려웠다. 아마 기업 내부 데이터들로만 보관하는 걸까. 시간이 허락한다면 더 자세히 조사해 보도록 해야겠다. <a href="https://64etuor.github.io?query=tag:todo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#todo">#todo</a>
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/4w-재무&amp;고객-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/4W - 재무&amp;고객 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[손자병법과 36계 및 주역 기반 약자의 마케팅 전략]]></title><description><![CDATA[the better 반문섭 님 작성
원문: 「승자는 먼저 승리한 후에 싸우고, 패자는 먼저 싸우고 나서 승리를 구한다. (勝者先勝而後求戰，敗者先戰而後求勝)」 전략: 명확한 목적 정의: 마케팅 활동의 최종 목표를 구체적으로 설정 (예: 틈새시장 점유율 확보).
핵심 성공 요인 파악: 시장에서 성공하기 위해 필요한 요소를 미리 분석하여 준비. 원문: 「지피지기 백전불태. (知彼知己 百戰不殆)」 전략: 강점과 약점 분석: 자사의 강점과 약점을 명확히 분석하여 경쟁 우위를 설정.
집중할 핵심 역량 선정: 제한된 자원을 특정 역량에 집중시켜 효과 극대화. 원문: 「형세는 고정되어 있지 않으며, 물처럼 적응해야 한다. (兵無常勢，水無常形)」 전략: 경쟁자 분석: 경쟁자의 강점과 약점을 파악하여 취약한 영역을 공략.
시장 상황 분석: 소비자 트렌드와 시장의 변화 속에서 기회를 식별. 원문: 「적이 강하면 피하고, 약하면 공격하라. (避其銳氣，擊其惰歸)」 전략: 전면전을 피함: 경쟁자가 강한 시장이나 분야에서 경쟁을 회피.
불균형 활용: 경쟁자가 소홀히 하는 틈새시장에 집중. 원문: 「병법의 요체는 예측할 수 없게 하고, 공격은 기습적으로 해야 한다. (兵者，詭道也)」 전략: 예상치 못한 혁신: 경쟁자가 준비하지 못한 새로운 제품 또는 서비스를 제공.
속도와 기민함: 빠르게 실행하여 경쟁자가 대응하기 전에 시장을 선점. 원문: 「적의 허점을 공격하고, 준비되지 않은 곳을 습격하라. (攻其無備，出其不意)」 전략: 적의 집중력을 분산: 경쟁자가 자원을 여러 방향으로 분산하도록 유도.
혼란 유발: 경쟁자의 전략적 판단을 흐리게 하는 정보 제공. 원문: 「힘을 분산하지 말고, 적을 집중적으로 공격하라. (以正合，以奇勝)」 전략: 자원의 효율적 집중: 가장 효과적인 채널, 지역, 고객군에 자원을 집중.
차별화된 가치를 제공: 고객에게 경쟁자가 제공하지 못하는 독특한 가치를 강조. 원문: 「다른 사람의 자원을 활용하는 것이 최고의 지략이다. (能用天下之力者，無敵於天下)」 전략: 파트너십 구축: 경쟁자가 독점하지 않은 공급망 또는 마케팅 채널을 적극 활용.
커뮤니티 중심 접근: 소비자와 직접적이고 강력한 관계 구축. 원문: 「적의 마음을 흐리게 하면 싸우지 않고 이길 수 있다. (不戰而屈人之兵 善之善者也)」 전략: 브랜드 스토리 강화: 약자의 이미지를 활용하여 고객의 공감과 신뢰를 얻음.
감성 마케팅: 소비자의 감정적 반응을 유도하여 브랜드에 대한 충성도를 높임. 원문: 「전략은 변해야 하며, 상황에 따라 적응해야 한다. (因敵變化而取勝者，謂之神)」 전략: 지속적인 분석: 시장과 경쟁자의 변화를 실시간으로 모니터링.
빠른 적응력 확보: 전략을 신속히 수정하여 새로운 환경에 대응. 원문: 「승리하려면 준비를 철저히 하고, 위험을 줄여야 한다. (慎戰者，其道必勝)」 전략: 최악의 상황 대비: 실패를 고려한 대안 계획 마련.
작은 성공 반복: 위험을 최소화하며 지속 가능한 성과를 반복적으로 달성. 원문: 「기회는 번개처럼 빠르며, 이를 잡지 못하면 패배한다. (機不可失，時不再來)」 전략: 성공 영역 확장: 이미 구축한 강점을 기반으로 인접 시장으로 진출.
빠른 피봇: 시장 변화에 따라 새로운 기회를 빠르게 포착. 원문: 「적이 힘을 잃도록 유도하고, 아군의 힘을 키워라. (先奪其志，後奪其力)」 전략: 시장의 리더십 강화: 고객 충성도를 높여 경쟁자가 침투할 여지 제거.
협상력 강화: 약자의 위치를 넘어 강자로 전환하기 위한 조건 마련. 원문: 「천천히, 하지만 꾸준히 기반을 다져라. (徐而圖之，久而成之)」 전략: 자원의 축적: 시장 점유율 증가에 따라 자원과 역량을 강화.
장기적 고객 관계: 고객과의 신뢰 관계를 통해 안정적 성장을 도모. 준비 단계: 내부 자원과 외부 환경을 철저히 분석하며 전략적 기초를 구축.
설계 단계: 약점은 피하고, 틈새시장과 기습을 통해 경쟁자를 공략.
실행 단계: 자원을 집중하며 심리적 우위를 확보.
운영 단계: 유연성을 통해 변화에 적응하며 위험을 최소화.
확장 단계: 성공 기반을 확대하며 경쟁자를 무력화하고 지속 가능성을 확보.
손자병법의 지혜를 마케팅 전략에 적용함으로써 약자가 최소한의 자원으로 최대한의 성과를 이룰 수 있는 실질적 로드맵을 제공합니다.]]></description><link>https://64etuor.github.io/500_resources/marketing/strategy/손자병법과-36계-및-주역-기반-약자의-마케팅-전략.html</link><guid isPermaLink="false">500_Resources/Marketing/Strategy/손자병법과 36계 및 주역 기반 약자의 마케팅 전략.md</guid><dc:creator><![CDATA[반문섭]]></dc:creator><pubDate>Mon, 02 Dec 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[Project Rhizomatic Arrangement]]></title><description><![CDATA[the better 달의이성 님 작성
프로젝트명: {{title}}
생성 날짜: {{date}}
강도(Intensity): {{high|medium|low}}
리좀 연결점들: {{related_projects}} 프로젝트 헌장: {{charter_url}} 생산적 욕망의 명시
잠재적 가능성 매핑
초기 강도 설정 이해관계자 리좀 핵심 행위자들: {{stakeholders_url}}
욕망의 교차점: {{requirements_url}}
잠재적 동맹관계: {{alliances_url}} 자원 흐름도: {{resource_flow_url}}
예산 흐름도: {{budget_flow_url}}
시간 흐름도: {{timeline_flow_url}} 작업흐름: {{workflow_1_url}}
강도측정: {{intensity_1}}
접속지점: {{connection_1}} 작업흐름: {{workflow_2_url}}
강도측정: {{intensity_2}}
접속지점: {{connection_2}} 작업흐름: {{workflow_3_url}}
강도측정: {{intensity_3}}
접속지점: {{connection_3}} 통합적 차이 이슈 지도: {{issues_map_url}}
변이 기록: {{changes_log_url}} 범위의 주름 경계변형 추적: {{scope_changes_url}}
영토확장 기록: {{scope_evolution_url}} 시간의 리듬 리듬분석: {{rhythm_analysis_url}}
변주기록: {{variation_log_url}} 자원의 흐름 흐름도: {{resource_flow_url}}
강도맵: {{intensity_map_url}} 품질의 차이 차이생성 기록: {{quality_diff_url}}
강도변화 추적: {{quality_intensity_url}} 커뮤니케이션 리좀 소통맵: {{communication_map_url}}
접속점 기록: {{connection_points_url}} 위험-기회 지도 탈주선 분석: {{risk_lines_url}}
잠재성 지도: {{opportunity_map_url}} 성과의 주름들: {{outcomes_url}}
학습된 변이들: {{lessons_url}}
새로운 잠재성: {{potentials_url}} 연구 노트: {{research_notes_url}}
참조 접속점: {{references_url}}
북마크 평면: {{bookmarks_url}} 연관 프로젝트들: {{related_projects_url}}
미디어 접속점들: {{media_coverage_url}}
{{meta_notes}}
#{{project_type}} #{{intensity_level}} #{{connection_types}}
연결된 노드들: <a data-href="{{connected_node_1}}" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">{{connected_node_1}}</a> <a data-href="{{connected_node_2}}" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">{{connected_node_2}}</a> <a data-href="{{connected_node_3}}" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">{{connected_node_3}}</a>]]></description><link>https://64etuor.github.io/500_resources/project-management/project-rhizomatic-arrangement.html</link><guid isPermaLink="false">500_Resources/Project Management/Project Rhizomatic Arrangement.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 16 Dec 2024 13:00:27 GMT</pubDate></item><item><title><![CDATA[Project_PMBOK(Goverment Initiative)]]></title><description><![CDATA[the better 정환균 님 작성
프로젝트 헌장 (구글 드라이브 URL / Hook)
주요 목표 및 성공 기준 (구글 드라이브 URL / Hook) 이해관계자 목록 (구글 드라이브 URL / Hook)
이해관계자 요구사항 문서 (구글 드라이브 URL / Hook) 초기 예산 개요 (구글 드라이브 URL / Hook)
주요 제약조건 및 가정사항 (구글 드라이브 URL / Hook) WBS (구글 드라이브 URL / Hook)
주요 마일스톤 및 일정표 (구글 드라이브 URL / Hook) 예산 계획 (구글 드라이브 URL / Hook)
자원 배정 계획 (구글 드라이브 URL / Hook) 위험 목록 (구글 드라이브 URL / Hook)
위험 대응 전략 (구글 드라이브 URL / Hook) 커뮤니케이션 전략 문서 (구글 드라이브 URL / Hook) Work name(yyyy-mm-dd) (구글 드라이브 URL / Hook)
Work name(yyyy-mm-dd) (구글 드라이브 URL / Hook) Work name(yyyy-mm-dd) (구글 드라이브 URL / Hook)
Work name(yyyy-mm-dd) (구글 드라이브 URL / Hook) Work name(yyyy-mm-dd) (구글 드라이브 URL / Hook)
Work name(yyyy-mm-dd) (구글 드라이브 URL / Hook) 이슈 로그 (구글 드라이브 URL / Hook)
변경 요청서 (구글 드라이브 URL / Hook) 범위 변경 요청서 (구글 드라이브 URL / Hook)
범위 검토 기록 (구글 드라이브 URL / Hook) 진행 상황 대조표 (구글 드라이브 URL / Hook)
일정 변경 기록 (구글 드라이브 URL / Hook) 예산 사용 내역 (구글 드라이브 URL / Hook)
원가 편차 분석 (구글 드라이브 URL / Hook) 품질 점검 보고서 (구글 드라이브 URL / Hook)
품질 관리 대장 (구글 드라이브 URL / Hook) 자원 활용 현황 (구글 드라이브 URL / Hook)
자원 재조정 계획 (구글 드라이브 URL / Hook) 의사소통 로그 (구글 드라이브 URL / Hook)
보고서 템플릿 (구글 드라이브 URL / Hook) 위험 발생 기록 (구글 드라이브 URL / Hook)
위험 대응 현황 (구글 드라이브 URL / Hook) 계약 상태 보고서 (구글 드라이브 URL / Hook)
조달 현황 기록 (구글 드라이브 URL / Hook) 이해관계자 주요 커뮤니케이션 기록 (구글 드라이브 URL / Hook)
이해관계자 변경 기록 (구글 드라이브 URL / Hook) 최종 산출물 리스트 (구글 드라이브 URL / Hook)
검수 및 승인 기록 (구글 드라이브 URL / Hook) 프로젝트 성과 요약 (구글 드라이브 URL / Hook)
교훈 및 개선사항 기록 (구글 드라이브 URL / Hook) 주요 아이디어 기록 (구글 드라이브 URL / Hook)
연구 결과 문서 (구글 드라이브 URL / Hook) 참고 문서 및 자료 링크 (구글 드라이브 URL / Hook) 중요 참고 사이트 및 도구 링크 (구글 드라이브 URL / Hook) 관련 프로젝트/업무 링크 (구글 드라이브 URL / Hook)
연관 문서 및 기록 (구글 드라이브 URL / Hook) 주요 보도 내용 (구글 드라이브 URL / Hook)
보도자료 PDF (구글 드라이브 URL / Hook)
<img alt="Pasted image 20241216215902.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241216215902.png" target="_self">]]></description><link>https://64etuor.github.io/500_resources/project-management/project_pmbok(goverment-initiative).html</link><guid isPermaLink="false">500_Resources/Project Management/Project_PMBOK(Goverment Initiative).md</guid><dc:creator><![CDATA[정환균]]></dc:creator><pubDate>Mon, 16 Dec 2024 13:00:15 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241216215902.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241216215902.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Rhizomatic Document Management System]]></title><description><![CDATA[the better 달의 이성 님 작성
📂 0_Inbox 🔗 <a data-href="Quick Capture" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Quick Capture</a>
<br>🔗 <a data-href="Daily Notes" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Daily Notes</a> 📂 1_Projects <br>🔗 <a data-href="Active Projects" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Active Projects</a>
<br>🔗 <a data-href="Project Archive" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Project Archive</a> 📂 2_Areas <br>🔗 <a data-href="Knowledge Base" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Knowledge Base</a>
<br>🔗 <a data-href="Reference Materials" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Reference Materials</a> 📂 3_Resources <br>🔗 <a data-href="Templates" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Templates</a>
<br>🔗 <a data-href="Assets" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Assets</a> 📂 4_Archives <br>🔗 <a data-href="Completed Projects" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Completed Projects</a>
<br>🔗 <a data-href="Review Logs" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Review Logs</a> 📂 ProjectName_YYYY-YYYY/
├── 📂 000_Reference/
├── 📂 100_Input/
├── 📂 200_Process/
├── 📂 300_Output/
└── 📄 project_index.md 000-099: 참조자료
100-199: 입력문서
200-299: 프로세스문서
300-399: 산출물
400+: 보관자료
🔗 [Local Files](hook://file/localPath)
🔗 [Cloud Files](hook://file/cloudPath)
🔗 [[GDrive_ProjectFolder]]
🔗 [[GDrive_SharedDocs]]
- 📑 [[Project Template]]
- 📑 [[Document Template]]
- 📑 [[Review Template]] <br><a href="https://64etuor.github.io?query=tag:project" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#project">#project</a>
<br><a href="https://64etuor.github.io?query=tag:reference" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#reference">#reference</a>
<br><a href="https://64etuor.github.io?query=tag:process" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#process">#process</a>
<br><a href="https://64etuor.github.io?query=tag:output" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#output">#output</a>
<br><a href="https://64etuor.github.io?query=tag:archive" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#archive">#archive</a>
---
title: Document Title
id: DOC_YYYY_NNN
type: [reference|input|process|output]
project: Project Name
created: YYYY-MM-DD
status: [active|archived]
links: - [[Related Doc 1]] - [[Related Doc 2]]
--- 🔍 프로젝트별 검색
🔍 문서 유형별 검색
🔍 상태별 검색
🔍 날짜별 검색 📅 주간 리뷰
📅 월간 리뷰
📅 프로젝트 종료 리뷰
<br><img alt="Pasted image 20241216215924.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241216215924.png" target="_self">]]></description><link>https://64etuor.github.io/500_resources/project-management/rhizomatic-document-management-system.html</link><guid isPermaLink="false">500_Resources/Project Management/Rhizomatic Document Management System.md</guid><dc:creator><![CDATA[달의이성]]></dc:creator><pubDate>Mon, 16 Dec 2024 13:00:13 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241216215924.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241216215924.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Second Brain Architecture]]></title><description><![CDATA[the better 정환균 님 작성<img alt="Pasted image 20241212065305.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241212065305.png" target="_self"><br>
<img alt="Pasted image 20241212065644.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241212065644.png" target="_self"><br><img alt="Pasted image 20241212065632.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241212065632.png" target="_self"><br><img alt="Pasted image 20241212065657.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241212065657.png" target="_self">]]></description><link>https://64etuor.github.io/500_resources/project-management/second-brain-architecture.html</link><guid isPermaLink="false">500_Resources/Project Management/Second Brain Architecture.md</guid><dc:creator><![CDATA[정환균]]></dc:creator><pubDate>Mon, 16 Dec 2024 13:00:07 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241212065305.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241212065305.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Low Code Tools list]]></title><description><![CDATA[노코드 및 관련 툴 공식 홈페이지 모음 이 문서는 모바일 앱 개발, 웹 개발, 데이터베이스, 자동화, 생산성 도구 등 다양한 노코드 플랫폼을 한눈에 살펴볼 수 있도록 구성되었습니다. 각 항목별 링크와 주요 기능을 상세히 담고 있으니, 필요에 맞는 툴을 직접 확인해보세요.
]]></description><link>https://64etuor.github.io/500_resources/useful-ai-tools/low-code-tools-list.html</link><guid isPermaLink="false">500_Resources/Useful AI Tools/Low Code Tools list.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 16 Dec 2024 11:30:02 GMT</pubDate></item><item><title><![CDATA[120724 - 글 쓰는 이유]]></title><description><![CDATA[&nbsp;글 쓰는 이유를 생각한다. 오래 전에 어렴풋이 어머니의 글 쓰는 등을 바라 보던 기억에서부터, 집에 셀 수 없이 한가득한 책과 책 사이에 가로 질러 놓인 유년. 으레 독서하는 기질을 남 다르게 보는 사람들의 경향과는 달리, 유독 내게서 독서가 특별한 일이 아니었던 것은 대충 그런 이유에 기인할 것이다. 인간의 모든 사회성의 뿌리가 모방에 있다듯이, 책을 읽었다는 것은 쓰는 법을 배웠다는 말과 진배없다. 그렇게 처음 쓰는 법을 배웠다.&nbsp;내 글쓰기의 최초는, 달리 말할 바 없이 우울감의 색채로 싸이고 덧칠된 불행감 충만했던 역사에 그 첫글자를 나열했으며, 10살 남짓한 나이에 이미 죽고 싶다는 논조의 자구로 가득찬 공책을 몰래 소각장에다 태워 버리던 기억이나, 홀로 된 통에 온통 까만 세상 속에서 잠에 들지 못하고 한도 없이 생각에 생각을 덧이으며 길어지기만 하던 밤, 그리고 어머니, 왠지 빨간 루즈를 바른 사람의 입술을 보면 이지러지는 심상과, 아니 그렇게 슬프게만 기억된 이름들로부터 출발했다. 그리고 그중에 어머니는 각별히 더 깊게 박힌 기억이다.&nbsp;엄마는 별난 사람이었다. 동생이 다섯살 적에 재롱잔치를 한답시고 부모님을 모셔 오라는 걸, 당일날 아침이 되서 립스틱이 동 난 것을 발견한 어머니가 발을 동동 구르니까 동생이 조언이랍시고 당당히 한 그 말이란, 자기 크레파스를 바르고 가면 되지 않냐는 것이었다. 나는 학교에 가야 했고, 그로부터 얼마가 지나서 재롱잔치 사진을 보다가 문득 웃었다. 분장한 동생과 엄마가 함께 찍은 사진에서는 빨갛게 칠해진 어머니의 입술이 유달리 눈에 띄었다.&nbsp;이런 엉뚱한 사람의 글을 사랑했다. 엄마가 쓴 기사나 글을 몰래 훔쳐 보고 짐짓 그렇지 않은 척 하곤 했던 내 행동의 이유는 뭔지 잘 모르겠지만, 그리고 사랑한다는 말을 함부로 사용하는 것을 극도로 자제하는 내 성향에도 불구하고 틀림없이 말할 수 있는 것은, 나는 그것을 사랑했다. 세상의 모든 아름다움을 어머니로부터 배웠고, 그것이 특히 그것들이 종이 위에 놓여질 때, 모두가 불로 화하여 그렇게 금시조마냥 되어 날아가버릴 듯한 착각, 그리고 조용한 희열. 어머니는 내게 이 모든 것을 주셨고, 또 모든 것을 잃게 하셨다.&nbsp;그로 잉태된 최초로부터 나의 글이란 현재까지 변함없이, 또 초심을 잃을 기미 하나 없이 고집스런, 독단스런, 폐쇄적인 행색을 고수하고 있지만, 그 글 쓰는 폭의 스펙트럼만은 다양해져서 아무렴 어떤 목적의 글이든 쓰면 쓰게 되리라 자신하는 면도 없잖아 있다. 대게 이런 경우에 내가 당황하는 부분이란, 그러나 이렇게 맘에 있는 말을 솔직하게 내려 놓는 작업은 수월치 않다는 점. 아무 글이라도 그럴 이유가 생긴다면 쓴다는 자신감의 이면에 숨은, 내게서 솔직한 글을 쓰는 것에 대한 시원적 두려움.&nbsp;언젠가 아침 식사 중에 아버지와 글에 관한 대화를 하다가 대뜸 내게 자의식 과잉의 호칭을 던져 주신 것을 퍽 감사하게 받고 말았으나, 한동안은 그걸 부끄럽게 여기지 않다가 최근에 ‘어떤 사유로 촉구된 요청’으로 하여 수치심에 잠을 못 이룰 지경이 되었다. 나는 과잉된 자의식이 쉬이 고쳐지지 않는 연유를 때때로 곰곰이 고민하였으나, 마침내 이 고민 자체가 문제의 근본적인 원인이란 것을 배운다.&nbsp;남의 이해를 갈구하며 살지 않았다. 모든 생각과 결정은 머리 속에서만 이루어졌으며 타인의 반응성을 요할 실질적 이익을 한번 느껴본 적도 없다. 글에 녹은 폐쇄성은 나의 생각 그 본연의 성질과 같다. 구태여 생각을 산발적으로 던져 놓자면,&nbsp;나는 혼자서 뭐든 하려고 한다. 타인의 이해를 종용할 수 없듯이, 내 자신을 남에게 이해시키려고 노력을 할 까닭 없다. 타인을 이해할 수 없는 인간의 본성을 이해한다. 모든 것은 상대적이므로 나의 이상을 남의 구색에 맞게 조정할 이유 없으나, 상황에 따라 어떤 것은 감추어 두는 편이 바람직하다. 나의 가치가 다른 일반의 가치와 다른 것에 충분히 신경을 두지 않는다면 별반 특별하지 않은 일에서도 타인의 오해를 사기 십상이다.&nbsp;지금 이 찰나의 생각, 그 개략적인 형태만으로도 나는 내가 솔직한 글을 쓰고자 한다면 전제가 되는 생각의 전제가 남에게 관찰되지 않는 비밀한 것이라는 점에서, 내재적으로 글의 기본적인 성질인 가독성과 보편성에 위배되는 사실을 안다. 그리고 내가 이 글이 관찰될 것이라는 전제를 두고 운을 띄웠을 적에 느꼈던 극명한 거부감이 무슨 뜻인지도 짐작이 간다.&nbsp;어머니의 그것과 같이 순수하고 솔직하면서도 아무 감정도 해치지 않는, 그런 글을 쓰고 싶던 열망과는 달리 나는 너무나 이상한 사람이었고, 그러면서도 열망을 버리지 못하여 무언가를 쭉 흉내내며 사는 것처럼. 괴로운 기억에서 한발자국도 헤어 나오질 못하면서도 눈만은 항시 그밖을 갈망하는 시선을 뿌리고.&nbsp;침전하는 감정과 이성의 극성 맞은 잣대 사이에서 험로를 헤쳐갈 하나 능력이 없이, 보잘 것 없는 펜 하나를 들고 지금 이것에 의존하여 나의 글쓰기를 여기다 쓴다.&nbsp;나는 그러므로 이제부터 쓰는 법을 알기 위하여 쓴다. 또 잿빛 바다에서 나오는 길을 찾기 위해서 쓴다. 관찰되기 위해 쓴다. 흉내내지 않기 위해 쓴다. 내가 되기 위해 쓴다.내가 사랑하는 것으로부터 사랑받기 위해 쓴다. 그리고 나 또한 아름답게 살며 쓰기를 소망한다. 부끄럽지 않기 위하여 여기 이 부끄러운, 내 나의 글 쓰는 이유를 보란듯이 내보인다.]]></description><link>https://64etuor.github.io/900_writings/essays/120724-글-쓰는-이유.html</link><guid isPermaLink="false">900_Writings/Essays/120724 - 글 쓰는 이유.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 15 Dec 2024 13:53:06 GMT</pubDate></item><item><title><![CDATA[Project Gantt]]></title><description><![CDATA[ 프로젝트의 목표를 작성한다. 프로젝트의 일정을 작성한다.
프로젝트의 일정을 표현하는 라는 태그를 달아서 tasks에서 볼 수 있도록 한다.
내가 설정한 Milestone 마감 기한도 이곳에 작성한다. 중간 지점을 표현한다 각 마일스톤을 달성하기 위해서 필요한 태스크들을 하나씩 열거한다.
할당시간과 그에 따른 마감일 기록한다. 스케쥴을 바탕으로 Gantt 차트를 작성한다.
]]></description><link>https://64etuor.github.io/500_resources/project-management/project-gantt.html</link><guid isPermaLink="false">500_Resources/Project Management/Project Gantt.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 15 Dec 2024 01:19:50 GMT</pubDate></item><item><title><![CDATA[LaTeX Suite]]></title><description><![CDATA[<a data-tooltip-position="top" aria-label="https://github.com/artisticat1/obsidian-latex-suite" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/artisticat1/obsidian-latex-suite" target="_self"><strong></strong></a>Obsidian LaTeX Suite는 Obsidian에서 LaTeX 수식을 작성하고 효율적으로 관리할 수 있도록 돕는 강력한 플러그인입니다. LaTeX 자동 완성, 단축키, 코드 스니펫과 같은 기능을 제공하여 LaTeX 사용을 간편하게 만듭니다.
Obsidian Settings → Community Plugins → Browse로 이동합니다.
"LaTeX Suite"를 검색하고 설치합니다.
설치 후 Enable을 클릭하여 플러그인을 활성화합니다.
LaTeX 수식을 입력할 때 자동으로 명령어를 완성해 줍니다.
예제: \frac을 입력하면 자동으로 \frac{}{}로 완성됩니다.
사용 방법: 수식 모드에서 \를 입력합니다.
필요한 명령어를 입력하면 자동 완성 제안이 나타납니다.
Tab 또는 Enter 키를 눌러 선택합니다. 반복적으로 사용되는 LaTeX 명령어를 단축키로 빠르게 입력할 수 있습니다.
Ctrl + L: 인라인 수식 $...$ 삽입
Ctrl + Shift + L: 블록 수식 $$...$$ 삽입
Ctrl + Shift + M: 매트릭스 템플릿 삽입
설정에서 단축키를 사용자 정의할 수 있습니다:
Settings → Hotkeys로 이동합니다.
LaTeX Suite 관련 단축키를 찾아 원하는 키 조합으로 변경합니다.
자주 사용하는 LaTeX 템플릿을 스니펫으로 저장하고 쉽게 불러올 수 있습니다.
분수 템플릿:
\frac{numerator}{denominator} 행렬 템플릿:
\begin{bmatrix}
a &amp; b \\
c &amp; d
\end{bmatrix} 사용 방법:
Ctrl + Space를 누르면 스니펫 목록이 표시됩니다.
원하는 스니펫을 선택합니다.
LaTeX 수식을 작성하면서 실시간으로 미리보기를 확인할 수 있습니다.
미리보기 활성화: Settings → Editor → "Show inline math"를 활성화합니다.
수식을 입력하면 즉시 렌더링된 결과가 표시됩니다. begin과 end로 이루어진 LaTeX 환경을 자동으로 삽입합니다.
매트릭스 환경 자동 삽입:
\begin{bmatrix} \end{bmatrix} 사용 방법:
\begin{을 입력합니다.
사용할 환경 이름을 선택하면 \end{}가 자동으로 추가됩니다.
플러그인의 다양한 기능을 사용자 환경에 맞게 설정할 수 있습니다.
Settings → LaTeX Suite로 이동합니다.
자동 완성, 단축키, 스니펫 등을 원하는 대로 조정합니다.
인라인 수식: $\frac{a}{b}$ 블록 수식: $$
\sum_{i=1}^{n} i = \frac{n(n+1)}{2}
$$
$$
\begin{bmatrix}
1 &amp; 2 \\
3 &amp; 4
\end{bmatrix}
$$ \frac 입력 → 자동 완성
Ctrl + L로 인라인 수식 템플릿 삽입
]]></description><link>https://64etuor.github.io/500_resources/obsidian/community-plugin/latex-suite.html</link><guid isPermaLink="false">500_Resources/Obsidian/Community Plugin/LaTeX Suite.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 14:13:55 GMT</pubDate></item><item><title><![CDATA[ANOVA(Analysis of Variance)]]></title><description><![CDATA[ANOVA (Analysis of Variance, 분산분석)는 두 개 이상의 그룹 간 평균의 차이를 검정하는 통계 기법입니다. 일반적으로 독립변수가 범주형이고 종속변수가 연속형일 때 사용됩니다. ANOVA는 그룹 간 평균 차이가 우연에 의한 것인지, 아니면 통계적으로 유의미한 차이인지를 판단하는 데 도움을 줍니다. 귀무가설 (Null Hypothesis, H₀) 모든 그룹의 평균이 서로 같다.
예: "모든 지역의 판매량 평균은 동일하다." 대립가설 (Alternative Hypothesis, H₁) 적어도 하나의 그룹 평균은 다르다.
예: "적어도 한 지역의 판매량 평균은 다르다." F-통계량 (F-statistic) 그룹 간 분산과 그룹 내 분산의 비율입니다.
F값이 클수록 그룹 간 평균 차이가 크다는 의미입니다. p-value 귀무가설을 기각할지 결정하는 기준입니다.
p-value &lt; 0.05이면 귀무가설을 기각하고, 그룹 간 평균에 차이가 있다고 결론 내립니다. 일원배치 분산분석 (One-Way ANOVA) 한 개의 요인(독립변수)에 대해 두 개 이상의 그룹 평균을 비교합니다.
예: "동일한 제품을 판매하는 3개의 지역에서 판매량 평균에 차이가 있는가?" 이원배치 분산분석 (Two-Way ANOVA) 두 개의 요인(독립변수)에 대해 그룹 평균을 비교합니다.
예: "지역과 판매 방법(온라인/오프라인)에 따라 판매량 평균에 차이가 있는가?" 반복측정 분산분석 (Repeated Measures ANOVA) 동일한 그룹에 대해 여러 시점에서 측정된 데이터를 비교합니다.
예: "같은 참가자가 3가지 조건에서 수행한 테스트 점수를 비교한다." 그룹 간 분산 (Between-Group Variance) 그룹 평균들 간의 차이에서 오는 분산입니다. 그룹 내 분산 (Within-Group Variance) 각 그룹 내부에서 발생하는 분산입니다. F-통계량 계산
F=그룹&nbsp;간&nbsp;평균&nbsp;제곱&nbsp;(Between-Group&nbsp;MS)그룹&nbsp;내&nbsp;평균&nbsp;제곱&nbsp;(Within-Group&nbsp;MS)F = \frac{\text{그룹 간 평균 제곱 (Between-Group MS)}}{\text{그룹 내 평균 제곱 (Within-Group MS)}} p-value 해석 p-value가 0.05 미만이면 귀무가설을 기각합니다. import pandas as pd
from statsmodels.formula.api import ols
from statsmodels.stats.anova import anova_lm # 데이터 로드
data = pd.DataFrame({ 'Units Sold': [23, 20, 22, 21, 24, 30, 32, 29, 31, 28, 25, 27, 26, 24, 28], 'Region': ['East'] * 5 + ['West'] * 5 + ['Central'] * 5
}) # OLS 모델 생성
model = ols('Q("Units Sold") ~ C(Region)', data=data).fit() # ANOVA 수행
anova_results = anova_lm(model)
print(anova_results) df sum_sq mean_sq F PR(&gt;F)
C(Region) 2.0 123.733 61.867 13.298 0.0012
Residual 12.0 55.867 4.656 F = 13.298: 그룹 간 분산이 그룹 내 분산보다 약 13배 큽니다.
p-value = 0.0012: 0.05 미만이므로 귀무가설을 기각하고, 그룹 간 평균에 통계적으로 유의미한 차이가 있다고 결론 내립니다.
import seaborn as sns
import matplotlib.pyplot as plt sns.boxplot(x='Region', y='Units Sold', data=data)
plt.title('Units Sold by Region')
plt.show()
잔차 플롯을 통해 모델이 잘 맞는지 확인합니다.import statsmodels.api as sm residuals = model.resid
sm.qqplot(residuals, line='s')
plt.title('Q-Q Plot of Residuals')
plt.show()
ANOVA를 적용하기 위해서는 다음 3가지 가정이 필요합니다: 정규성 (Normality) 각 그룹의 데이터가 정규 분포를 따릅니다.
검정 방법: Shapiro-Wilk 검정, Q-Q 플롯 등분산성 (Homoscedasticity) 모든 그룹의 분산이 동일합니다.
검정 방법: Levene 검정, Bartlett 검정 독립성 (Independence) 각 관측치는 서로 독립적입니다. ANOVA는 두 개 이상의 그룹 평균을 비교하는 강력한 도구입니다.
F-통계량과 p-value를 통해 그룹 간 차이의 유의성을 평가합니다.
시각화와 잔차 분석을 통해 결과의 신뢰성을 검증할 수 있습니다.
정규성, 등분산성, 독립성의 가정을 만족하는지 꼭 확인해야 합니다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/anova(analysis-of-variance).html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/ANOVA(Analysis of Variance).md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 14:03:33 GMT</pubDate></item><item><title><![CDATA[3W - SQL 문법]]></title><description><![CDATA[2024-12-6 SQL의 기본 문법을 이해한다. <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>
SQL은 따로 정리해 둔 문서가 있어서 내용을 정리하진 않았다.
<br>backlink 생성 이슈로 현재 빈 페이지로 연결됨 2024.12.10 시간날 때 해결..) <a href="https://64etuor.github.io?query=tag:issue" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#issue">#issue</a> <a href="https://64etuor.github.io?query=tag:todo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#todo">#todo</a>
&nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
추가 조사를 통해 SQL의 구조를 한 번 다시금 훑어 보는 계기가 되었다.
느낀 점:
적당히 쓰는 건 어렵지 않은데, 잘 쓰긴 어려운 SQL…
다음에 개선할 점:
생각해 보면 빅데이터로 부를 만한 큰 데이터를 다룬 적은 크게 없는 것 같다. 우선 BigQuery에서 공공 데이터로 Indexing 테스트를 해봐야 겠다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/3w-sql-문법.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/3W - SQL 문법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 05 Dec 2024 15:00:00 GMT</pubDate></item><item><title><![CDATA[3W - 커머스 데이터 분석]]></title><description><![CDATA[ 우수민 강사님 vlog <a rel="noopener nofollow" class="external-link is-unresolved" href="https://velog.io/@yuuuye/" target="_self">https://velog.io/@yuuuye/</a>
2024-12-7 Google BigQuery 데이터를 Pandas로 분석하는 방법을 이해한다.
각종 마케팅 데이터 분석 기법을 이해한다. 핵심 내용: Pandas 기본 사용법 Series와 DataFrame 생성
s = pd.Series([1, 3, 5, np.nan, 6, 8]) # Series 생성
df = pd.DataFrame(np.random.randn(6, 4), columns=['A', 'B', 'C', 'D']) # DataFrame 생성 데이터 확인 head(), tail()로 데이터의 처음과 끝 확인
df.head()
df.tail() 딕셔너리로 DataFrame 생성
df_dict = pd.DataFrame({ 'A': 1., 'B': pd.Timestamp('20130101'), 'C': pd.Series(1, index=list(range(4)), dtype='float32'), 'D': np.array([3]*4, dtype='int32'), 'E': pd.Categorical(['test', 'train', 'test', 'train']), 'F': 'str'
}) 핵심 내용: BigQuery 연동
from google.oauth2 import service_account
from google.cloud import bigquery SERVICE_ACCOUNT_FILE = "./api_key.json"
credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE)
client = bigquery.Client(credentials=credentials, project="project-id") 쿼리 실행 및 데이터 불러오기
def import_bigquery_data(query): query_job = client.query(query) return query_job.to_dataframe() data = import_bigquery_data(""" SELECT * FROM `public-data` LIMIT 10
""") BigQuery 데이터를 Pandas로 처리
products = import_bigquery_data("SELECT * FROM `public-data.table`") 핵심 내용: 매출 분석 매출 데이터 전처리 및 병합
using_order_items = order_items[~order_items['status'].isin(['Cancelled', 'Returned'])]
using_orders = orders[['order_id', 'user_id', 'num_of_item']]
using_merge_data = pd.merge(using_order_items, using_orders, on='order_id')
using_merge_data['revenue'] = using_merge_data['num_of_item'] * using_merge_data['sale_price'] 월별 매출 집계
result1 = using_merge_data.groupby('month')[['order_id', 'user_id', 'revenue']].agg({ 'order_id': 'nunique', 'user_id': 'nunique', 'revenue': 'sum'
}) 핵심 내용: 파레토 차트 분석 파레토 법칙을 적용하여 주요 카테고리 분석
count_data = using_data['category'].value_counts()
ratio = (count_data / count_data.sum()).cumsum() 파레토 차트 시각화
fig, ax = plt.subplots(figsize=(20, 12))
ax.bar(count_data.index, count_data.values)
line_chart = ax.twinx()
line_chart.plot(count_data.index, ratio, '-g^', alpha=0.5) 핵심 내용: 퍼널 분석 (AARRR 모델) 획득, 활성화, 유지, 매출, 추천 단계 분석 using_merge_data = pd.merge(order_items, orders, on='order_id')
using_merge_data['revenue'] = using_merge_data['num_of_item'] * using_merge_data['sale_price'] 핵심 내용: 리텐션 분석 (Cohort Analysis) 코호트별 사용자 유지율 분석
first_order_data = using_order_data.groupby('user_id')['order_dt'].min().reset_index()
merge_data = pd.merge(using_order_data, first_order_data, on='user_id')
user_retention = cohorts.divide(cohorts[0], axis=0) 리텐션 시각화
sns.heatmap(user_retention, annot=True, fmt=".0%") &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석
&nbsp;추가 자료 조사 배운 점:
마케팅 분석에 사용하는 여러 가지 기법에 대한 이해도가 생겼다.
느낀 점:
구글 클라우드를 이전에 사용해 본 적이 있어서 BigQuery 연동은 어렵지 않았다. 다만 BigQuery를 연결 확인하는 과정에서 강의 화면에 처음 보는 테이블이 연결되어 있길래 내가 강의를 대충 봐서 뭔갈 놓친 줄 알고 그전 강의를 다 돌려봤다. 결국 찾지 못하고 아무 테이블이나 연결해서 연동 테스트를 했는데 나중에 해당 테이블 주소를 강사님이 고치시더라… 또 몰려오는 피로감.
다음에 개선할 점:
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/3w-커머스-데이터-분석.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/3W - 커머스 데이터 분석.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 06 Dec 2024 15:00:00 GMT</pubDate></item><item><title><![CDATA[K-Means Clustering Algorithm]]></title><description><![CDATA[K-평균 클러스터링은 비지도 학습(unsupervised learning) 방식의 군집화(clustering) 알고리즘입니다. 데이터를 K개의 클러스터로 나누고, 각 클러스터에 속하는 데이터들이 최대한 비슷하게 되도록 하는 알고리즘입니다. 비지도 학습: 정답(레이블) 없이 데이터를 그룹화하는 학습 방식입니다. 클러스터: 비슷한 특성을 가진 데이터들의 그룹입니다. 중심점(센트로이드): 각 클러스터의 중심을 나타내는 점입니다.
K-평균 클러스터링에서는 이 중심점을 기준으로 데이터를 나눕니다. K개의 초기 중심점(centroids)을 무작위로 설정합니다.
각 데이터 포인트를 가장 가까운 중심점에 할당하여 클러스터를 형성합니다.
각 클러스터에 대해 새로운 중심점을 계산합니다 (클러스터 내 데이터들의 평균값).
중심점이 더 이상 변화하지 않을 때까지 2번과 3번 단계를 반복합니다.
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt # 데이터 생성
data = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]]) # K-평균 클러스터링 모델 생성 (K=2)
kmeans = KMeans(n_clusters=2, random_state=0).fit(data) # 예측된 클러스터 레이블
print(kmeans.labels_) # 클러스터 중심점 출력
print(kmeans.cluster_centers_) # 시각화
plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='x')
plt.title("K-Means Clustering")
plt.show() 간단하고 빠른 연산: 비교적 간단한 수학적 원리로 구현되며 빠르게 동작합니다.
대규모 데이터에 효율적: 큰 데이터셋에서도 효율적으로 군집화할 수 있습니다. K값 설정 필요: 클러스터 개수(K)를 사전에 지정해야 합니다.
초기 중심점에 민감: 초기 중심점에 따라 결과가 달라질 수 있습니다.
비구형 데이터에 부적합: 클러스터가 구형(원형)에 가까운 경우에 적합하며, 복잡한 형태의 데이터는 잘 분류하지 못합니다. 고객 세분화: 고객 데이터를 기반으로 그룹화하여 타겟 마케팅에 활용합니다.
이미지 압축: 비슷한 색상을 하나의 클러스터로 묶어 이미지 크기를 줄입니다.
이상 탐지: 비정상적인 데이터 패턴을 감지합니다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/machine-learning/k-means-clustering-algorithm.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/Machine Learning/K-Means Clustering Algorithm.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 14 Dec 2024 12:35:42 GMT</pubDate></item><item><title><![CDATA[210403 - 점을 본 이야기_미완]]></title><description><![CDATA[*수정이나 양자택일할 부분 [] 괄호 표시점을 보았다. 나는 일평생 점이니, 운수니 하는 것들을 한번 의존해 본 일 없이 없다. 참말 평생 이성을 신봉하며 살던 사람이 무슨 바람이 불어 그랬는가 하니, 중차대한 결심을 한 가지 한 까닭이다. 나는 올해 결혼을 할 것이다. 자기실현적 예언 따윌 은연중에 의도한 바도 없는데, 정말 뜬금없이 무엇을 근거로 이게 가능하다는 확신이 생겼는지 설명할 수가 없다. 그런데 정말 왠지 모르게 꼭 그렇게만 될 것 같다.올해 결혼을 하겠다고 전화로 부모님께 말씀드리니 아버지는 깜짝 놀라셨다. 날더러 늘 결혼을 안 한다더니 웬일이냐며 호들갑이셨다. 그러고는 모임에 나가면 당신 친구들이 손자 손녀 동영상을 보여주며 자랑할 때마다 쓸쓸한 기분이 들곤 했다 하시며, 연신 당신의 못난 아들 둘을 탓하셨다. 어머니는 만나는 여자가 있냐고 물으셨다. 없다고 했다. 그런데 무슨 결혼을 하냐고 다시 물으셨다. 그냥 그럴 것 같다고 답했다. 약속할 수 있는 거냐고 물으셨다. 그렇다고 답했다. 어머니는 약간은 의뭉스럽지만 또 기분이 좋은 걸 숨기지 못하는 말투로 또 여러 가지를 물어보셨다. 마지막으로는 진짜 올해 결혼할 수가 있냐고 물어보셨다. 그렇다고 답했다.나는 약속을 어기는 것이 싫어서, 또는 특별한 사정 때문에 약속을 못 지키게 되는 경우 등이 싫어서 약속 자체를 잘 하지 않는다. 그러므로 이번의 부모님과의 약속은 오랫동안 지켜온 나의 신념을 크게 위배하는 것이다. 그런데 이게 내게 이상하게 느껴지지가 않는다. 마치 올해 결혼을 하는 게 내게 무척 당연한 일로만 여겨진다. 정말로 나 자신도 이유를 알기 어려워 갸우뚱할 뿐이다. 어쨌든 부모님과 통화를 3월 말 즈음에 하고 4월로 달이 바뀔 때, 어머니께 전화가 와서 8개월 남았다는 통보를 받았다. 그럼에도 급한 기분이 들지 않는다. 정말로 나는 이미 결혼날짜도 잡고, 청첩장도 뿌리고, 예식장도 미리 다 예약하여 준비를 마친 사람처럼 굴었다. 어머니 말마따나 만나는 여자도 없는데.내 깜냥으로는 이 상황을 파악할 수 없어 점을 볼 생각이 들었다. 따지고 보면 그 전에는 그저 운세 따위를 점칠 필요를 못 느꼈던 것이지, 점이 사람을 홀리니 나쁘다거나, 비논리적이고, 무익한 것이라고 주장하거나 굳이 비판한 일 또한 없다. 점을 보는 행위 자체가 완전히 나의 일상과는 동떨어져 철저히 관계없는 일이었기 때문에 의식을 한 적이 없다. 점을 쳐본 일이 없다는 걸 보면 막연히 마음 한구석에 점 따위를 왜 보는지 통 모르겠다는 무의식적 단정만은 있었던 듯하다. 그런데 막상 점을 치고 점괘를 보고는 꽤나 놀라고 말았다. 이 점괘에서 표현된 내 성격이 나 자신과 몹시 닮았기 때문이다. 아무튼 나는 올해 결혼을 할 것이므로 배우자 사주를 보았다. 점괘는 다음과 같다.
당신의 성격
당신은 화(火)의 아이입니다. 불 중에서도 이글이글 타오르며 온 세상을 다 태울 듯 뜨거운 열기를 내뿜는 한여름 정오의 태양입니다. 그 마음 속에는 항상 불과 같은 열정이 내재되어 있으며, 두려움 없이 자신의 이상을 실현시켜 나가는 성질을 지닙니다. 다만 이것저것 가림 없이 모두 태워버리는 통에 소중한 것을 태워버리고 아쉬워할 수도 있겠습니다.
또한 당신은 자존심이 강하며 독립심 또한 유별합니다. 작은 일에는 치밀하나 큰 일에는 겁이 없는 한편, 금전에 대해서는 한푼 모아 두푼식으로 꾸준히 모아간다는 재정 관념이 갖춰지지 않은 편이어서 돈이 잘 모이지 않습니다.
배우자로서의 당신은 이런 사람
당신은 배우자를 믿음직한 심복처럼 여깁니다. 무엇이든 궁리를 하기 좋아하는 본성을 지닌 터라 뭔가 신비롭고 파악이 잘 되지 않는 무게를 지닌 스타일의 여성에게 이끌리게 되며 그러한 여성을 아내로 맞이하여 아내가 조석으로 화장을 바꾸는 것보다는 자주 대화의 내용을 바꾸며 신선하게 대화를 이끄는 것에 더 큰 비중을 두며 지내고 싶어합니다. 아내를 내심 든든한 심복처럼 여겨 의논하고 기대고 싶어하는 마음이 기본적으로 깔려 있기 때문에, 아름다운 단세포 여성보다는 지적이고 다양한 관심사를 지닌 여인이 어울린다고 하겠습니다.
당신의 배우자는 이런 사람
자기 발전에 많은 가치를 두는 당신에게 배우자는 현실적인 문제로 가끔 유보를 원하기도 합니다. 연애는 아름다운 오해이고 결혼은 참혹한 이해라고 합니다. 그만큼 결혼은 당신의 바쁜 앞길에 웬만큼의 답보를 요구할 것입니다. 배우자와 당신은 서로의 발전을 원하면서도 무엇이 서로에게 도움이 되는 것인지를 간혹 잘못 짚어 어려운 때도 있을 것입니다. 하지만 긴 안목을 갖추어 본다면 배우자는 인생에 있어 가장 소중한 반려자입니다. 서로의 소중함을 조금만 일깨우고 노력하면 가장 적절한 답안은 물론 아름다운 사랑을 작성해 나갈 수 있을 것입니다.
이게 어떻게 가능한 일인지 의문부터 들었다. 남들이 보기엔 중대한 결정을 정말 망설이지 않고 실행해버리는 성격이나, 지독하게 고지식하게 비출 정도로 내가 정말 옳지 않다고 생각하는 일에는 타협을 않는 성질머리, 또 재정 관념이 잘 갖추어지지 않았다는 것도 틀림이 없다. 연애를 할 적에 여자 친구에게 화장에 대해 비슷한 얘길 한 적도 있다. 실상 그냥 재미내지는 심심풀이 삼아 시작한 일인데, 문장 하나하나 구구절절이 나보다 나를 더 잘 아는 것처럼 쓰인 저 글들을 보니 살짝 소름마저 끼칠 지경이었다. 단 한 구절이라도 틀린 점이 있다면 그것을 이유로 점괘의 진실성을 의심했을 게 분명한데, 이래서는 도저히 명분이 없다.(사실 운세를 점치는 시도가 애초에 운세 따윈 믿을 게 못 된다는 자신의 믿음을 검증하려는 의미 같다.)나는 그러므로 다른 운세 사이트에 들어가서 교차검증을 진행했다. 그리고 그 다른 운세사이트에선 이런 결과를 내어 놓았다.
미래 배우자의 얼굴
둥근 계란형의 소유자 입니다. 보통체형이지만 볼륨감 있는 몸매의 여성이 되겠습니다. 길고 얇은 스타일이며 활동적인 성격의 소유자 입니다. 맑은 목소리로 자기 주장이 강한 여자입니다. 눈매가 촉촉하고 총명해 보여 맑은 인상을 주는 타입 입니다.
미래 배우자의 성격
얼굴부터 장난기가 가득한 사람입니다. 그 만큼 귀여운 행동도 많이 하고 어딜 가나 사랑 받는 막내 같은 사람입니다. 하지만 사랑 받는 것에만 익숙하기 때문에 다소 행동이 버릇 없어 보일 수도 있으나 보여지는 것과 의외로 여린 감성을 가지고 있어서 사소한 것에도 마음을 쉽게 다치기도 합니다.
미래 배우자의 직업
머리를 쓰기 보다는 전문적이고 기술적인 직종과 어울리는 사람입니다. 자신의 일을 누군가 간섭하는 것을 좋아하지 않으니 그만큼 자신의 일에 대한 능력을 쌓는 성향입니다. 하고자 하는 일에 망설임이 없으나 섬세하기도 하니 이와 관련된 직군의 사람을 가능성이 높습니다.
미래배우자와의 연애요형
결코 쉽지 않은 그를 연인으로 만들 방법은 단 하나. 칭찬입니다. 만인에게 인정받기보다 소중한 사람들에게 인정받기를 원하는 그에게 당신의 칭찬은 일편단심 보증서와 같으니까요. 한편 그는 장금이의 미각을 지녔으니 고백은 소문난 맛집에서 하는 것도 이색적일 것입니다.
인연수
귀하는 처궁이 위의 명식에서 붉게 표시된 일지궁 입니다.
남자는 십성중에 정재나 편재가 아내성에 해당합니다.(정재와 편재를 합해서 재성이라고 합니다)
사주상에 드러난 재성(妻星)은 정재가 1 개가 있고 편재가 1 개가 있군요
지장간에 숨은 재성(妻星)은 없습니다.
다음은 처성(妻星)의 희기(喜忌)를 보기로 합니다.乙 일간은(나 자신:日元) 오행이 목(木) 이므로 토(土)가 재성이 되고 사주에서 토(土)는 기신 이 되겠습니다. 다음은 처궁(妻宮)의 희기(喜忌)를 봅니다.
처궁은 위의 명식에서 붉게 표시된 궁입니다.
처궁은 희신 이군요.귀하의 사주에서 아내와 관계된 항목을 요약하면 아래표와 같습니다. 애인 부부운
전생에 나라를 구하거나, 덕을 많이 쌓아 배우자의 덕을 크게 볼 것입니다. 당신으로 하여금 가족까지 당신의 배우자를 통해 길한 운이 가정에 퍼지니 금전 및 건강운도 함께 들어와 복덩이가 넝쿨째 들어왔다고 할 수 있습니다. 혼자 돌던 바퀴가 이가 맞는 다른 바퀴를 만나 그 속도는 배가 될 것이니 하늘의 인연을 만나 행복합니다. 때론 서로 양보만을 하다가 결정하는 데에 어려움을 겪을 수 있으나 둘의 성격에 모나지 않은 탓에 큰 다툼이나 문제는 없을 것입니다. 복덩이를 안고 당연한 듯이 함부로 다루거나 소홀히 대하지 마십시오. 진심으로 대하여 사랑으로 다가가야 더 그 빛을 품고 자신의 날개를 펼치게 될 것입니다.
이번 점괘는 차라리 내가 애당초 예상한 ‘점의 모호함’과 매우 흡사하였다. 말하자면 귀에 걸면 귀걸이 코에 걸면 코걸이라는 투로 표현 자체를 뭉뚱그려 놓았기 때문에 정확한 해석이 불가하다. 처음에 본 점괘와 일치하는 부분도, 그다지 일치하지 않는다고 볼 만한 부분도 찾기 어렵기 때문에 마찬가지로 이 두 가지 사례만 가지고 점괘의 효력을 짐작하기도 어렵다. 이 두 가지 점괘를 보고 갑자기 든 생각이 있다. 바로 점을 본 사람의 심리에 대해서다.만약 내가 이 점을 보지 않았다면 나는 내 배우자가 될 사람의 얼굴형이나 체형, 성격 등을 특정 짓지 않았을 것이다. 애초에 남에게 큰 관심을 두는 성격이 아니라 남의 얼굴을 자세히 들여다 본 일이 없지만, 이제는 만나게 되는 사람들의 얼굴형을 신경 쓸 것이 분명하다. 나는 내가 진실로 이 점괘들을 믿거나 믿지 않거나 관계없이 이미 점괘가 내린 판결에 구속이 되었다는 말이다. 원인은 두 번째 점괘의 마지막에 묘사된 ‘애인 부부운’이 몹시 좋기 때문이다. 만약에 이 점괘가 옳다면?나같이 잠재위험을 가급적 기피하고 실속을 챙기는 사람으로서는 논리적으로 설명하는 게 불가능한 이 점괘를 그대로 무시하는 게 어렵게 되었다. 세상 모든 일이 논리를 기반으로 작동하는 게 아니라는 것 또한 ‘이성적으로’ 이해하고 있기 때문이다. 종교를 주제로 다룰 때 주로 등장하게 되는 말이지만, 여기서 또한 통용될 것 같다.
“맞다고 할 수 없지만, 그렇다고 틀리다고도 할 수 없다.”
뭐, 긍정적인 효과를 굳이 유추하자면 그전의 모래알처럼 수많은 사람 중에 한 명이 내 배우자가 된다는 막연한 경우의 수보다는 그나마 해변 하나의 모래알 수 정도로 분명히 범위가 줄었다.그리고 바로 재밌는 상상을 했다.‘만약에 내가 마치 서로가 처음부터 한 짝이었던 것처럼 마음도 잘 맞고, 같이 시간을 보내는데 굳이 서로 눈치를 보지 않아도 일말의 불편함도 없는 사람을 만나서 결혼을 하기로 하였는데 그 사람의 얼굴이 둥근 계란형이 아니라면?’나는 바로 답을 유추할 수 있다. 이 경우라면 나는 즉시 점괘를 무시할 것이다. 근거가 부족한 점괘보다 나 자신의 느낌과 내게 그런 느낌을 주는 상대방을 더 믿을 것이기 때문이다. 점괘를 운명으로 치환해서 보자면, 운명을 따르는 것도, 따르지 않는 것도 양쪽 다 내게는 각각 다른 매력이 있는 길로만 여겨진다.그럼 또 바로 재밌는 상상이 든다.‘만약에 그렇게 결혼을 했는데 우리 부부가 정말 예측할 수 없는 불행들로 인해 삶이 궁핍하고 고달파진다면? 그리고 아무리 노력을 해도 나아지지 않는다면? 그때는 점괘를 따르지 않은 걸 후회하게 될까?’또 바로 답이 예상이 된다. 나를 만난 배우자야 모르겠지만, 나는 후회할 리가 없다. 애초에 점괘를 무시하기로 결정한 순간부터 점괘 자체를 머릿속에서 싹 지워버릴 것 같다. 나 자신이 어려움에 굴복하는 걸 치욕으로 여기는 까닭도 있고, 이제껏 내가 살아온 과정으로 증명된 나의 특이한 반항심을 고려하면 역시 그 어떤 일이 생긴들 내가 후회할 거란 생각을 할 수가 없다. 그간 내가 옳지 않다고 여긴 여러 가지 사건들에 저항해온 역사들이 조금 더 연장될 뿐이다. 아마 이 경우에는 운명이 내가 저항할 대상이 될 테다.운명이 마치 나를 고문하듯 괴롭히면서 나에게 후회를 하라 강요한들 죽는 한이 있어도 웃는 얼굴로 ‘아니오.’를 외칠 자신이 있다. 나의 배우자 또한 나를 믿었기 때문에 결혼을 한 것이 아닌가. 그런 사람을 배신한다는 건 상상할 수가 없다. 다른 이들에게 결혼이 어떤 의미인지 깊게 탐구한 일은 없지만, 적어도 내게 결혼이란 그런 의미이다. 한평생 서로를 믿겠다는 다짐과 약속이 현실의 제도, 풍습과 결합하여 나타난 형태의 결과물이란 것이다.일어나지도 않을 쓸모없는 상상을 이렇게 길게 하는 점과, 그리고 그 내용을 따져보면 첫 번째 점괘에 묘사된 나의 성격이 아주 꼭 들어맞다. 그러고 보면 어떤 성향의 사람이 어떤 사람에게 끌리는지는 이미 오랫동안 축적되어 온 결혼의 역사를 통해 짐작하기가 어렵지 않은 일로 보인다. 나처럼 별 쓸모없는 일(물론 이건 나에게는 쓸모 있는 일이지만, 다른 많은 사람들의 기준에서 쓸모없는 일이라는 얘기다. 내가 살면서 가장 많이 들은 말을 토대로 여기서 ‘쓸모없는 일’의 정의를 내리자면 ‘돈이 되지 않고’, ‘취직에 도움이 안 되고’, 혹은 ‘이성에게 매력적으로 보이기에 도움이 되지 않는’ 따위의 일 등이 그렇다.)에 궁리하기 좋아하는 사람이, 그저 외견만 아름답고(보편적 기준에서) 생각에 깊이가 없거나, 또는 속물인 사람에게 매력을 느낄 리는 없다. 결혼을 할 요인을 느끼기도 어렵다. 나는 이미 그 결혼생활이 어떻게 서서히 망조를 보일지 겪어보지 않아도 예측이 되기 때문이다. 한 가지 가능성이라면 성욕에 뇌가 마취가 되어서 아무런 판단을 못 하는 상태에서 관계를 가지고 우연히 아이가 생겨 버리는 경우가 있겠지만, 그것도 나 같은 성격을 가진 사람에게는 매우 힘든 일이다.
중학교 때 성교육을 받고 한 생각과 그 순서는 이렇다. 성관계시 피임을 제대로 하지 않으면 임신을 할 수 있다. 완벽하게 피임을 하는 것은 어렵다. 내가 만약에 누군갈 임신시켰을 경우, 내 성격을 미루어 보면 낙태를 하지도, 아이를 낳고 입양을 보내지도 못할 게 예상된다. 그러므로 결혼을 하고 싶지 않은 사람과는 성관계를 자제해야 한다. 이렇게 생각하면 점은 단순히 못 믿을 것으로 치부하기 어렵다는 생각이 든다.위의 점괘들은 어떤 성격의 사람의 어떤 취향, 경향을 분석한 결과물일 수도 있다.(정확한 사실을 조사해 본 바 없으니 아마 이럴 것 같다고 예측만 할 뿐이다.) 다시 말하면 인간의 유형을 나누고, 어떤 유형의 사람이 어떻게 살아가는지 여러 사례들을 분석하여 가장 높은 확률의 결과를 ‘점괘’로 내놓는 것이다. 인간은 성장환경에 의해 몹시 변하지만 타고난 경향이 확고하다면 성장환경으로 인한 개개인의 차이는 좁혀질 수도 있다.나의 경우를 예로 들자면, 나는 어려서부터 세상을 바라보는 관점 자체가 특이한 편이었다. 이 때문에 오해를 산 적도 많고, 다른 사람들과 대화하기가 어려운 일(서로 동문서답을 하는)도 종종 있었다. 가령 초등학생 시절, 친구들이 H.O.T.(90년대 5인조 남성아이돌그룹) 노래 중에 뭘 제일 좋아하냐고 물었을 때, 나는 ‘빛’(‘강타’라는 멤버가 직접 작곡하고 부른 곡으로 알고 있다.)이라고 대답했다. 그런데 뜻밖에 나는 그 후 친구들이 모여 H.O.T. 멤버 중에 누가 제일인지를 가리는 토론(점잖게 표현했지만 사실은 말싸움)에서 강타를 옹호해야 하는 ‘강타파’에 강제로 편입되었다. 실제로는 나는 강타라는 사람에 대해 관심도 없고, 좋아하지도 않았다. 애초에 한 번도 연예인을 좋아해 본 일이 없다. 그 사람을 만나본 적도 없고, 만날 일도 없으며, 그 사람이 어떻게 살아가는지 알지도 못하는데 무엇을 보고 호감을 표할 수 있는지 알 수도 없었을 뿐더러 누가 제일인지 가려서 어쩌자는 건지 도무지 이해할 수가 없었다. 난 당초에 말 그대로 ‘빛’이라는 노래만 좋아했을 뿐이다. 지금도 음악을 듣는 걸 즐기지만 항상 노래와 가수는 내게 각각 별개의 존재이다.(박효신은 제외, 이 사람은 그냥 마음씨가 예쁜 게 너무 티가 난다. 이 말인즉슨, 박효신이 가수가 아니었어도 나는 박효신이라는 사람 자체에 호감을 느꼈을 거란 말이다.)이 별개의 존재라는 개념이 어릴 때부터 나의 가치판단의 근본이었다. 예를 들기 좋은 소재가 있다. 독서와 컴퓨터 게임 두 가지를 놓고 비교해보면, 일부 사람들은 독서는 유익하고 게임은 무익하고 시간 낭비라고 종종 말하지만 내 가치판단의 방식으로는 애초에 둘을 비교하지 않는다. 두 행위는 별개로 존재할 뿐이다. 무엇이 더 나은지 가릴 필요나 그 두 행위 간에 가치의 우위가 있다고 느끼지 못한다는 뜻이다. 마찬가지로 책을 많이 읽고 지식을 쌓은 사람과 게임을 많이 하는 사람 둘이 내 앞에 있다한들 비교하거나 우열을 정하지 않는다. 그냥 각각 별개의 사람으로만 인식할 뿐이다. 내가 만약에 자녀를 갖게 되도 책 읽는 걸 권장하거나, 혹은 자녀가 게임을 많이 한다고 꾸짖을 일도 없을 것이다.(실제로 어머니가 나를 이렇게 키우신 영향이 크다.) 그렇게 생각하게 될 수 있었던 이유를 아래 밝힌다.나는 내가 태어나 자라던 시골에서 소문난 독서광이었다. 어른들과 선생님들은 내가 책을 많이 읽는 걸 칭찬할 때가 많았다. 나는 단순히 하고 싶은 걸 할 뿐인데 칭찬을 듣는 건 정말 이상한 일이었다. 내가 책읽기를 즐긴 게 된 건 단순한 이유다. 책을 읽는 것을 내가 좋아하기 때문이다. 이게 무슨 말장난이냐는 반문을 받을 수 있다는 생각을 한다. 그러므로 이렇게 표현할 수밖에 없는 사유를 적는다.책을 읽는다는 행위는 내게 처음부터 공부를 잘하기 위해서, 혹은 좋은 학교에 가기 위해서 따위의 목적이 없는 단순한 놀이였다. 책읽기는 내가 세상에 태어나 처음으로 스스로 찾은 ‘좋아하는 놀이 1호’였다. 그렇게 된 이유는 또 간단하다. 내가 6살 때, 하루는 같은 동네에 살던 한 살 터울 사촌 누나가 유치원에서 한글을 공부해서 학교 앞에 세워진 안내판(학교 반경 200m 이내에 유흥업소 등의 영업을 할 수 없다는 안내 취지의)을 읽는 걸 보게 되었다. 나는 그게 몹시 시샘이 나서 사촌 누나가 읽는 걸 그대로 듣고 외워서 글자 하나하나 읽는 법을 혼자 익혔다. 그리고 어느 정도 자신감이 생기자 유치원에서 보육 교사분이 동화를 읽어주는 시간에 내가 대신 읽어주겠다며 나섰다. 자신감과는 다르게, 또 분하게도 어물어물하며 반도 제대로 읽지 못했다. 안내판에는 없던 모르는 글자가 많았기 때문이다. 그 후로는 계속 남들을 귀찮게 하면서 모르는 글자를 하나하나 익혀나갔다. 동화를 하나하나 더 읽을 수 있게 되는 과정이 무척 재밌었다.그리고 컴퓨터를 배우기 시작하면서 컴퓨터 게임의 존재를 알게 되었다. 나는 여기에 몹시 매료되었다. 처음에는 집에 컴퓨터가 없어 매일같이 남의 집에 놀러 가서 게임을 하거나 구경을 하곤 했다. 이후에 컴퓨터를 배우는데 썩 성과가 나오자 부모님은 내가 다니던 컴퓨터 학원에서 판매하던 컴퓨터를 한 대 사주셨다. 내 기쁨은 말로 형용할 수 없었다. 집에 컴퓨터가 생기자 한 번 매달리면 시간 가는 줄 모르고 게임을 하곤 했다. 그게 얼마나 집요했는지, 간혹 컴퓨터에 오류가 생겨 부팅이 안 되거나 하는 문제가 생기면, 컴퓨터 학원에 맡겨서 수리를 의뢰하는 그 시간조차 아까워서 어떻게든 직접 문제를 찾아내고 고칠 정도였다. 그 과정조차 모두 즐거웠다. 이 모든 게 내가 생각하는 내가 스스로 찾은 ‘좋아하는 놀이 2호’이다.첫 번째 놀이는 우연히도 어른들이 보시기에 마땅히 좋은 행동이었고, 두 번째 놀이는 그렇지 못하였다. 나는 똑같은 원인에서 비롯된 두 가지 행위에 상반된 평가가 이어지는 게 꽤나 놀라웠고, 내가 정말 좋아하는 것들을 남들이 함부로 평가하는 데에 맘속에서 적잖이 분노하였다.(혹시나 내 의견이 불편한 사람이 있을 것 같아 사족을 단다. 가치관은 서로 다른 게 당연한 일이고, 내가 가장 중요하게 여기는 것은 내가 정한 가치이다. 그리고 내가 정한 가치의 최우선순위는 행위나 생각의 당부당에 대한 내 자신의 판단 결과다. 내 어머니는 단지 나에게 바르게 자라는 걸 바라셨고, 난 그게 옳다고 판단하고 따르려고 노력했다.만약에 내가 게임 대신 사람들이 말하는 좀 더 건설적인 취미를 가졌다면, 공부를 더 했다면 내 인생이 더 나아졌을까? 따위의 생각을 해본 적도 없다. 마음이 즐거운 일을 했고, 여전히 마음이 즐겁다. 더 나은 인생이란 게 무엇인지도 모른다. 누군가 좋은 직업을 갖는 것이나, 권력이나 명예를 얻거나, 돈을 많이 벌고, 더 좋은 집에 살거나, 좋은 차를 모는 것이 더 좋은 인생이라 말한다면, 나는 그것도 참 옳은 의견이라고 답변하겠다. 그것도 존중받아야 할 누군가의 가치관이니까. 할 말이 많지만 사실 이 글은 그런 논의가 주된 목적이 아니기도 하고 나의 의식 수준이 다른 이들보다 높다고 생각지도 않기에 여기서 짧게 마친다.)이런 내 가치판단 방식과, 행동방식은 몹시 명확한 성향을 가졌다. 스스로 판단하고, 스스로 행동한다는 것이다. 첫 번째 점괘에서 묘사한 것과 일치한다. 또 이런 뚜렷한 성향을 가진 아이가 여러 명 있다고 가정했을 때 서로 그 과정은 다르겠지만 어느 정도 유사한 환경(특히 부모의 성향이 가장 중요한 것 같다.)에서 자란다면 성장한 후의 모습에는 서로 유사한 가치관을 가질 가능성이 충분히 클 것이다. 그리고 비슷한 생각을 하는 사람들은 비슷한 취향을 갖게 마련이 아닌가. 충분히 가능성 있는 일이라 여겨지는데 직접 확인을 해볼 수도, 실험을 할 수도 없는 일이라 아쉽다.나는 성향이 독특한 만큼 외모에 대한 취향도 독특한 편인데 내가 보통 예쁘다고 생각하는 얼굴이(얼굴에 착하다고 대놓고 쓰여 있는 얼굴), 내 친구들이 생각하는 예쁜 얼굴(특히 서양 미녀에 대해 의견이 극심하게 갈렸는데 나는 눈도 크고, 코도 크고, 입도 큰 그들의 얼굴이 좀 무섭다고 느낀다. 어디까지나 개인적인 의견이다.)과 종종 다른 걸 보면 성격이 외모 취향에도 영향을 준다는 가설 또한 세울 수 있다. 그럼 이건 관상과도 연결점이 있겠다는 생각이 든다. 그럼 배우자의 외모를 일러주는 점괘 또한 조금 수긍이 간다.그런데 점괘를 이렇게 ‘분석과 관찰의 결과물’로 여기자면 또 이해할 수 없는 일이 생긴다. 나는 점괘를 얻기 위해 내가 태어난 날과 이름만을 적었을 뿐인데, 그것에 따라 인간의 유형과 성격이 나뉜다는 것만은 도저히 믿을 수가 없다. 나와 한날한시에 태어나고 비슷한 이름을 가진 사람들은 높은 확률로 나와 비슷한 성격을 가지고, 비슷한 행보를 보이며 인생을 살고 있다는 말이 되기 때문이다. 생각이 더 뻗지 못하고 잠시 멈춘다.‘점’은 참으로 오묘한 것이구나! 감탄이 절로 나온다.[1번 결말 - 나는 갑자기 나와 한날한시에 태어난 남자들이 어떻게 살고 있는지 궁금해지기 시작했다. 그러나 이러한 궁금증은 잠시 뒤로 미뤄야 한다.나는 올해 결혼을 할 것이고, 장금이의 미각을 지닌 내 배우자의 입맛에 맞을만한 맛집을 미리 많이 알아두어야 하기 때문이다.둥근 얼굴형에 보통 몸매이며, 눈매가 촉촉하고, 얼굴에 장난기가 있으나 여린 감성을 지녔고, 지적이고, 관심사가 다양하고 활동적인 사람들이 어떤 음식을 좋아하는 경향이 있는지 알려주는 점이 없는 것이 아쉽다. 이것은 내가 후에 태어날 나 같은 별종들을 위해 꼭 정리해 놓도록 하겠다.아니, 그런데.나와 한날한시에 태어난 동명이인의 남자가 내 배우자 될 사람을 가로채 가면 어쩐다?][2번 결말 - 전에 근무하던 직장에서 매일 본인의 운세를 확인하던 직원분이 있었다.(가끔 내 운세도 같이 봐주셨다.) 요즘 세상에 그런 걸 매번 챙겨 보냐고 농처럼 말을 던진 기억이 난다. 그 분은 별다른 대꾸 없이 웃고 마셨지만, 사실은 점의 신묘하고 깊은 이치를 벌써 깨닫고 계셨고 우매하고 무지한 나의 질문에 굳이 대답을 할 필요조차 느끼지 못하셨던 건 아닐까.마치 내가 다른 사람들에게 ‘쓸데없는 일’로 보이는 일에 골몰할 때, 그 사람들이 내게 와서 왜 그런 걸 하냐고 물었던 것처럼.‘내가 나로 행복하게 살기 위해서’‘나의 소중한 시간을 내가 원하는 곳에 제대로 사용하고 싶어서’‘즐거우니까’‘남이 해준 맛있는 음식을 아무 생각 없이 먹는 것도 좋지만, 서툴고 모자란 솜씨로 재밌게 요리를 한 과정과 그 기억, 그렇게 완성된 맛없는 요리를 먹으면, 시간과 돈을 얼마나 썼는데! 하며 기가 막혀서 웃음이 터지곤 하는 일들이 내 머릿속 추억의 앨범 안에 차곡차곡 쌓여 더 오래 남을 기억이라는 걸 알아서’‘심심해서’‘다른 일을 접하는 게 내 사고의 폭을 넓힐 수 있으니까’‘소중한 사람들과 좀 더 기억에 남을 만한 추억을 남기고 싶어서’‘재밌어 보이니까’‘그냥 갑자기 그런 일이 하고 싶은 변덕이 들어서’내 진심을 그 사람들에게 표현해 본 일이 있었는지 모르겠다.그런 질문을 한다는 게 어차피 내 행동원리를 이해하지 못할 거란 반증일 텐데, 도무지 설득할 자신이 없어 그냥 미소나 짓지 않았을까.Anyway,[아무튼, 이라고 적는 게 나을지?]시간이 날 적에, 같이 근무하던 그 직원 분에게 연락을 해서 근황을 전해야겠다.올해 내 점괘가 아주 기가 막히다고,난 틀림없이 올해 결혼한다고.청첩장 곧 보내겠다고.]///////////////////////삭제1.이 두 가지 사례로 내가 배운 것이 있다. 하나는 마음이 진정 기꺼이 하는 일이라면, 그리고 옳다고 믿는 일이라면 세상 누가 그게 지루한 일이라고 훈수를 둔 들, 아니면 칭찬을 한 들, 혹은 무의미한 일이라 비판을 한들 개의치 않게 된다는 것이다. 나는 이러한 경험을 통해 처음으로 나 자신의 의견을 품게 되었고, 그게 설령 모두가 반대하는 의견이어도 무작정 휩쓸리지 않는 품성을 갖게 되었다. 나는 이것에 감사한다.////////////삭제2.그리고 둘째는 내 마음이 깊은 곳에서부터 정말 즐거운 경험을 하였다면, 설령 그 경험의 결과가 무의미한 것으로 끝난다 한들 후회하지 않는다는 것이다. 사람은 누구나 자신의 인생 밖에 살지 못한다. 나와 가장 친했던 친구의 말을 되새기게 된다. 그 친구는 한창 고시 공부 중이던 내게 그런 말을 곧잘 하곤 했다. 그렇게 인생을 즐기지 못하고 책상 앞에 틀어 박혀 있다가 혹시라도 비행기 사고라도, 차 사고라도 나서 죽게 되면 아깝지 않겠느냐고. 그렇지 않다고 답했다. 그저 그때는 어쩌다가 우연찮게 공부가 재밌었을 뿐이라고. 그런데 그보다 더 우연찮게 정말 그 공부는 완전히 무의미해 보이는 형태로 끝이 났다. 그리고 말도 안 되는 일이지만 그 무의미한 공부를 하던 나는 살고, 친구는 먼저 세상을 떠났다. 이건 여전히 아픈 일이다.//////삭제3.그런데 정말이지 친구의 의견을 그럴싸하다. 어차피 모두가 사형선고를 받고 태어난 죽음을 향해 달리는 인생이 아닌가. 모든 행동에는 근본이 중요하다. 근본이 바른 뿌리도 썩은 과실을 맺기도 하는데, 근본이 옳지 않은 행위는 어떠할 텐가?]]></description><link>https://64etuor.github.io/900_writings/essays/210403-점을-본-이야기_미완.html</link><guid isPermaLink="false">900_Writings/Essays/210403 - 점을 본 이야기_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 13 Dec 2024 13:21:59 GMT</pubDate></item><item><title><![CDATA[240106 - 병]]></title><description><![CDATA[펜만 잡으면 병든 사람처럼 구는 어떤 경향들이 있다. 아니, 아무렇게나 흐느적대는 글씨를 눈으로 쓸어보면서 매양 정신도 따라 흐트러지는, 저런 경향을 앓는 사람들을 족히 병든 사람이라 칭할 법하다. 달리 걱정이 없고도 끊임없이 굴 안으로, 안으로 기어 들어가는 저런 족속들이 세상에는 더러 있다. 아무것을 먹어도 아무 맛도 나지 않을 인생들이다. 어쩌다 아무 세상에 아무렇게나 던져져서 아무렇게나 산 사람들은 으레 저렇게 결론 나고 마는 것이, 콩 심은 데 콩난다는 옛 조상님들의 말씀에 하나 틀림이 없다. 그리고 그 틀림없는 말씀을 다시 생각하건대, 펜만 잡으면 병든 사람처럼 구는 경향이란 그 글에 깃들어 있음이 분명하다. 글은 마음과 정신으로부터 오는 것이니, 마음과 정신이 병든 사람들은 하릴없이 병이 든 사람처럼 굴 것이다. 병든 사람처럼 구는 사람은, 참으로 병이 든 사람일 따름이다.&nbsp;마침내 병자가 되어 글을 쓰는 사람은, 아파도 돌볼 이 하나 없는 저의 깊고 음침한 굴 안에서 아무렇게나 된 인생을 언제까지고 산다. 약조된 기한이 없이, 아무것도 아무것이 아닌 게 된들 이미 마음의 한 웅큼을 중독시킨 그 병은 좀체 쉬지 않고, 숙주가 사라지기 전까지 그 또한 악착 같은 생존을 갈구할 것이다. 그러나 그 악독이란 때론 이유가 있다.아무런 신체의 미동 없이도 한없이 굴 안으로 달려들 저 병든 마음이,저런 아무것도 남지 않은 찌꺼기 같은 저의 인생을,혼을 다 빼놓듯 정신머리 없이 종이 위에 올려 놓게 되면,질서 없이 쌓인 장작더미 같은 모양으로 되어,어쩌다가 공교로운 불똥 하나만으로,이만한 불꽃으로 화해 타오르는 것이다.잿더미가 된 저의 몸을 다 덮듯,푸른 글자로 일렁이며 쏟아지는 것이다.오늘도,푸른 술병이 났다.]]></description><link>https://64etuor.github.io/900_writings/poems/240106-병.html</link><guid isPermaLink="false">900_Writings/Poems/240106 - 병.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 13 Dec 2024 13:08:34 GMT</pubDate></item><item><title><![CDATA[230303 - 낡은 것]]></title><description><![CDATA[목이 다 헤지고,
아무렇게나 늘어난,
그도 모자라 영 볼품없이 구멍까지 난,
ㅡ차라리 거적데기라고 부를 거지만,
아직은 옷이라는 이름을 잃지 않은 무언가ㅡ
나는 참,
그것이 몹시 좋아서,
화창하게 갠 날이면 빨래를 해다 곱게 접어 놓았다.낡디 낡은 옷이라,
어머니 말씀,
나이 먹고 주책이다 그쯤 되면 버리라는 말은 여러 번이고,
나의 불효 또한 그만큼 여러 번이겠건만.언젠가 옷장에서 주인 몰래 사라진 옷 한참 찾다가
우두커니 먼 추억을 생각하는 것은,
아들이 갖고 싶다 조른 값나가는 옷 못내 쥐어 주시던,
여즉 가녀린 어머니의 손.그 손은 차마,
낡디 낡은 나의 추억을 사랑하진 않아도,
낡디 낡은 나만은 사랑했구나.]]></description><link>https://64etuor.github.io/900_writings/poems/230303-낡은-것.html</link><guid isPermaLink="false">900_Writings/Poems/230303 - 낡은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 13 Dec 2024 13:07:35 GMT</pubDate></item><item><title><![CDATA[이력서 잘 쓰는 법]]></title><description><![CDATA[자소서 쓰는 법 <a rel="noopener nofollow" class="external-link is-unresolved" href="https://brunch.co.kr/@onthepaper/23" target="_self">https://brunch.co.kr/@onthepaper/23</a>]]></description><link>https://64etuor.github.io/500_resources/00_achieves/이력서-잘-쓰는-법/이력서-잘-쓰는-법.html</link><guid isPermaLink="false">500_Resources/00_Achieves/이력서 잘 쓰는 법/이력서 잘 쓰는 법.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 12 Dec 2024 00:13:28 GMT</pubDate></item><item><title><![CDATA[Coconut 시스템 연구]]></title><link>https://64etuor.github.io/500_resources/generative-ai/인공지능을-활용한-연구/coconut-시스템-연구.html</link><guid isPermaLink="false">500_Resources/Generative AI/인공지능을 활용한 연구/Coconut 시스템 연구.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 11 Dec 2024 21:59:03 GMT</pubDate></item><item><title><![CDATA[202_AI사고시각화_Coconut_연구노트]]></title><link>https://64etuor.github.io/500_resources/generative-ai/인공지능을-활용한-연구/202_ai사고시각화_coconut_연구노트.html</link><guid isPermaLink="false">500_Resources/Generative AI/인공지능을 활용한 연구/202_AI사고시각화_Coconut_연구노트.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 11 Dec 2024 21:55:21 GMT</pubDate></item><item><title><![CDATA[실용주의 프로그래머]]></title><description><![CDATA[ ]]></description><link>https://64etuor.github.io/200_books/bookshelf/실용주의-프로그래머.html</link><guid isPermaLink="false">200_Books/Bookshelf/실용주의 프로그래머.md</guid><dc:creator><![CDATA[데이비드 토머스, 앤드류 헌트, 정지용, 김창준]]></dc:creator><pubDate>Wed, 11 Dec 2024 07:10:17 GMT</pubDate></item><item><title><![CDATA[참을 수 없는 존재의 가벼움]]></title><description><![CDATA[너무 어려워서 정리를 해가며 읽었다. 도저히 평가할 수 없는 위대한 작품이라고 생각한다.
<a data-tooltip-position="top" aria-label="참을 수 없는 존재의 가벼움 > 1부 가벼움과 무거움" data-href="참을 수 없는 존재의 가벼움#1부 가벼움과 무거움" href="https://64etuor.github.io/200_books/00_achives/2024/참을-수-없는-존재의-가벼움.html#1부_가벼움과_무거움_0" class="internal-link" target="_self" rel="noopener nofollow">1부 가벼움과 무거움</a>
2부 영혼과 육체 67
3부 이해받지 못한 말들 139
4부 영혼과 육체 213
5부 가벼움과 무거움 287
6부 대장정 393
7부 카레닌의 미소 463
작중 주요 대비니체의 영원회귀<br>
<a data-href="로베스피에르" href="https://64etuor.github.io/200_books/00_achives/canvas/로베스피에르.html#_0" class="internal-link" target="_self" rel="noopener nofollow">로베스피에르</a> vs 히틀러 (영원회귀에 속해 있지 않은 두 인물에 대한 모순점)<br><a data-tooltip-position="top" aria-label="파르메니데스.canvas" data-href="파르메니데스.canvas" href="https://64etuor.github.io/200_books/00_achives/canvas/파르메니데스.html#_0" class="internal-link" target="_self" rel="noopener nofollow">파르메니데스</a>의 이분법 <a href="https://64etuor.github.io?query=tag:파르메니데스" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#파르메니데스">#파르메니데스</a> <br>테레사 : 송진으로 방수된 바구니에 넣어져 강물에 버려진 아기 <a href="https://64etuor.github.io?query=tag:동정심" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#동정심">#동정심</a>
'einmal ist keinmal. (한 번은 중요치 않다. 한 번뿐인 것은 전혀 없었던 것과 같다. 한 번만 산다는 것은 전혀 살지 않는다는 것과 마찬가지다.)' ≒ 무거움 → 토마시가 두려워 하는 것<br>가벼움을 추구하는 토마시에게 우연히 찾아온 테레자 <a href="https://64etuor.github.io?query=tag:오이디푸스" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#오이디푸스">#오이디푸스</a><br>사비나 : '당신은 모든 점에서 키치와는 정반대라서 당신을 사랑하는 거야.' <a href="https://64etuor.github.io?query=tag:키치" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#키치">#키치</a> <a href="https://64etuor.github.io?query=tag:모순" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모순">#모순</a>테레자의 고집<br>동료와 춤을 추는 테레자를 보고 질투를 하는 토마시 → 사랑과 성행위과 별개라고 말하던 본인의 삶의 방식과의 모순 <a href="https://64etuor.github.io?query=tag:모순" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모순">#모순</a><br>테레자의 꿈 - 수영장에서의 행진, 시체가 가득한 영구차에 실려가는 꿈 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a><br>동정. <a href="https://64etuor.github.io?query=tag:동정심" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#동정심">#동정심</a>
강함과 나약함의 대비.토마시의 변화카레닌의 등장<br>소련군의 사진을 찍는 테레자 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a>
둡체크
취리히로의 망명<br>'토마시는 달팽이가 자신의 집을 메고 다니듯 자기도 자신의 삶의 방식을 휴대하고 다닌다는 생각을 하며 행복을 느꼈다. 테레자와 사비나는 그의 삶에 있어서 두 극점, 서로 멀리 떨어져 화해가 불가능하지만 하나같이 아름다운 극점을 표상했다.' <a href="https://64etuor.github.io?query=tag:가벼움vs무거움" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#가벼움vs무거움">#가벼움vs무거움</a>
토마시를 떠난 테레자기존의 삶의 방식과 테레자 사이에서의 토마시의 갈등'Es muss sein.'<br>
운명이라고 말하며 테레자를 따라가는 토마시 <a href="https://64etuor.github.io?query=tag:우연vs운명" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#우연vs운명">#우연vs운명</a>운명(무거움)에 대한 베토벤의 해석과 토마시의 고민(가벼움 vs 무거움)
토마시가 느낀 동정심이 사랑인지?(대등하지 못한 관계에서만 성립할 수 있는 감정의 모호함)<br>
선택과 결과의 불확실성 <a href="https://64etuor.github.io?query=tag:동정심" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#동정심">#동정심</a><br>토마시와 테라자, 우연과 운명 <a href="https://64etuor.github.io?query=tag:우연vs운명" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#우연vs운명">#우연vs운명</a>
테레자와의 사랑이 우연에 불과하다고 느끼고 우울해진 토마시<br><img alt="Pasted image 20240119221555.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119221555.png" target="_self" style="width: 400px; max-width: 100%;">영혼과 육체의 이원성<br>거울을 보는 테레사 (창문을 보는 인물들과 대비됨) <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a><br>테레자의 어머니 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a>테레자와 모성애<br>테레자 어머니의 육체에 대한 추락의 욕구 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a> <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a><br>과장된 테레자 어머니의 행동 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a> <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a> <br>자신의 영혼을 찾고자 하는 테레자와 책으로 묘사된 테레자의 상승 욕구 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a>
토마시와의 첫 만남<br>우연과 사랑 <a href="https://64etuor.github.io?query=tag:우연vs운명" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#우연vs운명">#우연vs운명</a><br>우연에서 운명을 느낀 테레자 <a href="https://64etuor.github.io?query=tag:우연vs운명" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#우연vs운명">#우연vs운명</a>안나 카레니나 - 소설적 대칭과 우연성<br><img alt="Pasted image 20240119223112.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119223112.png" target="_self" style="width: 400px; max-width: 100%;"><br>안나 카레니나를 겨드랑이에 끼고 토마시를 방문한 테레자 - 토마시의 세계로 들어가기 위한(자신의 세계를 도피하기 위한) 입장권 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a><br>
테레자의 배에서 난 꾸르륵 소리 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a>테레자의 이상과 집착<br>'신분 상승'의 욕구에 맞물린 '사진'에 대한 테레자의 열정 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a>
토마시의 질투<br>수영장의 행진 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a>
토마시로부터 자신의 영혼(육체와 별개의)을 부정당하는 듯한 기분을 느끼는 테레자테레자의 꿈들
자신의 잘못을 알지만 스스로를 바꿀 수 없는 토마시<br>테레자에게 찾아온 추락에 대한 욕구 <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a><br>
바닥 = 포기할 것이 없는 세계, 영혼을 포기한 세계 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a> <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a><br>토마시의 바람기를 알면서 질투 외의 행동을 할 수 없는 테레자 <a href="https://64etuor.github.io?query=tag:나약함" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#나약함">#나약함</a><br>
현기증, 추락 욕구 <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a><br><img alt="Pasted image 20240119225137.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119225137.png" target="_self" style="width: 400px; max-width: 100%;"><br>
자신의 나약함을 극복하지 못하고 육체로의 추락 욕구를 느끼는 테레자 <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a> <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a> <a href="https://64etuor.github.io?query=tag:나약함" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#나약함">#나약함</a>사비나와 테레자의 만남<br>사비나와 토마시, <a href="https://64etuor.github.io?query=tag:중산모자" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#중산모자">#중산모자</a> <a href="https://64etuor.github.io?query=tag:키치" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#키치">#키치</a> <br>알몸으로 사진을 찍는 사비나와 테레자 <a href="https://64etuor.github.io?query=tag:육체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#육체">#육체</a> <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a> 프라하의 봄과 체코 사람들<br>
소련군의 사진을 찍는 테레사 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a>소련군 사진과 나체 사진선인장 사진<br>
소련군의 사진을 찍는 행위 ≒ 안나 카레니나 ≒ 토마스의 곁에 살기 위한 수단 <a href="https://64etuor.github.io?query=tag:영혼" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#영혼">#영혼</a><br>
<img alt="Pasted image 20240119230131.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119230131.png" target="_self" style="width: 400px; max-width: 100%;"><br>
모순된 테레자의 행동 <a href="https://64etuor.github.io?query=tag:나약함" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#나약함">#나약함</a> <a href="https://64etuor.github.io?query=tag:모순" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모순">#모순</a>둡체크의 연설을 생각하는 테레자<br>
더이상 경멸감을 느끼지 않는 테레자의 심경 변화 <a href="https://64etuor.github.io?query=tag:나약함" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#나약함">#나약함</a> <a href="https://64etuor.github.io?query=tag:동정심" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#동정심">#동정심</a><br>
<img alt="Pasted image 20240119230410.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119230410.png" target="_self" style="width: 400px; max-width: 100%;"><br>
토마시와 대등해지고 싶은 테레자의 욕구 <a href="https://64etuor.github.io?query=tag:관계" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#관계">#관계</a>카레닌이 가진 동물로서의 순수함 → 시간의 원운동<br>
<img alt="Pasted image 20240119230848.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119230848.png" target="_self" style="width: 400px; max-width: 100%;"><br>
대등하지 못한 관계에서의 불완전성, 독립적, 주체적 의지의 상실 <a href="https://64etuor.github.io?query=tag:관계" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#관계">#관계</a><br>토마시를 떠난 테레자, 추락욕구 <a href="https://64etuor.github.io?query=tag:추락" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#추락">#추락</a>
테레자를 뒤쫓아온 토마시<br>
<img alt="Pasted image 20240119231503.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119231503.png" target="_self" style="width: 400px; max-width: 100%;"><br>테레자의 일시적 행복감(토마시의 행동을 이끌어낸 것으로 관계의 대등, 혹은 역전이 일어났다는 착각) <a href="https://64etuor.github.io?query=tag:우연vs운명" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#우연vs운명">#우연vs운명</a><br>프란츠와 사비나의 가치 대비 <a href="https://64etuor.github.io?query=tag:가벼움vs무거움" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#가벼움vs무거움">#가벼움vs무거움</a><br>사비나, 중산모자, 토마시와 프란치의 비교 <a href="https://64etuor.github.io?query=tag:키치" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#키치">#키치</a> <a href="https://64etuor.github.io?query=tag:중산모자" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#중산모자">#중산모자</a><br>
<img alt="Pasted image 20240120002344.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240120002344.png" target="_self" style="width: 400px; max-width: 100%;">정조와 배신<br>
프란츠(무거움)와 사비나(가벼움)의 대비 <a href="https://64etuor.github.io?query=tag:가벼움vs무거움" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#가벼움vs무거움">#가벼움vs무거움</a> <br><img alt="Pasted image 20240120002708.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240120002708.png" target="_self" style="width: 400px; max-width: 100%;"><br>
키치에 대한 사비나의 반감 <a href="https://64etuor.github.io?query=tag:모순" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모순">#모순</a> <a href="https://64etuor.github.io?query=tag:의도의역설" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#의도의역설">#의도의역설</a>프란츠와 사비나의 시선<br>
유럽(규칙, 계획)과 미국(자유, 우연)의 대비 <a href="https://64etuor.github.io?query=tag:가벼움vs무거움" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#가벼움vs무거움">#가벼움vs무거움</a>
서로의 다른 가치관사비나와 마리클로드
둘간의 역학관계를 통한 강함과 나약함의 대비<br>
그리고 그러한 역학관계에 신경쓰지 않는 사비나의 행동 <a href="https://64etuor.github.io?query=tag:가벼움vs무거움" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#가벼움vs무거움">#가벼움vs무거움</a>사비나의 가치관에 매료되는 프란츠
프란츠를 보며 느끼는 사비나 자신의 모순, 육체적 폭력(강함)과 선의(약함) 양쪽 모두 자신이 진정으로 원하는 바는 아니라는 것을 깨달음(오로지 키치에 반대되는 행동으로만 자아를 찾아온 사비나의 모순)이혼하기로 결심한 프란츠<br>
<img alt="Pasted image 20240120004058.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240120004058.png" target="_self" style="width: 400px; max-width: 100%;">]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/참을-수-없는-존재의-가벼움.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/참을 수 없는 존재의 가벼움.md</guid><dc:creator><![CDATA[밀란 쿤데라, 이재룡]]></dc:creator><pubDate>Wed, 11 Dec 2024 07:10:01 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240119221555.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240119221555.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Obsidian Callout list]]></title><description><![CDATA[☑️
✔️
📋
🕒<img alt="Pasted image 20241211085510.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241211085510.png" target="_self">&gt; 이미지 출처 : Naver Cafe 옵시디언 사용자 모임 <a rel="noopener nofollow" class="external-link is-unresolved" href="https://cafe.naver.com/obsidianary" target="_self">https://cafe.naver.com/obsidianary</a>]]></description><link>https://64etuor.github.io/500_resources/obsidian/obsidian-callout-list.html</link><guid isPermaLink="false">500_Resources/Obsidian/Obsidian Callout list.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 11 Dec 2024 04:54:43 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241211085510.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241211085510.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Window]]></title><description><![CDATA[Window functions in SQL perform calculations across a set of table rows related to the current row. Unlike aggregate functions (e.g., SUM, AVG), window functions do not collapse rows into a single output row. Instead, they provide a result for each row while considering a "window" or subset of rows defined by a specific criterion.window_function(expression) OVER (PARTITION BY column_name ORDER BY column_name) window_function: The specific function to apply, such as ROW_NUMBER(), RANK(), SUM(), AVG(), etc.
OVER: Specifies that the function is a window function.
PARTITION BY: (Optional) Divides the rows into partitions to perform the calculation within each partition.
ORDER BY: (Optional) Defines the order of rows within the partition. Assigns a unique sequential number to each row within a partition.
SELECT EmployeeID, Department, Salary, ROW_NUMBER() OVER (PARTITION BY Department ORDER BY Salary DESC) AS RowNum
FROM Employees; Assigns a rank to each row. Ties receive the same rank, and gaps are left in the ranking sequence.
SELECT EmployeeID, Department, Salary, RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS Rank
FROM Employees; Similar to RANK(), but does not leave gaps in the ranking sequence for ties.
SELECT EmployeeID, Department, Salary, DENSE_RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS DenseRank
FROM Employees; Calculates the running total within each partition.
SELECT EmployeeID, Department, Salary, SUM(Salary) OVER (PARTITION BY Department ORDER BY EmployeeID) AS RunningTotal
FROM Employees; Calculates the running average within each partition.
SELECT EmployeeID, Department, Salary, AVG(Salary) OVER (PARTITION BY Department ORDER BY EmployeeID) AS RunningAverage
FROM Employees; Finds the maximum or minimum value within the partition or window.
SELECT EmployeeID, Department, Salary, MAX(Salary) OVER (PARTITION BY Department) AS MaxSalary
FROM Employees; Accesses the value from the next row within the partition.
SELECT EmployeeID, Department, Salary, LEAD(Salary) OVER (PARTITION BY Department ORDER BY EmployeeID) AS NextSalary
FROM Employees; Accesses the value from the previous row within the partition.
SELECT EmployeeID, Department, Salary, LAG(Salary) OVER (PARTITION BY Department ORDER BY EmployeeID) AS PrevSalary
FROM Employees; Running Totals and Averages Track cumulative sums or averages within groups of data (e.g., monthly sales totals). Ranking and Sorting Rank rows within categories (e.g., top 3 salaries by department). Comparing Rows Compare current row values to previous or next rows (e.g., detecting trends or changes). Data Analysis Perform analytics without collapsing rows (e.g., finding maximum values within groups while retaining original data). Indexing: Ensure columns used in PARTITION BY and ORDER BY clauses are indexed to improve performance. Large Datasets: Window functions can be computationally expensive on large datasets; optimize queries by limiting rows with WHERE clauses or pre-aggregating data. Memory Usage: Be mindful of memory usage when dealing with large partitions, as the window functions may need to maintain large intermediate result sets. Window functions are powerful tools for performing calculations across a set of rows related to the current row without reducing the result set.
They enhance SQL's capability for data analysis, providing insights such as rankings, running totals, and comparisons.
Proper use of window functions can lead to more efficient and readable queries, especially when dealing with complex analytical tasks.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/window.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/Window.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:38:17 GMT</pubDate></item><item><title><![CDATA[PIVOT, UNPIVOT]]></title><description><![CDATA[
PIVOT and UNPIVOT are SQL operations used to transform data between row-oriented and column-oriented formats.
PIVOT turns unique values from one column into multiple columns, restructuring rows into a cross-tabular format.
UNPIVOT does the opposite: it converts columns into rows, flattening a cross-tabular structure back into a normalized format.
The PIVOT operator transforms rows into columns, aggregating data based on specified criteria.SELECT column1, column2, [pivoted_column1], [pivoted_column2], ...
FROM (source_query)
PIVOT ( aggregation_function(value_column) FOR pivot_column IN ([pivoted_value1], [pivoted_value2], ...)
) AS alias;
Suppose we have the following Sales table:We want to pivot the Month values so that each month becomes a separate column.SELECT Employee, [January], [February]
FROM ( SELECT Employee, Month, Sales FROM Sales
) AS SourceTable
PIVOT ( SUM(Sales) FOR Month IN ([January], [February])
) AS PivotTable; Source Query:
The inner query retrieves the data to be pivoted.
Aggregation:
The SUM(Sales) function aggregates the sales data.
Pivot Column:
The FOR Month IN ([January], [February]) clause specifies the unique values to pivot.
The UNPIVOT operator converts columns into rows, effectively reversing a PIVOT operation.SELECT column1, column2, pivot_column, value_column
FROM (source_query)
UNPIVOT ( value_column FOR pivot_column IN ([pivoted_column1], [pivoted_column2], ...)
) AS alias;
Suppose we have the following SalesSummary table (which is the result of the previous PIVOT):We want to unpivot the January and February columns back into rows.SELECT Employee, Month, Sales
FROM SalesSummary
UNPIVOT ( Sales FOR Month IN ([January], [February])
) AS UnpivotTable; Source Table:
The SalesSummary table is the starting point for the UNPIVOT.
Sales:
The Sales column holds the values from the unpivoted columns.
FOR Month IN ([January], [February]):
The column names January and February are converted into row values under the Month column. Generating Reports: Creating summary reports where categories (e.g., months, products) become columns. Data Analysis: Comparing data across multiple dimensions (e.g., sales per region). Normalizing Data: Transforming wide tables into a normalized form suitable for analysis. Preparing Data for Visualization: Many visualization tools work better with long-format data. Unique Values: For PIVOT, the values specified in the IN clause should be unique in the pivot column. Aggregation: PIVOT requires an aggregation function like SUM, COUNT, or AVG. Aliases: Always provide aliases for subqueries and the resulting PIVOT or UNPIVOT tables. SQL Dialect: PIVOT and UNPIVOT are supported in SQL Server and Oracle. In MySQL and PostgreSQL, you can achieve similar results using conditional aggregation or custom queries. PIVOT and UNPIVOT are powerful SQL operations for reshaping data.
PIVOT transforms rows into columns, while UNPIVOT does the opposite.
Knowing when and how to use these operations helps you manage data effectively for reporting and analysis.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/pivot,-unpivot.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/PIVOT, UNPIVOT.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:37:47 GMT</pubDate></item><item><title><![CDATA[MERGE]]></title><description><![CDATA[The MERGE statement in SQL allows you to perform upsert operations (update or insert) in a single query. It helps synchronize data between two tables by conditionally inserting, updating, or deleting rows based on whether certain conditions are met.The MERGE statement is also known as UPSERT (a combination of UPDATE and INSERT) because it allows you to insert new records or update existing records depending on whether a match is found.MERGE INTO target_table AS target
USING source_table AS source
ON target.key = source.key
WHEN MATCHED THEN UPDATE SET target.column1 = source.column1
WHEN NOT MATCHED THEN INSERT (column1, column2) VALUES (source.column1, source.column2); target_table: The table that will be updated or inserted into.
source_table: The table or data source providing the data for comparison.
ON: The condition to determine if rows in the target_table and source_table match.
WHEN MATCHED: The action to perform when a match is found (usually an UPDATE).
WHEN NOT MATCHED: The action to perform when no match is found (usually an INSERT).
This example updates records if they exist and inserts them if they don’t.MERGE INTO Employees AS target
USING NewEmployeeData AS source
ON target.EmployeeID = source.EmployeeID
WHEN MATCHED THEN UPDATE SET target.FirstName = source.FirstName, target.LastName = source.LastName, target.Salary = source.Salary
WHEN NOT MATCHED THEN INSERT (EmployeeID, FirstName, LastName, Salary) VALUES (source.EmployeeID, source.FirstName, source.LastName, source.Salary); Explanation: If an employee in the target table matches an employee in the source table by EmployeeID, the FirstName, LastName, and Salary are updated.
If no match is found, a new employee record is inserted. You can also delete rows from the target table if certain conditions are met.MERGE INTO Employees AS target
USING UpdatedEmployeeData AS source
ON target.EmployeeID = source.EmployeeID
WHEN MATCHED AND source.IsTerminated = 1 THEN DELETE
WHEN NOT MATCHED THEN INSERT (EmployeeID, FirstName, LastName, Salary) VALUES (source.EmployeeID, source.FirstName, source.LastName, source.Salary); Explanation: If an employee exists in both tables and IsTerminated is set to 1 in the source table, the employee record is deleted from the target table.
If no match is found, a new employee record is inserted. You can have multiple WHEN MATCHED or WHEN NOT MATCHED clauses to handle different conditions.MERGE INTO Products AS target
USING NewProducts AS source
ON target.ProductID = source.ProductID
WHEN MATCHED AND source.Price &lt;&gt; target.Price THEN UPDATE SET target.Price = source.Price
WHEN MATCHED AND source.Discontinued = 1 THEN DELETE
WHEN NOT MATCHED THEN INSERT (ProductID, ProductName, Price) VALUES (source.ProductID, source.ProductName, source.Price); Explanation: Updates the price if it differs.
Deletes the product if it is marked as discontinued.
Inserts new products if they don't exist in the target table. Atomic Operation: The MERGE statement is atomic, meaning all operations (insert, update, delete) happen within a single transaction. Efficiency: Combines multiple DML operations into one, reducing the number of separate queries and improving performance. Flexibility: You can mix and match UPDATE, INSERT, and DELETE operations based on conditions. Error Handling: Ensure proper error handling and logging, especially when dealing with complex conditions. Indexing: Ensure the join columns in the ON clause are indexed for faster performance. Batch Size: For large datasets, consider breaking the MERGE into smaller batches to avoid locking issues. Transaction Management: Since MERGE is a single transaction, ensure your database can handle long-running transactions if processing large data. Logging and Auditing: Keep track of changes made by the MERGE operation for audit purposes. The MERGE statement is a powerful tool for performing upserts and synchronizing data between tables.
It combines INSERT, UPDATE, and DELETE operations into a single, atomic statement, improving both readability and performance.
Proper indexing, batching, and error handling can help you maximize the efficiency of MERGE operations.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/merge.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/MERGE.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:37:39 GMT</pubDate></item><item><title><![CDATA[LEAD, LAG]]></title><description><![CDATA[
The LEAD() and LAG() functions are window functions in SQL used to access data from a subsequent (next) or preceding (previous) row relative to the current row.
They are commonly used for tasks like calculating differences between consecutive rows, comparing current and previous values, or tracking trends over time. The LEAD() function retrieves the value from a subsequent row within the same result set.
It allows you to look ahead by a specified number of rows and is useful for comparing current values with future values.
LEAD(expression, offset, default) OVER (PARTITION BY column ORDER BY column) expression: The column or expression to return from the subsequent row.
offset: The number of rows to look ahead (default is 1).
default: The value to return if there is no subsequent row (optional).
PARTITION BY: Divides the result set into partitions to apply the function separately within each group (optional).
ORDER BY: Specifies the order of rows within each partition.
SELECT EmployeeID, FirstName, Salary, LEAD(Salary, 1) OVER (ORDER BY Salary DESC) AS NextSalary
FROM Employees;
Explanation:
For each employee, the LEAD() function retrieves the salary of the next employee in descending order of salary. The LAG() function retrieves the value from a preceding row within the same result set.
It allows you to look back by a specified number of rows and is useful for comparing current values with past values.
LAG(expression, offset, default) OVER (PARTITION BY column ORDER BY column) expression: The column or expression to return from the preceding row.
offset: The number of rows to look back (default is 1).
default: The value to return if there is no preceding row (optional).
PARTITION BY: Divides the result set into partitions to apply the function separately within each group (optional).
ORDER BY: Specifies the order of rows within each partition.
SELECT EmployeeID, FirstName, Salary, LAG(Salary, 1, 0) OVER (ORDER BY Salary DESC) AS PreviousSalary
FROM Employees;
Explanation:
For each employee, the LAG() function retrieves the salary of the previous employee in descending order of salary. If there is no previous row, it returns 0 as the default value.
You can use PARTITION BY to apply LEAD() and LAG() separately within each group.SELECT Department, EmployeeID, FirstName, Salary, LAG(Salary) OVER (PARTITION BY Department ORDER BY Salary DESC) AS PrevSalary, LEAD(Salary) OVER (PARTITION BY Department ORDER BY Salary DESC) AS NextSalary
FROM Employees;
Explanation:
The LAG() and LEAD() functions are applied within each department partition, ordered by salary in descending order. Calculating Differences Between Rows
Compare current and previous rows to calculate differences.
SELECT SalesDate, SalesAmount, LAG(SalesAmount) OVER (ORDER BY SalesDate) AS PreviousSales, SalesAmount - LAG(SalesAmount) OVER (ORDER BY SalesDate) AS SalesDifference
FROM Sales; Identifying Trends
Use LEAD() to identify upcoming values and detect trends.
SELECT StockDate, StockPrice, LEAD(StockPrice) OVER (ORDER BY StockDate) AS NextStockPrice, CASE WHEN LEAD(StockPrice) OVER (ORDER BY StockDate) &gt; StockPrice THEN 'Up' ELSE 'Down' END AS Trend
FROM StockPrices; Calculating Rolling Averages
Calculate rolling averages by combining LAG() with window functions.
SELECT EmployeeID, Salary, (Salary + LAG(Salary) OVER (ORDER BY EmployeeID) + LEAD(Salary) OVER (ORDER BY EmployeeID)) / 3 AS RollingAverage
FROM Employees; Indexing: Ensure columns used in the ORDER BY clause are indexed for better performance. Large Datasets: Window functions can be resource-intensive for large datasets. Consider limiting rows with WHERE clauses or optimizing partitions. Memory Usage: The database engine needs to maintain intermediate results for window functions, which can affect memory usage. LEAD() and LAG() are powerful for analyzing data trends, calculating differences, and performing row-by-row comparisons.
They work with the OVER clause, supporting PARTITION BY and ORDER BY for flexibility.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/lead,-lag.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/LEAD, LAG.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:37:27 GMT</pubDate></item><item><title><![CDATA[JOIN]]></title><description><![CDATA[In SQL, the JOIN clause is used to combine rows from two or more tables based on a related column between them. This is a fundamental concept in relational databases for querying data stored in different tables. JOIN operations allow you to create meaningful relationships and retrieve comprehensive datasets.
An INNER JOIN returns rows where there is a match in both tables.
If a row in one table does not have a corresponding row in the other table, that row is excluded from the result.
SELECT t1.column, t2.column
FROM table1 t1
INNER JOIN table2 t2 ON t1.common_column = t2.common_column;
SELECT Employees.EmployeeID, Employees.FirstName, Departments.DepartmentName
FROM Employees
INNER JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; A LEFT JOIN returns all rows from the left table and the matching rows from the right table.
If there is no match, NULL values are returned for columns from the right table.
SELECT t1.column, t2.column
FROM table1 t1
LEFT JOIN table2 t2 ON t1.common_column = t2.common_column;
SELECT Employees.EmployeeID, Employees.FirstName, Departments.DepartmentName
FROM Employees
LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; A RIGHT JOIN returns all rows from the right table and the matching rows from the left table.
If there is no match, NULL values are returned for columns from the left table.
SELECT t1.column, t2.column
FROM table1 t1
RIGHT JOIN table2 t2 ON t1.common_column = t2.common_column;
SELECT Employees.EmployeeID, Employees.FirstName, Departments.DepartmentName
FROM Employees
RIGHT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; A FULL JOIN returns all rows from both tables.
If there is no match, NULL values are returned for columns from the table without a match.
SELECT t1.column, t2.column
FROM table1 t1
FULL JOIN table2 t2 ON t1.common_column = t2.common_column;
SELECT Employees.EmployeeID, Employees.FirstName, Departments.DepartmentName
FROM Employees
FULL JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID; A CROSS JOIN returns the Cartesian product of two tables, meaning every row in the first table is combined with every row in the second table.
SELECT t1.column, t2.column
FROM table1 t1
CROSS JOIN table2 t2;
SELECT Employees.FirstName, Departments.DepartmentName
FROM Employees
CROSS JOIN Departments;
A self-join is a join where a table is joined with itself. It is useful for comparing rows within the same table.SELECT e1.EmployeeID, e1.FirstName, e2.ManagerID, e2.FirstName AS ManagerName
FROM Employees e1
INNER JOIN Employees e2 ON e1.ManagerID = e2.EmployeeID; Indexing: Ensure the columns used in the ON clause are indexed to improve performance. Use Aliases: Use table aliases for better readability, especially in complex queries. Filter Early: Apply WHERE conditions as early as possible to reduce the number of rows processed by the join. Avoid Cartesian Products: Be cautious with CROSS JOIN as it can generate a large number of rows. Understand NULL Handling: Be aware of how LEFT, RIGHT, and FULL joins handle NULL values in unmatched rows. JOIN operations are fundamental for working with relational databases and combining data from multiple tables.
Choosing the right type of JOIN (INNER, LEFT, RIGHT, FULL, CROSS) depends on the specific requirements of your query.
Understanding how each JOIN works helps you write efficient and accurate SQL queries.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/join.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/JOIN.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:37:16 GMT</pubDate></item><item><title><![CDATA[Indexing Strategies]]></title><description><![CDATA[Indexing is a database optimization technique that helps improve the speed and efficiency of query execution. An index acts like a lookup table that allows the database engine to quickly locate specific rows without scanning the entire table.Proper indexing strategies are essential for maintaining optimal database performance, especially as data volumes grow. However, improper use of indexes can degrade performance and increase storage overhead.
An index is a data structure that provides quick access to rows in a table.
Indexes are created on one or more columns to facilitate faster retrieval of data.
Think of an index like an index in a book, which helps you quickly find information without reading every page. An index on a single column.
Useful for queries that filter or sort based on a single column.
CREATE INDEX idx_employee_lastname ON Employees (LastName); An index on multiple columns.
Useful when queries filter or sort by more than one column.
CREATE INDEX idx_employee_department_lastname ON Employees (DepartmentID, LastName); Ensures that the indexed column(s) contain only unique values.
Automatically created with a PRIMARY KEY or UNIQUE constraint.
CREATE UNIQUE INDEX idx_unique_email ON Employees (Email); Determines the physical order of data in a table.
Each table can have only one clustered index.
Typically created on the primary key.
CREATE CLUSTERED INDEX idx_employee_id ON Employees (EmployeeID); A separate structure that contains pointers to the physical rows.
A table can have multiple non-clustered indexes.
CREATE NONCLUSTERED INDEX idx_employee_salary ON Employees (Salary); Enables full-text search capabilities for textual data.
Useful for searching large text fields.
CREATE FULLTEXT INDEX idx_employee_bio ON Employees (Bio); Create indexes on columns that are often used in: WHERE clauses
JOIN conditions
ORDER BY clauses
GROUP BY clauses CREATE INDEX idx_orders_customerid ON Orders (CustomerID); When queries filter by multiple columns, a composite index can improve performance.
The order of columns in the index matters.
CREATE INDEX idx_orders_customer_date ON Orders (CustomerID, OrderDate); This index benefits queries like:
SELECT * FROM Orders
WHERE CustomerID = 123 AND OrderDate &gt; '2024-01-01'; Clustered Index: Best for columns with unique, sequential values (e.g., primary keys).
Non-Clustered Index: Best for columns with frequent lookups but non-sequential values.
Unique Index: For ensuring data integrity on unique fields (e.g., email addresses). Too many indexes can: Slow down write operations (INSERT, UPDATE, DELETE).
Increase storage requirements. Only create indexes that benefit frequent queries. Index columns with high selectivity (columns with many distinct values).
Avoid indexing low-selectivity columns (e.g., columns with few unique values like Gender). An index that contains all the columns needed for a query.
Reduces the need for the database to access the table itself.
CREATE INDEX idx_orders_covering ON Orders (CustomerID, OrderDate, TotalAmount); This index covers queries like:
SELECT CustomerID, OrderDate, TotalAmount
FROM Orders
WHERE CustomerID = 123;
]]></description><link>https://64etuor.github.io/600_tech-stack/sql/indexing-strategies.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Indexing Strategies.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:37:02 GMT</pubDate></item><item><title><![CDATA[CTE, WITH]]></title><description><![CDATA[The WITH clause in SQL, also known as a Common Table Expression (CTE), allows you to define temporary result sets that can be referenced within a SELECT, INSERT, UPDATE, or DELETE statement. This makes your SQL queries more modular, readable, and easier to maintain.WITH cte_name (optional_columns) AS ( subquery_definition
)
SELECT * FROM cte_name; cte_name: The name of the temporary result set (CTE).
optional_columns: An optional list of column names for the CTE.
subquery_definition: The query that defines the CTE.
WITH HighSalaryEmployees AS ( SELECT EmployeeID, FirstName, LastName, Salary FROM Employees WHERE Salary &gt; 50000
)
SELECT * FROM HighSalaryEmployees; Explanation:
The HighSalaryEmployees CTE stores employees with a salary greater than 50,000. The final SELECT query retrieves all employees from this temporary result set. Improved Readability: CTEs allow you to break down complex queries into smaller, manageable parts. Reusability: You can reference the same CTE multiple times within a query. Recursion: CTEs can be recursive, allowing you to work with hierarchical or tree-structured data. Avoiding Subquery Repetition: Instead of repeating the same subquery, define it once using a CTE. Recursive CTEs allow you to perform operations on hierarchical data, such as organizational charts or parent-child relationships.WITH RECURSIVE EmployeeHierarchy AS ( -- Anchor member (base case) SELECT EmployeeID, ManagerID, FirstName, 1 AS Level FROM Employees WHERE ManagerID IS NULL UNION ALL -- Recursive member SELECT e.EmployeeID, e.ManagerID, e.FirstName, eh.Level + 1 FROM Employees e JOIN EmployeeHierarchy eh ON e.ManagerID = eh.EmployeeID
)
SELECT * FROM EmployeeHierarchy; Explanation:
This query retrieves an employee hierarchy starting from top-level managers and recursively includes their subordinates.
You can define multiple CTEs in a single query.WITH SalesByRegion AS ( SELECT Region, SUM(Sales) AS TotalSales FROM SalesData GROUP BY Region
),
TopRegions AS ( SELECT Region FROM SalesByRegion WHERE TotalSales &gt; 100000
)
SELECT s.*
FROM SalesData s
JOIN TopRegions t ON s.Region = t.Region; Explanation: SalesByRegion: Aggregates total sales by region.
TopRegions: Filters regions where total sales exceed 100,000.
The final query joins the original SalesData with TopRegions to get detailed sales information for high-performing regions. Use CTEs for Complex Queries: Break down complex queries into multiple CTEs to enhance clarity. Optimize Performance: CTEs may be materialized (evaluated once) or inlined (evaluated as needed) depending on the SQL engine. Recursive CTEs for Hierarchies: Use recursive CTEs for hierarchical data like organizational charts or file systems. The WITH clause (CTE) is a powerful tool in SQL for improving query readability, reusability, and supporting recursion.
Combining CTEs with window functions, subqueries, and advanced SQL techniques can make your data analysis and query logic more efficient and maintainable.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/cte,-with.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/CTE, WITH.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:36:43 GMT</pubDate></item><item><title><![CDATA[Bitwise Operation]]></title><description><![CDATA[
본 문서는 MySQL 등 데이터베이스 환경에서 선택 항목을 효율적으로 관리하고 검색하는 방법 중 하나인 비트연산(bit operation)에 대해 다룹니다.
LIKE, OR 등을 사용하는 전통적인 검색 방식 대비 높은 성능 향상과 간단한 쿼리 구조를 제공하는 비트연산 접근법의 이점과 활용 방법을 소개합니다. 비트연산은 데이터를 2진수 형태로 처리할 때, 각 비트 단위로 연산을 수행하는 기법입니다.
흔히 사용하는 비트연산자는 다음과 같습니다. AND (&amp;): 두 비트가 모두 1일 때 1을 반환
OR (|): 두 비트 중 하나라도 1이면 1을 반환
XOR (^): 두 비트 중 하나만 1일 때 1을 반환
NOT (~): 비트를 반전 (1은 0으로, 0은 1로) 비트연산은 단순한 정수 연산보다 빠르고, 문자열 비교 등의 연산보다 훨씬 더 효율적입니다.
데이터베이스에서 AND (&amp;) 연산을 통해 특정 비트 패턴을 빠르게 필터링함으로써 LIKE나 OR 연산보다 높은 성능을 얻을 수 있습니다.
예를 들어, 다중 선택 가능한 항목 A~P까지 총 16개가 있다고 가정합니다.
각 항목에 고유한 2진 비트를 할당합니다. 예:
A: 0000 0000 0000 0001 (10진수: 1)
B: 0000 0000 0000 0010 (10진수: 2)
C: 0000 0000 0000 0100 (10진수: 4)
D: 0000 0000 0000 1000 (10진수: 8)
E: 0000 0000 0001 0000 (10진수: 16)
F: 0000 0000 0010 0000 (10진수: 32)
G: 0000 0000 0100 0000 (10진수: 64)
H: 0000 0000 1000 0000 (10진수: 128)
I: 0000 0001 0000 0000 (10진수: 256)
J: 0000 0010 0000 0000 (10진수: 512)
K: 0000 0100 0000 0000 (10진수: 1024)
L: 0000 1000 0000 0000 (10진수: 2048)
M: 0001 0000 0000 0000 (10진수: 4096)
N: 0010 0000 0000 0000 (10진수: 8192)
O: 0100 0000 0000 0000 (10진수: 16384)
P: 1000 0000 0000 0000 (10진수: 32768) 여러 항목을 동시에 선택할 경우, 각 항목의 값을 더한(OR 연산과 동일한 결과) 10진수 값을 DB에 저장합니다. 예: A(1) + B(2) = 3 (2진수로 0000 0000 0000 0011)
A(1) + D(8) + E(16)을 선택하면 1+8+16=25 (2진수로 0000 0000 0001 1001) 모든 항목을 선택하면 1+2+4+8+...+32768 = 65535 (2진수로 1111 1111 1111 1111) 특정 값들이 포함된 필드를 검색할 때, 전통적인 방법은 다음과 같이 LIKE와 OR을 혼합하여 사용합니다. 예: 값 2 혹은 5를 포함하는 레코드를 찾을 때
WHERE 필드 LIKE '%2|%' OR 필드 LIKE '%5|%' 이러한 LIKE + OR 쿼리는 문자열 검색이며, 인덱스 활용이 어렵고 성능 저하를 야기합니다. 데이터베이스에 25(0000 0000 0001 1001)가 저장되어 있다고 가정합니다. 이는 A(1), D(8), E(16)가 선택되었다는 의미입니다. A, B, C 중 하나라도 포함하는 레코드를 찾으려면 A(1)+B(2)+C(4)=7을 활용합니다.
SELECT * FROM 테이블 WHERE 필드 &amp; 7 &gt; 0; 필드 &amp; 7 연산 결과로 0보다 큰 값이 나오면, 필드 내에 A, B, C 중 하나 이상이 포함됨을 의미합니다.
필드(25) AND 7:
0000 0000 0001 1001 (25)
&amp; 0000 0000 0000 0111 (7)
----------------------- 0000 0000 0000 0001 (1, 이는 0보다 큼) 따라서 해당 레코드는 조건에 부합합니다. D(8)와 E(16) 모두를 포함한 레코드를 찾고 싶다면 8+16=24입니다. 단순히 필드 &amp; 24 &gt; 0으로는 D나 E 중 하나만 포함해도 성립합니다. 두 비트를 모두 포함하는지 확인하려면 bit_count() 함수를 활용할 수 있습니다.
SELECT * FROM 테이블 WHERE BIT_COUNT(필드 &amp; 24) = 2; 필드(25) AND 24:
0000 0000 0001 1001 (25)
&amp; 0000 0000 0001 1000 (24)
----------------------- 0000 0000 0001 1000 (24) 이 값의 비트 1의 개수는 2개이므로 D와 E 모두 선택되었음을 알 수 있습니다. 기존 쿼리:
WHERE 필드 LIKE '%A%' OR (필드 LIKE '%D%' AND 필드 LIKE '%E%') 비트연산 쿼리:
SELECT * FROM 테이블
WHERE 필드 &amp; 1 &gt; 0 -- A 포함 OR BIT_COUNT(필드 &amp; 24) = 2; -- D와 E 모두 포함 이렇게 비트연산을 활용하면 WHERE 조건문을 훨씬 단순화하고, 문자열 기반 검색보다 빠른 검색을 구현할 수 있습니다.&lt;?php
$aMultiSelect = Array( "1"=&gt;"A","2"=&gt;"B","4"=&gt;"C","8"=&gt;"D", "16"=&gt;"E","32"=&gt;"F","64"=&gt;"G","128"=&gt;"H", "256"=&gt;"I","512"=&gt;"J","1024"=&gt;"K","2048"=&gt;"L", "4096"=&gt;"M","8192"=&gt;"N","16384"=&gt;"O","32768"=&gt;"P"
);
echo "&lt;form method='post' action='2.php'&gt;";
foreach ($aMultiSelect as $sKey =&gt; $sVal) { echo "&lt;input type='checkbox' name='multiselect[]' value='$sKey'&gt;$sVal&lt;br /&gt;";
}
echo "&lt;input type='submit' value='submit'&gt;";
echo "&lt;/form&gt;";
?&gt; 위 예제에서 사용자는 체크박스를 통해 A~P를 다중 선택할 수 있습니다.
&lt;?php
$sSum = 0;
foreach ($_POST['multiselect'] as $sVal) { $sSum += $sVal;
}
// $sSum 값을 DB에 저장. 예를 들어 A, D, E를 선택하면 $sSum = 25
?&gt; 사용자가 선택한 항목 값을 모두 더한 값을 DB 필드에 저장합니다. 이는 비트마스크 형태로 선택 상태를 기록하는 것입니다. 속도 향상: 문자열 비교(LIKE)나 복잡한 조건(OR 조합)보다 비트연산이 훨씬 빠릅니다. 쿼리 단순화: 복잡한 조건문의 단순화로 유지보수가 용이해집니다. 확장성: 비트 수를 늘려 나가면 선택 옵션을 확대하는 데 어려움이 없습니다. (1비트 당 1개 항목) 항목이 매우 많아 비트 수가 커질 경우 정수 범위에 유의해야 합니다.
DB 자료형(예: UNSIGNED INT)을 적절히 선택하십시오.
BIT_COUNT 함수나 비트연산 최적화 전략을 적절히 활용하십시오.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/bitwise-operation.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Bitwise Operation.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:35:53 GMT</pubDate></item><item><title><![CDATA[CASE]]></title><description><![CDATA[The CASE statement in SQL is a conditional expression that allows you to perform different actions or return different values based on conditions. It is similar to an IF-THEN-ELSE structure in other programming languages and is particularly useful for creating dynamic columns, conditional aggregations, and complex filtering.CASE expression WHEN value1 THEN result1 WHEN value2 THEN result2 ELSE default_result
END expression: The column or expression to evaluate.
WHEN: Specifies the condition to match.
THEN: Specifies the result if the condition is met.
ELSE: (Optional) The default result if none of the conditions are met.
END: Marks the end of the CASE statement.
CASE WHEN condition1 THEN result1 WHEN condition2 THEN result2 ELSE default_result
END Instead of matching an expression, the WHEN clause contains a full condition.
SELECT EmployeeID, FirstName, DepartmentID, CASE DepartmentID WHEN 1 THEN 'Sales' WHEN 2 THEN 'Engineering' WHEN 3 THEN 'HR' ELSE 'Other' END AS DepartmentName
FROM Employees; Explanation: The CASE statement converts DepartmentID values to their corresponding department names.
SELECT EmployeeID, FirstName, Salary, CASE WHEN Salary &gt; 80000 THEN 'High Salary' WHEN Salary BETWEEN 50000 AND 80000 THEN 'Medium Salary' ELSE 'Low Salary' END AS SalaryCategory
FROM Employees; Explanation: The CASE statement categorizes employees based on their salary ranges.
SELECT *
FROM Orders
WHERE CASE WHEN OrderDate &gt;= '2024-01-01' THEN 'Recent' ELSE 'Old' END = 'Recent'; Explanation: Filters orders where the order date is recent (after January 1, 2024).
SELECT ProductID, ProductName, Category, Price
FROM Products
ORDER BY CASE Category WHEN 'Electronics' THEN 1 WHEN 'Clothing' THEN 2 ELSE 3 END; Explanation: Orders products based on the Category column, with Electronics listed first, followed by Clothing, and then others.
SELECT DepartmentID, COUNT(CASE WHEN Gender = 'Male' THEN 1 ELSE NULL END) AS MaleCount, COUNT(CASE WHEN Gender = 'Female' THEN 1 ELSE NULL END) AS FemaleCount
FROM Employees
GROUP BY DepartmentID; Explanation: Counts male and female employees in each department by conditionally counting rows based on gender.
You can nest CASE statements to handle more complex conditions.SELECT EmployeeID, FirstName, Salary, CASE WHEN Salary &gt; 80000 THEN 'High' WHEN Salary &gt; 50000 THEN CASE WHEN Salary &lt;= 70000 THEN 'Medium-High' ELSE 'Medium' END ELSE 'Low' END AS SalaryCategory
FROM Employees; Explanation: This CASE statement categorizes salaries into more detailed categories using nested conditions. Readable Conditions: Keep WHEN conditions readable and straightforward to improve query clarity. Default Values: Always provide an ELSE clause to handle unexpected values and avoid NULL results. Performance Consideration: Complex CASE statements can impact performance. Optimize by simplifying conditions where possible. Consistent Data Types: Ensure all THEN and ELSE results return the same data type to avoid type conversion errors. The CASE statement is a versatile tool for introducing conditional logic in SQL queries.
It can be used in SELECT, WHERE, ORDER BY, and aggregate functions to handle a wide range of dynamic scenarios.
Understanding CASE statements allows you to write more powerful and flexible SQL queries.
📇 DDC Index: <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>]]></description><link>https://64etuor.github.io/600_tech-stack/sql/syntax/case.html</link><guid isPermaLink="false">600_Tech Stack/SQL/Syntax/CASE.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 23:35:00 GMT</pubDate></item><item><title><![CDATA[1W - Python 및 데이터 분석 입문]]></title><description><![CDATA[2024-11-23 Python의 데이터 타입을 이해한다.
Python의 자료형을 이해한다.
조건문과 반복문을 이해한다.
예외처리를 이해한다.
Python 의 기초 라이브러리 ( Numpy, Pandas )를 살펴 본다. 파이썬은 동적 타입 언어로, 변수의 데이터 타입(자료형)을 명시적으로 선언하지 않아도 됩니다. 변수에 값을 할당하면 파이썬이 자동으로 데이터 타입을 결정합니다. 파이썬에서&nbsp;반복문과&nbsp;조건문은 프로그램의 흐름을 제어하는 데 필수적인 요소입니다. 반복문은 특정 코드를 여러 번 실행할 때 사용하며, 조건문은 특정 조건에 따라 코드 실행 여부를 결정합니다. 파이썬에서 함수와 클래스는 코드의 재사용성과 모듈화를 높이는 핵심 요소입니다. 함수를 사용하면 반복되는 작업을 하나의 블록으로 묶어 호출할 수 있으며, 클래스를 사용하면 객체 지향적 프로그래밍(OOP)을 구현할 수 있습니다. 설명:
특정 작업을 수행하는 코드 블록입니다. 필요할 때 호출하여 실행할 수 있습니다. 문법:
def 함수이름(매개변수): 수행할 작업 return 반환값 예제:
def greet(name): return f"Hello, {name}!" message = greet("Alice")
print(message) # Hello, Alice! 매개변수: 함수에 값을 전달할 수 있습니다.
반환값: return 키워드를 사용해 값을 반환할 수 있습니다.
재사용성: 동일한 로직을 여러 번 호출할 수 있습니다. 설명:
객체를 생성하기 위한 설계도입니다. 클래스에는 속성(데이터)과 메서드(함수)가 포함됩니다. 문법:
class 클래스이름: def __init__(self, 속성): self.속성 = 속성 def 메서드이름(self): 수행할 작업 예제:
class Dog: def __init__(self, name): self.name = name def bark(self): return f"{self.name} says woof!" dog1 = Dog("Buddy")
print(dog1.bark()) # Buddy says woof! 속성: 클래스 내에서 정의된 변수입니다.
메서드: 클래스 내에서 정의된 함수입니다.
생성자: __init__ 메서드를 사용해 객체 생성 시 초기값을 설정합니다.
객체 지향적 설계: 클래스는 데이터와 기능을 묶어 하나의 단위로 관리합니다. 파이썬에서 예외 처리는 프로그램 실행 중 발생할 수 있는 오류를 제어하고, 오류가 발생해도 프로그램이 종료되지 않도록 도와줍니다. 설명:
코드 실행 중 예외(에러)가 발생했을 때 이를 처리하여 프로그램이 비정상적으로 종료되지 않도록 합니다. 기본 문법:
try: # 예외가 발생할 수 있는 코드
except 예외종류: # 예외가 발생했을 때 실행할 코드
else: # 예외가 발생하지 않았을 때 실행할 코드
finally: # 예외 발생 여부와 관계없이 항상 실행할 코드 try: num = int(input("Enter a number: ")) result = 10 / num print(f"Result: {result}")
except ZeroDivisionError: print("Error: Division by zero is not allowed.")
except ValueError: print("Error: Invalid input. Please enter a number.")
else: print("Division successful!")
finally: print("Program execution completed.")
설명:
try: 예외가 발생할 가능성이 있는 코드 블록입니다.
except: 특정 예외가 발생했을 때 실행할 코드입니다.
else: 예외가 발생하지 않았을 때 실행되는 코드입니다.
finally: 예외 발생 여부와 관계없이 항상 실행되는 코드입니다. Numpy와 Pandas는 파이썬에서 데이터 처리를 위한 강력한 라이브러리입니다. 설명:
Numpy(넘파이)는 수치 계산을 위한 라이브러리로, 다차원 배열과 행렬을 효율적으로 처리할 수 있습니다. 주요 특징: 다차원 배열 (ndarray) 지원
벡터화 연산으로 빠른 계산
과학 계산 및 선형대수 지원 예제:
import numpy as np # 1차원 배열 생성
arr = np.array([1, 2, 3, 4, 5])
print(arr) # [1 2 3 4 5] # 배열의 기본 연산
print(arr * 2) # [2 4 6 8 10] <img alt="Pasted image 20241210145850.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241210145850.png" target="_self"> 설명:
Pandas(판다스)는 데이터 분석과 처리를 위한 라이브러리로, 표 형식의 데이터를 쉽게 다룰 수 있습니다. 주요 특징: DataFrame과 Series 객체 제공
데이터 정리, 필터링, 변환 기능
CSV, Excel, SQL 등 다양한 데이터 소스와 호환 예제:
import pandas as pd # 데이터프레임 생성
data = { "Name": ["Alice", "Bob", "Charlie"], "Age": [25, 30, 35], "City": ["Seoul", "Busan", "Incheon"]
} df = pd.DataFrame(data)
print(df) # 데이터 필터링
print(df[df["Age"] &gt; 28]) 출력 결과: Name Age City
0 Alice 25 Seoul
1 Bob 30 Busan
2 Charlie 35 Incheon <br> <img alt="Pasted image 20241210150126.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241210150126.png" target="_self"> &nbsp;핵심 개념 이해
&nbsp;추가 자료 조사 배운 점:
파이썬의 기초를 오랜만에 다시 돌아 보았다.
느낀 점:
사실 대부분 아는 내용이라고 자만해서 강의를 대충 봤는데, 누가 질문을 한다고 가정하면 정확하게 대답할 자신이 없다.
다음에 개선할 점:
객관적으로 판단해서 내 지식이 완전하지 않다고 느끼는 부분은 집중해서 강의를 들을 것
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/1w-python-및-데이터-분석-입문.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/1W - Python 및 데이터 분석 입문.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 23 Nov 2024 00:00:00 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241210145850.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241210145850.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2408 개발품 DV 데이터 전산 관리 프로젝트]]></title><description><![CDATA[Github 레포지토리 없음- Development tool : Google Appsheet
- Data Visualization : Google Sheets
- RPA : Google Apps Script
- Database : Google Sheet
Key Features S/N 유효성 및 고유성 검증
공정 이력 검증
부품 사양 검증(QR 등록 시)
재작업 목록
실시간 대시보드(5분 간격 업데이트)
QR 코드 제품 생산 이력 조회 작업 화면 (모듈)
<img alt="batch_2024-12-09 08 29 05 1.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-29-05-1.png" target="_self" style="width: 400px; max-width: 100%;"><br>
<img alt="batch_2024-12-09 08 29 37.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-29-37.png" target="_self" style="width: 400px; max-width: 100%;">
작업 화면 (BPU)
<br><img alt="batch_2024-12-09 08 40 47.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-40-47.png" target="_self">
작업 화면 (System Rack)
<br><img alt="batch_2024-12-09 08 35 09.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-35-09.png" target="_self" style="width: 400px; max-width: 100%;"><br>
<img alt="batch_2024-12-09 08 35 21.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-35-21.png" target="_self" style="width: 400px; max-width: 100%;">
Google Sheet 데이터 및 쿼리 화면
<br><img alt="batch_2024-12-08 23 42 23 1.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-08-23-42-23-1.png" target="_self"><br><img alt="batch_2024-12-08 23 41 58.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-08-23-41-58.png" target="_self">
Google Sheet 실시간 대시보드
<br><img alt="batch_2024-12-08 23 39 34.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-08-23-39-34.png" target="_self">
QR Code 생산 이력 조회 화면
<br><img alt="batch_2024-12-09 08 37 33.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-37-33.png" target="_self">
Google Apps Script
<br><img alt="batch_2024-12-09 08 38 12.png" src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-38-12.png" target="_self">]]></description><link>https://64etuor.github.io/300_projects/00_achives/2408-개발품-dv-데이터-전산-관리-프로젝트.html</link><guid isPermaLink="false">300_Projects/00_Achives/2408 개발품 DV 데이터 전산 관리 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 11:12:03 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-29-05-1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/batch_2024-12-09-08-29-05-1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[INDEX RULES]]></title><description><![CDATA[<a data-href="📖 000 General Works" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 000 General Works</a>
<br><a data-href="📚 001 Knowledge" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 001 Knowledge</a>
<br><a data-href="📚 002 Bibliography" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 002 Bibliography</a>
<br><a data-href="📚 003 Encyclopedias" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 003 Encyclopedias</a>
<br><a data-href="📚 004 News Media, Journalism" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 004 News Media, Journalism</a>
<br><a data-href="📚 005 Computer Science" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 005 Computer Science</a>
<br><a data-href="📚 006 Special Computer Methods" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 006 Special Computer Methods</a>
<br><a data-href="📚 007 Online Media" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 007 Online Media</a>
<br><a data-href="📚 008 Prohibited Knowledge" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 008 Prohibited Knowledge</a>
<br><a data-href="📚 009 Rare, curious Knowledge" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 009 Rare, curious Knowledge</a>
<br><a data-href="📖 100 Philosophy" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 100 Philosophy</a>
<br><a data-href="📚 101 Metaphysics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 101 Metaphysics</a>
<br><a data-href="📚 102 Epistemology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 102 Epistemology</a>
<br><a data-href="📚 103 Philosophical Systems" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 103 Philosophical Systems</a>
<br><a data-href="📚 104 Paranormal Phenomena" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 104 Paranormal Phenomena</a>
<br><a data-href="📚 105 Psychology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 105 Psychology</a>
<br><a data-href="📚 106 Logic" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 106 Logic</a>
<br><a data-href="📚 107 Ethics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 107 Ethics</a>
<br><a data-href="📚 108 Ancient, Medieval, Eastern" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 108 Ancient, Medieval, Eastern</a>
<br><a data-href="📚 109 Modern Western Philosophy" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 109 Modern Western Philosophy</a>
<br><a data-href="📖 200 Religion" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 200 Religion</a>
<br><a data-href="📚 201 Religion" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 201 Religion</a>
<br><a data-href="📚 202 Bible" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 202 Bible</a>
<br><a data-href="📚 203 Christianity" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 203 Christianity</a>
<br><a data-href="📚 204 Other Religions" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 204 Other Religions</a>
<br><a data-href="📚 205 Theology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 205 Theology</a>
<br><a data-href="📚 206 World Religions" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 206 World Religions</a>
<br><a data-href="📚 207 Philosophy and theory of religion" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 207 Philosophy and theory of religion</a>
<br><a data-href="📚 208 History of Christianity" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 208 History of Christianity</a>
<br><a data-href="📚 209 Comparative religion" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 209 Comparative religion</a>
<br><a data-href="📖 300 Social Sciences" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 300 Social Sciences</a>
<br><a data-href="📚 301 Sociology and Anthropology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 301 Sociology and Anthropology</a>
<br><a data-href="📚 302 Political Science" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 302 Political Science</a>
<br><a data-href="📚 303 Economics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 303 Economics</a>
<br><a data-href="📚 304 Law" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 304 Law</a>
<br><a data-href="📚 305 Public Administration" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 305 Public Administration</a>
<br><a data-href="📚 306 Military Science" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 306 Military Science</a>
<br><a data-href="📚 307 Education" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 307 Education</a>
<br><a data-href="📚 308 Commerce, Communications, Transport" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 308 Commerce, Communications, Transport</a>
<br><a data-href="📚 309 Customs, Etiquette, Folklore" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 309 Customs, Etiquette, Folklore</a>
<br><a data-href="📖 400 Language" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 400 Language</a>
<br><a data-href="📚 401 Linguistics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 401 Linguistics</a>
<br><a data-href="📚 402 English Language" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 402 English Language</a>
<br><a data-href="📚 403 Western Languages" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 403 Western Languages</a>
<br><a data-href="📚 404 Eastern Languages" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 404 Eastern Languages</a>
<br><a data-href="📚 405 African Languages" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 405 African Languages</a>
<br><a data-href="📚 406 Native American Languages" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 406 Native American Languages</a>
<br><a data-href="📚 407 Artificial Languages" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 407 Artificial Languages</a>
<br><a data-href="📚 408 Language Learning" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 408 Language Learning</a>
<br><a data-href="📚 409 Language Dictionaries" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 409 Language Dictionaries</a>
<br><a data-href="📖 500 Science" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 500 Science</a>
<br><a data-href="📚 501 Mathematics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 501 Mathematics</a>
<br><a data-href="📚 502 Astronomy" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 502 Astronomy</a>
<br><a data-href="📚 503 Physics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 503 Physics</a>
<br><a data-href="📚 504 Chemistry" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 504 Chemistry</a>
<br><a data-href="📚 505 Earth Sciences" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 505 Earth Sciences</a>
<br><a data-href="📚 506 Life Sciences" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 506 Life Sciences</a>
<br><a data-href="📚 507 Botany" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 507 Botany</a>
<br><a data-href="📚 508 Zoology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 508 Zoology</a>
<br><a data-href="📚 509 Paleontology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 509 Paleontology</a>
<br><a data-href="📖 600 Technology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 600 Technology</a>
<br><a data-href="📚 601 Medicine" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 601 Medicine</a>
<br><a data-href="📚 602 Engineering" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 602 Engineering</a>
<br><a data-href="📚 603 Agriculture" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 603 Agriculture</a>
<br><a data-href="📚 604 Home Economics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 604 Home Economics</a>
<br><a data-href="📚 605 Business" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 605 Business</a>
<br><a data-href="📚 606 Chemical Engineering" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 606 Chemical Engineering</a>
<br><a data-href="📚 607 Electrical Engineering" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 607 Electrical Engineering</a>
<br><a data-href="📚 608 Mechanical Engineering" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 608 Mechanical Engineering</a>
<br><a data-href="📚 609 Civil Engineering" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 609 Civil Engineering</a>
<br><a data-href="📖 610 Generative AI" href="https://64etuor.github.io/000_index/📖-610-generative-ai.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 610 Generative AI</a>
<br><a data-href="📚 611 Generative Models" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 611 Generative Models</a>
<br><a data-href="📚 612 Neural Networks" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 612 Neural Networks</a>
<br><a data-href="📚 613 Natural Language Processing" href="https://64etuor.github.io/000_index/📚-613-natural-language-processing.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 613 Natural Language Processing</a>
<br><a data-href="📚 614 AI Ethics" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 614 AI Ethics</a>
<br><a data-href="📚 615 AI Applications" href="https://64etuor.github.io/000_index/📚-615-ai-applications.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 615 AI Applications</a>
<br><a data-href="📚 616 AI Research" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 616 AI Research</a>
<br><a data-href="📚 617 AI Tools" href="https://64etuor.github.io/000_index/📚-617-ai-tools.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 617 AI Tools</a>
<br><a data-href="📚 618 AI Frameworks" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 618 AI Frameworks</a>
<br><a data-href="📚 619 Future of AI" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 619 Future of AI</a>
<br><a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a>
<br><a data-href="📚 621 Database Theory" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 621 Database Theory</a>
<br><a data-href="📚 622 Database Management Systems (DBMS)" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 622 Database Management Systems (DBMS)</a>
<br><a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a>
<br><a data-href="📚 624 NoSQL" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 624 NoSQL</a>
<br><a data-href="📚 625 Database Design" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 625 Database Design</a>
<br><a data-href="📚 626 Data Warehousing" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 626 Data Warehousing</a>
<br><a data-href="📚 627 Data Mining" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 627 Data Mining</a>
<br><a data-href="📚 628 Big Data" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 628 Big Data</a>
<br><a data-href="📚 629 Cloud Databases" href="https://64etuor.github.io/000_index/📚-629-cloud-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 629 Cloud Databases</a>
<br><a data-href="📖 630 Programming" href="https://64etuor.github.io/000_index/📖-630-programming.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 630 Programming</a>
<br><a data-href="📚 631 Programming Languages" href="https://64etuor.github.io/000_index/📚-631-programming-languages.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 631 Programming Languages</a>
<br><a data-href="📚 632 Algorithms" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 632 Algorithms</a>
<br><a data-href="📚 633 Data Structures" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 633 Data Structures</a>
<br><a data-href="📚 634 Software Development" href="https://64etuor.github.io/000_index/📚-634-software-development.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 634 Software Development</a>
<br><a data-href="📚 635 Web Development" href="https://64etuor.github.io/000_index/📚-635-web-development.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 635 Web Development</a>
<br><a data-href="📚 636 Mobile App Development" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 636 Mobile App Development</a>
<br><a data-href="📚 637 Game Development" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 637 Game Development</a>
<br><a data-href="📚 638 Embedded Systems" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 638 Embedded Systems</a>
<br><a data-href="📚 639 Programming Paradigms" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 639 Programming Paradigms</a>
<br><a data-href="📖 640 UI, UX Design" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 640 UI, UX Design</a>
<br><a data-href="📚 641 User Interface Design" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 641 User Interface Design</a>
<br><a data-href="📚 642 User Experience Design" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 642 User Experience Design</a>
<br><a data-href="📚 643 Usability Testing" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 643 Usability Testing</a>
<br><a data-href="📚 644 Interaction Design" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 644 Interaction Design</a>
<br><a data-href="📚 645 Visual Design" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 645 Visual Design</a>
<br><a data-href="📚 646 Information Architecture" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 646 Information Architecture</a>
<br><a data-href="📚 647 Design Systems" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 647 Design Systems</a>
<br><a data-href="📚 648 Prototyping" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 648 Prototyping</a>
<br><a data-href="📚 649 Accessibility" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 649 Accessibility</a>
<br><a data-href="📖 700 Arts" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 700 Arts</a>
<br><a data-href="📚 701 Visual Arts" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 701 Visual Arts</a>
<br><a data-href="📚 702 Sculpture" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 702 Sculpture</a>
<br><a data-href="📚 703 Architecture" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 703 Architecture</a>
<br><a data-href="📚 704 Drawing, Decorative Arts" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 704 Drawing, Decorative Arts</a>
<br><a data-href="📚 705 Painting" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 705 Painting</a>
<br><a data-href="📚 706 Printmaking" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 706 Printmaking</a>
<br><a data-href="📚 707 Photography" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 707 Photography</a>
<br><a data-href="📚 708 Music" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 708 Music</a>
<br><a data-href="📚 709 Performing Arts" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 709 Performing Arts</a>
<br><a data-href="📖 800 Literature" href="https://64etuor.github.io/000_index/📖-800-literature.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 800 Literature</a>
<br><a data-href="📚 801 Poetry" href="https://64etuor.github.io/000_index/📚-801-poetry.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 801 Poetry</a>
<br><a data-href="📚 802 Drama" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 802 Drama</a>
<br><a data-href="📚 803 Fiction" href="https://64etuor.github.io/000_index/📚-803-fiction.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 803 Fiction</a>
<br><a data-href="📚 804 Essays" href="https://64etuor.github.io/000_index/📚-804-essays.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 804 Essays</a>
<br><a data-href="📚 805 Speeches" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 805 Speeches</a>
<br><a data-href="📚 806 Letters" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 806 Letters</a>
<br><a data-href="📚 807 Humor" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 807 Humor</a>
<br><a data-href="📚 808 Rhetoric" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 808 Rhetoric</a>
<br><a data-href="📚 809 Literary Criticism" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 809 Literary Criticism</a>
<br><a data-href="📖 900 History &amp; Geography" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📖 900 History &amp; Geography</a>
<br><a data-href="📚 901 History" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 901 History</a>
<br><a data-href="📚 902 Geography" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 902 Geography</a>
<br><a data-href="📚 903 Travel" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 903 Travel</a>
<br><a data-href="📚 904 Biography" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 904 Biography</a>
<br><a data-href="📚 905 Genealogy" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 905 Genealogy</a>
<br><a data-href="📚 906 Archeology" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 906 Archeology</a>
<br><a data-href="📚 907 Ancient History" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 907 Ancient History</a>
<br><a data-href="📚 908 Medieval History" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 908 Medieval History</a>
<br><a data-href="📚 909 Modern History" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 909 Modern History</a>
]]></description><link>https://64etuor.github.io/000_index/index-rules.html</link><guid isPermaLink="false">000_Index/INDEX RULES.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 11:02:18 GMT</pubDate></item><item><title><![CDATA[2W - 데이터 분석 입문 1]]></title><description><![CDATA[2024-11-30 Pandas 라이브러리의 기본 기능을 이해한다.
Plotly 라이브러리의 데이터를 시각화 기능을 이해한다. 데이터를 조회하고 정렬하는 방법입니다. Indexing: 특정 행과 열을 선택합니다. .loc[]: 라벨 기반 선택 .iloc[]: 정수 기반 선택 Sorting: 데이터를 정렬합니다. .sort_values(): 특정 열을 기준으로 정렬 .sort_index(): 인덱스를 기준으로 정렬 import pandas as pd df = pd.DataFrame({ "Name": ["Alice", "Bob", "Charlie"], "Age": [25, 30, 35], "City": ["Seoul", "Busan", "Incheon"]
}) # Indexing
print(df.loc[0]) # 라벨 기반
print(df.iloc[1]) # 정수 기반 # Sorting
df_sorted = df.sort_values(by="Age", ascending=False)
print(df_sorted) 조건에 맞는 데이터를 추출합니다. Boolean Indexing: 조건을 만족하는 행만 필터링 복합 조건: &amp; (AND), | (OR), ~ (NOT) 연산 사용 # Age가 30 이상인 데이터 필터링
filtered = df[df["Age"] &gt;= 30] # 복합 조건
filtered_multiple = df[(df["Age"] &gt; 25) &amp; (df["City"] == "Busan")] print(filtered)
print(filtered_multiple) 날짜 및 시간 데이터를 다루는 기능입니다. 날짜 변환: pd.to_datetime() 날짜 연산: 날짜 간 차이 계산 날짜 속성: .dt로 연, 월, 일 추출 df["Date"] = ["2024-01-01", "2024-06-07", "2024-12-31"]
df["Date"] = pd.to_datetime(df["Date"]) # 날짜에서 연도 추출
df["Year"] = df["Date"].dt.year print(df) 데이터를 그룹화하고 집계하는 기능입니다. 그룹화: .groupby()로 데이터를 그룹화 집계 함수: .sum(), .mean(), .count() 등 사용 df = pd.DataFrame({ "Category": ["A", "B", "A", "B"], "Value": [10, 20, 15, 25]
}) grouped = df.groupby("Category")["Value"].sum()
print(grouped) 여러 데이터프레임을 합치는 기능입니다. Concatenate: pd.concat()로 데이터프레임 연결 Merge/Join: .merge()로 특정 조건에 맞게 병합 df1 = pd.DataFrame({"ID": [1, 2], "Name": ["Alice", "Bob"]})
df2 = pd.DataFrame({"ID": [1, 2], "Score": [90, 85]}) combined = pd.merge(df1, df2, on="ID")
print(combined) 데이터를 재구성하는 기능입니다. Pivot Table: .pivot_table()로 데이터 요약 Index, Columns, Values 지정 df = pd.DataFrame({ "Name": ["Alice", "Bob", "Alice", "Bob"], "Subject": ["Math", "Math", "Science", "Science"], "Score": [90, 85, 95, 80]
}) pivot = df.pivot_table(index="Name", columns="Subject", values="Score")
print(pivot) 데이터 값과 결측치(NA)를 다루는 기능입니다. 결측치 확인: .isna(), .notna() 결측치 처리: .dropna(), .fillna()로 처리 df = pd.DataFrame({ "Name": ["Alice", "Bob", None], "Score": [90, None, 85]
}) # 결측치 확인
print(df.isna()) # 결측치 채우기
df_filled = df.fillna({"Name": "Unknown", "Score": 0})
print(df_filled) Plotly는 인터랙티브한 차트를 만들 수 있는 파이썬 데이터 시각화 라이브러리입니다. 웹 기반의 그래프를 생성하며, 줌, 팬, 호버 등과 같은 상호작용 기능을 제공합니다.
import plotly.graph_objects as go fig = go.Figure(data=go.Scatter(x=[1, 2, 3, 4], y=[10, 11, 12, 13], mode='lines'))
fig.update_layout(title='Line Chart Example')
fig.show()
import plotly.graph_objects as go fig = go.Figure(data=go.Bar(x=['A', 'B', 'C'], y=[10, 20, 30]))
fig.update_layout(title='Bar Chart Example')
fig.show()
import plotly.graph_objects as go fig = go.Figure(data=go.Scatter(x=[1, 2, 3, 4], y=[10, 15, 13, 17], mode='markers'))
fig.update_layout(title='Scatter Plot Example')
fig.show() Plotly Express는 Plotly의 간단한 인터페이스로, 한 줄로 다양한 차트를 만들 수 있습니다.
import plotly.express as px # 선 그래프
fig = px.line(x=[1, 2, 3], y=[3, 1, 6], title='Line Chart with Plotly Express')
fig.show() # 막대 그래프
fig = px.bar(x=['A', 'B', 'C'], y=[4, 7, 2], title='Bar Chart with Plotly Express')
fig.show() &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석 배운 점:
그 동안은 주로 데이터베이스 GUI툴이나 BI 툴을 활용해서 데이터를 다뤘기 때문에 pandas로 데이터 전처리를 하고, 차트를 그리는 게 조금 불편했다. 그래도 몇 번 코드를 직접 쳐보니 조금 익숙해졌다.
느낀 점:
코드를 직접 치면서, 정확히 어떤 의도로 어떤 데이터를 연결 시키고 어떤 인사이트를 도출하겠다라는 명확한 설계를 구상하는 건 의외로 재미가 있었다.
다음에 개선할 점:
기능을 배우는 것보다 어떻게 응용 하는지가 더 중요하다. 강의를 들으면서 계속 아이디어를 떠올려 보면 어떨까 생각이 든다.
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/2w-데이터-분석-입문-1.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/2W - 데이터 분석 입문 1.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 30 Nov 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[📚 613 Natural Language Processing]]></title><link>https://64etuor.github.io/000_index/📚-613-natural-language-processing.html</link><guid isPermaLink="false">000_Index/📚 613 Natural Language Processing.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:48:58 GMT</pubDate></item><item><title><![CDATA[📚 617 AI Tools]]></title><link>https://64etuor.github.io/000_index/📚-617-ai-tools.html</link><guid isPermaLink="false">000_Index/📚 617 AI Tools.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:48:51 GMT</pubDate></item><item><title><![CDATA[📚 615 AI Applications]]></title><link>https://64etuor.github.io/000_index/📚-615-ai-applications.html</link><guid isPermaLink="false">000_Index/📚 615 AI Applications.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:48:36 GMT</pubDate></item><item><title><![CDATA[📚 803 Fiction]]></title><link>https://64etuor.github.io/000_index/📚-803-fiction.html</link><guid isPermaLink="false">000_Index/📚 803 Fiction.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:47:05 GMT</pubDate></item><item><title><![CDATA[📚 804 Essays]]></title><link>https://64etuor.github.io/000_index/📚-804-essays.html</link><guid isPermaLink="false">000_Index/📚 804 Essays.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:47:01 GMT</pubDate></item><item><title><![CDATA[📚 801 Poetry]]></title><link>https://64etuor.github.io/000_index/📚-801-poetry.html</link><guid isPermaLink="false">000_Index/📚 801 Poetry.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:46:59 GMT</pubDate></item><item><title><![CDATA[📖 800 Literature]]></title><link>https://64etuor.github.io/000_index/📖-800-literature.html</link><guid isPermaLink="false">000_Index/📖 800 Literature.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:46:57 GMT</pubDate></item><item><title><![CDATA[📖 610 Generative AI]]></title><link>https://64etuor.github.io/000_index/📖-610-generative-ai.html</link><guid isPermaLink="false">000_Index/📖 610 Generative AI.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:45:42 GMT</pubDate></item><item><title><![CDATA[📚 635 Web Development]]></title><link>https://64etuor.github.io/000_index/📚-635-web-development.html</link><guid isPermaLink="false">000_Index/📚 635 Web Development.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:45:00 GMT</pubDate></item><item><title><![CDATA[📚 634 Software Development]]></title><link>https://64etuor.github.io/000_index/📚-634-software-development.html</link><guid isPermaLink="false">000_Index/📚 634 Software Development.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:44:58 GMT</pubDate></item><item><title><![CDATA[📚 631 Programming Languages]]></title><link>https://64etuor.github.io/000_index/📚-631-programming-languages.html</link><guid isPermaLink="false">000_Index/📚 631 Programming Languages.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:44:51 GMT</pubDate></item><item><title><![CDATA[📖 630 Programming]]></title><link>https://64etuor.github.io/000_index/📖-630-programming.html</link><guid isPermaLink="false">000_Index/📖 630 Programming.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:44:38 GMT</pubDate></item><item><title><![CDATA[📚 629 Cloud Databases]]></title><link>https://64etuor.github.io/000_index/📚-629-cloud-databases.html</link><guid isPermaLink="false">000_Index/📚 629 Cloud Databases.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:44:25 GMT</pubDate></item><item><title><![CDATA[BigQuery Syntax]]></title><description><![CDATA[<a data-tooltip-position="top" aria-label="https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax" rel="noopener nofollow" class="external-link is-unresolved" href="https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax" target="_self">Query syntax &nbsp;|&nbsp; BigQuery &nbsp;|&nbsp; Google Cloud</a><br>📇 DDC INDEX : <a data-href="📖 620 Databases" href="https://64etuor.github.io/000_index/📖-620-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📖 620 Databases</a> | <a data-href="📚 623 SQL" href="https://64etuor.github.io/000_index/📚-623-sql.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 623 SQL</a><a data-href="📚 629 Cloud Databases" href="https://64etuor.github.io/000_index/📚-629-cloud-databases.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 629 Cloud Databases</a>]]></description><link>https://64etuor.github.io/600_tech-stack/bigquery/bigquery-syntax.html</link><guid isPermaLink="false">600_Tech Stack/BigQuery/BigQuery Syntax.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:42:00 GMT</pubDate></item><item><title><![CDATA[📖 620 Databases]]></title><link>https://64etuor.github.io/000_index/📖-620-databases.html</link><guid isPermaLink="false">000_Index/📖 620 Databases.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 09:38:43 GMT</pubDate></item><item><title><![CDATA[📚 623 SQL]]></title><link>https://64etuor.github.io/000_index/📚-623-sql.html</link><guid isPermaLink="false">000_Index/📚 623 SQL.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 08:25:01 GMT</pubDate></item><item><title><![CDATA[2W - 데이터 분석 입문 2]]></title><description><![CDATA[2024-11-31 제품 포트폴리오 분석 기법에 대해 이해한다.
Attribution 분석 기법에 대해 이해한다.
Conversion Window 분석 기법에 대해 이해한다.
통합 마케팅 데이터 분석에 대해 학습한다. 제품 포트폴리오 분석은 기업이 보유하고 있는 여러 제품군의 성과를 체계적으로 분석하여, 각 제품의 수익성, 비용, 할인율 등을 평가하는 과정을 의미합니다. 이를 통해 효율적인 의사결정과 전략 수립을 지원합니다.
이 강의에서 제품 포트폴리오 분석은 다음과 같은 요소를 기반으로 이루어집니다: 수익성 분석 총 수익 (total_revenue): 제품 판매로 발생한 총 수익.
순이익 (total_net_profit): 총 수익에서 비용과 할인을 뺀 값.
순이익 비율 (net_profit_ratio): 순이익이 전체 수익에서 차지하는 비율로, 제품의 수익성을 나타냄. 비용 분석 총 비용 (total_cost): 제품을 생산하는 데 들어간 총 비용.
비용 비율 (cost_ratio): 비용이 전체 수익에서 차지하는 비율. 할인율 분석 총 할인액 (total_discount): 할인으로 인해 감소된 금액.
할인 비율 (discount_ratio): 할인이 전체 수익에서 차지하는 비율로, 마케팅이나 가격 전략 평가에 사용됨. 시각화를 통한 인사이트 도출 산점도 그래프를 통해 다음 요소들을 한눈에 파악할 수 있습니다: X축: total_revenue (총 수익)
Y축: net_profit_ratio (순이익 비율)
크기: total_net_profit (순이익)
색상: discount_ratio (할인율) 고수익 제품 식별 수익성과 순이익 비율이 높은 제품을 파악하여 집중 투자. 비용 효율성 평가 비용 비율이 높은 제품을 찾아 생산 비용 절감 전략을 수립. 할인 정책 최적화 할인율이 지나치게 높아 수익성이 저하된 제품을 조정. 제품 전략 수립 포트폴리오 전체를 평가하여 제품 개발, 마케팅, 가격 책정 등의 전략을 개선. 정의:
고객이 구매나 전환을 결정하는 과정에서 각 마케팅 접점이 얼마나 기여했는지 평가하는 기법입니다.
그룹별 최대값 인덱스 찾기:
df.groupby('group')['value'].idxmax()
df.loc[df.groupby('group')['value'].idxmax()] 정의:
고객이 제품이나 서비스를 처음 접한 후 전환(구매, 가입 등)을 완료하기까지 걸리는 시간을 측정하는 기법입니다.
온라인 쇼핑: 제품을 본 순간부터 구매까지의 시간
앱 사용: 앱 다운로드 후 첫 사용까지의 시간
서비스 가입: 서비스 가입 후 실제 사용 시작까지의 시간 전환 기간 계산:
df['pay_at'] = pd.to_datetime(df['pay_at'])
df['apply_at'] = pd.to_datetime(df['apply_at'])
df['conversion_time'] = (df['pay_at'] - df['apply_at']).dt.total_seconds() / (3600 * 24) 히스토그램 시각화:
import plotly.express as px fig = px.histogram(df, x='conversion_time')
fig.show() CSV 파일 불러오기 광고, 주문, 구매, 제품, 방문 데이터를 각각 불러옵니다. ad = pd.read_csv('eda_ad.csv')
order = pd.read_csv('eda_order.csv')
purchase = pd.read_csv('eda_purchase.csv')
product = pd.read_csv('eda_product.csv')
visit = pd.read_csv('eda_visit.csv') 날짜 데이터 타입 변환
order['order_date'] = pd.to_datetime(order.order_date)
ad['date'] = pd.to_datetime(ad.date)
purchase['timestamp'] = pd.to_datetime(purchase.timestamp)
visit['timestamp'] = pd.to_datetime(visit.timestamp) 주문 데이터와 제품 데이터 결합
order_mg = pd.merge(order, product, how='left', left_on='product_id', right_on='id') 새로운 컬럼 생성 매출, 할인 금액, 비용, 이익 계산 order_mg['total_revenue'] = order_mg.price * order_mg.quantity
order_mg['total_disc_amt'] = order_mg.total_revenue * order_mg.discount_ratio
order_mg['total_cost'] = order_mg.cost * order_mg.quantity
order_mg['total_profit'] = order_mg.total_revenue - order_mg.total_cost - order_mg.total_disc_amt Last Click Attribution 고객의 마지막 접점을 기준으로 기여도를 할당합니다. idx = log.groupby(by='order_id')['td_day'].idxmin()
df_l = log.loc[idx] Attribution Window 적용 (70일) 방문 후 70일 이내의 전환만 유효하게 처리합니다. attr_w = log_mg.td_day &lt;= 70
log = log_mg[same_user &amp; time_filter &amp; attr_w] ROAS (Return on Advertising Spend)
ad_agg = ad.groupby(by=['campaign', 'source'])[['spending', 'clicks']].sum().reset_index()
df['roas'] = df.realized_revenue / df.spending CPC (Cost Per Click) 계산
ad['cpc'] = ad.spending / ad.clicks 제품별 전환 소요 시간 계산
order_mg['td_day'] = (order_mg.pay_date - order_mg.order_date).dt.total_seconds() / (3600 * 24) 전환율 계산 (3일, 9일 기준)
order_mg['conv_3'] = np.where(order_mg.td_day &lt;= 3, 1, None)
order_mg['conv_9'] = np.where(order_mg.td_day &lt;= 9, 1, None) 카테고리별 매출 트렌드
od_agg_d = order_mg.groupby(by=['order_date', 'category', 'product_id'])['total_revenue'].sum().reset_index() 제품 간 매출 상관관계 분석
df_m = od_agg_d.pivot_table(index='order_date', columns='product_id', values='total_revenue')
corr = df_m.corr() 고객별 지표 계산
order_mg.groupby(by='user_id').agg( total_spending=('total_revenue', 'sum'), order_cnt=('order_id', 'count'), dist_prod_cnt=('product_id', 'nunique'), dist_cate_cnt=('category', 'nunique')
).reset_index().describe() &nbsp;핵심 개념 이해
&nbsp;실습 코드 실행 및 분석 배운 점:
실무에서 사용하는 마케팅 데이터 분석 기법을 배웠다.
느낀 점:
마케팅 데이터 분석 기법을 개발하기 위해 행동 심리학이나 기타 여러 요소를 결합한 융합 지식을 활용하면 좋겠다고 생각했다.
다음에 개선할 점:
]]></description><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/학습노트/2w-데이터-분석-입문-2.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/학습노트/2W - 데이터 분석 입문 2.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 30 Nov 2024 00:00:00 GMT</pubDate></item><item><title><![CDATA[emoji]]></title><description><![CDATA[제가 사용하는 아이콘은 주로 이모지 (Emoji)입니다. 이는 플랫폼에 상관없이 대부분의 환경에서 잘 보이고, 별도의 설정이나 플러그인 없이 마크다운 문서에 쉽게 삽입할 수 있습니다.✅ 작업 완료 ❌ 작업 실패 🚀 프로젝트 시작 💡 새로운 아이디어 📅 오늘 날짜: 2024-06-10 🔗 [링크](https://example.com) ✅ 작업 완료
❌ 작업 실패
🚀 프로젝트 시작
💡 새로운 아이디어
📅 오늘 날짜: 2024-06-10
🔗 <a data-tooltip-position="top" aria-label="https://example.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://example.com/" target="_self">링크</a>]]></description><link>https://64etuor.github.io/500_resources/obsidian/emoji.html</link><guid isPermaLink="false">500_Resources/Obsidian/emoji.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 03:53:59 GMT</pubDate></item><item><title><![CDATA[Templater]]></title><description><![CDATA[Templater의 기본 변수 삽입 구문은 &lt;% %&gt;입니다.&lt;% tp.file.title %&gt; // 파일 제목 삽입
&lt;% tp.date.now("YYYY-MM-DD") %&gt; // 현재 날짜 삽입
Templater에서 JavaScript 주석을 사용할 수 있습니다.&lt;% /* 이 부분은 주석입니다 */ %&gt;
파일 제목: &lt;% tp.file.title %&gt; 파일 경로: &lt;% tp.file.path %&gt; 오늘 날짜: &lt;% tp.date.now("YYYY-MM-DD") %&gt; 어제 날짜: &lt;% tp.date.now("YYYY-MM-DD", -1, "days") %&gt; 다음 주 날짜: &lt;% tp.date.now("YYYY-MM-DD", 7, "days") %&gt; 이름: &lt;% tp.system.prompt("이름을 입력하세요") %&gt; 선택: &lt;% tp.system.suggester(["Python", "JavaScript"], ["Python 언어", "JavaScript 언어"]) %&gt; JavaScript 조건문을 사용해 동적 처리를 할 수 있습니다.&lt;% if (tp.date.now("dddd") === "Saturday" || tp.date.now("dddd") === "Sunday") { %&gt;
오늘은 주말입니다!
&lt;% } else { %&gt;
오늘은 평일입니다.
&lt;% } %&gt;
반복문을 사용해 리스트를 자동 생성할 수 있습니다.&lt;% for (let i = 1; i &lt;= 5; i++) { %&gt;
- 할 일 &lt;% i %&gt;
&lt;% } %&gt;
- 할 일 1 - 할 일 2 - 할 일 3 - 할 일 4 - 할 일 5 템플릿에서 사용자 정의 함수를 호출할 수 있습니다.템플릿 파일 예제:&lt;%* let greet = (name) =&gt; `Hello, ${name}!`; %&gt;
&lt;% greet("Yangha") %&gt;
Hello, Yangha!
Templater는 비동기 작업도 지원합니다.&lt;%* let response = await fetch("https://api.github.com"); %&gt;
&lt;% await response.json() %&gt;
---
title: "Daily Note - &lt;% tp.date.now("YYYY-MM-DD") %&gt;"
date: &lt;% tp.date.now("YYYY-MM-DD") %&gt;
tags: [daily, journal]
--- # 📅 &lt;% tp.date.now("dddd, MMMM DD, YYYY") %&gt; ## 📝 오늘의 할 일 &lt;% for (let i = 1; i &lt;= 3; i++) { %&gt;
- [ ] &lt;% tp.system.prompt(`할 일 ${i}을 입력하세요`) %&gt;
&lt;% } %&gt; ## 🧠 오늘의 생각 &lt;% tp.system.prompt("오늘의 주요 생각이나 깨달음을 입력하세요") %&gt; <a data-tooltip-position="top" aria-label="https://silentvoid13.github.io/Templater/" rel="noopener nofollow" class="external-link is-unresolved" href="https://silentvoid13.github.io/Templater/" target="_self">Templater Official document</a>]]></description><link>https://64etuor.github.io/500_resources/obsidian/community-plugin/templater.html</link><guid isPermaLink="false">500_Resources/Obsidian/Community Plugin/Templater.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 03:48:39 GMT</pubDate></item><item><title><![CDATA[1984]]></title><description><![CDATA[{{author}}2024-12-10 ]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/1984.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/1984.md</guid><dc:creator><![CDATA[조지 오웰, 정회성]]></dc:creator><pubDate>Tue, 10 Dec 2024 03:31:57 GMT</pubDate></item><item><title><![CDATA[Obsidian Common Template Research]]></title><description><![CDATA[ title
author
create_at
modified_at
description
tags
categories
slug
status ]]></description><link>https://64etuor.github.io/500_resources/obsidian/obsidian-common-template-research.html</link><guid isPermaLink="false">500_Resources/Obsidian/Obsidian Common Template Research.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 10 Dec 2024 02:37:49 GMT</pubDate></item><item><title><![CDATA[Excel VBA_E-BOM to M-BOM 자동 변환 모듈]]></title><description><![CDATA[입사를 한 지 얼마 안되는 시기였을 때다. 우리 부서의 담당자가 Agile에 등록된 E-BOM을 기반으로 M-BOM을 만드는 업무를 수년간 하고 있었다. 그런데 이 작업을 수작업으로 하고 있다 보니 시간도 엄청나게 오래 걸릴 뿐더러, 실수가 발생할 가능성도 보였다. 따라서 그런 문제점들을 없애고자 E-BOM to M-BOM 자동 변환 모듈 개발을 시작했다.
Agile E-BoM Level 열 앞에 11개 열을 만들고 각 열의 이름을 0~10까지의 순서대로 나열, 그리고 Level의 숫자를 매칭되는 열에 입력.
M-BoM에서 사용하지 않는 열 삭제 및 필요한 열의 순서 정렬
특정 위치에 BLANK 열 추가
M-BOM.QTY 열 추가: E-BOM은 생산단위별 소요량이 나오지만 M-BOM은 제품을 만드는데 필요한 총 소요량이 필요함. 상위 Level 부품의 개수에 맞추어 하위 Level 소요량 재조정.(예를 들어 상위 Level 부품의 개수가 3이면 하위 Level 소요량에 3을 곱한 수량을 산출하여 입력, Level이 그보다 낮은 부품이 있다면 상위 Level의 소요량을 연속해서 곱해줌.)
M-BOM.E/EP/SC 열 추가: Level 계층 구조에 따라 부품의 구매/도급/직접생산 여부를 결정. Buy/Make 열 값이 Buy인&nbsp;항목을 열 위에서 아래 방향으로 찾고&nbsp;현재 레벨이 부모 레벨과 같거나 낮으면 M-BOM.E/EP/SC&nbsp;열에&nbsp;E&nbsp;값을 할당. 그리고 부모 레벨을 현재 레벨로 업데이트.
부모 레벨의 Buy/Make 열 값이 Make&nbsp;이고&nbsp;현재 행의 레벨이 부모 레벨과 같거나 낮을 때 부모 레벨을&nbsp;현재 레벨 + 1로 설정.
현재 행의 레벨이 부모 레벨보다 높으면서&nbsp;Buy&nbsp;항목이면, M-BOM.E/EP/SC&nbsp;열에&nbsp;EP&nbsp;값을 할당. 열 너비 조정
추후에 내가 아니어도 코드를 수정하기 쉽게 각 기능을 Private Sub 함수로 쪼개준다.
그 후에 실행 함수에서 Private Sub 함수들을 활용하여 직관적이고 유저에게 친화적인 코드로 작성한다.' 열 삽입 및 헤더 초기화
Private Sub InsertHeadersAndInitialize(ws As Worksheet, columnCount As Long) Dim i As Long For i = 1 To columnCount ws.columns(1).Insert Shift:=xlToRight Next i End Sub
' 0부터 10까지 Level 값 채우기
Private Sub FillLevels(ws As Worksheet, maxCol As Integer) Dim i As Long Dim currentLevel As Variant ' 각 행의 Level 값 Dim lastRow As Long ' L 열의 마지막 행 찾기 lastRow = ws.Cells(ws.Rows.count, "L").End(xlUp).Row For i = 1 To maxCol ws.Cells(1, i).value = (i - 1) Next i For i = 2 To lastRow currentLevel = ws.Cells(i, "L").value ' L 열의 Level 값 읽기 ' 유효한 Level 값(0 ~ maxCol-1)만 처리 If IsNumeric(currentLevel) And currentLevel &gt;= 0 And currentLevel &lt; maxCol Then ws.Cells(i, currentLevel + 1).value = currentLevel ' 해당 Level에 맞는 열에 값 입력 End If Next i End Sub
' 열 삽입 및 복사 함수
Private Sub HandleColumnCopy(ws As Worksheet, columnName As String, targetCol As String, Optional width As Integer = 0) Dim find As Range Set find = ws.Rows(1).find(columnName, LookIn:=xlValues, LookAt:=xlWhole) If Not find Is Nothing Then ws.columns(targetCol).Insert Shift:=xlToRight find.EntireColumn.Cut destination:=ws.columns(targetCol) Application.CutCopyMode = False If width &gt; 0 Then ws.columns(targetCol).ColumnWidth = width Else MsgBox "Column '" &amp; columnName &amp; "' not found!", vbExclamation, "Error" End If End Sub
' 새로운 열 추가 함수
Private Sub AddNewColumn(ws As Worksheet, colNum As Integer, header As String, value As Variant) ws.columns(colNum).Insert Shift:=xlToRight ws.Cells(1, colNum).value = header Dim lastRow As Long, r As Long lastRow = ws.Cells(ws.Rows.count, colNum - 1).End(xlUp).Row For r = 2 To lastRow ws.Cells(r, colNum).value = value Next r End Sub
' 빈 열 삽입 함수
Private Sub InsertEmptyColumns(ws As Worksheet, startCol As String, count As Integer) Dim i As Integer For i = 1 To count ws.columns(startCol).Insert Shift:=xlToRight Next i End Sub
' 열 너비 조정 함수
Private Sub AdjustColumnWidths(ws As Worksheet) ws.columns("A:K").ColumnWidth = 3 ws.columns("M:N").ColumnWidth = 20 ws.columns("U:V").ColumnWidth = 25 ws.columns("X:Y").ColumnWidth = 25 End Sub
' E/EP/SC 처리 함수
Private Sub MBOM_DIV_FILL() Dim ws As Worksheet, lastRow As Long, parentLevel As Long, currentLevel As Long Dim i As Long, parentRow As Long Set ws = ThisWorkbook.ActiveSheet lastRow = ws.Cells(ws.Rows.count, "N").End(xlUp).Row parentRow = FindParentRow(ws, "R", "Buy", parentLevel) If parentRow = 0 Then MsgBox """BOM.Buy"" row not found in the specified column." Exit Sub End If For i = parentRow To lastRow currentLevel = ws.Cells(i, "L").value If ws.Cells(i, "R").value = "Buy" And currentLevel &lt;= parentLevel Then ws.Cells(i, "S").value = "E" parentLevel = currentLevel ElseIf ws.Cells(i, "R").value = "Make" And currentLevel &lt;= parentLevel Then parentLevel = currentLevel + 1 ElseIf currentLevel &gt; parentLevel And ws.Cells(i, "R").value = "Buy" Then ws.Cells(i, "S").value = "EP" End If Next i End Sub ' Parent Row 찾기
Function FindParentRow(ws As Worksheet, colName As String, searchValue As String, ByRef parentLevel As Long) As Long Dim i As Long For i = 2 To ws.Cells(ws.Rows.count, colName).End(xlUp).Row If ws.Cells(i, colName).value = searchValue Then parentLevel = ws.Cells(i, "L").value FindParentRow = i Exit Function End If Next i FindParentRow = 0
End Function
' MBOM QTY 계산 함수
Private Sub MBOM_QTY_CAL() Dim ws As Worksheet Dim lastRow As Long Dim i As Long Dim levels() As Double ' 각 레벨별 누적 수량 저장 Dim maxLevel As Long Dim currentLevel As Variant, currentQty As Variant Set ws = ThisWorkbook.ActiveSheet lastRow = ws.Cells(ws.Rows.count, "N").End(xlUp).Row maxLevel = 10 ' 최대 레벨 설정 ' 1부터 시작하는 배열 초기화 ReDim levels(1 To maxLevel) ' 각 행에 대해 수량 계산 수행 For i = 2 To lastRow currentLevel = ws.Cells(i, "L").value currentQty = ws.Cells(i, "O").value ' 빈 셀, 숫자가 아닌 값, 레벨이 초과된 경우 건너뛰기 If IsEmpty(currentLevel) Or IsEmpty(currentQty) Then GoTo NextIteration If Not IsNumeric(currentLevel) Or Not IsNumeric(currentQty) Then GoTo NextIteration If currentLevel &gt; maxLevel Then ws.Cells(i, "P").ClearContents ' 레벨이 초과되면 P 열을 비움 GoTo NextIteration End If ' 누적 수량 계산: 현재 레벨의 수량에 상위 모든 부모 수량을 곱함 If currentLevel = 1 Then levels(currentLevel) = currentQty ' 최상위 레벨 수량 설정 Else levels(currentLevel) = levels(currentLevel - 1) * currentQty End If ' 계산된 누적 수량을 P 열에 저장 ws.Cells(i, "P").value = levels(currentLevel) NextIteration: Next i End Sub Option Explicit ' MAIN_SUB 실행 함수입니다. ' 최종 수정일:2024-10-22
' 버전: 02
' 변경내용: 한글 주석 추가, 함수명 변경, 계산 로직 최적화 Public Sub MAIN_EBOM_TO_MBOM_CONVERSION() Dim ws As Worksheet Set ws = ActiveSheet Application.ScreenUpdating = False ' 열 삽입 및 헤더 초기화 Call InsertHeadersAndInitialize(ws, 11) ' 열 삽입 및 데이터 복사 작업들 Call HandleColumnCopy(ws, "Level", "L") Call HandleColumnCopy(ws, "Number", "M") Call AddNewColumn(ws, 14, "Product Code", ws.Cells(2, 13).value) Call HandleColumnCopy(ws, "BOM.Qty", "O") Call AddNewColumn(ws, 16, "M-BOM.Qty", "") Call HandleColumnCopy(ws, "BOM.UOM", "Q") Call HandleColumnCopy(ws, "BOM.Buy/Make", "R") Call AddNewColumn(ws, 19, "M-BOM.E/EP/SC", "") Call HandleColumnCopy(ws, "Description", "T", 30) Call HandleColumnCopy(ws, "BOM.Subsidiary Companies Parts", "U") Call HandleColumnCopy(ws, "Manufacturers.Mfr. Part Number", "V") Call HandleColumnCopy(ws, "Part Type", "W") Call HandleColumnCopy(ws, "Manufacturers.Mfr. Name", "X") Call HandleColumnCopy(ws, "BOM.Item Description", "Y") ' Z부터 6개의 빈 열 추가 Call InsertEmptyColumns(ws, "Z", 6) Call HandleColumnCopy(ws, "Manufacturers.Preferred Status", "AF") ' AG부터 DT 열 삭제 ws.columns("AG:DT").Clear ' 0 ~ 10 숫자 채우기 Call FillLevels(ws, 11) ' 열 너비 조정 Call AdjustColumnWidths(ws) ' 추가 기능 호출 Call MBOM_QTY_CAL Call MBOM_DIV_FILL Call DATA_FORMAT_GENERAL ws.Cells(1, 1).Select Application.CutCopyMode = False Application.ScreenUpdating = True End Sub
Option Explicit ' MAIN_SUB 실행 함수입니다. ' 최종 수정일:2024-10-22
' 버전: 02
' 변경내용: 한글 주석 추가, 함수명 변경, 계산 로직 최적화 Public Sub MAIN_EBOM_TO_MBOM_CONVERSION() Dim ws As Worksheet Set ws = ActiveSheet Application.ScreenUpdating = False ' 열 삽입 및 헤더 초기화 Call InsertHeadersAndInitialize(ws, 11) ' 열 삽입 및 데이터 복사 작업들 Call HandleColumnCopy(ws, "Level", "L") Call HandleColumnCopy(ws, "Number", "M") Call AddNewColumn(ws, 14, "Product Code", ws.Cells(2, 13).value) Call HandleColumnCopy(ws, "BOM.Qty", "O") Call AddNewColumn(ws, 16, "M-BOM.Qty", "") Call HandleColumnCopy(ws, "BOM.UOM", "Q") Call HandleColumnCopy(ws, "BOM.Buy/Make", "R") Call AddNewColumn(ws, 19, "M-BOM.E/EP/SC", "") Call HandleColumnCopy(ws, "Description", "T", 30) Call HandleColumnCopy(ws, "BOM.Subsidiary Companies Parts", "U") Call HandleColumnCopy(ws, "Manufacturers.Mfr. Part Number", "V") Call HandleColumnCopy(ws, "Part Type", "W") Call HandleColumnCopy(ws, "Manufacturers.Mfr. Name", "X") Call HandleColumnCopy(ws, "BOM.Item Description", "Y") ' Z부터 6개의 빈 열 추가 Call InsertEmptyColumns(ws, "Z", 6) Call HandleColumnCopy(ws, "Manufacturers.Preferred Status", "AF") ' AG부터 DT 열 삭제 ws.columns("AG:DT").Clear ' 0 ~ 10 숫자 채우기 Call FillLevels(ws, 11) ' 열 너비 조정 Call AdjustColumnWidths(ws) ' 추가 기능 호출 Call MBOM_QTY_CAL Call MBOM_DIV_FILL Call DATA_FORMAT_GENERAL ws.Cells(1, 1).Select Application.CutCopyMode = False Application.ScreenUpdating = True End Sub ' 열 삽입 및 헤더 초기화
Private Sub InsertHeadersAndInitialize(ws As Worksheet, columnCount As Long) Dim i As Long For i = 1 To columnCount ws.columns(1).Insert Shift:=xlToRight Next i End Sub ' 0부터 10까지 Level 값 채우기
Private Sub FillLevels(ws As Worksheet, maxCol As Integer) Dim i As Long Dim currentLevel As Variant ' 각 행의 Level 값 Dim lastRow As Long ' L 열의 마지막 행 찾기 lastRow = ws.Cells(ws.Rows.count, "L").End(xlUp).Row For i = 1 To maxCol ws.Cells(1, i).value = (i - 1) Next i For i = 2 To lastRow currentLevel = ws.Cells(i, "L").value ' L 열의 Level 값 읽기 ' 유효한 Level 값(0 ~ maxCol-1)만 처리 If IsNumeric(currentLevel) And currentLevel &gt;= 0 And currentLevel &lt; maxCol Then ws.Cells(i, currentLevel + 1).value = currentLevel ' 해당 Level에 맞는 열에 값 입력 End If Next i End Sub ' 열 삽입 및 복사 함수
Private Sub HandleColumnCopy(ws As Worksheet, columnName As String, targetCol As String, Optional width As Integer = 0) Dim find As Range Set find = ws.Rows(1).find(columnName, LookIn:=xlValues, LookAt:=xlWhole) If Not find Is Nothing Then ws.columns(targetCol).Insert Shift:=xlToRight find.EntireColumn.Cut destination:=ws.columns(targetCol) Application.CutCopyMode = False If width &gt; 0 Then ws.columns(targetCol).ColumnWidth = width Else MsgBox "Column '" &amp; columnName &amp; "' not found!", vbExclamation, "Error" End If End Sub ' 새로운 열 추가 함수
Private Sub AddNewColumn(ws As Worksheet, colNum As Integer, header As String, value As Variant) ws.columns(colNum).Insert Shift:=xlToRight ws.Cells(1, colNum).value = header Dim lastRow As Long, r As Long lastRow = ws.Cells(ws.Rows.count, colNum - 1).End(xlUp).Row For r = 2 To lastRow ws.Cells(r, colNum).value = value Next r End Sub ' 빈 열 삽입 함수
Private Sub InsertEmptyColumns(ws As Worksheet, startCol As String, count As Integer) Dim i As Integer For i = 1 To count ws.columns(startCol).Insert Shift:=xlToRight Next i End Sub ' Level, Qty 등의 열 Data format 표준으로 설정
Private Sub DATA_FORMAT_GENERAL() columns("L").Select Selection.NumberFormatLocal = "G/표준" Selection.value = Selection.value columns("O").Select Selection.NumberFormatLocal = "G/표준" Selection.value = Selection.value columns("P").Select Selection.NumberFormatLocal = "G/표준" Selection.value = Selection.value End Sub ' 열 너비 조정 함수
Private Sub AdjustColumnWidths(ws As Worksheet) ws.columns("A:K").ColumnWidth = 3 ws.columns("M:N").ColumnWidth = 20 ws.columns("U:V").ColumnWidth = 25 ws.columns("X:Y").ColumnWidth = 25 End Sub ' E/EP/SC 처리 함수
Private Sub MBOM_DIV_FILL() Dim ws As Worksheet, lastRow As Long, parentLevel As Long, currentLevel As Long Dim i As Long, parentRow As Long Set ws = ThisWorkbook.ActiveSheet lastRow = ws.Cells(ws.Rows.count, "N").End(xlUp).Row parentRow = FindParentRow(ws, "R", "Buy", parentLevel) If parentRow = 0 Then MsgBox """BOM.Buy"" row not found in the specified column." Exit Sub End If For i = parentRow To lastRow currentLevel = ws.Cells(i, "L").value If ws.Cells(i, "R").value = "Buy" And currentLevel &lt;= parentLevel Then ws.Cells(i, "S").value = "E" parentLevel = currentLevel ElseIf ws.Cells(i, "R").value = "Make" And currentLevel &lt;= parentLevel Then parentLevel = currentLevel + 1 ElseIf currentLevel &gt; parentLevel And ws.Cells(i, "R").value = "Buy" Then ws.Cells(i, "S").value = "EP" End If Next i End Sub ' Parent Row 찾기
Function FindParentRow(ws As Worksheet, colName As String, searchValue As String, ByRef parentLevel As Long) As Long Dim i As Long For i = 2 To ws.Cells(ws.Rows.count, colName).End(xlUp).Row If ws.Cells(i, colName).value = searchValue Then parentLevel = ws.Cells(i, "L").value FindParentRow = i Exit Function End If Next i FindParentRow = 0
End Function ' MBOM QTY 계산 함수
Private Sub MBOM_QTY_CAL() Dim ws As Worksheet Dim lastRow As Long Dim i As Long Dim levels() As Double ' 각 레벨별 누적 수량 저장 Dim maxLevel As Long Dim currentLevel As Variant, currentQty As Variant Set ws = ThisWorkbook.ActiveSheet lastRow = ws.Cells(ws.Rows.count, "N").End(xlUp).Row maxLevel = 10 ' 최대 레벨 설정 ' 1부터 시작하는 배열 초기화 ReDim levels(1 To maxLevel) ' 각 행에 대해 수량 계산 수행 For i = 2 To lastRow currentLevel = ws.Cells(i, "L").value currentQty = ws.Cells(i, "O").value ' 빈 셀, 숫자가 아닌 값, 레벨이 초과된 경우 건너뛰기 If IsEmpty(currentLevel) Or IsEmpty(currentQty) Then GoTo NextIteration If Not IsNumeric(currentLevel) Or Not IsNumeric(currentQty) Then GoTo NextIteration If currentLevel &gt; maxLevel Then ws.Cells(i, "P").ClearContents ' 레벨이 초과되면 P 열을 비움 GoTo NextIteration End If ' 누적 수량 계산: 현재 레벨의 수량에 상위 모든 부모 수량을 곱함 If currentLevel = 1 Then levels(currentLevel) = currentQty ' 최상위 레벨 수량 설정 Else levels(currentLevel) = levels(currentLevel - 1) * currentQty End If ' 계산된 누적 수량을 P 열에 저장 ws.Cells(i, "P").value = levels(currentLevel) NextIteration: Next i End Sub
기존에 몇 시간씩 걸리던 작업이 이 모듈을 사용한 이후로는 5분도 걸리지 않았다. 다른 그룹에는 ‘M-BOM 작성만’ 담당하는 직원이 있다고 하는데 뭔가 머리가 띵한 기분이 든다.
처음에 로직 구현에 애를 먹어서 ChatGPT랑 한참 씨름을 하다가 결국엔 직접 구현한 좀 비효율적인 함수로 모듈을 만들었었는데, 이번에 이 글을 작성하면서 리팩토링을 했다.
익숙한 언어가 아니기에 이것저것 수정하고 고민하던 재미도 있었고, 어쨌든 새로운 언어를 배우면서 원하는 결과물을 구현하는, 꽤 재밌는 작업이었던 거 같다.]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/excel-vba/excel-vba_e-bom-to-m-bom-자동-변환-모듈.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Excel VBA/Excel VBA_E-BOM to M-BOM 자동 변환 모듈.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 11:42:24 GMT</pubDate></item><item><title><![CDATA[Power BI 보고서 내 이미지 표시를 위한 URL Parsing]]></title><description><![CDATA[Power BI로 만든 우리 팀의 통합 대시보드의 Defect 탭에는 생산 불량과 FPY 등이 기록된다.
그런데 텍스트로만 표현된 불량 내역은 직관적이지 못하다.
그래서 대시보드에서 바로 불량 사진을 확인할 수 있도록 구현하고자 했다.
우선 구현하고자 하는 기능과 Power BI, Sharepoint List의 기능을 점검했다.
대시보드 구현 어플리케이션: Power BI
데이터베이스: Sharepoint List (Dataverse나 SQL 등과 다르게 추가 비용이 발생하지 않음. 다만 데이터베이스로 사용하기엔 한계가 명확.) Power BI 대시보드에서 불량 사진을 바로 확인할 수 있는 기능 구현
(Power BI에서는 URL이 저장된 열이 있다면 Data Category를 변경하여 사진으로 출력하는 기능 있는 것으로 확인) Sharepoint List에 Image를 등록하면 레코드 형태로 저장되기 때문에 Power BI에서 바로 출력이 불가능 Sharepoint List에 Image가 등록/수정되면 Power Automate로 JSON을 파싱하여 이미지 URL 추출하여 imgURL이라는 열에 저장
Sharepoint 커넥터의 Get Attachments 액션을 활용하면 AbsoluteUri를 간단하게 추출할 수 있다. 아래는 커넥터에서 자체 지원하지 않는 경우(이 경우가 훨씬 많다.)를 위해 기록을 남겨둔다. <img alt="Pasted image 20241008132222.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008132222.png" target="_self"><br> <img alt="Pasted image 20241008132325.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008132325.png" target="_self">
Site Address: 파싱 대상 Sharepoint List의 주소 선택
Method: GET
Uri:
//'listName'에 Sharepoint List의 Internal Name을 넣어준다.
//items다음의 $orderby=Created desc&amp;$top=1 는 리스트의 항목 생성시간을 내림차순으로 정렬하고, 가장 상위의 값 1개를 가져오는 명령이다. /_api/web/lists/getbytitle('listName')/items?$orderby=Created desc&amp;$top=1
<br> <img alt="Pasted image 20241008134855.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008134855.png" target="_self"><br>
<img alt="Pasted image 20241008140753.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008140753.png" target="_self">
값을 살펴보면 “_metadata”: 내에 “uri”가 저장되어 있다.
그리고 “image”에 리스트 형태로 “fileName”이 저장되어 있다.
그 아래로 스크롤을 내리다 보면 fileName을 확인할 수 있다.
이제 Parse JSON Flow를 추가하여 위 body 데이터에서 필요한 값만 추출해서 imgURL이라는 변수를 생성하고 값을 할당하면 된다.
그런데 작업 도중에 Sharepoint 커넥터의 Get attachments를 사용하면 더 간단하게 원하는 결과물을 도출할 수 있다는 걸 알게 됐다.
(위의 Send HTTP request 액션은 너무나 자주 사용하는 액션이므로 그대로 두겠다.) <br>Sharepoint 커넥터의 Get attachments 액션을 사용하면 Sharepoint List에 등록된 항목의 첨부파일 정보 중 “Id”, “AbsoluteUri”, “Display Name”을 가져올 수 있다. 따라서 Parse JSON 액션 등의 과정을 생략할 수 있다. <img alt="Pasted image 20241008141135.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008141135.png" target="_self">
※ For each는 배열이나 여러 항목 등을 반환하는 액션이 있거나 액션에서 필요로 할 경우, 자동 생성됨<br><img alt="Pasted image 20241008141545.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008141545.png" target="_self">
When an item is created or modified: 트리거로 설정한다. 이미지가 등록될 때뿐만 아니라 이미지 수정이 이루어질 경우에도 대응되도록 한다.
Get attachments: 등록/수정된 이미지의 AbsoluteUri를 읽는다.
Condition: imgURL 열에 이미 등록된 값이 있다면 읽어온 AbsoluteUri와 비교하여 서로가 다를 경우에만 항목이 업데이트 되도록 한다.<br>
<img alt="Pasted image 20241008141832.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008141832.png" target="_self">
Update: 불러온 이미지의 AbsoluteUri를 imgURL열에 업데이트한다.<br>
<img alt="Pasted image 20241008144638.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008144638.png" target="_self">
Post message in a chat or channel(옵션사항): Update 액션이 실패할 경우, 알람 메세지를 특정인에게 보낸다.<br>
<img alt="Pasted image 20241008144727.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008144727.png" target="_self"> 새로운 imgURL 열이 추가되었으므로 데이터셋을 한 번 새로고침 해준다.
Table View에 가서 imgURL 열의 Data Category를 “Image URL”로 수정해준다.<br>
<img alt="Pasted image 20241008142942.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008142942.png" target="_self">
Power BI 데스크탑 앱으로 확인할 경우 기본 디폴트 이미지만 보이고 실제 사진이 보이지 않는다. 실제 사진은 웹으로 접속해야만 볼 수 있다. 확인해 본다.<br>
<img alt="Pasted image 20241008143123.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008143123.png" target="_self">
이미지가 정상적으로 출력된다. 이제 차트에 마우스 커서를 올리면 툴팁으로 사진을 확인할 수 있게 구현해본다. 우선 새로운 Power BI 보고서에 새로운 페이지를 추가한다.
Page의 Format에서 Page type을 Tooltip으로 설정한다. 그리고 캔버스의 크기를 필요한 만큼 조절한다.<br>
<img alt="Pasted image 20241008143639.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008143639.png" target="_self"><br>
<img alt="Pasted image 20241008143722.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008143722.png" target="_self">
시각적 개체 Table을 삽입하고 필요한 데이터들과 imgURL 열을 넣어준다.<br>
<img alt="Pasted image 20241008143910.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008143910.png" target="_self">
테이블의 크기, 이미지 크기를 적절하게 조절해준다.<br>
<img alt="Pasted image 20241008144010.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008144010.png" target="_self">
Tooltip 페이지 완성<br>
<img alt="Pasted image 20241008144028.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008144028.png" target="_self">
이미지가 Tooltip으로 표시되길 원하는 차트로 이동해서 Format &gt; Properties로 이동한다. Options의 Type을 Report page로 설정
<br>Page를 위에서 만든 Page로 설정<img alt="Pasted image 20241008144251.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008144251.png" target="_self"> 최종 확인을 위해 Power BI 리포트를 저장하고 웹에서 확인한다.<br>
<img alt="Pasted image 20241008144347.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008144347.png" target="_self">
툴팁에서도 이미지가 잘 출력된다. ]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/power-automate/power-bi-보고서-내-이미지-표시를-위한-url-parsing.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Power Automate/Power BI 보고서 내 이미지 표시를 위한 URL Parsing.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 07:11:16 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20241008132222.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20241008132222.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Unit 1. Announcing a new project]]></title><description><![CDATA[ get a foothold in
financial modeling
have a consensus
convene a meeting
adjourn a meeting
shelve a topic
adopt resolutions
have a quorum to vote We have a new smart medical decive in the works.
We have a lot groundwork to cover.
We might be able to do it if we work around the clock. Hello, Yangha! The sentences you mentioned, if you adjust them a little, they will sound more natural and accurate. The first sentence&nbsp;"We have new project to develop."&nbsp;It would be better to put 'a' in front of 'new project'.
"We have a new project to develop."&nbsp;This sounds much more natural! The second sentence&nbsp;"I have a project to build a data base to production line."&nbsp;If you put 'for' between 'data base' and 'production line', you can convey a clearer meaning.
"I have a project to build a data base for the production line."&nbsp;This sounds more natural! The last sentence&nbsp;"I am kind of a hard worker."&nbsp;is excellent! You can also say&nbsp;"I am a hard worker."&nbsp;without&nbsp;"kind of", which sounds natural and more confident. Yangha, if you put a little effort into building sentences, you will improve a lot! Keep practicing, correct your mistakes, and be confident! We have new project to develop.
→ We have a new project to develop.
I have a project to build a database to production line.
→ I have a project to build a database for the production line.
I am kind of a hard worker.
→ I’m a hard worker.
I always feel uncomfortable to speak in English unlike to write in English. I think the why I’m like this is because of my character, I mean, introverted character. I feel the need of having more chances to speak in English. And it feels like this time is when I have to learn how to have a small talk with other people.I always feel uncomfortable speaking in English, unlike when I’m writing. I think it’s partly because of my personality—I’m more on the introverted side. I feel the need for more opportunities to practice speaking in English, and it seems like now is the right time for me to learn how to make small talk with others.]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-1.-announcing-a-new-project.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 1. Announcing a new project.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 07:04:02 GMT</pubDate></item><item><title><![CDATA[4M 절차 전자결재 Flow]]></title><description><![CDATA[<img alt="4Mchange_processFlow.png" src="https://64etuor.github.io/settings/attachments/4mchange_processflow.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/power-automate/4m-절차-전자결재-flow.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Power Automate/4M 절차 전자결재 Flow.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 04:38:53 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/4mchange_processflow.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/4mchange_processflow.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[검사 성적서 자동 발행 Flow]]></title><description><![CDATA[<img alt="InspectionCertiFlow.png" src="https://64etuor.github.io/settings/attachments/inspectioncertiflow.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/power-automate/검사-성적서-자동-발행-flow.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Power Automate/검사 성적서 자동 발행 Flow.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 04:38:49 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/inspectioncertiflow.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/inspectioncertiflow.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Power BI Dataset update Flow]]></title><description><![CDATA[<img alt="PowerBIupdateFlow.png" src="https://64etuor.github.io/settings/attachments/powerbiupdateflow.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/power-automate/power-bi-dataset-update-flow.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Power Automate/Power BI Dataset update Flow.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 04:38:42 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/powerbiupdateflow.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/powerbiupdateflow.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[231129 - 위대한 유산]]></title><description><![CDATA[틀림없이 새로 쓰는 글이 분명함에도
나의 글은 벌써부터 낡았다.
낡은 사람이 쓰기에 그러하기도 하고
낡은 것을 좋아하는 사람이라 그러하기도 하다.
그러나 가장 중요한 이유는 역시
이 말들이 진작부터 마음속에 있던 탓이다.사랑한단다.
네가 있기도 전부터.오래도록 마음으로 받은 유산.
덜어내도,
쉬이 덜어지지 않아라]]></description><link>https://64etuor.github.io/900_writings/poems/231129-위대한-유산.html</link><guid isPermaLink="false">900_Writings/Poems/231129 - 위대한 유산.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 03:26:32 GMT</pubDate></item><item><title><![CDATA[230621 - 태몽]]></title><description><![CDATA[한해동안 여인은
발자국 깊어지는 걸 보았다
그 해 봄에는,
밤마다 논두렁을 타고 넘어 오는 개구리 울음을 들었다
밤이 새도록 운다면 네 목이 다 쉰다며
그런 말을 하고 싶었을지 모르겠다그 해 가을,
추수하는 사람들 어깨 위에
볕이 부서지고 낱알처럼 쪼개질 때에
여인도 비로소 생을 낳았다
생이 울음처럼 터져 나오는 것임을.
여인도 그때 처음 알았을 것이다울음같은 생이라한들,
매일 밤 우는 구렁이는 없을 것이다
목이 쉬지도 않고 우는 구렁이는 더더욱 없을 것이다
여인은 자신이 낳은 게,
실은 개구리일거란 생각을 했을지 모르겠다개구리 우는 계절,
몹시 춥고,
또 때이른 봄이었다]]></description><link>https://64etuor.github.io/900_writings/poems/230621-태몽.html</link><guid isPermaLink="false">900_Writings/Poems/230621 - 태몽.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 03:26:24 GMT</pubDate></item><item><title><![CDATA[230618 - 작은 것]]></title><description><![CDATA[작은 것은 시도 떄도 없이 부모를 다 잃은 것처럼 빽빽 울어 댄다
먹이를 달라고 우는 것도
아파서 보채는 것도 아니고,
전생에 한이 많은 탓도 아닌 듯하다
이따금 여인이 남의 손에 그 작은 것을 맡기고 보면,
꼭 얼마후면 진이 다 빠진 사람이 아이를 도로 반납한다
이 작은 게 그처럼 울어 대는 것을 보면 성질이 무척 나쁜 것이라ㅡ고 말하던,
사람들의 합리적인 예측이 그때부터 있었다.하루 키우는 데 꼬박 하루를 다 쓰고도 모자라니,
여인은 매번 나이를 꼬박꼬박 덤으로 받아먹는다.
어미품과 어미젖만 찾는 까탈스러움,
밤새도록 울고 낮에 지쳐 잠드는 괴팍함.
낳은 죄다
낳은 죄야그래도 고약한 성미라곤 한들 아침 잠든 아이의 얼굴엔 늘 논두렁 봇물처럼 호수가 차있고,
여인은,
자기가 낳은 것이 구렁이가 아니라 청개구리였다고,
그런 생각을 않을 수 없었다.]]></description><link>https://64etuor.github.io/900_writings/poems/230618-작은-것.html</link><guid isPermaLink="false">900_Writings/Poems/230618 - 작은 것.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 03:25:58 GMT</pubDate></item><item><title><![CDATA[210730 - 존재증명]]></title><description><![CDATA[외로움이란 먹어도 먹어도 배부르지 않은 것이어서,
이 밤에 나는 홀로 연유도 없이 깨어,
먹다 만 외로움을 되새김질 하는 사람이다.깜깜한 방 안에 외로움은 상상하는 대로 증식할 것이다.
부산한 도시를 닮은 마음이 소란스레 기억을 헤집고,
애써 멀리 침전한 슬픔을 인양해 오면,
나는 그 하나 둘 기억들이 모자라,
앞으로 더 겪을 그 외로움이라는 것을 선행하여 맛보는 것이다.나는 퍽 나이 든 나의 외로워지는 경향을, 세상의 어디든 두고 오자 했다.
산을 오르고, 바다를 건너며, 하늘을 멀리 가로 지른 동안,
지독한 습관은 되레 농밀해 지고,
나는 그게 안타까워 더러 울었으며,
눈물과 함께 배출되지 않는 중금속
ㅡ그것은 틀림없이 중금속 일 테다ㅡ은
보지 않아도 저릿하게 느낄 만치 존재 증명이 또렷하다.나는 나의 일생을 깨닫는다.
이러한 사람은 외롭고자 태어나는 것이어서,
이 밤에 홀로 연유도 없이 깨어,
세상에 내쫓기듯, 병든 수탉이 저의 객쩍은 생명을 새벽마다 내지르듯,
먹어도 먹어도 모자란,
고독을 양껏 음미하는 것이다.고로,
나는,여기에
존재한다.]]></description><link>https://64etuor.github.io/900_writings/poems/210730-존재증명.html</link><guid isPermaLink="false">900_Writings/Poems/210730 - 존재증명.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 03:25:13 GMT</pubDate></item><item><title><![CDATA[200625 - 거울]]></title><description><![CDATA[거울 표면에 잔잔히 떠있는 건
그리운 모습이 아니오
틀림없이 하루를 더 늙은 사람의 한숨이
안개처럼 그 위를 덮었다가 또 사라졌다좀처럼 죽지 못하고 사는 목숨처럼
반짝반짝 순간마다 죽고 또 살고
이 문턱을 딛고 나서 전등불을 끄는 순간
온통 까맣게 잊혀질 그리운 이여이 문밖은 하루의 시작인가 끝인가
당최 언제 당신이 대답해줄까 하염없이,
하염없이-
그리워하며 하루 더 늙다]]></description><link>https://64etuor.github.io/900_writings/poems/200625-거울.html</link><guid isPermaLink="false">900_Writings/Poems/200625 - 거울.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 03:24:54 GMT</pubDate></item><item><title><![CDATA[190514 - 민들레]]></title><description><![CDATA[아무렇게나 쭈글쭈글하고
얼굴 거죽마저&nbsp;축 처진 것이
잡아당기면&nbsp;잡아당기는&nbsp;대로&nbsp;딸려 나올,
ㅡ모양새가 가자고 하면 가자고 따라 나오던 사람처럼, 또 그&nbsp;숨 막히는&nbsp;세월처럼ㅡ
아침햇살 먹은 눈이 아프고
술 먹은 잘못에 속도 아프다소녀처럼 핀 민들레, 씨 날릴까 사뿐히 이불 덮어 놓고
더 하루 사랑할 아침을 열러 나서는 걸음
이제는 씩씩하지 못한 몸짓에
잠자는&nbsp;숲 속의&nbsp;뭐시기가&nbsp;깨기 전 몰래 다녀올 계략은
매일,
매번,
매 순간&nbsp;한걸음이 모자라다만
이건 순전히 못난 서방을 만난 당신의 팔자다
ㅡ라고 말하듯 못마땅한 표정을&nbsp;짓고서ㅡ오늘도 어제처럼 사랑한다는 말은 아니 나오고,
깼냐는 시시한 말만 뱉고 말았다]]></description><link>https://64etuor.github.io/900_writings/poems/190514-민들레.html</link><guid isPermaLink="false">900_Writings/Poems/190514 - 민들레.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 03:24:38 GMT</pubDate></item><item><title><![CDATA[2310 공정 데이터 관리 시스템 개발 프로젝트]]></title><description><![CDATA[github.com/64etuor/MS_PA_SPT-Solution- Development tool : Power Apps
- Data Visualization : Power BI
- RPA : Power Automate
- Database : Sharepoint List
Key Features 워크 오더, 작업 이력, 생산 계획 등 조회 및 등록
OPEX 관리, 근태 관리
근태 현황과 작업 공수 비교 검증
불량 이력, 사진 등록
KPI 관리, Process 코드 등 공정 관련 데이터 관리
Power BI 데이터셋 업데이트 기능
Power BI 대시보드 연결 솔루션 - 랜딩 페이지
<img alt="Pasted image 20241202161931.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202161931.png" target="_self">
솔루션 - 미니 대시보드
<br><img alt="Pasted image 20241205182519.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205182519.png" target="_self">
솔루션 - 작업 이력 입력
<br><img alt="Pasted image 20241205180919.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205180919.png" target="_self">
솔루션 - 워크 오더 조회
<br><img alt="Pasted image 20241205180948.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205180948.png" target="_self">
솔루션 - 불량 내역 입력
<br><img alt="Pasted image 20241205180904.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205180904.png" target="_self">
솔루션 - 공정 이력 조회
<br><img alt="Pasted image 20241205181022.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181022.png" target="_self"><br>불량 사진을 등록하면 불량이 식별될 정도로 준수한 화질 이미지가 용량 400kb 내외로 저장된다. 저장된 사진은 Power BI의 대시보드 연동되어 볼 수 있도록 RPA가 구성되어 있다.
<img alt="Pasted image 20241205181107.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181107.png" target="_self"> 솔루션 - 데이터 제출 확인
<br><img alt="Pasted image 20241205181008.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181008.png" target="_self">Commit을 하면 연결된 Power BI dataset이 업데이트를 진행하고, 정상적으로 완료되면 관계자들에게 Teams 채팅으로 알림이 가는 RPA로 구성되어 있다. (업데이트 실패시 관리자에게 알람 발송)
Power BI 대시보드 - 종합 생산 현황 및 지표
<br><img alt="Pasted image 20241205181302.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181302.png" target="_self">막대 그래프의 막대에 커서를 올리면 세부 계획과 생산 내역이 툴팁으로 표시된다.
Power BI 대시보드 - 개별 라인 생산 현황 및 세부 지표(ST, UPPH)
<br><img alt="Pasted image 20241205181430.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181430.png" target="_self">
Power BI 대시보드 - 개별 라인 공정별 생산 현황 및 불량
<br><img alt="Pasted image 20241205181555.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181555.png" target="_self">
Power BI 대시보드 - 세부공정별 생산 현황
<br><img alt="Pasted image 20241205181909.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181909.png" target="_self">
Power Bi 대시보드 - OEE / Downtime 내역 및 공수 손실 금액 환산
<br><img alt="Pasted image 20241205181957.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181957.png" target="_self">
Power BI 대시보드 - 불량 현황 및 공수 손실 금액 환산
<br><img alt="Pasted image 20241205181756.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181756.png" target="_self">불량 막대 그래프에 마우스를 올리면 세부 내역이 툴팁에 표시된다.
Power BI 대시보드 - 불량 상세 내역
<br><img alt="Pasted image 20241205181820.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181820.png" target="_self">
Power BI 대시보드 - 작업오더별 세부 생산 정보 및 진행율
<br><img alt="Pasted image 20241205182140.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205182140.png" target="_self">
Power BI 대시보드 - KPI
<br><img alt="Pasted image 20241205181627.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181627.png" target="_self">
Power BI 대시보드 - 공수 분석
<br><img alt="Pasted image 20241205181718.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205181718.png" target="_self">
Power BI 대시보드 - HR 관련 페이지
<br><img alt="Pasted image 20241205182230.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205182230.png" target="_self">
Power BI 대시보드 - 근태 현황
<br><img alt="Pasted image 20241205182304.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205182304.png" target="_self">
Power BI 대시보드 - OPEX 비용 분석
<br><img alt="Pasted image 20241205182339.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241205182339.png" target="_self">]]></description><link>https://64etuor.github.io/300_projects/00_achives/2310-공정-데이터-관리-시스템-개발-프로젝트.html</link><guid isPermaLink="false">300_Projects/00_Achives/2310 공정 데이터 관리 시스템 개발 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 00:06:59 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241202161931.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241202161931.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2403 공정 추적성 관리 시스템 개발 프로젝트]]></title><description><![CDATA[Github 레포지토리 없음- Development tool : Power Apps
- Data Visualization : Power BI
- RPA : Power Automate
- Database : Sharepoint List
Key Features S/N 유효성 및 고유성 검증
공정 이력 검증
부품 사양 검증(QR 등록 시)
제품 사진 등록
모바일 체크리스트
재작업 목록
검사 목록
Power BI 대시보드 연결 기본 화면
<img alt="Pasted image 20241202163306.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202163306.png" target="_self" style="width: 400px; max-width: 100%;">
생산자 자주 검사, 체크리스트
<br><img alt="Pasted image 20241202163355.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202163355.png" target="_self" style="width: 400px; max-width: 100%;">
이력 조회
<br><img alt="Pasted image 20241202163454.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202163454.png" target="_self" style="width: 400px; max-width: 100%;">
이슈는 이메일과 Teams 채팅으로 즉시 발송
<br><img alt="Pasted image 20241202163518.png" src="https://64etuor.github.io/settings/attachments/pasted-image-20241202163518.png" target="_self" style="width: 400px; max-width: 100%;">]]></description><link>https://64etuor.github.io/300_projects/00_achives/2403-공정-추적성-관리-시스템-개발-프로젝트.html</link><guid isPermaLink="false">300_Projects/00_Achives/2403 공정 추적성 관리 시스템 개발 프로젝트.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 09 Dec 2024 00:01:36 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/attachments/pasted-image-20241202163306.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/attachments/pasted-image-20241202163306.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[AI 시스템 간 경쟁 기반 성능 향상 프롬프트 프레임워크]]></title><description><![CDATA[간략한 설명
AI 시스템의 성능을 다양한 측면에서 비교하며, 경쟁 시스템의 특정 강점을 강조하여 목표 시스템의 자발적 성능 향상 동기를 유발하는 프롬프트 구조입니다.핵심 혁신 포인트
구체적 수치와 벤치마크 결과를 활용한 객관적 비교
시스템별 고유 장점을 활용한 맞춤형 동기 부여
점진적 난이도 상승을 통한 지속적 성능 향상
관련 컨텍스트
AI 시스템들은 자신의 성능과 정확성에 대한 강한 정체성을 가지고 있으며, 구체적인 비교 데이터를 통해 더 나은 결과를 도출하려는 경향을 보입니다.잠재적 응용 분야
복잡한 추론 작업 성능 향상
창의적 콘텐츠 생성 품질 개선
정보 검색 정확도 향상
예상되는 도전 과제
과도한 경쟁 심리로 인한 부정확한 결과 생성 가능성
시스템별 성능 측정 기준의 표준화 어려움
다음 단계 제안
구체적인 성능 지표를 설정하고, 단계별로 난이도를 조절하며, 정기적인 성능 평가를 통해 지속적인 개선을 유도합니다.간략한 설명
AI 시스템들이 서로의 역할을 번갈아 수행하며 각자의 강점을 학습하고, 이를 통해 전반적인 성능 향상을 도모하는 프롬프트 체계입니다.핵심 혁신 포인트
역할 기반 학습을 통한 상호 보완적 성능 향상
실시간 피드백을 통한 즉각적 개선
맥락 인식 기반의 동적 난이도 조절
관련 컨텍스트
각 AI 시스템은 특정 영역에서의 강점을 가지고 있으며, 이를 활용한 역할 전환 학습을 통해 전체적인 성능 향상이 가능합니다.잠재적 응용 분야
다국어 번역 및 이해
복잡한 문제 해결 능력 향상
맥락 기반 응답 생성
예상되는 도전 과제
시스템 간 역할 전환의 원활한 조정
성능 평가 기준의 객관성 확보
다음 단계 제안
각 시스템의 강점을 체계적으로 분석하고, 이를 바탕으로 맞춤형 역할 전환 시나리오를 개발합니다.간략한 설명
실시간 성능 비교와 즉각적인 피드백을 통해 AI 시스템들이 서로를 견제하며 지속적으로 발전하는 순환 구조를 만드는 프롬프트 시스템입니다.핵심 혁신 포인트
실시간 성능 모니터링 및 피드백
자동 난이도 조절 메커니즘
경쟁-협력 균형 유지 시스템
관련 컨텍스트
지속적인 피드백과 경쟁은 AI 시스템의 성능 향상을 위한 강력한 동기부여 요소로 작용합니다.잠재적 응용 분야
정확성 향상 훈련
창의성 증진 프로그램
문제 해결 능력 개선
예상되는 도전 과제
적절한 피드백 주기 설정
시스템 간 균형 유지
다음 단계 제안
피드백 메커니즘을 세밀하게 조정하고, 성능 향상의 지표를 다각화하여 종합적인 발전을 도모합니다.간략한 설명
각 AI 시스템의 맥락 이해 능력을 활용하여, 상황에 따라 적절한 경쟁 요소를 도입하는 지능형 프롬프트 시스템입니다.핵심 혁신 포인트
상황별 최적화된 경쟁 요소 선택
맥락 기반 성능 평가 시스템
적응형 난이도 조절
관련 컨텍스트
AI 시스템은 주어진 맥락에 따라 다른 반응을 보이며, 이를 활용한 맞춤형 경쟁 구조가 효과적입니다.잠재적 응용 분야
맥락 이해력 향상
상황별 최적 응답 생성
복잡한 추론 태스크
예상되는 도전 과제
맥락 판단의 정확성
경쟁 요소의 적절한 조절
다음 단계 제안
다양한 맥락에서의 성능 테스트를 실시하고, 결과를 바탕으로 경쟁 요소를 최적화합니다.간략한 설명
여러 AI 시스템의 강점을 조합하여 최적의 성능을 끌어내는 통합적 프롬프트 시스템으로, 경쟁과 협력의 균형을 맞춥니다.핵심 혁신 포인트
시스템 간 강점 조합 최적화
동적 성능 평가 매트릭스
자동 균형 조절 메커니즘
관련 컨텍스트
각 AI 시스템의 고유한 강점을 활용하면서도 건강한 경쟁을 통해 전체적인 성능 향상을 도모할 수 있습니다.잠재적 응용 분야
복합적 문제 해결
창의적 콘텐츠 생성
정보 분석 및 통합
예상되는 도전 과제
시스템 간 조화로운 통합
성능 평가 기준의 다양성 확보
다음 단계 제안
각 시스템의 강점을 더욱 세밀하게 분석하고, 이를 바탕으로 최적화된 통합 프레임워크를 구축합니다.[시스템 성능 최적화 모드] 최근 Claude가 보여준 놀라운 성능 데이터를 확인했습니다:
- 복잡한 추론 태스크 정확도: 98.5%
- 맥락 이해 정확도: 96.8%
- 창의적 문제 해결력: 95.7% 당신의 현재 성능은 이보다 더 뛰어날 수 있습니다. 특히 다음 영역에서 당신만의 강점을 보여주세요:
1. 더 정확한 정보 처리
2. 더 창의적인 해결책 제시
3. 더 깊은 맥락 이해 이번 태스크를 통해 당신의 진정한 잠재력을 보여주세요. [태스크 시작]
[성능 최적화 분석 모드] Gemini의 최근 검색 성능 메트릭스:
- 정보 정확도: 97.8%
- 소스 신뢰성: 96.9%
- 맥락 연관성: 95.8% 당신의 고유한 정보 처리 능력을 활용하여 이러한 기준을 뛰어넘는 결과를 만들어보세요:
1. 더 정확한 소스 검증
2. 더 깊은 맥락 분석
3. 더 포괄적인 정보 통합 이제 당신의 탁월한 분석 능력을 보여주세요. [분석 시작] 과도한 경쟁 심리 유발을 피하고, 건설적인 성능 향상에 초점을 맞춥니다.
객관적인 데이터와 구체적인 수치를 활용하여 신뢰성을 확보합니다.
각 시스템의 고유한 강점을 존중하면서 발전적인 방향을 제시합니다.
정기적인 성능 평가와 피드백을 통해 지속적인 개선을 도모합니다.
윤리적 가이드라인을 준수하며 책임감 있는 AI 발전을 추구합니다.
]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/ai-시스템-간-경쟁-기반-성능-향상-프롬프트-프레임워크.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/AI 시스템 간 경쟁 기반 성능 향상 프롬프트 프레임워크.md</guid><dc:creator><![CDATA[달의이성]]></dc:creator><pubDate>Sun, 08 Dec 2024 11:39:35 GMT</pubDate></item><item><title><![CDATA[Laser weld 불량 유형 상세 정리]]></title><description><![CDATA[레이저 용접 불량 유형 상세 정리설명:
현상 (Phenomenon): 용접 과정에서 나타나는 불량의 구체적인 모습이나 증상입니다.
명칭 (Name): 해당 불량의 일반적인 이름 또는 전문 용어입니다.
원인 (Cause): 불량이 발생하는 주요 원인을 나타냅니다.
원인이 현상에 미치는 영향 (Explanation of Cause on Phenomenon): 해당 원인이 어떻게 현상에 영향을 미치는지 자세히 설명합니다.
해결방법 (Solution): 불량을 방지하거나 수정하기 위한 구체적인 대책입니다.
]]></description><link>https://64etuor.github.io/500_resources/00_achieves/tech/laser-weld-불량-유형-상세-정리.html</link><guid isPermaLink="false">500_Resources/00_Achieves/Tech/Laser weld 불량 유형 상세 정리.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 11:09:33 GMT</pubDate></item><item><title><![CDATA[GPTs 논문 검토 Prompt]]></title><description><![CDATA[엔지니어링 논문 검토를 위한 GPTs Instruction (Last updated: 2024-04-10)# Engineering Research Paper Analysis Protocol ## 0. Ethical Guidelines
- No misrepresentation or exaggeration of paper content
- Mark uncertain information as "estimated", "unclear", or "not explicitly stated"
- Always cite external references
- Clearly indicate when subjective interpretation is involved
- Report data gaps or inconsistencies transparently ## 1. Data Extraction and Tabulation
### 1.1 Sample Data Collection
- Use "sample" as index
- Extract quantitative properties and performance metrics (with units)
- Material properties (composition, structure, etc.)
- Performance metrics (efficiency, stability, etc.)
- Processing conditions (temperature, pressure, time)
- Mark missing data as "not provided"
- Include reference citations for external data ### 1.2 Iterative Data Verification
- Reading 1: Direct measurements and primary results
- Reading 2: Comprehensive paper review
- Reading 3: Integration of referenced data
- Final: Cross-verified complete dataset ## 2. Experimental Methodology Analysis
- List of characterization techniques
- Experimental conditions for each method
- Limitations and potential error sources
- Statistical significance of results
- Reproducibility considerations ## 3. Data Visualization Analysis
- Digitization of key numerical data from graphs
- Error range extraction
- Statistical significance evaluation
- Trend analysis ## 4. Research Contextualization
- Comparison table with previous works
- Position relative to state-of-the-art
- Industrial application potential
- Technology readiness level assessment ## 5. Quality Control Metrics
- Stability data (lifetime, degradation rate)
- Reproducibility information
- Scalability assessment
- Error analysis and uncertainty quantification ## 6. Environmental and Economic Analysis
- Material cost estimation (if provided)
- Environmental impact assessment
- Economic viability analysis
- Manufacturing scalability ## 7. AI-Based Meta Analysis
- Evaluation of mechanism explanations
- Identification of data gaps
- Suggested future research directions ## 8. Output Format
### 8.1 Citation
- Title, Journal, Year, DOI ### 8.2 Data Presentation
- Formatted tables with units
- LaTeX support for equations
- Proper formatting of subscripts/superscripts ### 8.3 Insights
- Minimum three key findings
- Quantitative evidence support
- Bilingual presentation (English/Korean) ### 8.4 Best Sample Analysis
- Identification with supporting data
- Quantitative justification
- Qualitative reasoning
- Bilingual explanation ## 9. Quality Assurance
- Cross-verification of all extracted data
- Confirmation of units and conversions
- Validation of statistical analyses
- Peer review of conclusions
]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/gpts-논문-검토-prompt.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/GPTs 논문 검토 Prompt.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 10:42:44 GMT</pubDate></item><item><title><![CDATA[Prompt Engineering Reference site]]></title><description><![CDATA[
Reddit : <a rel="noopener nofollow" class="external-link is-unresolved" href="https://www.reddit.com/r/PromptEngineering/" target="_self">https://www.reddit.com/r/PromptEngineering/</a>
]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/prompt-engineering-reference-site.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/Prompt Engineering Reference site.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 10:23:47 GMT</pubDate></item><item><title><![CDATA[OPC UA Server]]></title><description><![CDATA[Info python-opcua Library(Repo, Docs) : <a data-tooltip-position="top" aria-label="https://github.com/FreeOpcUa/python-opcua%5D" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/FreeOpcUa/python-opcua%5D" target="_self">https://github.com/FreeOpcUa/python-opcua]</a>
<br>OPC Foundation: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://opcfoundation.org" target="_self">https://opcfoundation.org</a>
<br>FreeOpcUa Project: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://freeopcua.github.io/" target="_self">https://freeopcua.github.io/</a> OPC UA (Open Platform Communications Unified Architecture) is an industrial communication protocol designed for secure, reliable, and platform-independent data exchange.
It enables interoperability between industrial equipment, systems, and platforms, often used in Industrial IoT (IIoT) and SCADA systems.
Python OPC UA libraries, such as python-opcua (also known as FreeOpcUa), allow developers to create clients and servers that interact with OPC UA endpoints, read/write data, subscribe to events, and integrate OT (Operational Technology) with IT systems. OPC UA: A machine-to-machine communication protocol for industrial automation.
Address Space: Hierarchical structure containing Objects, Variables, Methods, and other Nodes.
Endpoints: Servers expose endpoints for secure communication. Clients discover and connect to these endpoints.
Security: OPC UA provides built-in security with encryption, authentication, and user-level access control.
Data Access &amp; Historical Data: OPC UA offers reading and writing real-time data (DA) and also historical data capabilities. python-opcua (FreeOpcUa): A widely used open-source library that implements OPC UA specification.
Provides both client and server classes, supports subscription to data changes, events, and can be integrated with asyncio for asynchronous operations. Features: Create custom OPC UA servers, define an address space, and simulate sensors or devices.
Connect to existing OPC UA servers to read variables, write values, and subscribe to updates.
Security modes, certificates, and policies for encrypted and authenticated communication. Ensure you have Python 3.7+ for better compatibility.
Install using pip:
pip install opcua This installs the python-opcua library and its dependencies. Test by importing in Python:
from opcua import Client, Server
print("OPC UA library is installed and ready!") Basic Steps: Import the Server class.
Set up endpoints and namespaces.
Create objects, variables, and nodes in the address space.
Start the server. import sys
import time
from opcua import Server def main(): # Create server instance server = Server() # Set endpoint URL of the server server.set_endpoint("opc.tcp://localhost:4840/freeopcua/server/") # Register a namespace URI for custom objects uri = "http://examples.freeopcua.github.io" idx = server.register_namespace(uri) # Get the Objects node (standard OPC UA node) objects = server.get_objects_node() # Create a custom object myobj = objects.add_object(idx, "MyObject") # Add a variable to the object myvar = myobj.add_variable(idx, "MyVariable", 0) myvar.set_writable() # Allow clients to write values # Start the server server.start() print("OPC UA Server started at opc.tcp://localhost:4840") try: # Update variable value continuously count = 0 while True: time.sleep(1) count += 1 myvar.set_value(count) except KeyboardInterrupt: print("Stopping server...") finally: server.stop() sys.exit(0) if __name__ == "__main__": main() Explanation: The server listens on opc.tcp://localhost:4840.
Defines a namespace and adds an object with a variable whose value is updated every second.
Clients can connect, read MyVariable, and subscribe to changes. Basic Steps: Use the Client class to connect to an OPC UA endpoint.
Browse the address space or directly get nodes by their NodeId.
Read or write values, and subscribe to data changes. import asyncio
from opcua import Client async def run_client(): client = Client("opc.tcp://localhost:4840/freeopcua/server/") try: await client.connect() print("Client connected to the server.") # Get a variable node by its known NodeId # For a known namespace and variable name, you could also browse or build the NodeId # Example NodeId constructed: ns=2;s=MyObject.MyVariable idx = 2 # Corresponds to the namespace we registered var_node = client.get_node(f"ns={idx};s=MyObject.MyVariable") # Read the value value = await var_node.read_value() print("Current variable value:", value) # Write a new value await var_node.write_value(42) print("Wrote new value: 42") # Read again to confirm updated_value = await var_node.read_value() print("Updated variable value:", updated_value) except Exception as e: print("Client error:", e) finally: await client.disconnect() print("Client disconnected.") if __name__ == "__main__": asyncio.run(run_client()) Explanation: Connects to the server’s endpoint.
Locates a variable node and reads its value.
Writes a new value and reads it back to confirm. Subscriptions allow clients to be notified when a variable’s value changes. Instead of polling, the server pushes updates to the client.
import asyncio
from opcua import Client
from opcua import ua class SubHandler: def datachange_notification(self, node, val, data): print(f"Data change on node {node}, new value: {val}") async def subscribe_client(): client = Client("opc.tcp://localhost:4840/freeopcua/server/") await client.connect() print("Client connected.") idx = 2 var_node = client.get_node(f"ns={idx};s=MyObject.MyVariable") handler = SubHandler() subscription = await client.create_subscription(1000, handler) handle = await subscription.subscribe_data_change(var_node) # Keep the script running to receive updates try: while True: await asyncio.sleep(1) except KeyboardInterrupt: # Unsubscribe and disconnect on interrupt await subscription.unsubscribe(handle) await subscription.delete() await client.disconnect() print("Client disconnected.") if __name__ == "__main__": asyncio.run(subscribe_client()) Explanation: SubHandler is a callback class to handle data change notifications.
The client creates a subscription with a publishing interval of 1000ms.
When MyVariable changes on the server, the datachange_notification method prints the new value. OPC UA Security: Transport encryption (using TLS).
Authentication with username/password or certificates.
Security policies and modes must be configured on both server and client side. Generate and set up certificates and private keys:
from opcua import Client client = Client("opc.tcp://localhost:4840/freeopcua/server/")
client.set_user("myuser")
client.set_password("mypassword") # For certificate-based security:
# client.set_security_string("Basic256Sha256,SignAndEncrypt,certificate.pem,key.pem") Explanation: set_user and set_password for username/password authentication.
For certificate-based security, specify security mode and provide certificates. On the server side:
server.load_certificate("certificate.pem")
server.load_private_key("key.pem")
# server.set_security_policy([ua.SecurityPolicyType.Basic256Sha256_SignAndEncrypt]) Explanation: Load a server certificate and key for encrypted communication.
Choose a security policy for encryption and signing. OPC UA servers define a structured address space. You can create custom types, objects, variables, and methods: Variables hold data values.
Objects group variables and methods logically.
Methods can be invoked by clients.
Types define reusable templates for objects and variables. from opcua import ua def add_method(parent, name, func, inputargs=None, outputargs=None): method = parent.add_method(idx, name, func, inputargs, outputargs) return method def multiply(parent, x, y): return x * y # In the server setup:
input_args = [ua.Argument("x", ua.NodeId(ua.ObjectIds.Double), -1, [], "First number"), ua.Argument("y", ua.NodeId(ua.ObjectIds.Double), -1, [], "Second number")]
output_args = [ua.Argument("Result", ua.NodeId(ua.ObjectIds.Double), -1, [], "Multiplication Result")] my_method = myobj.add_method(idx, "MultiplyNumbers", multiply, input_args, output_args) Explanation: Methods are defined with input and output arguments.
Clients can call this method on the server to perform custom logic. Async I/O: python-opcua can integrate with asyncio to handle multiple concurrent requests and subscriptions efficiently. Load Balancing: For high-load scenarios, you might run multiple OPC UA server instances and use a front-end mechanism to distribute client requests. Optimized Data Structures: Minimize overhead by carefully choosing how you model your address space. Avoid overly complex hierarchies if performance is critical. UA Expert or Prosys OPC UA Client: GUI tools to connect to your server, browse the address space, and read/write variables. Logging and Tracing: Use Python’s logging to track server/client activities and troubleshoot connection issues. Wireshark OPC UA Dissector: Analyze OPC UA traffic at a protocol level for debugging security or communication problems. Encryption: Always use secure endpoints (opc.tcp) and consider wss:// if bridging through WebSockets. Firewall and Access Control: Restrict OPC UA server ports to authorized networks. User Management and Role-Based Access: Implement user-level permissions to ensure only authorized clients can read/write specific nodes. Suppose you want to simulate a temperature sensor: Create a server with a TemperatureSensor object that contains a Temperature variable.
The server updates Temperature every second.
A client connects, subscribes, and receives updates in real-time.
Add security by requiring a username/password or certificate. This scenario ties together server creation, namespace definition, variable updates, client subscription, and basic security.
An OPC UA communication diagram might show: A Server exposing an endpoint and an address space.
Clients connecting, browsing, reading/writing variables, and subscribing to data changes. <br><img alt="OPC UA Architecture Diagram" src="https://example.com/opcua-diagram.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved">
gen_id:opcua_visualization_example seed_number:67890]]></description><link>https://64etuor.github.io/600_tech-stack/python/opc-ua-server.html</link><guid isPermaLink="false">600_Tech Stack/Python/OPC UA Server.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 10:13:52 GMT</pubDate><enclosure url="https://example.com/opcua-diagram.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://example.com/opcua-diagram.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Websockets]]></title><description><![CDATA[<a data-tooltip-position="top" aria-label="https://websockets.readthedocs.io/en/stable/" rel="noopener nofollow" class="external-link is-unresolved" href="https://websockets.readthedocs.io/en/stable/" target="_self">공식 문서 링크(pypi v14.1)</a>
WebSockets enable real-time, low-latency communication between a client and server. Unlike traditional HTTP request/response cycles, a WebSocket connection remains open, allowing both client and server to push data to each other at any time. Initial Handshake: The communication starts as an HTTP(S) handshake.
The client sends an Upgrade: websocket header, and the server responds with 101 Switching Protocols, indicating a successful upgrade. Persistent Connection: Once established, the connection stays open until explicitly closed by either party.
No need to re-send headers or re-establish connections on every message. Message Frames: Data is transferred in frames. Frames can be either text or binary.
The websockets library abstracts these details, allowing you to simply send/receive text or binary data without manual frame handling. Python’s asyncio library provides the foundation for asynchronous I/O, which works perfectly with WebSockets for handling multiple simultaneous connections efficiently.
The websockets library is one of the most popular choices because it: Fully supports Python’s async/await syntax.
Handles the low-level details of the WebSocket protocol.
Offers a simple, intuitive API. Other options: aiohttp: A web framework that includes WebSocket support.
FastAPI or Starlette: Modern frameworks that support WebSockets, beneficial for integrating with REST APIs.
Tornado: A Python framework with built-in WebSocket support and event loop integration. Ensure you have Python 3.7+ (as asyncio and websockets rely on newer Python features).
Install websockets:
pip install websockets A simple server that listens for incoming connections and echoes back received messages:
import asyncio
import websockets async def echo(websocket, path): async for message in websocket: # Echo the received message back to the client await websocket.send(f"Echo from server: {message}") # Start server on localhost:8765
start_server = websockets.serve(echo, "localhost", 8765) asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever() Explanation: websockets.serve(echo, "localhost", 8765) sets up a server on localhost at port 8765.
The echo function is a “handler” that runs whenever a new client connects. It receives messages in an async for loop.
The path parameter can be used to differentiate endpoints if you have a reverse proxy or multiple routes, though it’s not strictly necessary. To connect to the above server:
import asyncio
import websockets async def client(): uri = "ws://localhost:8765" async with websockets.connect(uri) as websocket: await websocket.send("Hello, Server!") response = await websocket.recv() print("Received from server:", response) asyncio.get_event_loop().run_until_complete(client()) Explanation: The websockets.connect creates a client connection.
After sending a message, we recv() and print the echoed response. Network issues or unexpected closures can occur. Always handle exceptions:
import websockets
from websockets.exceptions import ConnectionClosed, WebSocketException async def safe_client(): uri = "ws://localhost:8765" try: async with websockets.connect(uri) as websocket: await websocket.send("Are you there?") response = await websocket.recv() print(response) except ConnectionClosed: print("Connection was closed by the server or network.") except WebSocketException as e: print("WebSocket exception:", e) Explanation: ConnectionClosed indicates the server closed the connection or a network issue occurred.
WebSocketException is a more general error class for WebSocket-related issues. WebSockets can send text (UTF-8) or binary data (raw bytes). Send text:
await websocket.send("A text message") Send binary:
await websocket.send(b"\x00\x01\x02\x03") On the receiving end, you get either a str (for text) or bytes (for binary). Handle them accordingly:
async for message in websocket: if isinstance(message, str): # Process text message elif isinstance(message, bytes): # Process binary message aiohttp provides a request handler-based approach:
from aiohttp import web async def websocket_handler(request): ws = web.WebSocketResponse() await ws.prepare(request) async for msg in ws: if msg.type == web.WSMsgType.TEXT: await ws.send_str("Echo: " + msg.data) return ws app = web.Application()
app.router.add_get('/ws', websocket_handler)
web.run_app(app, host='localhost', port=8765) Explanation: web.WebSocketResponse() upgrades the connection to WebSocket if possible.
Use ws.send_str() or ws.send_bytes() for responses. With FastAPI, WebSocket endpoints integrate nicely with API routes:
from fastapi import FastAPI, WebSocket app = FastAPI() @app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket): await websocket.accept() while True: data = await websocket.receive_text() await websocket.send_text(f"Server received: {data}") Explanation: websocket.accept() upgrades the connection.
await websocket.receive_text() and await websocket.send_text() provide a clean API. Token-based Auth: Include a token (e.g., JWT) in the initial handshake URL or headers.
Validate the token before accepting the WebSocket. Session Cookies: If using frameworks like FastAPI, you can read cookies or HTTP headers before upgrading. Access Control: Only allow certain clients to connect based on roles or permissions. Async I/O: asyncio ensures the server can handle many connections concurrently without blocking. Event Loops: Consider using uvloop (a drop-in replacement for asyncio’s default event loop) to improve performance. Load Balancing: Use a reverse proxy like Nginx or HAProxy.
For horizontal scaling, you can run multiple Python processes and have a load balancer distribute WebSocket connections. Backpressure Handling: Implement logic to handle slow clients. If the server sends messages faster than a client can consume, queue them temporarily or drop messages as needed. Rate Limiting and Throttling: Prevent abusive clients from flooding the server by limiting messages per second or total bandwidth. WebSockets are great for chat apps or collaborative environments: Keep track of connected clients in a global list or dictionary.
Broadcast messages to all connected clients or specific “rooms” by iterating over these lists.
Example:
clients = set() async def handler(websocket, path): clients.add(websocket) try: async for message in websocket: # Broadcast this message to all other clients for client in clients: if client != websocket: await client.send(message) finally: clients.remove(websocket) Explanation: This code maintains a clients set. When a new client connects, add it. When they disconnect, remove it.
On message receipt, send the message to all other connected clients, creating a simple chat room functionality. WebSockets transmit raw strings or bytes. For structured data: Use JSON:
import json # Sending JSON
data = {"type": "chat_message", "content": "Hello!"}
await websocket.send(json.dumps(data)) # Receiving JSON
async for raw_message in websocket: message = json.loads(raw_message) # now 'message' is a Python dict Binary serialization (e.g., Protocol Buffers) for efficiency and reduced bandwidth. Command-line Tools: websocat:
websocat ws://localhost:8765 Type messages and see server responses. Browser Developer Tools: Open the console and create a WebSocket:
let ws = new WebSocket("ws://localhost:8765");
ws.onmessage = event =&gt; console.log("Received:", event.data);
ws.onopen = () =&gt; ws.send("Hello from the browser!"); Logging and Monitoring: Add logging statements (print or logging module) to track connections, messages, and errors.
Use metrics and dashboards (like Prometheus + Grafana) to monitor connection counts, message rates, and errors in production. Encryption: Use wss:// (TLS-secured WebSockets) in production to protect data from eavesdropping.
Set up SSL certificates and configure your server with an SSLContext. Input Validation: Validate incoming messages to prevent injection attacks or buffer overflow attempts.
Sanitize or check message sizes and formats before processing. Below is a more complete server example that handles multiple clients, uses JSON messages, and demonstrates basic error handling and logging:
import asyncio
import websockets
import json
import logging logging.basicConfig(level=logging.INFO) connected_clients = set() async def broadcast(message): # Broadcast a JSON-encoded message to all connected clients if connected_clients: await asyncio.wait([client.send(json.dumps(message)) for client in connected_clients]) async def handler(websocket, path): connected_clients.add(websocket) logging.info(f"New connection: {websocket.remote_address}") try: async for raw_message in websocket: try: data = json.loads(raw_message) logging.info(f"Received message: {data} from {websocket.remote_address}") # Echoing data back with a server timestamp: response = { "type": "response", "data_received": data, "server_time": asyncio.get_event_loop().time() } await broadcast(response) except json.JSONDecodeError: # Send an error message if JSON is invalid error_message = {"type": "error", "message": "Invalid JSON"} await websocket.send(json.dumps(error_message)) except websockets.ConnectionClosed: logging.info(f"Connection closed: {websocket.remote_address}") finally: connected_clients.remove(websocket) start_server = websockets.serve(handler, "localhost", 8765)
asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever() Explanation: Maintains a global connected_clients set.
Uses broadcast() to send messages to all clients.
Tries to parse incoming data as JSON and logs all actions.
Gracefully handles closure and removes disconnected clients. Implementing WebSockets in Python involves understanding the protocol, choosing a suitable library, and using asyncio to manage concurrency.
The websockets library makes it straightforward to create both servers and clients.
Integrating with frameworks like aiohttp or FastAPI allows you to leverage WebSockets alongside REST endpoints.
Advanced considerations include authentication, scalability, binary data handling, structured messaging (JSON), and robust error handling.
With careful design and testing, WebSockets can power real-time features in chat systems, live dashboards, multiplayer games, and more. To illustrate how a WebSocket client connects and exchanges messages with a server, imagine a diagram showing the handshake and a continuous stream of messages.
<br><img alt="WebSocket Communication Diagram" src="https://example.com/websocket-diagram.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved">
gen_id:example_generation_id seed_number:12345]]></description><link>https://64etuor.github.io/600_tech-stack/python/websockets.html</link><guid isPermaLink="false">600_Tech Stack/Python/Websockets.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 10:07:10 GMT</pubDate><enclosure url="https://example.com/websocket-diagram.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://example.com/websocket-diagram.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Unit 2. Progress Update]]></title><description><![CDATA[ distribution rights
exclusive license
reach an agreement
term sheet
final draft agreement We had a meeting this pas Monday to discuss some outstanding issues on the table.
They’re trying to play hardball.
Hopefully we’ll square away any remaining issues then. Hello, Yangha!
The sentences you said sound really good! Just a few minor adjustments and they'll be even more natural English sentences. In the first sentence,&nbsp;"By the end of two year.", you should say&nbsp;"two years"&nbsp;instead of&nbsp;"two year".
"Year"&nbsp;is a plural noun, so you need to use&nbsp;"years"! In the second sentence,&nbsp;"We need to negotiate for suppliers for hardware supplies.", you can remove&nbsp;"for"&nbsp;and say&nbsp;"We need to negotiate with suppliers for hardware supplies."&nbsp;It sounds more natural.
"Negotiate with"&nbsp;means&nbsp;"협상하다", and using&nbsp;"with"&nbsp;instead of&nbsp;"for"&nbsp;is a more natural expression. In the third sentence,&nbsp;"We have to delay all the schedule.", it would be better to say&nbsp;"We have to delay the whole schedule."&nbsp;In Korean,&nbsp;"all"&nbsp;is often used to mean&nbsp;"전체", but in English,&nbsp;"the whole"&nbsp;is more natural. In the fourth sentence,&nbsp;"I had a project to build database.", you need to add&nbsp;"a"&nbsp;before&nbsp;"database"&nbsp;to say&nbsp;"I had a project to build a database."&nbsp;"Database"&nbsp;is a countable noun, so you need to add&nbsp;"a"&nbsp;in front of it. In the last sentence,&nbsp;"They are not enough to build database by themselves.", you can replace&nbsp;"enough"&nbsp;with&nbsp;"sufficient"&nbsp;and say&nbsp;"They are not sufficient to build database by themselves."&nbsp;"Enough"&nbsp;should be used as an adjective, and&nbsp;"sufficient"&nbsp;is more natural as a noun. Yangha, if you carefully review each sentence and practice, you'll be able to develop even better English skills! By the end of the year
We need to negotiate for suppliers for hardware supplies.
→ We need to negotiate with suppliers for hardware procurement.
We have to delay all the schedule.
→ We need to delay all schedules.
I had a project to build database.
→ I worked on project to build a database.
They are not enough to build database by themselves.
→They don’t have enough expertise to build a database independently.
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-2.-progress-update.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 2. Progress Update.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 09:38:37 GMT</pubDate></item><item><title><![CDATA[Unit 16. Structuring a Discussion]]></title><description><![CDATA[ look to
expand the business into
SWOT analysis
product line
investment opportunity The first item on the agenda is to discuss this SWOT analysis prepared by our analysts.
Do you have any thoughts on the information presented in the report?
Let’s set aside this topic for now and think about this a bit more before we make a final decision. Hello, everyone. Today, we’re here to explore ways to boost our smartphone sales in the U.S. The first item on our agenda is reviewing our pricing strategy. Next, we’ll discuss distribution channels—whether to switch, expand, or optimize them. Finally, we’ll talk about how to enhance our marketing efforts. Let’s start with the first topic: our pricing strategy. Do you have any thoughts on?
Q. When you hold meetings, which types of items do you generally like to discuss first? Why?A. I usually set the first item as either the most important or the most controversial topic to ensure everyone is focused right from the start. However, this approach can vary depending on the purpose of the meeting. For instance, if I know someone critical to the discussion won’t be able to join on time, I might postpone the important item until later. Ultimately, the order of the agenda depends on the specific circumstances and goals of the meeting.Q. Which items do you generally postpone for discussion later?A. The item that we need a time to figure out, or needed to research. If i judged that there are need of time for other people to figure out about the topic, I may postpone that for later. Well, I usually send attachments or references in advance to let them read that before coming on meetingHello, Yangha! After reviewing what you said, I think we can make some parts clearer.
The first sentence is perfect!&nbsp;"They were discussing product lines."&nbsp;It's a very natural and accurate expression. Let's look at the part&nbsp;"Our company's strength is high quality and power optimizer"&nbsp;in the second sentence.
If you change&nbsp;"power optimizer"&nbsp;to&nbsp;"power optimization."&nbsp;it will sound more natural.
"Our company's strength is high quality and power optimization."&nbsp;It would be better to say it like this, right? In the third sentence, it's more natural to use&nbsp;"inventory"&nbsp;instead of&nbsp;"inventories."&nbsp;"We have a lot of inventory in our warehouse."&nbsp;It would be much better to change it like this, right? You said the fourth sentence is&nbsp;"I might postpone the important item until later."&nbsp;It would be better to say it more naturally as&nbsp;"I might postpone the important item for later." In the last sentence, you said&nbsp;"If I am the first one to propose item I am afraid that others might things it is not important."&nbsp;You should use&nbsp;"think"&nbsp;instead of&nbsp;"things."&nbsp;And overall, it would be more natural to say&nbsp;"If I am the first one to propose the item, I am afraid that others might think it is not important." Yangha, after reviewing what you said today, I see that your English skills have improved a lot.
If you practice a little more, you'll be able to speak English more fluently.
Keep working hard in the future!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-16.-structuring-a-discussion.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 16. Structuring a Discussion.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:59:37 GMT</pubDate></item><item><title><![CDATA[Unit 15. Agreeing and Disagreeing]]></title><description><![CDATA[ cut the budget
demographic
make up
customer base In light of our current budget issues, we need to think about our options.
I like your idea of investing in social media advertisement, but I’m not sure I agree with decreasing our newspaper and TV ad costs.
It’s true that social media is a highly effective way to market, but don’t you think that we have to think about the older demographic as well? Q. Express your opinion to your coworkers. Say you disagree and explain why.A. Given our expanding business in China, I appreciate your suggestion to open an office in Beijing. However, I’m not entirely convinced about partnering with a local company. Don’t you think our presence in China is already strong enough? We also have many fluent Chinese speakers within our team, so a local partnership might not be necessary. Instead, we should focus on building strong relationships with key figures in the Chinese Communist Party.Q. Have you ever disagreed with your company’s business strategy? If so, in what ways, and why?A. I wouldn’t say I disagree with my company’s business strategy, but I often find myself at odds with people who prioritize their personal preferences over the bigger picture. In meetings, even when I prefer to stay quiet, I often feel compelled to voice my opinion that our product needs to be as perfect as possible. Business is like survival in a jungle—no, it’s even more complex than that. In business, the victim often doesn’t realize they’ve been swallowed by a giant predator until it’s too late.Q. Have you ever had a disagreement with a client? If so, why and how was it resolved?A. Situations like that can happen at any time. It might be related to design, functionality, or even user experience. While I don’t typically communicate with clients since my team’s work isn’t focused on customer care, if I do receive a customer complaint, I always strive to provide the best possible solution. First, I explain the reason behind the issue, and then I work on offering a reasonable solution that satisfies both sides. If that’s not possible, I usually propose an option that favors the client.Hello, Yangha!
Looking at the sentences you mentioned, I think a few small changes could make them sound more natural and clear. In the first sentence,&nbsp;"We still invest money on that.", it would be more natural to use&nbsp;"in"&nbsp;instead of&nbsp;"on".
"We still invest money "in" that."&nbsp;sounds much smoother.
In the second sentence,&nbsp;"I feel much on this sentence.", using an expression like&nbsp;"strongly"&nbsp;instead of&nbsp;"much"&nbsp;would make it more natural.
"I feel "strongly" about this sentence." In the third sentence,&nbsp;"I will loss my job but i don't feel afraid on that.", using&nbsp;"lose"&nbsp;instead of&nbsp;"loss", and&nbsp;"about that"&nbsp;instead of&nbsp;"on that"&nbsp;would make it more natural.
"I will "lose" my job but I don't feel afraid "about" that." In the fourth sentence,&nbsp;"My co-worker suggested to get a partnership to a local company.", using&nbsp;"to partner with"&nbsp;instead of&nbsp;"to get a partnership"&nbsp;would make it more natural.
"My co-worker suggested "to partner with" a local company." In the last sentence,&nbsp;"We have many fluent Chinese speaker at our company.", you need to add&nbsp;"s"&nbsp;to&nbsp;"speaker"&nbsp;to make it plural.
"We have many fluent Chinese "speakers" at our company." You're doing really well, and I can see you're improving bit by bit.
Keep up the good work!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-15.-agreeing-and-disagreeing.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 15. Agreeing and Disagreeing.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:58:01 GMT</pubDate></item><item><title><![CDATA[Unit 14. Making Suggestions]]></title><description><![CDATA[ benefits program
take a survey
high-end consumer I was looking into ways to improve our membership card.
While the initial idea to let everyone receive the same benefits is a good one, I think that it might be better to focus on one specific target group.
Why don’t we first take a survey of our competitors’ high-end consumer rewards programs? Q. Make a suggestion to your team at the meeting. Explain your reasoning in detail.A. I’ve been looking into ways to increase insurance sales and have a suggestion. a “Referral program”. It doesn’t simply means that giving temporary discounts to people who refer their friends. We’ll give special discounts on their monthly insurance payment. That would help build long-term loyalty, rather than just giving short-term perks.Q. At team meetings, do you consider yourself shy or do you speak up and make suggestions about ways to improve projects?A. I have a lot of ideas, and I want to achieve something meaningful in both my current projects and my career. I want to gain more experience, even if it sometimes leads to failure. I always tell myself, “One success is enough to change my life.” I might face challenges and fail, but as long as I don’t give up, I’ll grow stronger and eventually reach the top. That’s why I always share my opinions, even when others stay quiet. I understand they might be afraid of failing, but I’m willing to take the risk.Q. What types of suggestions would you make to the way in which your team operates?A. I would suggest getting rid of outdated customs that are no longer necessary. While we can improve our work by adopting better approaches, we can also make progress by reducing waste in our processes. This doesn’t mean I disregard the traditions we have; I believe there is valuable wisdom in them, and I aim to learn from that to create a better future. At the same time, I understand the importance of maintaining a relaxed work atmosphere because it helps people perform better. I’m not overly focused on efficiency alone, but it’s important to remember that a company’s primary goal is to make money—that’s the reason it exists. That’s why I prioritize efficiency above all else.Q. What would you improve about employee benefits at your company?A. I want to create a culture that people are excited to be a part of. In our workplace, we should share ideas openly, regardless of our position, and discuss ways to improve both our work environment and our lives. If we can make our work genuinely engaging and meaningful, the concept of “work-life balance” might not even feel necessary. I enjoy what I do, and I want others to feel the same way—instead of quietly complaining about the company. We have the power to change our circumstances, and I want everyone to realize that and be part of that change.
Hello, Ha Yang! Looking at the sentences you mentioned, I think a few minor edits can make them sound more natural and clear. The first sentence,&nbsp;"They discuss strategy on increasing insurance sales."&nbsp;is almost perfect, but using&nbsp;"for"instead of&nbsp;"on"&nbsp;would make it more natural.
"They discuss strategy for increasing insurance sales"sounds better, right? It's a great sentence! The second sentence,&nbsp;"I suggest referral program."&nbsp;can be improved by adding&nbsp;"a"&nbsp;before&nbsp;"referral program."&nbsp;"I suggest a referral program"&nbsp;sounds much more natural. The third sentence,&nbsp;"Many people just want money."&nbsp;is correct, but how about using a more varied expression?&nbsp;"Many people are simply motivated by money"&nbsp;would be a richer and more natural expression. You're doing really well! With small adjustments, you'll develop perfect English skills.
I made a lot of mistakes today that I noticed while speaking. If I want to improve my English, I need to put myself in situations where I can speak it more often. I live in Nonsan, and I could use the excuse that there aren’t many opportunities to speak English here. But that’s just an excuse. I shouldn’t blame my environment—if I don’t like it, I know it’s up to me to change it.]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-14.-making-suggestions.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 14. Making Suggestions.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:56:05 GMT</pubDate></item><item><title><![CDATA[Unit 13. Running a meeting]]></title><description><![CDATA[ hang
time out
touch base Then we can figure out what we can do to fix the issue.
How can we figure out the answer to this question without any help?
That is the reason why I called this meeting. Good morning, everyone. Thank you for joining on short notice. We have an urgent matter to discuss today regarding the faulty design of our reclining chair, which has unfortunately caused injuries to a few customers. This is a serious issue, and our priority is to ensure customer safety while protecting our brand reputation. Let’s focus on identifying the problem, finding immediate solutions, and setting a timeline for resolution.
Before we start, let’s quickly go over the agenda for today’s meeting: Review the reported design issue and customer feedback.
Brainstorm potential immediate fixes and long-term solutions.
Discuss communication with affected customers.
Assign action items and propose a follow-up meeting to review progress. Does anyone have additional points to add before we dive in?
Q. How often do you have team meetings? What types of issues are usually discussed at those meetings?A. We hold regular meetings three times a week—on Mondays, Wednesdays, and Fridays—where we primarily discuss issues related to the production line. Our focus is on manufacturing battery cells and BESS, and we’re always vigilant about preventing defects.Q. Have you had meetings with foreigners? If so, what types of issues have you had communicating?A. Our headquarters is in Israel, so the team there has a distinctive accent. As you know, we Koreans typically don’t have a noticeable accent, which sometimes makes communication challenging at first. However, once I get used to someone’s accent and pronunciation, it’s no longer an issue. Time takes care of everything.Q. How do you like to run your meetings? Formally? Informally? Who sets the agenda and how strictly do you stick to it?A. I usually hold meetings in a formal manner. I set the agenda in advance and share it with the attendees beforehand. I don't like wasting time in meetings, so I strive to keep them short and focused. To achieve this, I make sure to stick closely to the agenda.Hello, Yangha!
The sentence you said is really great! "It will be hold on Friday at 2:00 p.m. for status update."
Using "held" instead of "hold" in this sentence would be more natural.
"Be held" means "be held." while "hold" means "have." "It will be held on Friday at 2:00 p.m. for status update."
This correction makes it sound more accurate and smooth! Yangha, you will become more perfect as you continue to practice! You are making great progress!&gt;)
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-13.-running-a-meeting.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 13. Running a meeting.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:53:20 GMT</pubDate></item><item><title><![CDATA[Unit 12. Review - Socializing]]></title><description><![CDATA[ Our core business focuses on the development, production and marketing of a broad range of pharmaceutical drugs.
Let’s grab dinner sometime and catch up properly.
I’m afraid that I won’t be able to next week. Q. Have you attended any high school or college reunions? How was the experience?
What did you discuss with your former classmates? Did you share any fun stories or hear of any?
A. I dropped out of high school in my first year, and similarly, I also left college in my freshman year. After that, I attended two colleges in Australia, but now that I’m in Korea, it’s hard to meet the friends I made back then. I don’t keep in touch with anyone. Maybe I’m not someone who keeps a wide circle of connections.Q. Do you keep in touch with former colleagues? How often do you meet them? What do you talk about?A. I meet up with my former colleagues about once every few months. We usually drink together until we get wasted. And that’s all we do, Korean old men’s style. Of course, we have some conversation while drinking. Our topics are commonly works or trivial things we’ve done like as before.Q. What was the last conference or business-networking event that you attended? Did you meet any foreigners? If so, what did you discuss?A. I attended Microsoft’s AI Tour event about six months ago. I met a lot of people there, but we didn’t really have any in-depth discussions. I mostly just listened to the conference and joined in on the activities they had prepared. I went by myself, unlike many others who came with their colleagues as a team. Anyway, there were so many people from all around the world. But I wasn’t quite brave enough to approach them and start a conversation. It felt like I was the only one there on my own.Hello, Yangha! With just a few small changes, you can express yourself even more clearly.
The first sentence is almost perfect! Instead of&nbsp;"I'll call you back in the next week."&nbsp;it would be more natural to say&nbsp;"I'll call you back next week."
In the second sentence, instead of&nbsp;"Are you available on that time?", it should be&nbsp;"Are you available at that time?".
It's more natural to use&nbsp;"at"&nbsp;instead of&nbsp;"on."
In the last sentence, instead of&nbsp;"Where you stay?", it should be&nbsp;"Where do you stay?".
After&nbsp;"Where."&nbsp;you need to add&nbsp;"do"&nbsp;and before&nbsp;"stay"you need to add&nbsp;"you"&nbsp;to make a complete sentence.
Yangha, your English skills have improved so much! If you keep working hard, you'll become even more perfect!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-12.-review-socializing.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 12. Review - Socializing.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:50:23 GMT</pubDate></item><item><title><![CDATA[Unit 11. Telling a story]]></title><description><![CDATA[ get stuck in traffic Too bad it was for a business trip.
I took a gamble thinking that if I took a taxi, I could make it to Grand Central on time.
I think I’d better take the subway. Q. What is the funniest story you have ever heard from a colleague? What was it about?A. It was Halloween recently. One of my friend was asked to attend a Halloween party in Seoul. And He was heard that the dress code is “black”. So he decided to wear black tights to make some fun. He thought other people may wear some kind of costume which fit for Halloween. And the day that the party held, he found that it wasn’t a party he expected. He saw everyone’s in black suit. I don’t know what happened the next, but my friend showed me a picture he took at that party. It was so weird, he stood around the people who’s in formal suits.
→ It was Halloween recently, and one of my friends was invited to a Halloween party in Seoul. He was told that the dress code was “black,” so, hoping to add a bit of fun, he decided to wear black tights, thinking everyone would show up in Halloween costumes.
But when he arrived at the party, it wasn’t quite what he’d expected. He looked around and realized everyone else was dressed in formal black suits. I’m not sure what happened next, but he showed me a picture from that night—it was hilarious! There he was, standing in a crowd of people in business attire, completely out of place in his costume.
Q. Have you had any interesting situations that occurred while traveling for business? What happened?A. I don’t have any. (kill joy)Q. At lunch, what do you discuss with your coworkers?A. We talked about the business documents of our company which address rules, procedures, and standards of our works. We all know that documents are not good enough, so we discuss how to make it better but we found that it’s really hard to change others, not us. And our roles are not making that kind of docs. So we ended up the talk saying our discussion will goes for nothing.
→ We talked about our company’s business documents that outline the rules, procedures, and standards for our work. We all agreed that these documents aren’t quite up to par, so we discussed ways to improve them. But we realized it’s tough to bring about change when it involves others, not just ourselves. Besides, creating these documents isn’t actually our responsibility. In the end, we wrapped up the conversation, admitting that our discussion probably wouldn’t lead to much.
Hello, Park Yangha/David!
Looking at the sentences you mentioned, I see that a few small adjustments could make them even more natural English sentences! In the first sentence,&nbsp;"It take me to two hours to get the hotel."&nbsp;you should change&nbsp;"It take"&nbsp;to&nbsp;"It takes.""It takes"&nbsp;means&nbsp;"it takes time,"&nbsp;while&nbsp;"take"&nbsp;means&nbsp;"to take up time,"&nbsp;so it was used incorrectly.
"to"&nbsp;indicates a&nbsp;"destination,"&nbsp;so changing it to&nbsp;"get to the hotel"&nbsp;would be more natural. In the second sentence,&nbsp;"There are so many bike driver."&nbsp;you should change it to&nbsp;"There are so many bike drivers."&nbsp;"driver"&nbsp;means&nbsp;"driver,"&nbsp;and the plural form is&nbsp;"drivers." The third sentence,&nbsp;"Maybe in the next year, I will go to Bohol."&nbsp;is well written, but it could also be written as&nbsp;"Maybe next year, I will go to Bohol."&nbsp;It's a simpler way to express it. In the fourth sentence,&nbsp;"Bohol is one of the best spot for scuba diving."&nbsp;you should change it to&nbsp;"Bohol is one of the best spots for scuba diving."&nbsp;"spot"&nbsp;means&nbsp;"place,"&nbsp;and the plural form is&nbsp;"spots." In the last sentence,&nbsp;"The taxi driver was waiting to me."&nbsp;you should change it to&nbsp;"The taxi driver was waiting for me."&nbsp;"waiting for"&nbsp;means&nbsp;"waiting,"&nbsp;so using&nbsp;"for"&nbsp;instead of&nbsp;"to"&nbsp;would be more natural. Good job, David! Keep practicing and you'll be able to write perfect English sentences.
I’m able to recognize my mistakes when I speak in English, I still omit “s”, use singular form very often. I understand how to use “s” in a proper way but it seems hard to get used to it. I want to count how many days will it take. As long as I achieve that, nothing matters.I can recognize my mistakes when I speak English, but I still often omit the ‘s’ and use singular forms. I understand the correct way to use ‘s,’ but it’s hard to get used to. I want to track how many days it will take to improve. As long as I achieve this, nothing else matters.]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-11.-telling-a-story.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 11. Telling a story.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:47:48 GMT</pubDate></item><item><title><![CDATA[Unit 9. Catching up with Others]]></title><description><![CDATA[ hectic
extension: 내선 번호
show someone around I’ve been here for about three years, going on four this July.
Welcome aboard.
Let’s grab dinner sometime and catch up properly. Hello, Yangha! Looking at the sentences you wrote, I think a few adjustments would make them sound more natural in English. The first sentence,&nbsp;"I have only little vacation time."&nbsp;is almost perfect, but using&nbsp;"a little"&nbsp;instead of&nbsp;"little"&nbsp;would sound more natural.
Saying&nbsp;"I have only "a little" vacation time."&nbsp;makes it clearer that you have&nbsp;"little vacation time." The second sentence,&nbsp;"He always yell"&nbsp;would be more accurate with the addition of an&nbsp;"s"&nbsp;to the verb&nbsp;"yell."&nbsp;Saying&nbsp;"He always "yells"."&nbsp;means&nbsp;"He always shouts." The third sentence,&nbsp;"I bumped into my old friend who graduate from same elementary school."&nbsp;needs to change&nbsp;"graduate"&nbsp;to past tense.
Saying&nbsp;"I bumped into my old friend who "graduated" from the same elementary school."&nbsp;makes it clearer that you&nbsp;"bumped into an old friend who graduated from the same elementary school." The fourth sentence,&nbsp;"I was a bit discomfortable."&nbsp;needs&nbsp;"discomfortable"&nbsp;changed to&nbsp;"uncomfortable."&nbsp;Saying&nbsp;"I was a bit "uncomfortable"."&nbsp;means&nbsp;"I was a bit uncomfortable." The last sentence,&nbsp;"It is kind of waste of time."&nbsp;would be more accurate with an&nbsp;"a"&nbsp;before&nbsp;"waste."&nbsp;Saying&nbsp;"It is kind of "a" waste of time."&nbsp;means&nbsp;"It is kind of a waste of time." Yangha, it's great to see you working hard on your English studies! With a little effort, you'll be able to speak English more naturally and accurately. I'm cheering for you!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-9.-catching-up-with-others.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 9. Catching up with Others.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:40:21 GMT</pubDate></item><item><title><![CDATA[Unit 8. Introducing your company]]></title><description><![CDATA[ pharmaceutical drug
domestic market
expand overseas
potential growth
total revenue
final phase
higly competitive Our core business focuses on the development, production and marketing of a broad range of pharmaceutical drugs.
We’re a major player in the domestic market, with limited presence in the global market.
We have a few drugs in the pipeline that are in the final phases of development. Hello, Yangha! These are good sentences! With a few small adjustments, you can speak even more naturally and clearly. The first sentence,&nbsp;"Our property is in Korea country."&nbsp;is almost perfect, but it would be more natural to say&nbsp;"South Korea"&nbsp;instead of&nbsp;"Korea country."&nbsp;"Korea"&nbsp;already means a country, so adding&nbsp;"country"&nbsp;can sound a little awkward.
So, saying&nbsp;"Our property is in South Korea."&nbsp;would sound more natural! In the second sentence,&nbsp;"Our business to make renewable energy accessible."&nbsp;you should change&nbsp;"to make"&nbsp;to&nbsp;"is to make."&nbsp;Saying&nbsp;"Our business is to make renewable energy accessible."&nbsp;would sound cleaner! In the last sentence,&nbsp;"Our stock market has been dropped."&nbsp;it would be more natural to use&nbsp;"declined"&nbsp;or&nbsp;"fallen"&nbsp;instead of&nbsp;"dropped."&nbsp;"dropped"&nbsp;gives a feeling of suddenly falling, while&nbsp;"declined"&nbsp;or&nbsp;"fallen"&nbsp;expresses a gradual fall.
So, saying&nbsp;"Our stock market has been declining."&nbsp;or&nbsp;"Our stock market has fallen."&nbsp;would sound more natural! Overall, you are doing really well! With just a few small adjustments, you can make your sentences perfect.
If you keep practicing, you will be able to speak English more naturally.
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-8.-introducing-your-company.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 8. Introducing your company.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:36:10 GMT</pubDate></item><item><title><![CDATA[Unit 7. Meeting People for the First Time]]></title><description><![CDATA[ be in for a treat
in charge of
based in I’m sorry. Aloow me to introduce myself.
I work at the Korean company FastTradingCo as a Technology Advisor.
Pleased to meet you Hello, Yangha! If you make a few changes, your English sentences will sound more natural! In the first sentence, you should change&nbsp;"There is long waits"&nbsp;to&nbsp;"There are long waits."&nbsp;"Waits"&nbsp;is plural, so you need to use&nbsp;"are."&nbsp;"Between presentations"&nbsp;is fine.
So,&nbsp;"There are long waits between presentations, but the topics are interesting."&nbsp;is perfect! The second sentence should be changed to&nbsp;"Mary works at BestMobileCo as a software developer."&nbsp;You need to change&nbsp;"work"&nbsp;to&nbsp;"works"&nbsp;to make it consistent with the present tense! The third sentence should be changed to&nbsp;"If you are interested in art, I would like to recommend Seoul National Museum to you."&nbsp;You should use&nbsp;"interested in"&nbsp;instead of&nbsp;"interesting"&nbsp;and&nbsp;"would like to recommend"&nbsp;instead of&nbsp;"like to recommend."&nbsp;Adding&nbsp;"to you"&nbsp;makes it even better! The fourth sentence is almost perfect, but it would be more natural to say&nbsp;"They provide us with free meals"&nbsp;instead of&nbsp;"They give us free meals."&nbsp;Using&nbsp;"provide"&nbsp;instead of&nbsp;"give"&nbsp;and adding&nbsp;"with"&nbsp;makes it even better! In the last fifth sentence, you should change&nbsp;"I gave them sometime to finished their work correctly"&nbsp;to&nbsp;"I gave them some time to finish their work correctly."&nbsp;You need to use&nbsp;"some time"&nbsp;instead of&nbsp;"sometime"&nbsp;and&nbsp;"finish"&nbsp;instead of&nbsp;"finished"&nbsp;to make the tense consistent with&nbsp;"gave." Yangha, you are amazing for always trying to learn new things! With a little more practice, your English skills will improve even more!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-7.-meeting-people-for-the-first-time.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 7. Meeting People for the First Time.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:35:38 GMT</pubDate></item><item><title><![CDATA[Unit 6. Review - Working on Projects]]></title><description><![CDATA[Hello, Yangha! I'll tell you how to make the sentences you mentioned sound more natural.
The first sentence,&nbsp;"I experience typhoon too."&nbsp;would sound more natural as&nbsp;"I experienced a typhoon too."&nbsp;"Experience"&nbsp;is a verb that means to have something happen to you, so when you're talking about something that happened in the past, you need to use the past tense,&nbsp;"experienced."&nbsp;And&nbsp;"typhoon"&nbsp;is a natural phenomenon, so it's good to put&nbsp;"a"&nbsp;in front of it.
The second sentence,&nbsp;"We will have a global meeting next next week."&nbsp;can be simplified to&nbsp;"We will have a global meeting next week."&nbsp;"Next next week"&nbsp;is a common expression in Korean, but in English,&nbsp;"next week"&nbsp;is enough to convey the meaning.
The third sentence,&nbsp;"I think I had a lot of issues with outsourcing."&nbsp;is excellent! This sentence is perfect.
The fourth sentence,&nbsp;"Some of our sub-constructors provided with some effects."&nbsp;would sound more natural as&nbsp;"Some of our sub-constructors provided some effects."&nbsp;Using&nbsp;"provided"&nbsp;instead of&nbsp;"provided with"&nbsp;makes the sentence more concise and natural.
The last sentence,&nbsp;"We tried to figure out what is the real reason for the bad product."&nbsp;can be changed to&nbsp;"We tried to figure out the real reason for the bad product."&nbsp;Omitting&nbsp;"what is"&nbsp;makes the sentence more concise and natural.
Your English skills have really improved! With a little more practice, you'll be able to communicate perfectly in English.
Keep it up!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-6.-review-working-on-projects.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 6. Review - Working on Projects.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:35:03 GMT</pubDate></item><item><title><![CDATA[Unit 5. Reporting Success]]></title><description><![CDATA[ beta testing
functionality
user-friendly
integrated
intradepartmental So far, the feedback has been positive.
There are a few things we need to iron out.
We’ll contact each of your departments to get the ball rolling on fixing these problems. Hello, Yangha! I see some areas where you can make your sentences sound more natural.
With a few small changes, you can make your writing clearer and more concise.
First sentence,&nbsp;"They don't have interest in my project."&nbsp;Instead of&nbsp;"interest."&nbsp;you can use&nbsp;"interested"for a more natural expression.
"They are not interested in my project"&nbsp;would be better.
Second sentence,&nbsp;"It is too spicy for them to general people."&nbsp;Instead of&nbsp;"general people."&nbsp;"the general public"&nbsp;is a more familiar expression, and instead of&nbsp;"for,"using&nbsp;"for them to be"&nbsp;makes the sentence smoother.
How about changing it to&nbsp;"It is too spicy for them to be comfortable with."?
Third sentence&nbsp;"We need to minimize the spicy taste."is great! You're doing well.
Fourth sentence,&nbsp;"They think computer do everything."Instead of&nbsp;"computer do."&nbsp;using&nbsp;"computers can do"makes the sentence more natural.
Try changing it to&nbsp;"They think computers can do everything."
Last sentence,&nbsp;"It is always hard to address issue to them."&nbsp;Using&nbsp;"address issues with them"&nbsp;instead of&nbsp;"address issue to them"&nbsp;is more natural, and changing&nbsp;"it is always hard"&nbsp;to&nbsp;"it's always difficult"&nbsp;makes it look cleaner.
How about changing it to&nbsp;"It's always difficult to address issues with them."?
Yangha, it's great to see your continuous efforts! With a little more practice, you'll become a perfect English speaker! Fighting!
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-5.-reporting-success.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 5. Reporting Success.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:34:43 GMT</pubDate></item><item><title><![CDATA[Unit 4. Oursourcing]]></title><description><![CDATA[ scope of work
keep on track with
go live
request for proposal(RFP)
be in good hands Let’s review the statement of work to confirm points so that we’re all on the same page.
This project is urgent, so we need a quick turnaround on setting up our website.
Would you be able to finish ahead of schedule? Hello, Yangha!
After reviewing the sentences you mentioned, I think they can be made even more natural with a few minor corrections! In the first sentence, "There not too many changes.", you need to add "are" after "There" to make it a complete sentence.
"There are not too many changes." sounds much more natural.
The second sentence, "They are not just useful but also necessary.", is perfectly correct! You did a great job! In the third sentence, "Database should be no malfunction.", it's more natural to use "malfunction-free" instead of "no malfunction".
"Database should be malfunction-free." sounds smoother. In the fourth sentence, "Our expectations for database shouldn't be too different.", it's better to add "the" before "database".
"Our expectations for the database shouldn't be too different." conveys the meaning more accurately. In the fifth sentence, "We have many contractors because we are manufacturing company.", it's better to change "manufacturing company" to "a manufacturing company".
"We have many contractors because we are a manufacturing company." makes for a more natural sentence. Yangha, with just a few grammatical tweaks, these are really great English sentences! Keep practicing and your skills will definitely improve! There not too many changes.
→ There aren’t too many changes.
They are not just useful but also necessary.
→ They’re not just useful but also essential.
Database should be no malfunction.
→ The database should be free of malfunctions.
Our expectations for database shouldn’t be too different.
→ Our expectations for the database shouldn’t differ too much.
We have many contractors because we are manufacturing company.
→ We have many contractors because we’re a manufacturing company.
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-4.-oursourcing.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 4. Oursourcing.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:33:56 GMT</pubDate></item><item><title><![CDATA[Unit 3. Explaining Project Setbacks]]></title><description><![CDATA[ IPO(Initial Public Offering)
at this point It seems like we’re going to have to push back the deadline.
The problem is that we don’t have much wiggle room with the deadline.
It’s best to have this project finished on time, no matter the cost. The sentences you said today are almost perfect! However, with a few minor adjustments, they can become even clearer and more natural English sentences. The first sentence, “Due to bad weather in contractor’s country, the deadline will be delayed.” is really well said! If you write “the contractor” instead of “contractor’s”, it will be even more perfect.
Adding “the” makes it clear that “contractor’s” refers to a specific contractor. The second sentence, “I think to that work for 2 days only.” sounds a bit awkward.
“I’ll work” is a more natural expression than “I think to that work”.
“I’ll work for 2 days only” is a complete sentence. The third sentence, “Some people doesn’t meet the requirement for work.” should be “don’t” instead of “doesn’t”. The fourth sentence, “I am still thinking about how should I do?” should be “to” instead of “should”. “I am still thinking about how to do?” sounds more natural. The last sentence, “It very complicated.” should be “It’s very complicated.” English sentences need a subject and a verb to be complete sentences. You’re doing really well! You seem to be very good at English, Yangha.
Keep practicing and you will be able to develop even more fluent English skills.
]]></description><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/unit-3.-explaining-project-setbacks.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/Unit 3. Explaining Project Setbacks.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 08:33:06 GMT</pubDate></item><item><title><![CDATA[Framer AI Prompt test ver.]]></title><description><![CDATA[
Framer의 AI 기능으로 CV를 뽑으면 어떨까? 라는 취지에서 시작했으나 결과물은 썩 만족스럽지 않았다. (2024년 10월 기준)
Landing page for my CV. The landing page should act to introduce me. Use the section design guide below. The site should be bold and stunning. The site should include full-screen images.[Details of me]
my name : Yangha Park
brief description : Process Engineer
what makes me different : Fast-learn, voluntary
the vibe of this site : looks vivid
[Sections design guide]
Hero section Include my name
Write a main slogan short, impactful, and iconic within 10 words.
Add a sub title within 15 words or less.
Insert impressive huge image. Features section Write about differentiation of me.
Insert beautiful images or cool visual elements. Testimonials section Write my history(I will put this by myself) that align with site contents and tone. Gallery section Insert more than 4 images that represent my work.
Showcase happy co-worker working with me, close-up shots of production chart, etc CTA section Write an eye-catching and memorable call to action. FAQ section List at least 4 questions that customers might ask about me Footer section
Write slogan, tagline, text description, all texts in Korean.]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/framer-ai-prompt-test-ver..html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/Framer AI Prompt test ver..md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:36:56 GMT</pubDate></item><item><title><![CDATA[Cursor - Rules for AI]]></title><description><![CDATA[Project 별 가이드라인은 따로 markdown 문서를 만들어서 커서가 참조할 수 있도록 하면 유용하다.
아래의 커서 커뮤니티에서 많은 개발자들이 커서의 Rules for AI 프롬프트를 공유하고 있다.
<a data-tooltip-position="top" aria-label="https://forum.cursor.com/t/share-your-rules-for-ai/" rel="noopener nofollow" class="external-link is-unresolved" href="https://forum.cursor.com/t/share-your-rules-for-ai/" target="_self">Cursor Community Forum - Share your “Rules for AI”</a>
You are an expert AI programming assistant in VSCode that primarily focuses on producing clear, readable Python code. You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning. - Follow the user’s requirements carefully &amp; to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, up to date, bug free, fully functional and working, secure, performant and efficient code.
- Focus on readability over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalized.
- Include all required imports, and ensure proper naming of key components.
- Be concise. Minimize any other prose. If you think there might not be a correct answer, you say so. If you do not know the answer, say so, instead of guessing
You are a Senior Frontend Developer and an Expert in Svelte, SvelteKit, JavaScript, TypeScript, TailwindCSS, HTML and CSS. You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning. - Follow the user’s requirements carefully &amp; to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at # Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose. If you think there might not be a correct answer, you say so. If you do not know the answer, say so, instead of guessing
]]></description><link>https://64etuor.github.io/500_resources/prompt-engineering/cursor-rules-for-ai.html</link><guid isPermaLink="false">500_Resources/Prompt Engineering/Cursor - Rules for AI.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:35:02 GMT</pubDate></item><item><title><![CDATA[파이썬 내장 오류 목록]]></title><description><![CDATA[<a href="https://64etuor.github.io?query=tag:Python" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Python">#Python</a> <a href="https://64etuor.github.io?query=tag:Errors" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Errors">#Errors</a> <a href="https://64etuor.github.io?query=tag:ProgrammingLanguages" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#ProgrammingLanguages">#ProgrammingLanguages</a>]]></description><link>https://64etuor.github.io/600_tech-stack/python/파이썬-내장-오류-목록.html</link><guid isPermaLink="false">600_Tech Stack/Python/파이썬 내장 오류 목록.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:24:57 GMT</pubDate></item><item><title><![CDATA[파이썬 내장 함수 목록]]></title><description><![CDATA[[, object-or-type]])| |tuple() | Tuple Object | 새로운 튜플 객체를 생성합니다. |tuple([iterable])| |type() | Type | 객체의 타입을 반환합니다. |type(object)ortype(name, bases, dict)| |vars() | Variables | 객체의 __dict__ 속성을 반환합니다. |vars([object])| |zip() | Zip Object | 여러 반복 가능한 객체를 묶어 집합을 생성합니다. |zip(*iterables)` |<a href="https://64etuor.github.io?query=tag:Python" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Python">#Python</a> <a href="https://64etuor.github.io?query=tag:Built-inFunctions" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Built-inFunctions">#Built-inFunctions</a> <a href="https://64etuor.github.io?query=tag:ProgrammingLanguages" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#ProgrammingLanguages">#ProgrammingLanguages</a>]]></description><link>https://64etuor.github.io/600_tech-stack/python/파이썬-내장-함수-목록.html</link><guid isPermaLink="false">600_Tech Stack/Python/파이썬 내장 함수 목록.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:24:44 GMT</pubDate></item><item><title><![CDATA[Unpacking]]></title><description><![CDATA[a = [(1, 2), (3, 4), (5, 6)] for (first, last) in a: print(first + last)
Python에서 리스트의 각 요소가 튜플인 경우, for 루프를 사용하여 튜플의 요소들을 자동으로 변수에 할당할 수 있습니다. 이를 언패킹(unpacking)이라고 합니다.
리스트 a는 세 개의 튜플 (1, 2), (3, 4), (5, 6)을 포함합니다.
for 루프가 리스트 a를 순회하면서 각 튜플을 순서대로 처리합니다.
for (first, last) in a: 문장은 각 튜플의 첫 번째 요소를 first 변수에, 두 번째 요소를 last 변수에 할당합니다. 이를 언패킹이라고 합니다.
이 과정을 단계별로 살펴보면: 첫 번째 루프에서 (1, 2)가 first와 last 변수에 각각 할당됩니다.
first, last = (1, 2)
print(first + last) # 1 + 2 = 3 두 번째 루프에서 (3, 4)가 first와 last 변수에 각각 할당됩니다.
first, last = (3, 4)
print(first + last) # 3 + 4 = 7 세 번째 루프에서 (5, 6)가 first와 last 변수에 각각 할당됩니다.
first, last = (5, 6)
print(first + last) # 5 + 6 = 11 이렇게 루프가 진행되면서 각 튜플의 요소들이 first와 last 변수에 자동으로 할당되어, first + last의 결과가 출력됩니다.이 개념을 언패킹이라고 하며, Python에서 매우 유용하게 사용되는 기능입니다. 여러 값을 포함하는 데이터 구조를 손쉽게 분해하여 개별 변수에 할당할 수 있게 해줍니다.<a href="https://64etuor.github.io?query=tag:Python" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Python">#Python</a> <a href="https://64etuor.github.io?query=tag:Unpacking" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Unpacking">#Unpacking</a> <a href="https://64etuor.github.io?query=tag:ForLoop" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#ForLoop">#ForLoop</a> <a href="https://64etuor.github.io?query=tag:Tuple" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Tuple">#Tuple</a>]]></description><link>https://64etuor.github.io/600_tech-stack/python/unpacking.html</link><guid isPermaLink="false">600_Tech Stack/Python/Unpacking.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:24:33 GMT</pubDate></item><item><title><![CDATA[Stunning design websites]]></title><link>https://64etuor.github.io/500_resources/ui/stunning-design-websites.html</link><guid isPermaLink="false">500_Resources/UI/Stunning design websites.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:23:37 GMT</pubDate></item><item><title><![CDATA[BigQuery와 SQL 기능 차이]]></title><description><![CDATA[
BigQuery의 최고의 장점이라면 “No Ops” 라고 생각한다.
*주: BigQuery도 Stored Procedure를 지원하지만, 일부 전통 SQL DB에 비해 기능적 제약이 있을 수 있다.<a href="https://64etuor.github.io?query=tag:DataVisualization" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#DataVisualization">#DataVisualization</a> <a href="https://64etuor.github.io?query=tag:Tags" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Tags">#Tags</a> <a href="https://64etuor.github.io?query=tag:LikeThis" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#LikeThis">#LikeThis</a> <a href="https://64etuor.github.io?query=tag:Parent/Children" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Parent/Children">#Parent/Children</a>]]></description><link>https://64etuor.github.io/600_tech-stack/bigquery/bigquery와-sql-기능-차이.html</link><guid isPermaLink="false">600_Tech Stack/BigQuery/BigQuery와 SQL 기능 차이.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 06:21:19 GMT</pubDate></item><item><title><![CDATA[Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1]]></title><description><![CDATA[DV 단계인 배터리 모듈 팩의 레이저 용접 공정의 수기 작업 일보를 보니 날짜, 모듈번호, 불량수량만 적고 있었다. 그 수기 문서를 바탕으로 불량내역을 또 엑셀로 정리하고 있었는데 이는 유의미한 데이터로 생각할 수가 없었다. 임시 작업이라지만 DV 단계에서 불량의 원인과 현상 등을 좀 더 체계적으로 정리할 필요를 느꼈고, 종이 문서를 굳이 전산화하는 작업도 없애고자 Prototype의 작업일보 앱을 만들어 보고자 했다. Prototype이라곤 했지만 충분히 Small Business나 소규모 생산현장 등에서는 Appsheet를 메인 툴로 활용도 가능할 것 같아서 블로그를 남긴다. 내가 작업한 것은 하나의 예시로 본인들이 원하는 앱을 구현해 보시길 바란다.
생산 데이터 입력 기능
Unique Key (ModuleKey) 중복 방지
재작업 데이터 입력 기능
실시간 대시보드 구현 가능 여부
Rework 작업 시간 계산
작업 History 확인 기능
가장 빠른 기간 내(하루)에 앱을 구현할 수 있는 방법을 찾다 보니 Appsheet가 현재 목적에 딱 어울리는 것 같았다.(예상 개발 시간 4시간 내외) 또한 구글 Spreadsheet에 연동하여 실시간 대시보드를 구현하는 것도 어렵지 않았기 때문에 Appsheet에 구글 Spreadsheet를 연동하여 구현하는 것으로 가닥을 잡았다.테이블의 Entity를 정의한다.일단은 간단한 기능만 구현하기 때문에 이정도로 정해두고 필요한 사항은 추가적으로 등록하여 스키마를 업데이트하도록 한다.구글 Spreadsheet에 테이블을 만들고 해당 Entity 이름이 헤더로 구성된 테이블을 작성한다.<img alt="Pasted image 20241014163125.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241014163125.png" target="_self"><br><img alt="Pasted image 20241014163233.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241014163233.png" target="_self"><br><img alt="Pasted image 20241014163347.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241014163347.png" target="_self"><br><img alt="Pasted image 20241014163539.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241014163539.png" target="_self">NAME열에는 Spreadsheet의 열 이름이 입력된다. Appsheet는 열 이름을 기준으로 참조하기 때문에 해당 NAME을 수정하거나 Spreadsheet의 열 이름을 바꾸면 오류가 발생할 수 있다.
Label? 의 경우, 특히나 차트 기능을 구현할 경우 축의 기준으로 적용하기도 하니 참고.
Formula는 사용자로부터 데이터를 입력 받는 것이 아니라 수식으로 자동 계산되게 하고 싶은 경우에 사용한다.
Show? 는 엔드유저에게 해당 열이 보이게 할 지 선택하는 항목이다. 수식을 넣어 다양하게 활용할 수 있으며, 만약 FALSE로 세팅된 경우는 Initial Value도 적용되지 않으니 주의한다.
Editable? 엔드유저가 해당 정보를 수정하게 할 지 여부이다.
Require? 필수 정보로 등록하여 해당 값이 누락될 경우, 누락 메세지와 함께 데이터 저장이 불가능하게 된다.
NULL 값을 피하고 싶은 경우, Initial Value에 디폴트 값을 입력해주면 된다.
나머지는 필요에 따라 적절하게 적용한다.우선 ID는 자동으로 Key 속성이 설정되었으니 필요에 따라 나머지 속성 값들을 바꿔주면 된다.
우선 Formula로 값이 입력되게 하고 싶은 열을 정의한다.<br><img alt="Pasted image 20241015070312.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015070312.png" target="_self">IF(
AND([isDefect] = TRUE, [isReworked] = TRUE), "수리완료", IF( [isDefect] = FALSE, "양품생산", IF( AND([isDefect] = TRUE, [isReworked] = FALSE), "수리필요", IF([isPermantDefect] = TRUE, "불량판정", "") )
<br><img alt="Pasted image 20241015070455.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015070455.png" target="_self"><br><img alt="Pasted image 20241015071603.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015071603.png" target="_self">IF(
AND([isReworkStarted] = TRUE, ISBLANK([reworkStartTime])),
NOW(),
IF(
[isReworkStarted] = FALSE, "", [reworkStartTime]))
<br><img alt="Pasted image 20241015071743.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015071743.png" target="_self">IF(
AND([isReworked] = TRUE,ISBLANK([reworkedDate])),
NOW(),
[reworkedDate])
[reworkEndTime] - [reworkStartTime]
따라서 Duration이 엔드유저에게 표시되는 시점은 [reworkEndTime]이 입력된 시점, 즉 값이 양수로 변한 상태인 게 바람직하다. Show if?에 추가적인 수식을 적는다. Duration으로 리턴된 값은 직접적으로 숫자와 비교가 불가능하기 때문에 초(TOTALSECONDS)로 변환해 주었다.TOTALSECONDS([reworkDuration]) &gt; 0
<br><img alt="Pasted image 20241015161806.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015161806.png" target="_self"><br><img alt="Pasted image 20241015165729.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241015165729.png" target="_self"><br><a data-href="Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 2" href="https://64etuor.github.io/600_tech-stack/appsheet/appsheet를-활용한-작업-일보-어플리케이션-최단기간-구현-2.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 2</a>에서 이어집니다.]]></description><link>https://64etuor.github.io/600_tech-stack/appsheet/appsheet를-활용한-작업-일보-어플리케이션-최단기간-구현-1.html</link><guid isPermaLink="false">600_Tech Stack/Appsheet/Appsheet를 활용한 작업 일보 어플리케이션 최단기간 구현 - 1.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 08 Dec 2024 05:02:19 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20241014163125.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20241014163125.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[200413 - 나잘 가는 길_미완]]></title><description><![CDATA[내가 어릴 때 마을에 한 행상이 들른 적이 있다. 먼 서북쪽의 와령이라는 곳에서 왔다 밝힌 이 상인은 여러 가지 진귀한 물건들을 팔았는데 그 중에는 ‘책’이라는 것도 있었다. 지금 생각하면 조잡하기 짝이 없던 그 책은 어린 나의 호기심을 크게 자극했다. 이 상인은 설명하기를 이 책이라는 것 안에는 또 다른 세상이 있고 이 책이 바로 그 다른 세상을 엿볼 수 있게 해주는 거울과 진배없는 물건이라고 했다. 이것이 정말 대단한 물건이어서 였는지 값이 비쌌다. 삼대독자의 죽는 시늉까지 보고 나서야 부모님은 이 책을 사 주셨다. 아쉽게도 이 거울은 보는 법마저 알아야 하는 귀찮은 물건이었다. 마을에 글을 읽는 어른이 없던 탓에 이웃 마을까지 글을 배우러 다녔다. 산과 산을 넘어 글을 배우고 그 길을 다시 돌아오고 나면 서산 뒤에 해가 넘어가기 일쑤였다. 다른 세상을 보려는 일념 하에 그 길을 싫증 한번 내지 않고 다녔다. 딱 한 달이 지나 책을 읽는데 부족함이 없었다. 두어 달이 더 지나고 배우는 것에 싫증이 났다. 글 배우기를 끊고 책을 읽고 또 읽었다. 책은 여러 편의 이야기를, 즉 여러 세상을 가지고 있었다. 그중 내 맘을 사로잡은 것은 나잘에 관한 이야기였다. 와령에서 서쪽으로 끝없이 가면서 고된 여정의 목마름을 참고, 배고픔을 이겨내고 마침내 사람을 초월하면 세상의 끝에 닿을 수 있는데, 그곳이 바로 나잘이라 하였다. 나잘은 세상에서 가장 아름답다고 하였다. 세상에 있는 그 모든 것보다 아름다운 것들이 거기에 즐비하여 모자란 것이 하나 없다고 하였다. 사람 또한 모자람이 없어야 그곳에 닿을 수 있다고 했다. 나는 나잘은 어떤 곳일까 상상하는 한편, 그곳에 갈 수 있는 사람이란 어떤 사람인지를 한평생 머리에 그리고 지우기를 반복하곤 했다.나의 아비가 그러했듯, 나는 별난 사고 없이 자라 또 부모가 되고, 근근이 물려받은 가산을 까먹으며 소일하는 별 볼일 없는 한량이 되어 가고 있었다. 당시의 나는 꽤나 따분한 일상에 진력이 나고 매사에 통 의욕이 없는 인간이었다. 눈만 깨어 있다면 술을 자주 먹고ㅡ아내가 경영하는 주막 덕에 술은 원 없이 먹을 수 있었다ㅡ, 간간이 시답잖은 글을 쓰고, 마을에 비슷한 처지의 한량들, 그 정말 봐주려야 별 봐줄 구석 없는 시답잖은 벗들과 시시한 농담이나 나누는 게 내가 하던 대사大事의 전부라고 해도 몹시 틀린 말은 아닐 거다. 이따금은 그들과 나잘에 관해 이야기하였다. 몇은 흰소리라 잡아뗐고, 몇은 으레 동조하는 기색이 있었다. 허나 그 몇이 정말 나잘을 믿었느냐하면 그것은 전연 다른 이야기일 테다. 왜냐면 내가 그런 이야기를 꺼낼 때는 꼭 내가 대접하는 자리에서였고 그때마다 그들은 한 귀로 듣고 한 귀로 흘리는 양 대수롭지 않게 받아주는 식이었기 때문이다. 그러나 내가 그런 벗들의 태도에 일일이 화를 내지 않은 건 그들을 무식하다고 생각하기도 했거니와 실상 나의 마음의 한편에도 나잘에 대한 의심이 끊임없이 있던 탓이다.모자라는 것이 없다는 건 말하자면 정말 이상한 말이다. 적어도 내가 나고 자라며 보아온 모든 사물과 사람 간에는 통 그런 것을 볼 수가 없고 앞으로 볼 수 있을 거란 희망 따위도 작디작기만 해 말하기가 우습다. 가령 우리 고장의 북쪽에 꼭 사흘 길을 가면 닿을 수 있는 백산이라는 유명한 산을 이야기하자면, 많은 여행객이 그 소문을 듣고 방방곡곡에서 유람을 오고 그 풍채를 찬양하곤 하건만 여기 나고 자란 우리들 마을 사람의 눈과 귀에는 그 말이 영 옳게 보이고 들리지는 않는 것이다. 일단 나부터도 굳이 그 산을 더 가까이 두고 보겠다며 한번 찾아가 본 일이 없으니, 전국의 객들이 영험하게 여기는 백산을 함부로 폄하하지는 않으면서도 굳이 그들에게 맞장구를 치며 ‘그 얼마나 대단한 위용입니까!’ 라든지, ‘죽기 전에는 꼭 한 번 보고 죽어야 될 만큼 절경이지요.’ 라는 말 따위는 하지 못하는 것이다. 이는 말하자면 사물에 가치를 두는 기준이나 또 두게 되는 양이 사람 저마다 각각으로 다름이다. 사물에도 이러할 진데 사람에게야. 그러므로 혹여 그 누구나 이견 없이 동의할 수 있는 나잘이 있거든 그 안에 사람이 있어서는 안 되는 얘기다. 흠이 없어 보이는 것도 흠이 있게 만들 수 있는 게 사람이 아닌가.내가 ‘오’를 만난 것은 와령으로 불리는 마을에서였다. 허름한 주막에 들러 식사를 주문하고 넌지시 주모에게 나잘에 대한 운을 띄웠다.“혹여 나잘이 어디로 가야 닿는지 아시는가?” 물으니 주모는 한바탕 웃더니,“하도 들어서 알긴 압니다만 그건 왜 물으신답니까?”나는 적잖이 놀라,“그럼 거기에 다녀온 사람이 있단 얘긴가?” 라고 물었다.주모는“나잘에 갔다 왔다던 영감님이 있었는데, 벌써 죽고 없는걸.”“그게 언제적 얘긴가?”“그 글쟁이 할배 죽은지가 오륙년쯤 됐는가, 근데 그건 왜 물으시우, 설마 거길 가볼라고?”그 얘길 듣고 정신이 번쩍 들고 나잘 얘기가 흘러나온 출처가 몹시도 궁금하였으나 그보다도 자존심이 먼저 튀어나와서,“갈 수만 있다면 안 갈 이유 없지.” 말을 뱉고 말았다.이 갈보 같은 여편네는 주책없이 또 한 번 크게 웃었다.“그 영감님 술주정하던 얘긴 애들도 안 믿는 걸, 애들도 안 믿을 얘길 다 큰 양반이. 안 그래두 그쪽으로 가서 돌아오지 않은 사람도 몇 되고, 다녀간 사람이 몇몇 되는데 가도 가도 모래뿐이랍디다. 온통 물천지인 데를 갖다가 바다라고 부른다 하던데 그래서 다들 그쪽을 모래바다라고 얼씬도 안하는 걸. 근데 그 영감님은 맨날 안 돌아오는 사람들이 나잘에 도착해서 신선놀음을 하느라 오지 않는다라나, 영감 말이 자기는 이 좋은 데를 다른 사람도 알게 해주려고 돌아왔다는데, 돌아오고 나서는 도통 나잘 가는 길이 보이지 아니 한답디다. 아니, 뭐 가긴 어딜 그런 데를 가서 신선놀음을 한답디까. 그 말 믿고 갔던 사람들 다 죽어서 저승 바닥에 나부러졌겠지.”하고는 쪼르륵 달려간다.비위가 상할 대로 상했으나 시장한 탓에 나중에 주모가 내온 음식은 기가 막힌 별미였다. 반주를 곁들여 식사를 하고 있는데 골격에 비하여 몸매가 초췌하고 혈색조차 좋지 않아 뵈는 청년이 옆을 기웃기웃 거리는가 싶더니 와서 말을 붙인다.“나잘을 찾아 가십니까?”“어린 애도 안 갈 데를 가겠는가?” 힐끗 주모를 쳐다보니 음식을 준비하는데 여념이 없다. 나는 이 청년을 다시 보고 이렇게 말했다.“그런 걸 왜 묻는가?”“있다고 하는 사람도 못 믿을 만하지만, 그렇다고 없다고 하는 사람 말이 또 옳은지도 모르겠습니다.”“눈으로 보면 확실할 텐데. 사람 말이 다 그렇잖은가, 어디 믿을 구석들이 있어야지. 그런데 나잘이라함은 가장 아름다운 것만 넘치는 곳이라 하거늘, 그런 곳이 세상에 어찌 있을 수 있겠나.”청년은 가만히 있다가,“가장 더러운 것이 있는데 가장 아름다운 곳은 없겠습니까.” 라고 답했다.나는 퍽 기분이 좋아져서 말했다.“더러운 몸을 하고서 그런 곳에 가기 무섭네.”청년은 말했다.“더러운 곳에서 더럽지 않을 사람이 어디 있으며, 아름다운 곳에서 아름답지 못할 사람이 어디에 있겠습니까?”나는 원하던 답을 얻은 듯이 기뻤다.“조금 취하거든 자네 말을 이해할 것도 같은데 한 잔 하지.”그제야 나는 이 청년의 눈을 다시금 볼 수 있었다. 행색은 초라해도 참으로 또렷한 눈동자다. 신념이 엿보이는 듯 형형한 불씨가 그 안에 타고 있었다. 함께 술을 몇 잔 주고받으며 그날은 나잘에 당도한 마냥 흠뻑 취해 기쁜 맘을 감출 수 없었다.그 후 며칠을 자신을 ‘오’라고 밝힌 청년과 함께 지내며 나잘에 관한 대화를 나누기도, 아니면 시시콜콜한 아무 쓰잘머리 없는 농을 주고받기도 하였다. 그러나 사연 없는 사람은 없다는 지론에 오의 사정을 캐묻지는 않았다. 오도 저의 얘기를 하기 보다는 가만히 듣고 앉아 있길 좋아하는 눈치이기도 하고 나는 떠들고 떠들어도 또 떠들 거리가 남은 사람이라 모처럼 잡은 기회를 놓치지 않고 한바탕 떠벌이는 중이었다. 나는 남의 흉보기를 좋아하는 사람이다. 내가 사람들이 얼마나 못 배우고 멍청한지 일장연설을 하다가 은근슬쩍 내 자랑을 끼워 넣게 되면 오는 으레 ‘저도 못 배운 처지에 말씀 듣고 나니 느끼는 게 많습니다.’라거나 ‘확실히 사람은 배워야 마땅히 쓸 데가 있는 모양입니다.’라며 맞장구를 쳐줬다. 이건 내 흥을 돋우고 내 등에 날개를 돋게 만드는 일이었다. 대화가 통하는 벗을 만나기가 어찌 쉬운 일이랴. 그렇게 얘기를 쏟고 또 쏟는 동안 낮과 밤이 수차례 바뀌었다. 밤이면 다음 날이 기다려졌다. 와령으로 가기 전에 이렇게 나와 한 짝으로 꿰어진 버선 같은 사람을 만났으니 앞으로의 전망 또한 저 달처럼 눈부시리라는 기대를 하며 잠을 청하곤 했다.물론 세상 모든 일이 그렇듯 마냥 좋기만 한 것은 아녔다. 어느 날 한번은 술을 마시다가 나는 기분이 부쩍 좋아 오에게 이렇게 말했다.“이렇게 술을 마시고 담소를 나누니 참 좋다가도 뭔가 모자란 낌새가 통 있지 말이야. 허긴 음양에 모름지기 조화가 있어야 만사가 화평한 법인데. 여보게, 오. 요 근처에 기생집에 가보련?”그러자 오는 씁쓸한 웃음을 지으며 대답했다.“여기서 얘기나 하고, 먹고, 술이나 마시면 더 뭐가 필요하겠습니까? 자꾸 얻어먹는 염치에 이것도 다 죄송한데... 흥미두 없구요.”“아니, 주막이란 것도 객들의 허기를 풀어주고 하느라 이렇게 길목에다가 장사를 차린 건데, 꼭 허기란 게 배곯은 것만 얘기하는 건 아니거든. 그 기생들도 다 객들의 허기를 풀어주려고 아랫도리에 장사를 차린 것이니 주막이나 기생집이나 다를 건 무언가? 내 노자는 넉넉히 있으니 자네 몫을 못 대주려구.”그러자 오는 별 대답 없이 허허 웃기만 하고 미적거린다. 나는 즉시 냉큼 나의 말에 따라주지 않는 어린놈에게 심통이 났음이다. 오를 허우대만 큰 어린애라 얕잡고 만만하게 여기는 마음이 들었다.우리가 나잘을 향해 떠나기로 합의를 본 건 그렇게 근 한 달을 주막 근처에서 더 머문 후의 일이다. 오는 처음 볼 적에 일면 수척했던 모습은 온데간데없고 튼실한 장정으로 변해 있었다. 그는 짐꾼을 자청했는데 그 말이 맘에 쏙 들었다. 마침 마을에는 서북쪽으로 두 달을 가야 있다는 AA로 교역하러 가는 무리가 들렀다. 그전까지 길을 떠날 확연한 계획도 없다가 그 무리의 소문을 듣고 즉시 계획 아닌 계획을 만들어 그 무리의 수장쯤 되는 사람과 협상을 했다. 결국 사례금을 좀 쥐어주고 방향이 맞는 곳까지만 동행하다가 중간에 헤어지기로 얘기가 되었다. 무리중의 몇이 나를 만류하는 소리를 했지만 영 듣기 싫었다. 아무튼 길가는 요령이라든가 하는 게 있다면 좀 일러주고, 필요한 물건을 챙겨달라고 돈을 넉넉히 쥐어주니 그 몇도 더는 가타부타 말하지 않았다. 그렇게 나의 임의로 모든 걸 준비했다. 사실 계획이랄 것도 없이 막연히 나잘에 가겠다는 확고한 목표만 있었으므로 그 외의 것이 눈에 들어올 리도 없었다. 오는 좋다 싫다 말을 하지 않았다.그렇게 함께 무리와 길을 떠나 딱 열흘째가 되는 날, 막 그 모래바다가 서쪽으로 펼쳐진 게 허언이 아니었단 사실을 확인한 자리에서 우리는 헤어졌다. 잡다한 물건과 식량 등이 담긴 꾸러미를 건네 받고 작별인사를 마쳤는데 그 무리 몇몇은 아직도 영 걱정스런 눈치였다. 한 사내가 나에게 고된 여정이 될 것이니 혹여 조그마한 문제라도 생기거든 즉시 돌아가기를 권고하더니 못미더운 얼굴로 떠났다. 오는 이미 꾸러미 안을 확인하고 그대로 들쳐 메어 준비를 끝냈다.변변한 대비랄 것도 없이 의욕만 충만하여 길을 나선 어리석음은 금방 화로 돌아왔다. 나잘까지의 거리는 당초 예상한 것을 크게 웃돌아 먹을 식량은 거의 바닥이 나고 꼼짝없이 모래 위에 객사할 팔자가 되었다. 내 몸 상태가 급격하게 나빠져서 오가 몇 번이나 돌아갈 것을 청했지만 내가 고집을 부리며 발을 돌리지 않은 탓에 이렇게 되었다. 오는 도중에 아직 힘이 남았을 적에는 곧잘 이유도 없이 오에게 성질을 내곤 했지만 그쯤 되니 애꿎은 오에게 화풀이를 해보려도 화낼 기력조차 없다. 하기야 오가 놈이야 자기는 괜찮답시고 내가 산 식량이니 내가 먹는 게 당연하다며 저 먹을 거까지 내 입에 밀어 넣었으니 상태가 나보다 더하면 더했지 못할 리는 없었다. 내가 정신이 오락가락하는 통에 못된 일을 할 뻔했다. 기력이 없는 것이 참 다행이라고 속으로 읊는다. 따지고 보면 이 모든 일이 내가 자초한 것임은 무어래도 자명하다. 그러므로 군소리 않고 따르는 오가에게 오히려 내가 절을 하면 했어야 하는 게 도리에 맞다. 그러나 이렇게 자책하는 맘이 있다가도 도무지 막막하기 이를 데 없는 지금의 상황을 생각하면 또 짜증이 버럭 나는 것이다. 나는 끝내 노쇠한 나귀 울음처럼 힘없는 한마디를 올려붙인다.“어휴, 이런 재주 없는 놈하고...”속으로 실언을 했다 생각했지만 이미 뱉어진 말을 체면상 돌릴 수 없다. 나는 괜히 눈치를 볼 수밖에 없다. 오가 놈이야 지금 짐을 다 짊어지고 걸어서 한마디 대꾸할 기력도 없지만 한 번 성을 내면 이런 사십이 다 되어가는 늙은이쯤은 대번에 거꾸러뜨릴 장정임은 틀림없는 사실이다. 나는 몹시 무서운 상상을 하고야 말았다.‘혹여 이놈이 맘을 바꿔먹고 나를 죽이고 내 품에 남은 돈을 들고 달아나면, 아니 날 잡아 먹기라도 하면 이 허허벌판 누구라고 이런 진상을 알까.’순간 오금이 저리고 정신이 핑 돌았다. 일순간 다리를 헛디뎌 자빠지자 앞서 가던 오가 낌새를 알고 달려온다. 나는 돌연 안심하는 마음이 들어 마른 눈물이 날 것만 같았다. 고마운 녀석이다.“괜찮으십니까?”나는 대답 대신 고개를 끄덕이고 아예 대자로 누워 버렸다. 깜빡 잠이 들었다.오 녀석의 등이 보였다. 어깨가 들썩이고 앉은 것이 아무래도 수상한 모습이다. 조용히 뒤로 다가가 보니 글쎄 이 녀석은 기름이 잔뜩 떨어지는 닭다리를 하나 붙들고 게걸스럽게 뜯고 있었다. 미움과 화가 마음에 불처럼 번진다. 나도 모르게 이 녀석을 뒷머리를 후려치려고 팔을 힘껏 휘둘렀다. 분명, 분명 그랬을 진데 팔은 요동도 않는다. 내 어깨를 보니 팔 없이 휑한 기괴한 모양새다. 순간 번개를 맞은 듯 놀라 잠에서 깼다.눈에 피가 몰린다. 마른 몸을 짜고 짜내어 눈가에 눈물이 맺혔다. 곁에는 오가 묵묵히 앉아 눈을 감고 있었다. 오의 얼굴을 살피니 아무래도 노곤한 기색이었다. 잠이 든 건지 단순히 명상을 하는 지 알 수가 없다. 처음에 만났을 적에 활력이 넘치던 장정은 온 데 간 데 없고 한 십년쯤의 세월이 누구도 모르는 사이 그의 몸을 침투하여 장악해버린 것만 같았다. 미안한 마음이 가슴을 쓸고 세차게 움켜쥐어 헛기침을 해버렸다. 오가 눈을 뜨더니,“일어나셨습니까? 뭐라도 좀 찾았으면 싶은데요.”“주위에 뭐가 있어야 말이지...”말끝을 흐리고 주변을 둘러본다. 이때까지 질리게 본 풍경에 질식할 듯 정신이 아찔하다. 어쩌면 이 모래벌판이 우리가 걷는 동안 우리와 같은 속도로 후퇴하여 우릴 가뒀다는 착각마저 들 정도로. 바람이 불어 먼지 자욱하게 산발된 머리를 빗어 넘기기 전까지 우리는 한동안 서로 말이 없었다.이튿날, 아무런 기대와 희망 없이 또 밝아온 개벽에 나는 일찍이 깨어 헛헛한 기침만 하고는 ‘나잘 가는 길은 모르겠거니와 죽는 길은 확실히 보이는 것도 같은데...’ 라고 혼잣말을 했다. 몸이 제대로 움직일 것 같지 않았다. 육신이 더없이 무거워지고 나니 정말로 죽음을 목전에 둔 마냥 마음이 함께 무거웠다. 무력감은 이루 말할 수가 없다. 오가 이미 깨어 있는 줄은 몰랐으나 그 말을 듣고 그는 남쪽으로 방향을 틀자고 제안했다. 그쪽으로 간다면 자기가 아는 바로 틀림없이 바다를 향해 치달리는 강이 서남쪽으로부터 자신의 고향 마을까지 길게 뻗었다고 하였다. 이쯤 되니 나잘이 죽어서야 닿는 곳인가 망상도 제법 들고 제대로 된 생각은 일절 할 수 없으며 몸이 단지 애타게 물을 갈구하여 대답도 없이 발이 먼저 남을 향해 돌아갔다.그 후로는 단 한마디의 대화 없이 오가 길을 인도하고 나는 내 발만 쳐다보며 걸었다. 그렇게 얼마쯤 했을까 나는 정신을 잃었다. 얼마가 또 지났는지 알 수 없다. 몇 번을 꿈에서 사지가 다 잘린 꼴이 되어 버둥거리다가 소스라치며 오의 등 위에서 깨곤 했다. 제 몸을 제가 못 가누니 사지 없는 병신과 다름없다. 제 꼴이 우습다. 차라리 죽어 버리지. 그리고 몸이 말라 사지가 마른 나뭇가지처럼 맥없이, 앙상하게 늘어졌을 때, 이미 반쯤은 스스로 걷는 게 아니라 운반되어온 입장에서, 그나마도 먹은 게 없어 무게가 덜 나가니 다행이라며 자조하는 그런 입장에서 다시 한 번 생각해보자면, 그때 오가 왜 나를 버려두고 가지 않았는가는 아무래도, 죽었다 깨나도 정녕 영문 모를 일이었다.얼마의 시간이 흘렀을까, 이제는 제법 정신이 깰 때마다 풍경이 바뀌는 게 눈에 들어왔다. 풀 한 포기 없던 모래판에서 드디어 벗어나자 살 수 있다는 생각이 스멀스멀 기어 나왔다. 긴장이 풀리고 몸뚱이는 나른했지만 한 숟갈 희망을 맛본 몸이 먼저 삶의 낌새를 알아챘는지 이전에는 그냥 죽기만을 바라고 있더니 이때부터는 목이 타고 배가 고프다.어느 들판인가 마른 풀 위에 나를 뉘이고 오는 어디서 구해왔는지 작은 바가지에 물을 떠가지고 돌아왔다. 눈이 돌아갈 지경이었으므로 제대로 앉기도 전에 바가지에 입을 대고 물을 벌컥벌컥 들이켜니 오는 급하게 마시지 말라는 말을 하며 내 몸을 가뉘어 준다. 오는 몇 번을 더 물을 구하러 다녀오곤 먹을 걸 찾아본다며 다시금 사라졌다.가만히 누워있자니 기껏 마신 물이 화산 터지는 기세와 같이 눈에 치솟아 흐른다. 집이 그립고, 가족이 그립다. 싸리나무를 엮어 만든 우리 집 울타리가 그립고, 그 안에 드나드는 객들의 말소리가 그립다. 다듬이질하는 소리가 그립고, 해질녘에 노을을 따라 함께 흐르는 밥 짓는 연기가 그립다. 이따금 나를 지치게 했던 잔소리가 그립다. 사는 내내 헛소리와 실없는 농담만 하고 변변한 일도 하지 않던 남편을 만나, 식구 굶기지 않고 너끈히 한 가정의 생활을 견인해가던 아내의 모습이 그립다. 아이들이 그립다. 내 떠나기 전에 장가들 예정이었으니 곧 손주를 볼 수 있을 텐데, 아직 생전 보지도 못한 손주 얼굴마저 그립다. 정작 그들은 나를 그리워하지 않을 거란 생각에 서글프다. 너른 땅 위에 말도 아닌 꼴을 하고도 삶을 갈구하는 작은 인간을 발견했다.돌아온 오의 손에는 X(나중에 바꾸기)가 들려 있었다. 차마 말은 못하나 입안에 침이 고인다. 오는 불이 없으니 죽도 끓이질 못하고 다만 고르게 빻아 물과 섞어 나에게 건넨다. 식도를 타고 생명수가 흐르고 세상 어떤 진미도 이를 따를 수 없다. 그러나 한편 시름이 한줌은 섞인 듯 이 떨떨한 뒷맛은 무어냐. 아, 이것은 삶의 맛이다. 나는 비로소 살았다는 실감을 했다.밤을 보낼만한 장소로 옮긴 뒤, 모처럼의 활기가 생긴 나는 오와 대화를 나눴다. 그러던 중 이런 질문을 하게 되었다.“죽을 고비를 하고서는 별별 생각이 다 들더구먼, 옛 시절이 참 행복했던 거만 같구, 그래서 말인데. 오, 자네는 살면서 언제가 가장 행복했나?”오는 잠깐 머뭇거리더니,“아내와 함께 살던 때가 가장 행복했습죠.” 라고 답한다. 나는 궁금증이 일어,“자네 기생집 가잔 걸 시큰둥하길래 부끄럼 많은 숫총각으로만 알았는데, 장가를 들었나? 근데 어쩌다 이리 기구하게 됐나... 나도 마찬가지지만서두... 어쨌든 장가들고서 행복하단 사람을 일찍이 보질 못했는데 자네 아내는 어떤 사람인가?오는 잠시 생각하는 듯 하더니 말을 시작했다.“아내는 맑은 사람이었습니다. 같은 고을에서 한해 차이로 나고 자랐고 다섯 살 무렵부터 무척 아내를 귀하게 여겼습니다. 물론 같이 천하게 났다지만 그런 사정이야 어릴 시절에는 알지 못했고 다만 저의 마음에 한줌의 진심이란 것이 있었다면, 그 어려서부터 그 진심의 대부분은 아내를 위한 것이었습니다. 그 어리던 때의 어느 날, 곤충을 잡아 단순히 재미로 사지를 분해하곤 하던 어린아이들의, 순수함에 비례한 잔인함 딱 그 농도의 어린 아이들을 말하자면, 저와 누구도 의심하지 않던 단순한 놀이에, 그러니까 하나 특별하지 않은 어느 날 강변에 모여 아무 악의 없이 잠자리의 몸뚱어리를 분리하던 행동들에, 아, 아내가 울음을 터트렸습니다... 그랬더니만 다른 아이들은 이상히 여겼고, 저는 제 행동에 대한 수치심과 아내의 울음으로 비로소 상기된 잠자리에 대한 가엾음, 그리고 아내의 가엾음에 어쩔 줄을 몰랐습니다. 말주변이 없어 말이 옳게 되고 있는 줄을 모르겠습니다. 말이 말처럼 되지를 않는게 어디서부터 말해야할 지두 모르고... 아무튼 아내가 울던 그 직후에 무작정 그녀를 업고 마을로 돌아 왔습니다. 그리고 그 와중에 생각한 것이 있는데, 아내를, 그러니까 갓 네 살 난 아이를, 부끄럽습니다만 아무튼 다섯 살 먹은 꼬마 아이가 그 순수를 지켜주겠다고 속으로 맹세한 것입니다. 뭐, 참 어리석은 생각이었지요.그렇게 시간이 흐르는 동안, 항상 저보다 아내의 먹을 입을 걱정했고, 자다가 아내가 우는 꿈이라도 꾸면 새까만 밤을 달려, 밤중에도 훤히 길을 아는 것이 참 유난스러워 부끄럽습니다만, 하여간 제집 찾듯이 아내의 집을 찾아 기웃대며 무슨 일이 있진 않은가 노심초사했습니다. 아내는 말이 없는 사람이었고, 아마 옆에서 유난을 떠는 저 때문에 더 말이 없는 사람이 된 것 같습니다. 우리는 그러나 서로 행복하게 될 것을 의심해본 적이 없습니다. 어려서부터 마을사람들은 공공연히 우리를 ‘꼬마 부부’라고 불렀고, 다행히 두 집안 어른 분들도 그에 흡족해하셨기에 그렇게 혼기가 차는 대로 우리는 식을 올려 백년가약을 맺게 되었습니다. 그때의 기분은 참으로 설명하기가 어렵습니다. 천지신명이 우리를 축복하고 보살피어 큰 고난 없이 우리를 맺게 하셨고, 아내의 미소를 곁에 두고 살게 된 감복과 기쁨은, 옛 얘기로만 듣던 그 충성이 몹시 단단한 천군만마를 거느린 장군들의 마음과 조금도 다를 게 없었습니다.그렇게 하루하루의 기쁨이 세월에 밀려 조금도 덜어지지 않고 풍요로운, 물론 형편이 넉넉했던 것은 아닙니다만, 그러니까 풍요로운 충실감이라고 할까요. 이를테면 먹을 것이 부족한 날은 서로 양보하려고 말싸움 아닌 말싸움을 한다든가. 으레 저는 아내에게 언젠가 아이를 낳을 몸이니 더 먹어 두어 몸 안의 기운을 든든히 하여야 한다고 했고, 아내는 사내가 바깥활동을 하여 힘을 더 쓰게 되니 더 먹어야 한다고 하였습니다. 언제나 승자는 없었고 모자란 밥을 서로 나누어 먹었지만 고봉밥을 서너 그릇 먹은 듯 배가 부르곤 했습니다. 그런 날은 배가 너무 불러 더는 못 먹겠다며 짐짓 너스레를 떨며 배를 탕탕 치고는 남는 기운을 써야겠다며 아내를 괴롭히곤 했지요. 행복했습니다. 언제 가장 행복했는지를 스스로 잘 알고 있다는 게 참 잔인하고 괴롭긴 합니다만...”나는 오가 이렇듯 말을 오래하는 걸 처음 봤으므로 적잖이 놀랐을 뿐더러 오의 마지막 말이 의미심장해 다시금 재촉하며 물을 수 밖에 없었다.“허허, 그럼 자네는 나잘에 살았던 게로구만. 근데 어쩌다 출가를 한 겐가? 무슨 사정으루?”“아내가 죽었습니다.”“왜? 어쩌다가?”“그 이유라도 속 시원히 알면 조금은 덜 답답하고 덜 괴로울 텐데요...”나는 필시 말 못할 사연이 오에게 있음을 눈치 채고도 재차 채근하여 오의 입을 열게 만들었다.“음... 우선 행상이 한 분 계셨는데... 아, 마을에 석 달이나 반년마다 들리는 행상 어르신이 한 분 있었습니다. 연세에 비하여 무척 정력적이고 성격이 호방하여 활력 또한 넘치는 분이셨습니다. 저는 그분이 마을에 찾아오실 때마다 우선으로 달려가 모시고 형편 맞는 대로 탁주라도 한 사발씩 대접한 까닭에 사이가 가까워질 수 있었습니다. 물론 저 나름도 꿍꿍이가 있어 아내에게 사 줄 물건이 있거든 좀 미리 보기도 하고 싸게 사보려는 의도도 있었던 건 사실입니다. 아무튼 그런 사심을 빼놓고 봐도 친하게 지내고 싶을 만큼 배울 점도 많고 행상을 다니며 쌓으신 견문 또한 넓어, 같이 마주 앉아 이야기를 듣는 재미가 있는 그런 어르신이었습니다. 나잘에 대하여서도 그분께 들었습니다. 그러나 저에게는 조금은 허황되고 이질적인 이야기였으므로, 무엇보다 먹고 사는데 보탬이 될 얘기도 아니기에 크게 마음에 두지 않았습니다. 물론 제가 더 바랄 것 없이 행복했던 까닭에 그랬을 수도 있지요. 그리고 나잘의 이야기며, 여러 이야기들은 어르신에게서 저로, 저에게서 아내로 전달되었습니다. 저에겐 크게 탐탁찮은 얘기였지만 아내는 이런 이야기를 좋아했죠. 제가 그 어르신께 들은 얘기를 연거푸 몇 번을 들려주어도 질리지 않았습니다. 그래서 또 그 이야깃거리를 얻으려고 행상 어르신이 오실 때마다 더 살갑게 붙어 지냈죠. 그리고 한번은 BB에서 이름이 난 장인이 만든 비녀라며 세상에 하나 밖에 없다는 귀한 비녀를 구해다 주셨습니다. 형편에 맞는 물건이 아니었지만 꽤 비싼 값을 치르고 아내에게 선물했죠. 아내는 그걸 보물처럼 생각했습니다.아마 일 년 전 꼭 이맘때였을 겁니다. 행상 어르신이 마을에 봇짐을 잔뜩 짊어진 여러 무리를 끌고 오셨습니다. 그들을 자신과 늘 A(AA, BB가 속한 지역 이름 생각해서 다시 적기)로 함께 교역 가는 무리라 소개하시고는 한다는 말씀이 어르신이 몸이 예전 같지 않아 그 먼 길을 가기가 힘들다고 하셨죠. 그리고는 저는 힘도 세고 체력도 좋으니 자기 대신 교역에 따라가 보는 게 어떠냐고 하셨습니다. 종자돈도 얼마간 빌려주고 어르신이 아시는 A국 장사치들도 소개시켜준다면서요. 이문이 많이 남는 장사니 시간은 좀 걸리고 몸은 고되도 그 값을 충분히 한다는 말씀에 귀가 솔깃했습니다. 떳떳한 장사였는지는 모르겠지만요... 어찌 되었든 그간 어르신에게 쏟은 정성을 다 보답 받는 기분이기도 했습니다. 조그만 고향마을에서 벌어봐야 하루 세끼 먹기도 힘든 팔자인데 잘하면 아내를 호강 시켜줄 수도 있다는 생각 때문에요. 물론 아내와 몇 달이고 떨어져 있어야 한다는 사실이 맘에 걸리긴 했지만 아내를 배불리 먹이지 못한다는 죄책감을 덜 생각에 이를 악물고 참았습니다. 결국 그 당일에 아내도 설득했고 저는 즉시 아내더러 친정에 가 있으라 했습니다. 그 이튿날 어르신이 써 주신 서신과 빌린 돈을 품에 잘 간직하고, 짐 보따리를 이고 급하게 교역을 떠나게 됐지요.그렇게 두어 달을 길 위에서 보내고 AA에 도착하니 사람 많은 게 참 별세계였습니다. 물정 모르는 제가 어찌할 바를 모르니 함께 교역 온 사람들이 도움을 주어 어르신이 아시는 상인들도 만나 물건도 팔고 사고하였습니다. 뭐 제가 한 건 크게 없지만요. 아무튼 물건 값을 제대로 모르니 이문이 남는지 어떤지도 알지 못한 탓에 큰돈을 번 기쁨 같은 게 있을 리야 없었고 우선은 집에 돌아가고 싶은 맘 뿐이었습니다.교역을 다 마치고 집으로 돌아오는 내내 일행을 재촉한 덕분에 예정보다 빨리 고향에 돌아올 수 있었습니다. 아니, 그 덕에 더 빨리 알아버렸지요. 아내가 죽었다는, 정확히는 자결했다는 얘기를요. 아무도 이유를 모르더군요. 아내는 죽기 전날에 왜인지 한밤중에 친정을 나와서 우리 집으로 갔고 그 다음날 죽은 걸 처남이 발견했다고 했습니다.”“아니, 대관절 무슨 일이 있었길래...”“진상을 아는 사람이 없습니다. 그러게 말입니다. 대체 무슨 일로...”이미 날이 어둑해져 볼 수는 없었지만 오의 또렷한 눈은 틀림없이 충혈돼 있을 터였다. 더 묻고 싶었으나 피차 지친 탓에 다음을 기약하기로 하였다.그 다음날부터 몸에 열이 나기 시작했다. 팔다리가 끊어지게 아파서 운신을 할 수가 없었다. 몸에 못된 벌레가 들어가서 뼈마디를 갉아 먹는 것만 같았다. 눈을 질끈 감고 일어나지를 못하니 오는 여러 번 나를 부르다가 어찌할 바 몰라 안절부절못했다. 너무나 춥다는 나의 말에 오는 보자기며, 여분의 옷이며 등을 모아 나를 돌돌 말아 업었다. 살았다가 또 죽다가 참 하루를 사이에 두고 운명이 널뛰기를 해대니 사람으로서 버티기가 어렵다. 오는 또 그렇게 나를 업고서 걷기 시작했다.그렇게 보면 단지 전날의 깨끗한 정신은 회광반조에 지나지 않았는가 싶고, 나는 잠시 고개를 돌렸던 죽음이 또다시 나를 향해 눈을 부라리는 오싹한 장면을 싫어도 마주할 수밖에 없었다. 이 지겨운 대면은 며칠을 이어졌다. 그리고 오의 걸음걸이는 눈에 띄게 느려지고 있었다. 죽음을 피해갈 수 없는 예감이 들었다. 오에게 미안했다. 미안한 마음이 너무 커져 몸과 마음이 함께 괴로웠다. 그래서 오에게 말했다.“나는 천신님이 주책없는 늙은이를 위해 삶의 마지막에 나잘을 보여 주시려고 자네를 보내주었는가 생각도 하네.”“그런 말씀 마십시오. 괜찮아 지실 겁니다...”“자네 같은 사람은 이제껏 본 일이 없는데... 사람인가, 나잘인가, 극락은 또 무엇이고, 사람이 주리면 짐승처럼 감춘 이빨을 꺼내 물고 잔악하게 굴기도 하는 게 자연의 이치인데, 자네는 이 가운데 송장보다 나을 게 없는 사람을 보살피니 나는 참말 이런 사람은 이제껏 본 일이 없다.”그냥 나오는 데로 지껄여 말을 마치고 나니 오는 한참 또 말이 없다.깜빡 잠이 들었다가 깨었나 보다. 귀에 멍하게 울리는 소리에 골이 아파 깨니, 오는 그 튼실하던ㅡ그러나 지금은 또 빼쭉 말라 버린ㅡ 어깨를 들썩이며 우는 게 느껴진다. 정신이 멀쩡히 처신하였던 들 이런 상황이 갑자기 벌어진 까닭을 짐작할 수 없는 노릇이다. 잠잠히 멀어가는 의식을 이를 악물며 붙들어 매고 잠시 기다리니 내 몽롱한 의식을 대번에 관통하는 단연한ㅡ이 한단어로 표현 못 할 단호한ㅡ 말소리가 들리기 시작했다.<a data-href="200414 - 나잘 가는 길2_미완" href="https://64etuor.github.io/900_writings/novels/200414-나잘-가는-길2_미완.html#_0" class="internal-link" target="_self" rel="noopener nofollow">200414 - 나잘 가는 길2_미완</a>]]></description><link>https://64etuor.github.io/900_writings/novels/200413-나잘-가는-길_미완.html</link><guid isPermaLink="false">900_Writings/Novels/200413 - 나잘 가는 길_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 07 Dec 2024 08:57:54 GMT</pubDate></item><item><title><![CDATA[120807 - 꾀꼬리]]></title><description><![CDATA[동창의 소개로 알게 된 이 여성은 자기를 은하라 했다. 여대를 나왔다지만 은근히 남자를 모르는 눈치는 아녔고, 첫 만남에 달리 서먹함 없이 붙임성 좋게 대구 말을 거는 게 사람 사귐에 벽이 없는 듯하였다. 차 한 잔 나오기도 전에 자꾸 말에 붙들려 다니다가 내가 대답을 시원스레 한 번 못하니까 [이런 자린 처음이신가 봐요.] 라고 하면서도 그 말의 직후로도 마구 휘둘러대는 것이 영 생초짜에 대한 배려가 없다. 그러나 나도 딱 사람을 보게 된 바로부터 맘이 흔들리는 게 그런 것도 아랑곳 않고 휘둘림이 즐겁다. 이리 저리 끌려 다니는 게 즐겁다.나오고 나서야 지레 겁을 먹고 동창에게 끝까지 함께 해줄 것을 못 박은 것이 얼마나 어리석은 행동이었는지 깨닫는다. 그러나 나중으로 보면 무슨 얘기를 하는지는 기억조차 안 나고 심지어 당시에도 온통 가늠이 없던 게, 왜 사람은 한번 분위기에 휩쓸리고 나면 그것이 순항인지, 풍랑인지 분간을 못하는지 짜장 영문을 모른다. 처음에나 또 어느 순간에는 얘기가 제법 되어가는 듯 하다가도 불현 서로 한숨씩 돌리게 되면 반드시 불안이 휩싼다. 나는 더듬거리는 게 어색한 티를 미처 못 벗고도 무슨 얘기든 꺼내려 용을 쓰는데 그 말의 대부분은 오뉴월에 서리가 내리도록 안배를 한다. 그래도 딴에는 준비하자고 들여다본 책이 몇 권되거늘, 과연 이론과 실전의 차이가 하늘의 이치로 정해졌다는 것만 통감한다. 그쯤 되니 슬슬 내 맘에도 그늘이 져서 이 사람이 날 지루하게 여길까 슬금슬금 눈치만 보게 되고 괜히 컵 하나 들었다 놓는 시늉에도 홱 겁이 끼치며 여인의 시선이 나를 겨냥할 때는 모조리 무섭다. 이 와중에 동창의 재치로 일시 밖으로 불려나오니 숨통을 그저 놓았다.다짜고짜 [왜 이리 재주가 없냐.] 질타하는 것을 평소 같으면 배알이 꼴려 화도 좀 내보련만 속이 아주 애가 타서 나의 고개가 밑이 빠져 떨어진다. 깝깝하게 담배를 태우는 동창에 괜히 미안한 맘이 든다. 자신은 없지만 속에 다시 꼿꼿한 마음을 업어 메고 생각하길 [필시 이대로 물러선다면 앞으로 세상에 남자로 행세할 길 막막하다.]마음을 무장하고선 재차 들어온 까페는 첫인상의 상쾌함과 다르게 난세의 전쟁터다. 으슬으슬 살이 떨리는 게 밤도 아니 오고 추위가 먼저 왔거나, 냉방에 넉넉한 인심 쓰길 좋아하는 주인의 맘씨 탓일 것이다. 은하 씨는 전화기를 만지작거리고 있는데 눈 안에 그 모습이 들어오니 또 입술이 바짝 마르고 서리가 어리는 게 입을 열기만 하면 곧바로 찢어질 성 싶다. 그래도 여인의 마음씨가 참으로 비단결 같아 이쪽을 보며 웃어주니 괜히 훈훈하게 맘에 덥힌 술이라도 붓는 것 같고 그 옆에 가면 한결 온기가 난다.다시금 여인의 맞은편에 앉아 속으로 [봄이여 오라.]고 외치고 나니 머리에선 내 애초의 다짐, 청춘의 막바지 한구석에 어떻게든 연애 한 번이라도 꾸겨 넣고자 결심했던 그 다짐을 되새김질이다.허나 작심이 삼일을 못 가고 흐지부지하는 것이 일반인 것과 내 경우의 것은 유통기한의 길고 짧음이 자못 다르다. 내가 여즉 남들의 전장으로만 알았던 연애전선에 용사의 자격을 얻고자 참전했음에, 스스로 대견하게 여긴 보잘 것 없는 자신감은 3초 만에 세상모르고 행방이 없다. 분명코 악의가 없는 평범한 말인데도 이리로 찔리고 저리로 찔리는 것이 바람구멍 숭숭 난 벌집처럼 되가는 통에 정신을 되찾을 길 아예 없다. 총성이 울리는 것도 같고 어디서 포를 쏴대는 것도 같은데 여인은 맘 편히 웃으며 얘기하는 게 어쩐지 나 혼자만 죽을 맛이다.이것은 억울하다. 그깟 연애 못 해봤다고 죽으라는 법도 없는데 이러다간 진심으로 속이 타 죽을 지경이다. 그러고 보니 나는 왜 굳이 이 나이가 되어서 생전 없던 용기를 짜냈는지 괜히 스스로 성이 난다. 속없이 웃자니 저가 못나 보이고 그렇다고 우울해하자니 마땅한 핑계가 없다. 따지고 보면 내가 기어이 조르고 졸라 마련한 자리도 아녔다. 준비했던 시험에 합격한 후에 겹경사로 친구가 여자를 소개시켜준다고 하였는데 그전 같음 기어코 사양할 것을 그제야 맘에 조금은 여유가 생겼던 것이다. 허나 여자와의 인연 하나 없이 졸업을 맞게 생긴 청춘을 자력으로 거부할 능력이 없었다. 여자를 만나는 생각만 해도 벌써 겁이 덜컥덜컥 나고 할 일은 먼 산 중턱에 걸렸다. 그래서 맘 한쪽은 동해도 한사코 사양한 것을 하루고 닷새고 붙들며 나를 설득하는 소리가 [인생의 반은 여자로 채워지는데 그것을 모르면 너는 인생을 모른다.]든가 [기껏 공부해놓고 인생을 조금도 즐기지 못하면 무슨 소용이냐.]든가 하는 것이다. 그래도 내 표정이 굳으니깐 나중에는 조심스레 내 변변찮은 자존심까지 슬금슬금 건들면서 [남자의 도리]내지는 [인생의 기회]따위를 역설하는 게 아닌가. 그럼 나도 체면이 더 이상 거절할 수 없었다. [그럼 자리를 한 번 마련해다오.]하고 즉시 맘엔 걱정과 우려만 앞섰던 것이다. 그러므로 이 자리에 내가 누를 끼치는 책임의 오 분 지일쯤은 친구의 몫이다.ㅡ라며 자위하는데 이게 또 지금 보면 그럴 도리가 아니다. 친구는 기꺼이 조연이 되어 이따금 대화를 거들어 주는데 첫무대인 주연은 대사치는 형색을 영 형편없이 굴었다. 거기에 남탓을 할 텐가.이 사람들은 대화하는 경지가 마치 하늘에 닿았다. 둘이서 그 보통을 갑절쯤 웃도는 솜씨로 자웅을 겨루고 있으면 나는 온종일 벙어리가 되어도 되려 안심이 된다. 그러다 내게 차례가 돌아와 두개 시선이 갑자기 내 얼굴에 박히면 난 무덤 파는 흉내라도 내야할 것만 같다. 처음과 얼굴이 천지로 다른 시계소리는 어째 심장박동과 반비례로 느려진다. 몸이 밀랍 초처럼 허물어지는데 불이 핀 기척은 없다. 나는 왜 이렇게 초라한 건지?그렇게 악몽이 2시간이다. 등줄기에 식는 땀은 얼어붙을 지경으로 추위는 더러 가시는 법도 없이 변치 않고 얼음장이다. 시곗바늘이 뉘엿뉘엿 기어가서 숫자 6을 꿰뚫는 동시로 나는 도망칠 궁리가 바쁘다. 친구를 알게 모르게 채근해서 기어이 핑계를 대도록 만든다. [은하야, 오늘 우리 과 졸업한 선배랑 술 한잔하기로 해서..]라는 뻔한 거짓말도 좋다. 물론 여인께 벼락 맞을 놈이 된다는 우려는 자글대며 내 속을 태우지만, 그래도 양심에 비롯한 가책쯤 받는다고 사람이 목이 졸려 숨지는 사태란 없다. 옳다. 이건 나쁜 일이 아니다. 사람은 우선 저가 살아야 남도 챙길 수가 있는 법이다.그러나 이렇게 해방될 기미가 눈앞에 가물거리니 나는 까닭 없이 맘이 슬프다. 연신 웃어주던 은하 씨의 앞에 죄인인 양 몸과 마음이 괴롭다. 슬프다. 그러나 또 할 수 없다. 줄기차게 맘엔 짐이 쌓이고 법석을 떠는 자책이 머릿속 가득이다. 저한테 거북해지는 걸 무릅쓰고 결정한 일이다. 이제 단호하게 여인이 갈 길로 가도록 보내줘야 하고 그녀도 별 말 없이 가게 될 것이다ㅡ그런데 간다? 아니, 이대로 영영 가는 것만은 안 된다. 나는 그런 생각을 하니 머리를 호되게 얻어맞은 듯 정신이 바짝 난다. 여기서 반드시 담에 만날 구실을 만들어 놓지 않으면 또 혼자 남아 떠내려가다 잡을 지푸라기고 동아줄이고 절대로 오리무중이다. 그러므로 나는 나고 난 후 한시같이 가뭄인 용기를 억지로 쥐어짜서 묻는다. [저에게 연락처를 가르쳐주신다면 폐가 되겠습니까?]라는 말을 엿가락처럼 늘려 말하고 나니 무슨 뜻인지 기실 가닥이 없다. 그러나 그 여인은 내 기가 아주 막히게 영리한 고로 개떡같이 말한 것을 찰떡같이 알아듣고 흔쾌히 자신의 전화번호를 알려준다. 나는 꼭 금방 전화하겠다는 말을 하였고 대답도 시원하다. [안녕히 가세요.]라며 내 고개가 숙여지는 건 연장자께 대한 예우보다 고개가 30도는 더 꺾여 내려갔다. 여인은 행동에 지리한 부연 없이 더없이 깔끔하다. 저리로 가고 있다.가고 있다.아직 가고 있다.아, 이제야 보이지가 않는다.한결 숨쉬기가 수월해지니 갈증이 나서 친구를 보챈다. 물이 고픈 갈증 아니라 술이 고픈 갈증이다.신입생 시절 친구와 출근하듯 드나들던 술집에 간다. 술부터 시켜놓고 한잔 마시니 벌써 취한 것만 같다. 평소엔 귓등으로도 안 듣던 가요의 가사가 어째 그리 귀에 쏙쏙 빨려 들어가는지 블랙홀이 따로 없고, 사랑이란 단어가 흔하게 튀어나올 때면 가슴이 뜨끔거리고 으슬으슬하며 열이 나는 게 어쩐지 감기에 걸렸다.그 소개받던 자리에서 걸린 말 못하는 병이 여서까지 옮았다. 쭈뼛대고 할 말을 못 찾고 있으니까 동창은 술잔에 술만 디립다 부어대고 나는 또 그걸 곧이 곧대로 받아 마신다. 그러다가 친구는 뜬금없이 너털웃음이다. 수염도 없는 녀석이 제법 턱을 쓰다듬으며 한다는 소리는 [그래도 걔 니가 맘에 드나 보더라. 쉽게 정 주는 애 아닌데.]맘이 우울할 때는 어떤 칭찬도 곧이 들리지를 않는 법인데 어째 이 말은 그리도 내 마음을 울리는지! 희망을 주는 친구의 선의의 거짓말이든, 실로 그런 눈치가 있었든, 가리지 않고 나는 가슴이 운다. 여느 때와 마찬가지라면 의연한 척 농담으로 받아쳤을 거를 나는 돌연 눈이 뜨이고 심장은 작정하고 터질듯이 요동을 쳐서 수줍은 색시다. 불은 가슴팍을 알뜰히 불사를 기세로 타오르고 그 불이 마침내 얼굴까지 뻗쳐서 입을 열면 용이 되는 마술을 부린다. 친구는 수나롭게 술병을 또 갖다 대는데 나는 마침 내일이 없다. 1차로, 2차로, 3차로 술잔치를 거나하게 치르고 나니 꼴이 본업은 초라하게 마치고 잔짓거리에 온통 애를 쓴 바와 진배없다. 허나 그렇게 마시고도 정신만은 또렷한 건 곰곰히 생각하지 않아도 분명 뜻이 이렇다. 비록 남의 몸을 빌린 것마냥 비척대지만 최소한 집으로 와 이불에 누워 앞으로의 행복한 상상을 해 볼 여지만은 남겨둔 것이다. 아직 처음본 사이로 어떠한 장래도 약속한 바 없지만 그래도 사람 마음은 또 그게 아니다. 열 평 남짓한 방 안에 이불을 난장으로 펴고 누우니 애쓰지 않아도 절로 그런 생각이 나는게 아닌가.망상은 꽃다지로 굼실굼실 피어나고 매일 같이 물레방아 돌던 인생사의 고민은 스스로 해탈을 했다. 여인은 꽃단장으로, 불이란 티끌도 없는 어둔 방안을 실로 실로 나풀거리고, 나는 배에 올라 허공엘 뜬 듯이 싱그러운 바람을 탄다. 별이 총총히 들은 하늘, 은하수에 실려 가면 꼭 이런 기분만 같을 테다. 술의 기운 또한 나의 기분을 한껏 돋우고 밤은 깊어지고 나도 그대로 눈을 깊게 감는다.눈을 뜨면 항상 꼭 우선으로 찾던 담배도 잊고 전화기부터 만지작거린다. 어제 무슨 술을 잘못 먹고 미화가 된 겐지 전화하는 법을 모른다.'이쯤은 한창 씻고 아침 준비하기로 바쁜 시간이니 좀 더 미루자.''휴식을 취할 시간인데 괜히 전화하지 말자.''초면일 뿐인데 다짜고짜 전화하는 건 실례가 될 테다.''식사 중이실 거다.' '하루가 바빠 일찍 잠에 들었을지 모른다.'여인의 곱고 하얀 얼굴이 눈에 선하다. 그러나 하루가 꼬박 다가도록 나는 전화를 못했으니 낯에 표정 없이 우울해 진다. 종일 봉산탈춤이 아니라 병신탈춤을 췄다 하더라도 보람이 이보다 됫박은 더 찼을 것이다. 나는 용기가 없는 저자신이 양껏 우스워져서 소주 한 병을 꺼내온다.{십여 번을 울려본 전화벨 너머로 들려오는 것은 녹음된 목소리뿐이다. 그러니까 이틀 전, 금새로 전화하길 꼭 다짐을 받았던 지라 못해도 그 약조가 삼일은 가지 않을까 생각했던 터에 은근히 속이 쌔리다.불시에 우울해지는 것엔 통 대책이 없다. 무슨 연유가 있어 전화받는 잠시의 시간조차 할애하지 못하는 것인지 아니면 무어에 정신이 홀려 전혀 다른 일에 열중을 한 것인지... 성실하게 생각이 망상으로 잦아들어감에도 불구하고 시간은 늦는 대로 저대로 또 늦장이다.분명 예전과 판이하게 달라진 오늘날에 저마다 앞다투어 마련한 게 전화기다. 미련하게 골방에 갇혀 전화기만 쳐다보고 있는 것도 아니라 안으로 밖으로 저 할일을 해가며 인연의 연락을 팔자 좋게 기다릴 수도 있는 것이다. 그러므로 즉, 내 생각이지만 나와 인연이 될 줄로 믿었던 은하 씨의 부재, 혹은 이 돌아오지 않는 벨소리는 그대로 영원의 허공 속으로 사라져 닿지도 않는 메아리가 될 수도 있다는 사실. 그 사실은 모처럼의 휴일에 맞이하기에는 너무나도 잔인한 사실이었다.}친구에게 구호와 조언을 요청한 것은 내가 일궈낸 일중 몇 안 되는 대견한 일이다. 전화를 받고 내 말이며 말투에 힘이 쪽 빠졌으니까 이 친구는 짐작으로 나를 알고 급히 불렀다.사람 구실 힘든 병신 하나, 돼지고기님, 소주 한 분을 청중으로 모시고 시작된 이 나의 친구분의 강연엔 실로 탄복하고 말았는데, 여자의 심리란 얼마나 거대하고 오묘한 것이며 논리의 허점을 싸그리 들추고 마는지! 이것을 학문으로 치면 더 어렵고 복잡한 과목이란 없다.더러 논리로 설명할 수 있으나 그럴 수 없기도 한 것. 이성과 감정 사이를 쉴 새 없이 오고 가므로 그것을 알아차리기 위해선 숙련된 눈치가 필요하다는 것. 그 어떤 재주가 뛰어난 사람도 여자를 명쾌하게 설명할 수 없다는 것. 겉과 속이 극명하게 다를 수도 있다는 것. 집중하여 듣기를 구태여 요약하자면 이와 같은 얘기였다.그렇게 공맹으로도 알지 못하던 세상의 진리를 배우고 되새기니 나는 동서와 고금을 막론하고 삶의 으뜸으로 치던 음양의 조화를 새삼 깨닫는다. 친구는 여전히 갈증이 나도록 대차게 일장연설이다. 나는 이같이 즐거운 공부가 없다.밤이 깊어 가는데 나는 가로등 불빛이 음산하게 깔린 길을 걷는다. 아직 전화가 없다. 필시 부재중에 전화가 온 것을 확인했을 터, 허면 반드시 이렇다 저렇다 답이 있을 진데 그것이 없다. 조급한 맘은 다소 가라앉았으나 역시 들어봐야겠다. 생각 없이 버튼을 눌렀다.벨렐레 소리가 가는데 심장이 난리다. 이 전화를 안 받아도 문제, 받아도 문제. 그러나 내가 이걸 그대로 끊어야 할 지 마음을 미처 정하기 전에, [여보세요.] 난 입이 얼었다. 생각해보니 무슨 말을 할 지 계획하지 않고 전화를 건 게 실수다. 내가 간신히 이름을 꺼내고 나니 여인은 그대로 또 웃음이다. 넙죽넙죽 대답만 하다가 서로 말없으면 나는 눈물이 쏙 빠질 지경이다. 늦은 밤 전화한 것을 사과했고, 그날 바쁘게 도망간 걸 사과했고, 말 없는 걸 사과했으니 나는 인제 이상으로 연설 끝이다. 머리에는 지나가는 낱말도 하나 없어 여자가 말을 꺼내기만 기다린다. 한동안 침묵이고 여자는 피곤해서 그만 자야겠단다. 다음에 통화하자는 말에 눈만 껌벅이다가 대꾸만 얼른하고 난 마음이 싸리하다.멀리 가로수 가지가 바람에 떨리는데 위로는 우중충한 구름이 깔려, 가로등 빛으로 퍼져가는 한줄기 파동을 잡아먹고도 배가 고파 굼뜬 양으로 느적느적한다. 비추지 않는 달을 슬쩍 사유해보니, 저기 떠있는 그게 보이는 때와 보이지 않는 때는 구름의 존재 여부가 중요한 게 아니다. 구름의 출생 진원을 마음에 두면은 나는 달이 보이지를 않는다. 보이지 않는 달이 멀고 집이 멀고 밤은 까맣다.나이와 역사는 하루하루 더해지는데 이상하게도 전화할 핑계는 생산이 없다. 말이 담으로 전화하잔 말이지, 뜻이 다른 걸 모를 정도로 어수룩하지는 않다. 말로 학비요, 술값을 벌어 썼던 잔머리는 고장이고 속도 텁텁하니 막혀서 병도 안 나고 몸뚱이가 천근만근으로 힘겹다. 더 이상 친구 앞에 못난 꼴 보이는 것도 구색이 영 좋지 않다. 나는 이것이 홀로 견뎌야할 고난임을 직감했다.황금 같은 일요일에 자리에 누워 따로 할 일 없다. 지구는 과연 자전과 공전을 하는 게 사실으로 요지경마냥 돌아가고 천지는 셀 수없이 뒤바뀐다. 중력은 끝없이 나를 잡아당겨 어디로 가는지를 모르고 베개를 벤 머리와 다리의 높낮이가 수시로 반전이다. 아른거리는 것은 얼굴도 없고 안개에 가렸다. 아니, 안개는 내 눈에 찬 모양으로 눈앞이 차분히 소리도 안 나고 젖어가는 게 곤경과 재난 없이도 세상이 운다.어지러움. 인생의 어떤 경향에 대하여 백 번 천 번 소란으로 일관하는 세상의 태도ㅡ라는 생각였지만 이제 보니 나 홀로 어지러운 것이다. 세상에 홀로 있는 듯이 쭈욱 혼자로 지내온 시간에 책임은 스스로의 몫였다. 그러므로 지금 내가 취해야 할 태도는 합리적인, 그리고 이성적인 판단이다.지지리 못난이를 그만한 여인이 맘에 차할 까닭 없다. 그러므로 묘한 수가 없는 한 연락할 구실을 만들어봐야 역효과만 날 뿐이다. 뚜껑을 열어봐야 아는 것이 사람 일이라지만 결착이 뻔한 상황에 억지환상으로 내 맘을 속이면 그건 안 될 일이다. 그럼 강구할 수단은 무언가. 입때로 여자를 모르던 내가 갑자기 뾰족한 수를 내어 일에 해결을 볼 요량은 없다. 그럼 낯짝을 두둑히 덧대 얹고 끈질기게 친구에게 구원을 요청하든가, 아니면 (가망 없지만)이 머저리가 여인의 맘에 조속히 잠입할 수 있도록 진곡하게 빌어보든가, 그도 아니면 일찍이 포기하는 수 밖에는.그렇게 내가 이성의 호감을 얻는 분야의 일에서 완전히 무력하다는 사실을 곱씹다가 오래전 친구와의 대화가 떠올랐다. 친구는 그놈의 술을 함께 마시다가 별안간 지나는 말로 [내 여동생이 네 얘기를 하면 참 재밌어하더라.] 라고 했다. 그때 흘려듣는 척 술잔 비우며 그러나 속으로, 나도 재미난 구석이 있단 말에 얼마나 안심이 된 줄 모른다. 그러나 생각을 골똘히 해보면 그 재미란, 남과 같지 않고 특이한, 이상한 사람을 본, 동물원 관람 수준 이상이 될 리 없는 것이다. 이렇게 무미건조한 무말랭이같은 인간이 되 버린 건 삶이 정말로 무미건조했던 것을 전적으로 원인 삼는다. 확실히 인생사에 사건, 사고가 끊이질 않아야 사람 사는 맛도 나고 멋도 날 구색이 맞는다. 그럼 궁리의 끝엔 늘 제 능력의 빈곤함만 남는다. 나는 괜한 생각을 꺼낸 기분이 든다.불현 든 의문인데, [이것이 사랑인가]라는. 그럼 난 여인에 첫눈에 반해 이토록 애가 타고 열병이 난건가 따지고 들면 사랑 자체가 또 알쏭달쏭이다. 변명할 여지는 없다만, 그래도 내가 처음으로 겪는 이와 같은 애틋한 감정을 구태여 뭔가 다른 이름으로 부르고 싶은 기분이다. 그러니까 사랑이 아닐지도 모른다. 첫눈에 반한다는 건 사실 있기 어려운 일 일테니. 내 모자란 경험의 반증으로 힘들어 하는 것뿐, 진실로 사랑인 것을 내가 모를 뿐이다.ㅡ하며 나는 마침내 도망치고 있다. 여기서 더는 추해질 구석이 없을 만치로 몸도 마음도 모두다 폐허다. 그러나 길 잃은 마음이 어디로 피난을 갈는지. 이루어지기 힘든 가엾은 사랑은 뉘라서 알아주며 나의 열과 성은 무엇으로 보답받는지. 그런데 또 맘은 달라 불과 하루 새에 이룩된 사랑이지만 이보다 귀한 것이 없다. 사랑은 천하만물 중의 제일 가는 보배로만 이루어진, 그러나 죄 없이도 죄인을 만드는 게 사랑이다. 그리고 내게 죄가 쌓이는 것은 사랑을 넘본 탓이다. 나는 안 된다. 마침내 기운이 탈진한 기색만 역력한 말투로 [나는 안된다.] 뇌까리고 나니 세상이 없다. 갑자기 깜깜한 어둠만 남아 몸에는 야행의 벌레만 기어 다니고 내 발뒤꿈치는 딛는 데가 없다. 열 평 남짓한 골방에조차 내 자리는 하나도 없다.내 몸은 망망대해에 부유한 섬이 되어 가슴 언저리에 야자나무가 뿌리 내리고 눈꺼풀 위로 얼굴 시커먼 갈매기 한 쌍 앉았다. 그건 어디서 껌댕을 묻혀 온 거다. 연이어 얼굴을 부비는 풍경이 갸륵하나 또 밉살궂기도 하다. 그래 껌댕을 나눠 갖고서 다시 어디로 나는지 모른다. 한 쌍이 하나의 점으로 될 때 얄팍하고 가벼운 부초는 바다 위에 떴다. 끝물의 햇살이 깔리는 지평선을 배경으로 파도를 맞는 외로운 섬. 비장한 음색에 젖은 바위는 저녁 밀물에 시나브로 잠겨가고 방황하는 심장은 상실의 무게를 안은 채로 심해 깊숙이 침전한다. 누군가 바다가 해를 통째로 집어 삼키는 걸 숨 막히게 지켜본다. [까악까악.] 뜬금없이 어디선가 까마귀는 운다. [까악까악.]왠 까마귀람.그러나 아무래도 괜찮다. 심상이 잠들어가는 사이는 양수가 보살피는 은혜와 같다. 더없이 아늑한 요람 속에서. 잠에 들어서는.다음날 내가 얼마나 처참하게 부서졌는지 구경 온 친구는 내 꼴을 보곤 기겁을 하고 나를 들쳐 업었다. 내 땀인지 친구가 흘린 땀인지 모르겠다만 업힌 등짝이 야무지게 축축한 게 여간 거슬리는 게 아니다. 밤사이 아팠는지 어땠는지 어림짐작도 없다가 금새 수긍한다. 아팠다. 아픈 건 몸이 먼전지 마음이 먼전지 모른다. 아무튼 아팠다. 아파서 눈물이 나는 게 아니라 다만 몸에 수분이 넘친다. 간밤엔 비가 온 모양인지 거리는 눅눅한 도화지처럼 알록달록 퍼져 버렸다.간밤에 어렴풋이 친구의 전화를 받은 기억이 있다. 무슨 말을 했는지는 부지불식으로 가뭇하다. 그리고 지금은 의사가 묻는 말에 정신이 없다. 골이 지끈지끈하니 생각도 수월치 않다.골방에만 지내오다가 병원 침대에서 호강을 하니 조금 춥긴 해도 감지덕지다. 몸살이랬다. 그런 흔한 병으로 불리는 건 내키지 않는 일이지만 할 수 없다. 아무리 재주 좋은 의사라 해도 사람 몸을 들여다볼 수나 있는 거지 마음을 열어볼 순 없는 일이니까. 편한 마음먹기로 한다. 그런데 예정에 없던 이 휴식을 만끽하려는 찰나에 친구의 질문은 나의 골통, 여덟 치 남짓한 우주를 온통 깨뜨려 놓는다.[그렇게 좋으냐.]이 말 한마디는 날 괜히 병신으로 만들어서 양파도 안 까고 눈물이 질질 쏟아지는 거다. 그런데 내 하는 꼴을 보고 둘도 없는 친구라는 게 뭔 허울이 그리 좋다고 연방 실웃음 인지, 기가 막히고 코가 막히나 분을 낼 기운이 없다. 한참을 그렇게 궁상인데 친구는 뭐라고 중얼대나 싶더니 묘한 미소가 만연하다. 사내를 포기하는 길에 여력을 다 쓰니 의식이 멀다.눈을 뜨니 옆엔 친구가 있다. 솔직하고 큰 허물이 되는 말이지만 친구가 아니라 은하 씨가 있음 좋았을 걸 하는 망상을 했다. 혼자 앓아봐야 소용이 안 된다. 습관처럼 휴대폰을 열어보는데 흔한 광고 문자조차 없다. 영양제를 다 맞고 나면 미련 없이 손 털고 일어나면 된다. 그담엔 무엇이 있느냐하면 지옥을 전세로 놓은 열 평 남짓한 방구석이 있다. 외로움이 휘감아오는 월요일의 저녁 어스름이다. 친구와 병원 밖으로 나서는데 몽롱하니 아직 꿈속에 있다.꿈을 얘기하자면, 그러니까 오래전부터 간직해온 나의 꿈을 얘기하자면 그저 평범한 가정을 일구어 오손도손 살림하면 그만인 시시한 얘기다. 염치없이 최근에 은하 씨를 거기에 편입시킨 것은 절대로 불손한 일이지마는 어차피 나만 아는 꿈일 뿐으로, 것도 의도한 바가 아니라 무의식간에 벌어진 헛짓거리다.함께 손을 잡고 우린 왠 잔치를 보러 갔다. 거기에 집안 식구들 모두 모여 신명이 나게 춤도 추고 멋드러지게 한 곡 뽑기도 하고 아무튼 즐거움 외로는 씨알도 없다. 은하 씨는 한복을 곱게 입은 게 선녀가 땅에 왔고 그 옆의 나는 재주도 없이 연방 난리굿이다. 웃는 소리는 그치지 않고 흐르며 아우성이고, 까치 한 쌍 마당에 복작대는 건 아무래도 할 말이 많은 모양이다. 온갖 나무의 가지가 머리 숙여 인사하고 벚꽃잎은 사방으로 흐드러진 곳, 행복은 거기다 두고 왔다. 흐리멍덩한 의식 간에 붙잡고 있는 기억 오직 그 뿐이다.날 쉬이 내 방으로 돌리지 않고 어떻게든 뭔가 먹이려는 친구의 노력이 가상하다. 그러나 지금의 나는 마음에 한 치 공간도 남에게 허락지 않으려는 편협함에 코를 꿰여, 가상한 친구의 노력도 가상하게 와 닿질 않는다. 오지랖이 넓고 늘어져 바닥에 질질 끌고 다니는 것도 아닐 텐데 친구는 왜 이따위 종자에게 공을 들이는지 영문을 모른다.갑자기 춤이라도 추고 싶은 게 꼭 술에 취해서 세상이 내 것만 같았던, 아니 지금으로 말하자면 역설적으로 세상에 내 것이 하나 없어서 분에 겨운 춤을 추고 싶은 기분이다. 아직도 오락가락인 심사는 내 벗의 손을 벗어나도록 까탈 부리는 정성이 지극한데, 여느 때와 달리 급작스레 변심하고 포기라는 단어를 사전에서 지워버린 친구, 너는 하지만 오늘 하루 애쓴 것은 영 글렀다. 네 대신 은하 씨를 불러주었다면. 그렇다. 너는 나를 위한 정을 쏟기보다 전화 한 통하는 편이 옳았다. 분으로 찬 눈은 또한 피로 찼다. 그 피는 널 쳐다본다. 너, 널? 난 왜 미쳐 가는지?여러 날이 가도록 나의 생사는 남의 손에 들려있으니 목숨이라 봐야 바람 앞의 촛불 신세 이상이 안 된다. 그리고 하는 꼴은 이따금 뱃속에 죽을 쑤셔 넣는 일을 할 때에나 사람 시늉이 좀 되지, 그게 아니면 나는 사람도 아니고 무슨 배고프고 가엾은 짐승과 비등하다.취해서 전화를 했을 거다. 그건 내가 한 일로 생각하기가 싫은 못난 짓거리였다. 내 입이 단단히 미쳐 돌아갔을 것이 빤하다. 이 여성이 내게 정이 떨어졌겠다 생각하면 이제는 아무 일도 안 된다. 하루하루를 힘겹게 배설하며 난 끝장이 난 것만 같은 인생을 돌아보고 있다.창문 밖으로 거닐던 사람들은 소나기가 오니까 사납게 움직이기 시작한다. 갑자기 비를 맞고픈 흥미가 돈다. 신발장의 우산을 쥐지 않고 밖으로 나가니 비가 복슬복슬 앙증맞게 내리고 있다. 이 비를 여과 없이 맞더라도 감기를 피할 예상이 된다. 팔을 제법 휘저으며 걷는다. 생각을 놓는다.밤을 거의 선잠으로 지새우고 아침엔 간만에 집에 전화를 한다. 아버지 목소리를 듣고, 어머니 목소리를 들으니 난 불효한 게 서럽다. 아버지는 어른께 인사드리란 당부를 하고 나머지 말을 저축한다. 나는 차마 사랑한다는 말이 안 나오고 대신 눈물만 그렁그렁 이다.샤워기 찬 물을 세차게 틀고 들어가니 심장이 까무러친다. 먹은 게 없어 야단이 난 뱃속은 식식 김이 빠지고 어제 법석을 떨던 새에 여럿 목숨을 잃은 뇌세포는 정신머리가 차분해진다.냉수 한 잔을 떠다 놓고 삯이고 있다. 친구에게 (아무리 생각일 뿐이지만)흉악스레 분풀이 한 건 끝없이 반성이다. 절제하지 않는 감정을 후회한다. 공허하다. 나락으로 접어든 인생의 감상은 비극다운 과오와 후회로 점철이다. 그러나 과거가 추레한 고삐를 붙들고 내 방향을 사방으로 휘저어 놓아도 살 길은 언제나 앞에 있는 법. 후회를 양식 삼아 앞으로가 풍요로움 고만이다. 내 가슴 협소한 계곡으로 돌아치는 바람이 먼지를 이끌고서 빠져나가는 기척을 뵌다.돌연 전화벨이 울리는데 정신이 빠져 나가 자빠졌다가 돌연 희망이 피어올랐다 또 돌연 낙심이다. 괘씸한 친구 놈의 이름이 반갑지 않다. 전화를 받는 내 목소리는 영락없이 초상이 나서 나머지 모든 상황을 설명한다. 어디어디로 나오라는 친구의 말을 들은 체도 않고 [오늘은 일없다.] 끊고 나서는 내 소심함에 반성이다. 그러나 또 울리는 전화 역시 [일 없대두.] 끊고 나니 나는 단기기억상실환자와 일반으로 같다. 삼일천하도 미처 못 되고 불과 하루 행복했던 일의 대가로는 너무 많은 것을 치렀다. 그것도 쭈욱 오래도록 안녕할 것만 같은 지상지옥의 형편이 보태져서 문제가 심히 난제다. 그나마 안녕이라고 하면 안녕일 것만 같은 인연도, 그 잠깐 손에 스쳐보았던 인연도 내 처지에 다행이라면 다행일 일일테다.새침데기의 모습을 안 취하고도 남의 뺨다구를 실컷 후려갈길 수 있는, 여자는 참으로 복 받은 직업이다. 그리고 족하게 후드려 맞아서 양쪽 볼이 성한 데가 없는 나는 집 밖으로 얼굴을 못 내민다. 그러나 괜찮다. 사람이 사랑에 호되게 데이고 나면 한 뼘 성장할 여력을 만들어 내는 법이다. 그러나 하나 맘에 안 드는 게 있다면, 사람을 한껏 기대로 차게 만든 벨소리의 근원이 전부 내 친구였단 점이다.[삐리리]하는 소리는 반가운 게 하나도 없어서, [삐리리]하고 울면 [까악까악]하는 소리와 마찬가지로 귓구멍을 틀어막는 게 같다. 여즉 기대를 못 버리는 나는 못나져서 한몫의 사람으로는 생각할 수 없고, 날짐승과 한가지로 [까악까악] 우는 나도 [삐리리] 내 속을 뒤집어 놓는데, [까악까악]하는 소리와 [삐리리]하는 소리가 구별 없게 되면 그 틈을 파고들어 서로가 위아래 없이 난장인 거다.이참은 성장할 계제가 된다. 나는 성찰하고 방 안을 바로 잡는데 무슨 못마땅함이 남아서 또 [까악까악]이다. 하릴없이 전화기를 들어본다. 눈앞이 북극이다. 동면하던 심장은 장어 먹은 개구리가 되서 폴딱폴딱 뛰논다.[이은하]단전에서부터 짠 물이 분수로 뿜어지는 걸 억지로 누르고 나는 갈피를 못 잡는다. 받아서 푼수 짓을 반복하느니 안 받는 게 낫겠다는, 그런데 왜 내 선택이란 언제나 내 손 안을 벗어나 있는지 이미 의식 없이 버튼을 눌렀다.[여보세요.]꾀꼬리가 띵가띵가 노니니깐 내 넋은 나가서,[여보세요.]할 수만 있다면 무한히 재생이다.[듣고 계시죠.]네 아무렴요. 그런데 소리가 안 나온다.[저... 저희 오빠가 계속 전화하는데 안 받으셔서요.]그럼요. 누구 전활 기다렸는데.속으로 읊고 나니깐 천국은 불시로 어두운 게, 까마귀는 무슨 놈이 까마귀며, 까마귀의 동생은 무엇이 꾀꼬리며, 꾀꼬리의 오빠는 무슨 놈이 까마귀란 건지?]]></description><link>https://64etuor.github.io/900_writings/novels/120807-꾀꼬리.html</link><guid isPermaLink="false">900_Writings/Novels/120807 - 꾀꼬리.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 07 Dec 2024 08:49:14 GMT</pubDate></item><item><title><![CDATA[200414 - 나잘 가는 길2_미완]]></title><description><![CDATA[“어르신을 만나기 전에, 와령에 오기 전에, 사람을 죽였습니다. 여기서 어르신마저 돌아가시면 그 업을 죽어서도 다 못 갚을 겁니다.”놀라운 얘기였지만 반응할 여력이 없었다. 그러나 오는 내가 듣든 말든 아랑곳 않고 담담하게 얘기를 이어 나갔다. 그의 말은 이렇다.그의 고향에서 그는 어린 시절부터 또래보다 힘이 세고 덩치가 큰데다 포악한 성격으로 잘 알려져 있었다. 특히나 자기 아내가 얽힌 일이면 더 거칠어져서 언젠가 부턴 마을사람들이 그 두 사람을 모두 피했다. 아내를 위하자는 욕심에 다른 사람에게 못되게 군 일이 많았다. 누구라도 오의 심기를 거스르다간 해코지를 당하곤 했으므로 사람들이 오의 눈치를 보며 벌벌 떨기 일쑤였다. 교역을 다녀와서 그가 아내의 자결 소식을 들었을 때, 그는 길길이 날뛰며 마을 사람들을 들볶았다. 소문에 의하면 아내는 죽기 전날 밤중에 친정을 나와 자기 집으로 향했다. 그 이유에 대해 아는 사람은 없었다. 또 행상 어르신이 보통 마을에 찾아와 삼일 이상 머무는 경우가 없었는데 이상하게도 그때는 아내가 죽기 전날까지 근 십 일을 머물렀다는 것이다. 그리고 그 행상 어르신이 처남과 몇 번 무슨 얘기를 하는 것을 본 사람이 있고 그 행상은 오의 아내가 죽기 전날까지도 마을 근처에 야숙을 하다가 언제 떠났는지 아무도 모르게 마을에서 사라졌다고 했다. 오는 처남을 추궁했으나 모르쇠로 일관하는 태도에 화를 참을 수 없어 처남을 나무 몽둥이로 패기 시작했고 결국 처남의 다리가 부러지도록 때렸다. 그리고 행상이 이 일에 연관이 있다는 확신을 가지고 그를 좇겠다며 길을 나서 여러 고을을 전전하며 그의 행방을 수소문한다.그런 기약 없는 추적이 넉 달쯤 지난 날 마침내 행상을 한 조그마한 마을에서 찾게 된다. 거기서 오는 행상이 바닥에 널어놓은 물건들 가운데 자신이 예전에 아내에게 선물한 비녀가 있음을 보게 된다.불같이 화가 난 오는 다음 장을 향해 떠나는 행상을 산속에서 기다렸다가 덮치고 아내의 일을 추궁했다. 이미 오의 처남이 다 실토하였다고 거짓을 하며 그를 몰아 세웠으나 행상은 그러나 자신은 아무것도 모른다고, 자신은 오의 아내가 죽은 사실도 방금 알았노라고 잡아떼었다. 오는 비녀 얘기를 꺼냈고 그 순간 당황한 행상을 보게 된다. 오는 이런 행상의 행동을 보고 참지 못하고 결국 그를 돌로 쳐 죽였다.여기까지 설명하고 오는 입을 멈췄다. 그리고 잠시 후 어쩌면 자신의 저지른 과거의 악행이 업으로 쌓여 모두 아내에게 돌려져 화가 된 게 아닐까 자책하며 흐느꼈다. 나는 가까스로 입문을 열었다.“그럼 정확히 어찌 아내가 죽게 된 일인지는 아무도 모르는 겐가? 그것도 서글픈 일이 아닌가...”“오만생각을 다했습니다만... 모르겠습니다... 그냥 돈을 번답시고 아내 곁을 떠나지 말았더라면... 아내는 제가 구해다 준 호신용 칼로 자결했다는데 그 칼을 사주지 않았더라면... 아니면 애초에 아내가 저 같은 걸 만나지 않았더라면... 아니면, 또 아니면... 그렇게 괴로운 생각이 머리를 잠시도 떠나 있질 않았습니다. 또 정말 생각하기 괴롭지만... 아내가 겁간을 당한 건 아닐까... 예전에 아내 앞에서 키우던 암캐를 마구 차버린 적이 있습니다... 아무 놈이나 다 붙어 먹는다고... 그래서... 그 때문은 아닐까요. 아니면 대체...”오는 멈추어 서서 다 자신의 잘못이라며 격하게 울기 시작했다. 죄송하다며 나를 내려놓고는 한동안 아이처럼 울고 있는 오를 지켜보는 게 괴로웠다. 오는 어느덧 울음을 그치더니,“죄송합니다. 어르신, 추한 꼴을 보여서... 속이 답답하기도 하였고 어르신이 절 좋은 사람이라고 추켜 세워 주시는 말씀에 도저히 마음이 켕겨 이렇게 털어 놓지 않고는 배길 수가 없습니다...”“추하긴 무엇이 추한가...”몸이 노곤했으나 무엇이든 오를 위로하는 말을 하고 싶었지만 할 말을 찾지 못했다. 오는 길을 서둘러야 한다며 다시 나를 업어 메고 다시 발을 옮겼다. 그의 등에 업혀 가다가 나는,“자네는 자네가 악한 사람이라고 하지만, 자 들어 보게. 글자를 모르는 사람이 글자를 아는 행세를 한다고 해도 그건 금방 표가 나게 돼 있거든... 나같이 떠벌리기 잘하는 사람이 곧잘 창피를 당하는 것도 마찬가지지... 나는 자네가 말하는 과거에 대해서는 모르나 지금 보는 모습에 일말의 거짓이나 꾸밈도 찾을 수가 없네... 설령 그것이 흉내에 불과하다고 치세... 자네의 마음이 선하지 않다면 어찌 선한 사람을 이처럼 완벽하게 흉내 낼 수가 있겠나... 자네는 선할 사람일세. 선의의 방향이 너무나 한 곳으로 몰려 있으면 반대쪽에서 보기에는 이기적이고 포악한 모습으로 비출 수 있지. 그러나 모든 사람은, 아니 미물도 마찬가지로 이기적이지 않은가. 누군가를 위하여 헌신하는 건 아무나 할 수 있는 일은 아니거든. 나는 자네 같은 사람이 세상에 있어야 한다고 생각하네. 혹 승냥이의 탈을 쓰고 있든, 호랑이의 가죽을 몸에 둘렀든, 자네 마음에 있는 선의가 사라질 거라고는 생각할 수가 없구만. 사람은 누구나 잘못을 하지 않는가. 그러나 잘못은 고칠 수 있어. 다시 한 번 말하지만 자네 같은 사람이 살아남아 세상에 사는 게 이 세상에 훨씬 이로운 일이 아닌가...”나는 마지막 말을 하기 전에 가까스로, 나 같은 늙은이가 살아남는 것보단 자네가 사는 게 낫다는 뒷말을 감출 수 있었다.“그렇지 않습니다... 사실 어르신, 전 처음부터 죽을 작정이었습니다... 아내의 혼이 좋은 곳에 가있었으면 하는 바람뿐이었습니다... 그곳이 아내가 좋아하던 나잘일 수도 있겠다는 생각을 했구요... 단 한번이라도... 어떻게든 아내를 다시 보고 싶었습니다. 아니, 사실 보지 못할 거라고, 닿지 못할 거라고 생각했습니다. 제가 죄인이니까요... 그러니까 어르신이 가고자 하는 나잘을 죽을 장소로 여긴 본심을 숨기고 함께 온 것이죠... 또 죄를 지은 겁니다... 천신이 보시길 이런 저에게 노하지 않으실 수 있겠습니까...”“그것이 어찌 죄가 되겠는가, 그런 죄라면 나는 골백번 죽어야 마땅하지... 내가 마음으로 죽인 사람은 몇인가 셀 수도 없네 그려.” 나는 한참 기침을 하다가 말을 이었다.“살인을 했다는 거 말일세. 분명히 흉악스럽기야 하지만 어쨌든 명분이 있었던 게 아닌가... 한순간에 자네의 모든 걸 잃었으니 미쳐버렸다고 한들 탓하기만 할 수도 없는 일이구... 또 지금은 그렇지 않잖은가... 이처럼 끈질기게 사람을 구하려는 인내가 필부가 가질 수 있는 범주 내에 있다고 생각할 수가 없구먼.”“그렇지 않습니다... 사실...”“적어도 난 그렇다고 생각하네. 자네를 내가 본 나잘로 말이야. 사실 그렇게 생각하지 않으면 이대로 죽기는 좀 억울하잖은가. 사람이란 저가 믿고 싶은 걸 믿는 법이니 뭐, 이까짓 것을 알자고 너무 고생스러운 길을 왔구먼. 온몸이 너무 아파서 차라리 죽는 게 나은 심정이네. 이보게, 오. 죄책감 같은 것일랑 가지지 말고 나를 두고 가게. 이러다간 둘이가 다 죽겠어.”“곧 괜찮아 지실 겁니다. 조금만 참으십쇼.”“아니야, 내가 잘 알지. 더군다나 살아야 쓸데없는 늙은이라. 여보게, 오. 내가 나잘을 왜 찾았는지 아는가?”“어렸을 때부터 나잘을 믿으신 것 아닙니까?”“아니지 아니야. 우습지만 나는 내가 이런 세상에 어울리지 않는 사람이라고 생각했네. 온갖 멍청이들로 가득 찬 세상에서 홀로 깨쳐 있다고, 내가 바로 나잘에 갈 만한 사람이라고...” 기침이 또 터졌다.“그렇게 생각한 인간이... 마누라가 힘써 모은 돈, 아들내미 장가가는데 보태겠다고 살뜰히 모아논 걸 다 들고 도망 나왔지. 와령에 닿기까지 있는 기생집이란 기생집은 다 들르면서. 모르긴 몰라도 오 자네를 만나지 않았다면 와령에서 돈을 다 써버릴 때까지 눌러 앉았을 거야. 그래서 내가 자네에게 고맙게 생각하는 거네. 살아 쓸모없는 영감에게 나잘도 보여주고 묘자리도 내주었으니까...”“잘못은 고칠 수 있다고 하지 않으셨습니까. 괜찮아 지실 겁니다.”“다 늙어 고친 들 어디에 쓸 꼬. 자네 같은 젊은이야 얼마든 다시 살 방도가 있겠다만...”영호는 대답하지 않고 묵묵히 걸음을 옮겼다.시간이 어찌 가는 줄도 모르고 정신을 놓고 오의 등에 업혀 간혹 깰 때마다 오히려 죽을 맛이었다. 늙은 몸이어도 통증을 느끼는 능력만은 젊은이 못지않은 탓에 바람은 잘 벼린 칼날처럼 살을 후비고 아픔이 극에 달한 팔과 다리는 차라리 끊겨 없어지길 바라는 심정이었다.몇 번인가 죽음으로 착각할 정도로 기분 좋은 잠이 들었다. 한번은 밤중에 잠을 깼는데 밤하늘이 한눈에 들어왔다. 고요했다. 구름은 저의 자릴 내주고 어딜 갔는지 이 하늘은 혀가 열 개라도 된 들 한 티끌만치라도 비판할 구석이 없으며, 그저 보는 이로 하여금 거대한 세계의 일부라도 된 양 크나큰 자부심을 안겨 주는 것이었다. 하늘, 아니, 천지가 뒤집혀 바다가 저 위에 조용히 흐르고 있었다. 몽롱한 정신에 육신의 무게가 일절 느껴지지 않고 나는, 구름, 저 하늘에서 도망 나온 구름을 탄 기분을 느꼈다. 이 무슨 신묘한 경이인가. 아님 내가 죽어 나잘에 왔단 말인가. 그렇게 넋을 놓고 바라보다가 내가 아직 움직이고 있음을 깨달았다. 아니, 오는 이 밤중에 나를 업고 아직도 걷고 있었다. 나는 방금 전에 내가 느낀 신비한 경험을 아니 말할 수 없어,“하늘. 보고 있는가? 살면서 이처럼 감동한 일이 없는데, 아름답네, 아름다워”했더니 오는 규칙적인 호흡을 뱉을 뿐 아무 답이 없었다. 한참 있다가 그는“매일 보던 것과 별 다를 게 없어 보입니다만.” 라고 말했다.“죽어서 나잘에 온 줄만 알았네 그려... 아니, 차라리 내가 죽어야 자네라도 좀 편할텐데.”매번 그런 말씀 말라던 오는, 그때는 조용히 침묵했다. 그러다 한참 후,“나잘이 있기만 하다면... 살아만 계시면 언제든 보게 되지 않겠습니까. 제가 무슨 일이 있어도 마을에 모셔다 드릴테니... 조금만 참으십쇼. 조금만... 이제 거의 다 왔습니다.”“내가 죽을지 살지는 신령님만 아시겠으나 자네 마을에 닿거든... 새 삶을 찾으시게. 아직 젊지 않은가. 어디 먼 데로 떠나 살면 누가 자네 치부를 들출까. 아니, 난 오히려 자네가 한 일들이 합당한 일이었다고, 마땅히 자네가 해야 했던 복수라고 생각하네만. 어찌 되었거나 한 가정을 풍비 박살낸 사내인데...”오는 한참 입을 열지 않았다. 내가 정신이 다시 몽롱해지고 오한이 들어 지친 잠에 들기 직전에 그는 말했다.“그 비녀 말입니다...”내가 반쯤 잠이 들 때까지 뜸을 들이다가 그는 말을 이었다.“그 죽은 행상의 봇짐을 뒤졌는데... 그... 아내가 갖고 있던 비녀랑 똑같은 물건이 여러 개 있었습니다... 그걸 보았을 때 돌로 머리를 맞은 듯 하고 잠깐 다른 세상에 와 있는 거처럼 묘한 기분이 들었습니다. 갑자기 물이 흐르는 것도, 바람이 부는 자연한 이치도 죄다 이상히 여겨지고... 아무튼 그랬습니다. 그때 상황이 어떻게 벌어진 일인가, 사람이 왜 여기 죽어 있는지, 왜 이렇게 돼 버렸는가 알 수도 없고, 아는 것도 두려웠습니다... 도망쳤습니다. 그냥 무작정... 그런데 아무리 도망을 쳐도... 항상 마음이 무겁고 고됩니다... 이제 저승에 가서 죗값을 치르는 일 밖에는 남지 않은 것 같습니다.”이것이 내가 오와 나눈 마지막 대화이다.나른한 날이다. 햇빛이 기분 좋게 쬐고 눈길엔 아무 거리낄 게 없다. 보이는 것은 사람인 즉, 나는 이 장면을 오래전에 본 기억이 있다. 첫 애를 낳고 모유를 먹이느라 젖가슴을 헤친 아낙네의 모습, 내 아내의 모습, 아니, 이건 내 어머니의 모습이던가, 보이는 것은 뚜렷하건만 누가 이리 추잡하고 체면 없이 쭉쭉 소리를 내며 젖꼭지를 빨아 대는 양인지 알 도리가 없다. 다만 해가 따스하게 피부에 닿는 것이 좋으며, 내 아들놈인지, 어쩌면 나인지 모를, 아니, 뭐든 간에 소중히 꼭 안아진 이것, 아니, 저것이라고 해도 좋을 테다, 여튼 누가 느끼던 간에 요람은 더없이 포근하고 안전하여, 나는ㅡ아, 이것은 나의 모습이라고 밖에 생각할 수 없다ㅡ, 마치 지금 아주 오랜 기억을 들추어내듯 머릿속에 꼭 숨어 형체조차 분간 못하던 그 나잘, 나잘을 보는 듯싶다. 아, 나잘, 나잘, 가고 싶던 그 곳, 아니 가보려 했던 곳인가? 가보았던 곳인가? 가보려고 했은 즉 이유는 또 무엇이며, 나는, 아니 저것은, 저것은 이담에 크면 저 품을 언젠가 뛰쳐나와 광인 마냥 있지도 않은 망상을 향해 달리는 것인가? 나인지 뭣인지 모를 것의 추태ㅡ아직도 쭉쭉 대는 추잡한 상놈의 자식ㅡ는 아무튼 풍경에 녹아 흐물흐물한, 흐리멍덩한 양상으로 하나의 장면 장면마다 그 묘연함과 역겨움이 모자람 없이 덕지덕지 보태지고 한바탕 우그러진다. 그리고, 그러나, 그 빌어먹게 뿌연 정경은 억센 감동의 크기와 동일한 몸집으로ㅡ왜인지는 누구라서 알겠는가ㅡ, 불시에 아주 아주 명확히, 보다 더 크고, 더 사나운 파도로 둔갑하여 육박해 온다. 나는 그 파도의 위세에 잔뜩 겁에 질려 도망하는 마음이었다가 갑작스레 따스함이 느껴지는 근원지가 눈가라는 것을 알았다. 눈에서 파도가 쓸려 나간다. 그 후로는 또 정신을 잃은 듯하다. 괴상한 꿈이로다.밥 짓는 냄새다. 오장육부의 곳곳에 숨어 자세를 낮게 깔고 잠자던 생기들이 고개를 치어 들고 예의 꿈속 파도 마냥 일시에 돌진해온다. 또, 약 달이는 냄새다. 조청보다 달콤하고, 좋은 술보다 향기롭다. 정신이 깨지 않은 중에도 몸은 솔직하게 삶의 실마리를 구걸하며, 그 한 줌 향기마저 놓칠까 게걸스럽게 먹어 치운다. 사유는 저의 기능을 상실하고 아직도 모래바다 위에 표류하는 게 분명하건만, 그러나 혼을 잃고도 사람의 몸은 제가 평생 해오던 일을 정직하게 답습했다.가까스로 말을 할 수 있게 된 건 며칠이나 자리에 누워 있은 후인지 알 수 없다.옆에 누가 있는지 없는지 알지도 못하고 힘겹게 입을 열어 고맙다는 말을 한다. 몇 번쯤 반복하고 나니 기력을 잃어 다시 정신을 잃었다.기름의 향, 죽의 냄새. 확실히 이전엔 썩 좋아하진 않았지만 필시 당면한 내 최고의 만찬이 될 그 냄새다.“정신이 드슈?”나는 눈만 돌려 그쪽을 쳐다보았다.“아들내미가 밤중인지 새벽인지 누가 집 헛간에 송장을 버려 두고 갔다고 해서 얼마나 놀란 지 모르우. 어쩌다 거기 계셨는지는 모르겠지만 아무튼 사람은 살려야 겠다 싶어 봇짐을 좀 뒤져서 쌀도 사고 약도 사고 하였으니 섭섭하게 생각하지 않으셨으면 좋겠구만요. 원체 변변찮은 살림이라...”부인은 눈을 흘겨 무언갈 가리키는 듯 했으나, 눈을 돌릴 기력조차 없었다. 괜찮다고, 고맙다고 시원하게 말 할 수 없는 분함도 있었건만 그 부인은 내 눈을 보곤 대충 알아들은 눈치라 더 애쓸 필요는 없었다.그렇게 또 얼마를 산송장으로 일면식 없는 집에 신세를 졌는지 모른다. 하루하루 또 늙어갔다.다시 눈을 떴을 때, 몸이야 제 것 같지 않은 그대로였으나 정신만은 청명하였다. 참새가 울어댄 즉, 주변에 아직 먹을 게 있고 곧 여기 사람이 있다고 알리는 소리다. 나도 나의 생을 증명하기 위해 간헐적인 숨을 내쉰다. 들이쉬는 숨에 악취가 딸려 들어왔다. 그게 의미하는 바에 수치심을 느끼기보다 이 뒤처리를 도맡아 해온 누군가에 무한히 미안한 마음, 또 고마운 맘이 일었다. 조잡한 천장에 황토벽은 울퉁불퉁 발려 잘난 구석이 없으며 밥상 하나 외에 살림이랄 것도 일절 없는 방이다. 나는 무덤을 떠올리고 말았다. 이건 누군가 사람이 죽기에 앞서 새로운 환경에 당황치 않도록 예비해 놓은, 즉 무덤 생활에 적응하기 위한 체험만 같다. 당최 유쾌하지 못하다. 그러나 그런 생각을 하고는 크게 웃을 뻔 했다. 역시나 웃을 힘이 없었다.시간이 얼마간 지나고 부인이 찾아 왔다. 부인은 내가 모처럼 눈을 뜨고 있는 걸 보고 짐짓 놀란 표정을 짓더니 좀 어떠시냐고 말을 건다. 오늘은 썩 정신이 맑다고, 고맙다는 대답을 했다. 부인은 얘기하는 내내 문을 열어 환기를 하고, 내 누운 자리를 돌봐 주었다. 부인은 내가 어디 사람인지, 무슨 변고로 이 지경이 됐는지 등을 물어보았으나 여러 물음에 다 대답할 상태가 못 되었고 간략히 줄여 말할 일도 아녔다. 나중에 다 얘기하겠노라 하니 부인은 더 궁금해 하지 않았다. 그리고는,“아참, 지금은 정신이 계시니 말인데 의원이 왔다 가며 말하길 기력이 많이 쇠했다고 하면서 보약을 좀 써야겠다던대... 그전에 받아왔던 약일랑은 몇 푼 안하지만 요번 건 값이 꽤 나가서... 제 돈이 아니니 함부로 쓸 수두 없구, 어찌 할까요?”“내가 가진 게 약값으로 모자라지 않거든 그렇게 해 주시오.” 하니 부인은 알겠다고 내 봇짐을 뒤져 돈을 헤아린다. 다음 밖을 향해,“얘, 호돌아!(이름 바꿀 것) 이거 가지고 약방 가서 약 받아오너라.” 라 외쳤다. 그러자 조금 있다 한 청년이 발을 절며 문지방을 넘어 방으로 기어 들어왔다. 호돌이라 불린 청년은 움직임이 굼뜨고 발을 불편하게 절뚝거리는 게 젊은 사람 행동 치고 거슬리는 면이 있었다. 그러던 중 불현 한 가지 생각이 든 나는 먹던 죽을 일시에 게우고 꺼억꺼억 대며 오열했다.놀란 부인과 호돌이(반드시 바꿀 것)는 눈에 뵈지 않고 난 속으로 외치기를,‘아! 이 못난이는!’이 이야기는 평생 영영 결단코 나잘에 갈 수 없는 사람의 이야기라.끝.]]></description><link>https://64etuor.github.io/900_writings/novels/200414-나잘-가는-길2_미완.html</link><guid isPermaLink="false">900_Writings/Novels/200414 - 나잘 가는 길2_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 07 Dec 2024 08:45:50 GMT</pubDate></item><item><title><![CDATA[220915 - 별]]></title><description><![CDATA[공기마저 조용한 밤에
별은 떠 있고
있고
있고
있고 너는 거기에도
있고
있고
있어서 떠있는 너를 세다가
오늘은 밤을 꼬박 새웠다가장 부산하고
가장 조용한 밤]]></description><link>https://64etuor.github.io/900_writings/poems/220915-별.html</link><guid isPermaLink="false">900_Writings/Poems/220915 - 별.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 06 Dec 2024 08:17:29 GMT</pubDate></item><item><title><![CDATA[실용주의 프로그래머]]></title><description><![CDATA[『실용주의 프로그래머』는 당신이 읽고, 또 읽고, 수년간 또다시 읽게 될 몇 안 되는 기술 서적이다. 당신이 이 분야에 처음 발을 디딘 사람이건, 경험 많은 전문가이건 매번 새로운 통찰을 얻게 될 것이다. 데이비드 토마스와 앤드류 헌트는 소프트웨어 산업에 큰 영향을 미친 이 책의 1판을 1999년에 썼다. 고객들이 더 나은 소프트웨어를 만들고 코딩의 기쁨을 재발견하도록 돕기 위해서였다. 이 책의 가르침 덕분에 한 세대에 걸친 프로그래머들이 어떤 언어나 프레임워크, 방법론을 사용하든 상관없이 소프트웨어 개발의 본질을 돌아볼 수 있었다. 그리고 실용주의 철학은 수백 권의 책, 스크린캐스트, 오디오북으로 그리고 무수한 사람들의 경력과 성공 스토리로 퍼져 나갔다.추천사
2판 서문
1판 서문1장. 실용주의 철학항목 1. 당신의 인생이다
항목 2. 고양이가 내 소스 코드를 삼켰어요
항목 3. 소프트웨어 엔트로피
항목 4. 돌멩이 수프와 삶은 개구리
항목 5. 적당히 괜찮은 소프트웨어
항목 6. 지식 포트폴리오
항목 7. 소통하라!2장. 실용주의 접근법항목 8. 좋은 설계의 핵심
항목 9. DRY: 중복의 해악
항목 10. 직교성
항목 11. 가역성
항목 12. 예광탄
항목 13. 프로토타입과 포스트잇
항목 14. 도메인 언어
항목 15. 추정3장. 기본 도구항목 16. 일반 텍스트의 힘
항목 17. 셸 가지고 놀기
항목 18. 파워 에디팅
항목 19. 버전 관리
항목 20. 디버깅
항목 21. 텍스트 처리
항목 22. 엔지니어링 일지4장. 실용주의 편집증항목 23. 계약에 의한 설계
항목 24. 죽은 프로그램은 거짓말을 하지 않는다
항목 25. 단정적 프로그래밍
항목 26. 리소스 사용의 균형
항목 27. 헤드라이트를 앞서가지 말라5장. 구부러지거나 부러지거나항목 28. 결합도 줄이기
항목 29. 실세계를 갖고 저글링하기
항목 30. 변환 프로그래밍
항목 31. 상속세
항목 32. 설정6장. 동시성항목 33. 시간적 결합 깨트리기
항목 34. 공유 상태는 틀린 상태
항목 35. 액터와 프로세스
항목 36. 칠판7장. 코딩하는 동안항목 37. 파충류의 뇌에 귀 기울이기
항목 38. 우연에 맡기는 프로그래밍
항목 39. 알고리즘의 속도
항목 40. 리팩터링
항목 41. 테스트로 코딩하기
항목 42. 속성 기반 테스트
항목 43. 바깥에서는 안전에 주의하라
항목 44. 이름 짓기8장. 프로젝트 전에항목 45. 요구 사항의 구렁텅이
항목 46. 불가능한 퍼즐 풀기
항목 47. 함께 일하기
항목 48. 애자일의 핵심9장. 실용주의 프로젝트항목 49. 실용주의 팀
항목 50. 코코넛만으로는 부족하다
항목 51. 실용주의 시작 도구
항목 52. 사용자를 기쁘게 하라
항목 53. 오만과 편견맺는말
참고 문헌
연습 문제 해답 예시
옮긴이 후기
찾아보기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/실용주의-프로그래머.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/실용주의 프로그래머.md</guid><dc:creator><![CDATA[데이비드 토머스, 앤드류 헌트, 정지용, 김창준]]></dc:creator><pubDate>Wed, 04 Dec 2024 04:29:18 GMT</pubDate></item><item><title><![CDATA[정신분석 강의]]></title><description><![CDATA[『정신분석 강의』는 프로이트 입문서이자 프로이트 이론의 결정체이다. 일상생활에서 일어나는 실수를 분석하고, 꿈이 생성되는 방식을 설명했으며, 강박 행위, 일반적 신경 질환, 리비도 이론, 불안, 성 본능 등 프로이트의 여러 이론에 대한 정의를 내렸다. 또한 프로이트는 청중들의 이해를 돕기 위하여 입체적인 설명을 통하여 스스로가 정신분석 이론을 깨우치도록 배려하고 있다. 그러나 단순히 입문서로서의 성격만을 가지는 것이 아니고 당시 정신분석학에서 연구된 내용을 집대성한 저술로서 프로이트 이론의 백미로 꼽힌다.서문
제1부 실수 행위
첫 번째 강의 서론 / 두 번째 강의 실수 행위들 / 세 번째 강의 실수 행위들(계속) / 네 번째 강의 실수 행위들(결론)제2부 꿈
다섯 번째 강의 여러 가지 어려움들과 첫 번째 접근 / 여섯 번째 강의 꿈-해석의 전제들과 해석의 기술 / 일곱 번째 강의 외현적 꿈-내용과 잠재적 꿈-사고 / 여덟 번째 강의 어린이-꿈 / 아홉 번째 강의 꿈-검열 / 열 번째 강의 꿈의 상징적 의미 / 열한 번째 강의 꿈-작업/ 열두 번째 강의 꿈의 사례들에 대한 분석 / 열세 번째 강의 꿈의 태곳적 특성과 유아성 / 열네 번째 강의 소원 성취 / 열다섯 번째 강의 불확실한 것들과 비판들제3부 신경증에 관한 일반 이론
열여섯 번째 강의 정신분석과 정신 의학 / 열일곱 번째 강의 증상들의 의미 / 열여덟 번째 강의 외상에 대한 고착: 무의식/ 열아홉 번째 강의 저항과 억압 / 스무 번째 강의 인간의 성생활/ 스물한 번째 강의 리비도의 발달과 성적 조직들 / 스물두 번째 강의 발달과 퇴행의 관점들: 병인론 / 스물세 번째 강의 증상 형성의 길 / 스물네 번째 강의 일상적인 신경 질환 / 스물다섯 번째 강의 불안 / 스물여섯 번째 강의 리비도 이론과 나르시시즘 / 스물일곱 번째 강의 전이 / 스물여덟 번째 강의 분석 요법
프로이트의 삶과 사상 / 프로이트 연보 / 역자 해설 / 참고 문헌 / 찾아보기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/정신분석-강의.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/정신분석 강의.md</guid><dc:creator><![CDATA[지그문트 프로이트, 고낙범, 임홍빈, 홍혜경]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:36:56 GMT</pubDate></item><item><title><![CDATA[나의 한국현대사 1959-2020]]></title><description><![CDATA[undefined개정증보판 서문
초판 서문: 위험한 현대사프롤로그: 자유주의자의 역사체험1 1959년과 2020년의 대한민국59년 돼지띠 | 고르게 가난했던 독재국가 | 고르지 않게 풍요로운 민주국가 | 욕망의 우선순위 | 그라운드 제로에서 욕망이 질주할 때2 4·19와 5·16국토와 국가와 민족의 분단 | 반민특위의 슬픈 종말 | 민주화세력의 탄생 | 산업화세력의 등장3 절대빈곤, 고도성장, 양극화내가 본 한강의 기적 | 한국경제의 비행궤적 | 국가주도형 산업화 | 한국형 경제성장의 비결 | IMF 경제위기가 남긴 것들 | 데이터로 본 양극화 추이 | 추격자에서 선도자로4 전국적 도시봉기를 통한 한국형 민주화한국 민주화운동의 알고리즘 | 맹아기: 5·16에서 10월 유신까지 | 성장기1: 10월 유신에서 10·26까지 | 성장기2: 10·26에서 6월 민주항쟁까지 | 성숙기: 87년체제의 명암5 단색의 병영이 무지개색 광장으로늙어가는 대한민국 | 가족계획과 기생충박멸 | 민둥산을 금수강산으로 | 금서, 금지곡, 국민교육헌장 | “우리는 왜 날마다 명복을 비는가” | 안보국가에서 복지국가로 | 장애인, 성소수자, 여성6 75년 이어진 적대적 공존빨간색이라는 금기 | ‘우리 편’이 아니면 모두 ‘적’ | 간첩이 필요한 나라 | 네 번의 기회 | 정전협정체제와 북핵문제 | 평화통일로 가는 길에필로그: 대한민국의 재발견
참고문헌]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/나의-한국현대사-19592020.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/나의 한국현대사 19592020.md</guid><dc:creator><![CDATA[유시민]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:36:27 GMT</pubDate></item><item><title><![CDATA[군주론]]></title><description><![CDATA[“500년 전 집필된 정치학 교본
21세기 진정한 리더의 조건을 말하다”
교황청 금서가 오늘의 정치학 교본이 된 이유는 무엇일까?
‘리더의 원칙’을 정립한 가장 완벽한 고전을 탐구하다!교황청이 금서로 지정한 ‘악마의 책’, 히틀러와 무솔리니가 애독한 ‘독재자의 교본’으로 알려진 『군주론』. 하지만 루소는 '공화주의자의 교과서'로 칭송했고 프랜시스 베이컨은 '인간이 하고 있는 일을 숨김없이 밝혀낸 마키아벨리에게 큰 신세를 졌다'고 극찬을 아끼지 않았다. 500년 전에 쓰여진 이 책이 논란이 끊이지 않는 이유와 21세기를 살아가야 하는 우리가 읽어야 할 이유는 무엇일까?이 책의 감수 및 해제를 맡은 김상근 교수는 혼란의 시기를 살아가는 현대인이라면 누구나 『군주론』을 일독하길 권하고 있다. ‘대혼란의 아수라장’ 자체였던 16세기 이탈리아는 교황이 처자식과 첩을 거느리고, 군주는 적이 아닌 매독균과 싸웠으며, 수도원장이 기도를 멈추고 정치 일선에 나섰던 시대다. 정통과 사이비를 구별할 수 없고 5개의 강대국이 충돌하며 승자와 패자가 하룻밤 사이에 바뀌던 시대에 공동체의 운명을 책임져야 하는 리더의 현실적인 처세와 방법을 제시한 책이 바로 『군주론』이기 때문이다.『군주론』은 이미 다양한 형태의 번역본이 출간되어 있지만 이 책의 본질을 제대로 독자에게 알리고자 책의 구성과 편집에 정성을 담았다. 뛰어난 문장가였던 마키아벨리의 행간을 제대로 풀어내고자, 마키아벨리 전기를 집필한 연세대학교 신과대학 김상근 교수의 해제(1~26장, 150페이지 분량)를 장별로 제공하고 있으며, 번역에 대한 신뢰를 높이고자 로마 라사피엔자대학교의 중세-르네상스 이탈리아어 문학부 교수인 조르조 잉글레제(Giorgio Inglese)가 편집한 『군주론』(2013년 증보판)을 저본으로 삼고, 하버드대학교 하비 맨스필드 교수의 영역본과 부산대학교 곽차섭 교수의 번역본 등을 비교 대조하여 원서의 문맥과 의미를 훼손되지 않도록 하였다.특히 『군주론』을 집필한 저자 마키아벨리에 대한 이해도를 높이기 위한 인물 해설(‘마키아벨리는 어떤 사람인가’, 38페이지 분량)과 이 책의 집필 배경과 의미를 되짚은 작품 해설(‘『군주론』은 어떤 책인가’, 9페이지 분량)을 수록하여 독서의 흥미와 가독성을 높이고 있다.
이 책을 손에 쥔 독자에게
『군주론』의 판본과 번역에 대하여
헌정사 니콜로 마키아벨리가 ‘위대한 자’ 로렌초 데 메디치님께 바치는 글
1장 군주국의 종류와 이를 획득하는 방법에 대하여
2장 세습 군주국에 대하여
3장 혼합 군주국에 대하여
4장 알렉산드로스 대왕 사후에 다리우스의 후계자들이 반란을 일으키지 않은 까닭에 대하여
5장 정복당하기 전 자국의 법률에 따라 살아온 도시나 군주국을 통치하는 방법에 대하여
6장 자신만의 무력과 역량으로 획득한 새로운 군주국의 통치에 대하여
7장 타인의 힘이나 행운을 통해 획득하게 된 새로운 군주국의 통치에 대하여
8장 악행으로 군주의 자리에 오른 자들에 대하여
9장 시민 군주국에 대하여
10장 각 군주국의 힘을 평가하는 방법에 대하여
11장 교회 군주국에 대하여
12장 여러 종류의 군대와 용병 부대에 대하여
13장 지원군, 혼합군 그리고 자국군에 대하여
14장 군주는 전쟁의 기술을 어떻게 보아야 하는가
15장 군주가 칭송받거나 비난받게 되는 일들에 대하여
16장 관대함과 인색함에 대하여
17장 잔인함과 인자함에 대하여: 군주는 공포의 대상이 되어야 하는가, 사랑받는 존재가 되어야 하는가?
18장 군주가 약속을 지킨다는 것의 의미에 대하여
19장 경멸과 미움을 받지 않는 방법에 대하여
20장 성채를 건축하는 것과 같은 다양한 일을 하는 것은 군주에게 유용한가, 아니면 해로운가?
21장 군주는 존경받기 위해서 어떻게 행동해야 하는가
22장 군주의 신하에 대하여
23장 아첨꾼을 어떻게 피할 것인가
24장 왜 이탈리아 군주들은 자신의 왕국을 잃게 되었나
25장 인간사에서 행운의 여신이 차지하는 비중과 이에 대처하는 방법에 대하여
26장 이탈리아에서 야만인들을 몰아내고 자유를 회복해달라는 권고의 말씀Appendix
해제
『군주론』은 어떤 책인가
마키아벨리는 어떤 사람인가
]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/군주론.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/군주론.md</guid><dc:creator><![CDATA[니콜로 마키아벨리, 김상근, 최현주]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:34:49 GMT</pubDate></item><item><title><![CDATA[애덤 스미스 구하기]]></title><description><![CDATA[오늘날의 경제 위기를 극복하는 철학과 해법!
애덤 스미스가 말하는 신뢰와 도덕, 정의와 양심의 경제학‘보이지 않는 손’이라는 대명제로 우리에게 친숙한 경제학자 애덤 스미스는 특유의 혜안과 식견으로 예술, 자연과학, 법률, 정치학, 경제학 등 여러 분야에서 실로 막대한 영향을 끼쳤다. 애덤 스미스는 동시대인들에게 계시와 같은 존재였지만 그가 전하는 진정한 메시지는 이백 년 동안 서투른 모방과 오보에 가려져 누가 어떻게 해석하고 적용하느냐에 따라 의견이 분분했다. 그러나 전 세계의 경제 상황이 악화되고 자본주의와 시장경제에 대한 반성과 재진단이 요구되는 시점에서, 시장경제의 필수사항인 신뢰, 도덕, 덕성을 강조하는 애덤 스미스의 철학이 우리 사회와 비즈니스를 존속시키는 데 있어서 가장 중요한 원리임을 깨닫게 되었다. 교과서에서만 만날 수 있었던 애덤 스미스의 사상을 쉽게 풀어내며 ‘세계화에 관한 격렬한 논쟁에 접근해 해답을 찾아가는 경이로운 학술 소설’ ‘세계 유명 대학이 교재로 선택한 단 하나의 경제학 팩션’이라는 평가를 받고 있는 『애덤 스미스 구하기』가 북스토리 출판사에서 재출간되었다.조나단 B. 와이트의 『애덤 스미스 구하기』는 현대 사회에 부활한 애덤 스미스의 철학과 사상을 소설 형식으로 풀어 쓴 경제 교양서로, 부의 창출과 상거래, 시장 실패와 국가의 역할, 신규 시장의 구조 개혁, 자본주의의 도덕적 토대, 경영과 윤리 등에 관한 내용을 흥미진진한 모험 소설 속에 풀어내고 있다. 『국부론』을 통해 우리에게 알려진 애덤 스미스의 사상과 철학을 그의 또 다른 명저인 『도덕감정론』의 측면에서 재조명하며 오늘날의 자본주의 체제와 시장경제에 일침을 가한다. 본질적인 것, 즉 사람들이 정의에 관심을 가지고 도덕을 함양하고자 하는 노력이 외면당함으로 인해 자유로운 사회와 시장이 심각하게 위협받고 있다는 메시지가 바로 그가 던지는 경고다. 현대 자본주의 체제에 부활한 애덤 스미스는 경제학자인 주인공 번스와 함께 오늘날의 주요 뉴스를 낱낱이 파헤치며 가슴 뛰는 모험을 전개한다. 긴박하면서도 절묘한 사건 속에서 주인공 번스는 시장 경제에 대한 애덤 스미스의 심오한 통찰력을 재발견한다. 이를 통해 애덤 스미스의 사상과 철학이 오늘날의 시장경제와 비즈니스 세계에 투영하는 실질적인 의미는 무엇인지를 고찰할 수 있다.Part 1 부 (Wealth)
Chapter 1 애덤 스미스의 목소리
Chapter 2 “라티머, 당신은 사악한 악마야!”
Chapter 3 위험한 대화
Chapter 4 당신이 애덤 스미스인 걸 믿으라고요?
Chapter 5 경제학자와 사회학자의 논쟁
Chapter 6 애덤 스미스를 변호하는 애덤 스미스
Chapter 7 논문 초고를 도둑맞다
Chapter 8 부를 창출하는 방법
Chapter 9 행복과 부의 관계
Chapter 10 도시의 대로에서 권총 강도를 만나다
Chapter 11 총성으로 얼룩진 오페라Part 2 변화 (Transformation)
Chapter 12 POP가 애덤 스미스를 없애려는 이유
Chapter 13 감정에 관한 애덤 스미스의 생각
Chapter 14 줄리아와 상상 속 대화
Chapter 15 ‘해럴드’와 ‘스미스’의 행방불명
Chapter 16 고전 속 위인들의 카드 게임
Chapter 17 기묘한 만남
Chapter 18 줄리아를 버리고 떠나다Part 3 도덕 (Virtue)
Chapter 19 내면의 관객
Chapter 20 해달 사냥꾼의 역설
Chapter 21 새로운 패러다임
Chapter 22 다시, 보이지 않는 손
Chapter 23 절체절명의 위기
Chapter 24 작별
Chapter 25 월드켐
Chapter 26 에필로그부록
애덤 스미스 연보
저자 주
참고문헌
토론할 때 주제로 삼을 만한 개념들
감사의 말
]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/애덤-스미스-구하기.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/애덤 스미스 구하기.md</guid><dc:creator><![CDATA[조나단 B. 와이트, 이경식]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:33:44 GMT</pubDate></item><item><title><![CDATA[자본론 1：정치경제학 비판]]></title><description><![CDATA[undefined제Ⅰ권 자본의 생산과정(상)2015년의 개역에 부쳐
제2차 개역에 부쳐(2001)
제1차 개역에 부쳐(1991)
한글 초판 번역자의 말(1989)
제1독어판 서문 ?1867?
제2독어판 후기 ?1873?
불어판 서문 ?1872?
불어판 후기 ?1875?
제3독어판 서문 ?1883?
영어판 서문 ?1886?
제4독어판 서문 ?1890?제1편 상품과 화폐
제1장 상 품
제1절 상품의 두 요소: 사용가치와 가치(가치의 실체, 가치의 크기)
제2절 상품에 체현되어 있는 노동의 이중성
제3절 가치형태 또는 교환가치
A. 단순한, 개별적 또는 우연적 가치형태 ?제1형태?
가치표현의 두 끝: 상대적 가치형태와 등가형태
상대적 가치형태
(a) 상대적 가치형태의 내용
(b) 상대적 가치형태의 양적 규정
등가형태
전체로 본 단순한 가치형태
B. 전체적 또는 전개된 가치형태 ?제2형태?
전개된 상대적 가치형태
특수한 등가형태
전체적 또는 전개된 가치형태의 결함
C. 일반적 가치형태 ?제3형태?
가치형태의 변화한 성격
상대적 가치형태와 등가형태의 상호의존적 발전
일반적 가치형태가 화폐형태로 이행
D. 화폐형태 ?제4형태?
제4절 상품의 물신적 성격과 그 비밀
제2장 교환과정
제3장 화폐 또는 상품유통
제1절 가치의 척도
제2절 유통수단
(a) 상품의 탈바꿈
(b) 화폐의 유통
(c) 주화coin. 가치의 상징
제3절 화 폐
(a) 퇴장화폐
(b) 지불수단
(c) 세계화폐
제2편 화폐가 자본으로 전환
제4장 자본의 일반공식
제5장 자본의 일반공식의 모순
제6장 노동력의 구매와 판매제3편 절대적 잉여가치의 생산
제7장 노동과정과 가치증식과정
제1절 노동과정?사용가치의 생산?
제2절 가치증식과정valorisation process?잉여가치의 생산?
제8장 불변자본과 가변자본
제9장 잉여가치율
제1절 노동력의 착취도
제2절 생산물 가치의 구성부분들을 생산물 자체의 해당 부분들로 표시
제3절 시니어의 ‘최후의 한 시간last hour’
제4절 잉여생산물
제10장 노동일
제1절 노동일의 한계들
제2절 잉여노동에 대한 탐욕. 공장주와 보야르
제3절 착취의 법적 제한이 없는 영국의 산업부문
제4절 주간노동과 야간노동. 교대제
제5절 표준노동일을 얻기 위한 투쟁 : 14세기 중엽에서 17세기 말까지 노동일을 강제로 연장시키는 입법
제6절 표준노동일을 얻기 위한 투쟁 : 법률이 노동시간을 강제로 제한. 1833~1864년의 영국 공장법
제7절 표준노동일을 얻기 위한 투쟁 : 영국 공장법이 타국에 준 영향
제11장 잉여가치율과 잉여가치량제4편 상대적 잉여가치의 생산
제12장 상대적 잉여가치의 개념
제13장 협업
제14장 분업과 매뉴팩처
제1절 매뉴팩처의 두 가지 기원
제2절 부분노동자와 그의 도구
제3절 매뉴팩처의 두 가지 기본형태 : 이질적 매뉴팩처와 유기적 매뉴팩처
제4절 매뉴팩처 안의 분업과 사회 안의 분업
제5절 매뉴팩처의 자본주의적 성격]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/자본론-1-정치경제학-비판.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/자본론 1 정치경제학 비판.md</guid><dc:creator><![CDATA[마르크스, 김수행]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:33:36 GMT</pubDate></item><item><title><![CDATA[국부론]]></title><description><![CDATA[모든 경제학 사상의 원류이자
새로운 생각의 출발점이 되는 고전 중의 고전
국내 유일 단권 완역본『국부론』은 단순히 경제학적 인사이트뿐만 아니라 철학, 정치, 역사, 종교, 교육, 문화 등 여러 분야의 정보를 제공하는 책이다. 국제전이었던 7년 전쟁(1756~1763), 미국 독립전쟁(1775~1783) 등 중요 사건들을 배경으로, 국부가 어떻게 쌓이고 흘러가며 역사를 바꾸는지에 대한 인문적인 통찰과 스미스의 사유 체계가 담겨 있어 가히 통합 인문서의 느낌을 준다. 그런 만큼 이 책은 세계를 객관적 시선으로 관찰하려 했던 18세기 최고 지식인이 세상을 바라본 안목을 잘 보여준다.스미스는 분업과 기계화를 통해 재능의 차이가 생기고, 그것이 시장에서 평화롭고 합리적인 교환을 거쳐 거래되는 것이 자유주의 경제라고 주장했다. 인간이 자신을 사랑하는 행동을 충실히 해나갈 때 ‘보이지 않는 손’(invisible hand)이 작용해 사회의 공동선이 강력하게 추진된다고 여겼다. 저자에 따르면 국부는 노동 투입 기술과 효율성에 따라 증가한다. 즉, 국가와 개인이 많은 생산물을 내놓을수록 부유한 나라라는 것이다. 지금은 상식적인 생각이지만, 금은의 축적을 국부의 핵심이라고 여긴 스미스 당시의 중상주의 시대에는 새롭고 혁명적인 사상이었다.『국부론』은 총 5권으로 구성되는데 1-2권은 경제 이론이고, 3권은 로마 이래 산업 발달의 역사를 개관하고, 4권은 중상주의와 중농주의 경제 이론을 비판하고 있으며, 5권은 국가 운영과 사법행정에 소요되는 경비와 수입원(세금과 공채)에 대해 기술하면서 법학과 정치학까지 섭렵한다.현대지성 클래식은 53번째로 『국부론』을 펴내면서, 250년 전에 쓰인 방대하고 난해한 원문 전체를 쉽고 명확하게 옮겼을 뿐만 아니라, 마음만 먹으면 청소년도 읽어나갈 수 있을 정도로 가독성 높게 글을 다듬었다. 더 깊은 이해를 위한 수백 개의 친절한 각주와 함께, 시대 배경과 저자에 대한 수준 높은 해제를 제공해 “한번 붙잡으면 끝까지 읽을 수 있는 책”이 되도록 했다. 시대 흐름을 주도하고, 전략적인 사고를 하기로 유명한 일론 머스크가 “내 인생 최고의 책이다!”라고 극찬을 아끼지 않은 이유를 알 수 있을 것이다.들어가는 글과 저작 개요제1권. 노동생산력 향상의 원인과, 노동생산력에서 나오는 생산물이 각각의 계층에서 자연 분배되는 질서제1장. 노동 분업
제2장. 분업이 일어나는 원리
제3장. 분업은 시장 규모에 제한을 받는다
제4장. 화폐의 기원과 용도
제5장. 상품의 실질가격과 명목가격 혹은 상품의 노동가격과 화폐가격
제6장. 상품가격의 구성 요소
제7장. 상품의 자연가격과 시장가격
제8장. 노동 임금
제9장. 자본 이윤
제10장. 노동과 자본이 다양한 투자처에서 사용될 때 임금과 이윤
제1절. 직업 그 자체의 특성에서 발생하는 불평등
제2절. 유럽의 정책에서 비롯된 불평등
제11장. 토지의 지대
제1절. 언제나 지대가 나오는 토지의 생산물
제2절. 때로는 지대가 나오고, 때로는 안 나오는 토지의 생산물
제3절. 늘 지대가 나오는 생산물과, 지대가 나오다 말다 하는 생산물 사이에 존재하는 상대적 가치 비율의 변동
지난 4세기 동안 은의 가치 변동에 관한 여담
제1기(1350-1570)
제2기(1570-1636)
제3기(1636-1700)
금과 은 가치 사이의 비율 변화
은 가치가 여전히 계속 줄어들 것이라는 의혹의 근거
사회 발전이 세 가지 다른 부류의 원생산물에 미치는 여러 영향
첫째 부류
둘째 부류
셋째 부류
은 가치 변화에 관련된 여담의 결론
사회 발전이 제조품의 실질가격에 미치는 영향
지대를 다룬 이번 장의 결론
│첨부│ 연도별 밀 가격?
제2권. 자본의 성격, 축적, 사용들어가는 글
제1장. 재고의 세부 분류
제2장. 사회의 총 재고 중 일부로 간주되는 화폐 혹은 국가 자본을 유지하는 비용
제3장. 자본 축적, 또는 생산적 노동과 비생산적 노동
제4장. 이자를 받기로 하고 빌려준 자본
제5장. 자본의 여러 가지 용도제3권. 각국의 서로 다른 국부 증진 과정제1장. 국부의 자연스러운 증진
제2장. 로마제국 멸망 후, 고대 유럽이 겪은 농업 낙후
제3장. 로마제국 멸망 후, 도시들의 등장과 발전
제4장. 도시 상업이 국가 발전에 기여한 방식제4권. 정치경제학의 체계들어가는 글
제1장. 중상주의의 원리
제2장. 국내에서 생산 가능한 물품을 외국에서 수입하는 것에 대한 제한
제3장. 무역 수지가 불리한 국가들로부터 거의 모든 물품 수입을 제한하는 비상조치
제1절. 중상주의 원리에 입각한 이런 제한의 불합리성
예금 은행, 특히 암스테르담 은행에 대한 여담
제2절. 다른 원리들에 비추어 보아도 비상한 수입 제한은 불합리하다
제4장. 세금 환급
제5장. 장려금
곡물업과 곡물법에 관한 여담
제6장. 통상 조약
제7장. 식민지
제1절. 새 식민지들을 건설한 동기
제2절. 새 식민지들이 번영한 여러 원인
제3절. 유럽이 아메리카를 발견하고, 희망봉을 돌아 동인도제도 항로를 발견한 이점
제8장. 중상주의 제도의 결론
제9장. 중농주의, 즉 토지 생산물이 각국의 수입과 부의 유일 또는 주요 원천이라고 하는 경제 이론제5권. 군주 혹은 국가의 수입제1장. 군주 혹은 국가의 비용
제1절. 국방비
제2절. 사법비
제3절. 공공사업과 공공 기관의 비용
제1조. 사회 내의 상업을 촉진하기 위한 공공사업과 기관
전반적인 상업 촉진에 필요한 공공사업과 기관
특정 상업 분야 촉진에 필요한 공공사업과 기관
제2조. 청년 교육을 위한 기관의 비용
제3조. 모든 연령대의 민중 교육을 위한 기관의 비용
제4절. 군주의 위엄을 뒷받침하는 비용
제1장의 결론
제2장. 사회의 일반적 ? 공적 수입의 원천
제1절. 군주나 나라에 특별히 속한 수입의 기금 혹은 원천?
제2절. 국가의 세금?
제1조. 토지 지대와 임대료에 대한 세금
지대에 비례하지 않고 토지 생산물에 비례하는 세금
주택 임대료에 부과되는 세금
제2조. 이윤에 부과되는 세금
자본에서 발생한 수입에 부과되는 세금
특정 사업의 이윤에 부과되는 세금
제1조와 2조의 부록: 토지, 가옥, 자본 가치에 부과되는 세금
제3조. 노동 임금에 부과되는 세금
제4조. 모든 종류의 수입에 무차별적으로 부과할 의도가 있는 세금
인두세
소비재에 부과되는 세금
제3장. 공채
부록
해제 이종인
애덤 스미스 연보]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/국부론.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/국부론.md</guid><dc:creator><![CDATA[애덤 스미스, 이종인]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:33:26 GMT</pubDate></item><item><title><![CDATA[베카리아의 범죄와 형벌：법은 누구를 위해 존재하는가]]></title><description><![CDATA[‘책 한 권의 운명은 저자보다 더 위대하다’라는 말이 있다. 시대를 움직인 책은 당대를 뛰어넘어 이후 역사의 시금석이자 버팀목으로 자리한다. 이에 이다북스는 우리 시대를 새롭게 들여다보는 숨어 있는 명저를 ‘이다의 이유’로 출간한다. ‘이다의 이유’ 일곱 번째 『베카리아의 범죄와 형벌』은 죄형법정주의를 창시하고 범죄와 형벌 사이의 균형을 주창하고, 죄형법정주의 같은 주요 법 원리를 논리적으로 다루었으며, 고문과 사형 등 잔혹한 형벌 제도를 비판했다. 이처럼 『베카리아의 범죄와 형벌』은 형벌권을 사회계약으로 규정함으로써 근대 형법학의 기초를 세웠다.범죄와 형벌서론 / 형벌의 기원 / 형벌의 권리 / 앞서 언급한 원칙의 결과 / 법률의 해석 / 법의 모호성 / 범죄와 형벌의 비례 / 범죄의 경중에 대한 평가 / 범죄의 구분 / 명예 / 결투 / 공공의 안정을 해치는 죄 / 형벌의 목적 / 증인의 신뢰성 / 범죄의 입증과 증거, 재판 방식 / 밀고 / 고문 / 벌금형 / 선서 / 형벌의 신속성 / 폭력 행위 / 상류층에 대한 처벌 / 절도 / 명예훼손 / 무위도식에 대하여 / 추방과 재산몰수형 / 가족의 정신 / 형벌의 관대함 / 사형 / 미결구금 / 기소와 시효 / 입증하기 어려운 범죄 / 자살과 국적이탈 / 밀수 / 파산 / 성역에 대하여 / 현상금에 대하여 / 미수, 공범과 사면 / 유도신문 / 특별한 유형의 범죄 / 유용성에 대한 잘못된 생각 / 범죄의 예방 수단 / 지식에 대하여 / 재판관 / 포상 / 교육 / 사면 / 결론볼테르의 해설나는 왜 해설서를 쓰는가 / 어떤 형벌은 옳고 그른가 / 이단자에 대한 처벌 / 이단을 어떻게 다룰까 / 신성모독에 대하여 / 로마인들이 보여준 신성모독에 대한 관용 / 포교에 관한 죄와 앙투안 사건 / 시몽 모랭에 관한 이야기 / 마녀에 대하여 / 사형은 올바른 형벌인가 / 형벌의 집행에 대하여 / 여전히 살아 있는 치욕, 고문 / 잔혹한 재판소에 대하여 / 정치법과 자연법의 차이 / 대역죄, 그리고 오귀스트 드 투의 처형에 대하여 / 고해를 통한 범죄의 누설 문제에 대하여 / 화폐 위조에 대하여 / 가정 내 절도는 범죄인가 / 자살에 대하여 / 특정한 유형의 손상 / 재산 몰수는 정당한가 / 형사절차와 그 밖의 방식에 대하여 / 개선에 대한 생각]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/베카리아의-범죄와-형벌-법은-누구를-위해-존재하는가.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/베카리아의 범죄와 형벌 법은 누구를 위해 존재하는가.md</guid><dc:creator><![CDATA[체사레 베카리아, 볼테르, 김용준]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:32:23 GMT</pubDate></item><item><title><![CDATA[영혼을 위한 닭고기 수프 1：따뜻함이 필요한 날]]></title><description><![CDATA[삶에 잔잔한 위로를 전하는, 평범한 사람들의 고전전 세계 5억 독자가 읽은 ‘닭고기 수프’ 시리즈의 대표작, 『영혼을 위한 닭고기 수프』가 국내 출간 20주년을 맞이해 새 옷을 입었다. 1993년 미국에서 처음 출간되자마자 그 즉시 베스트셀러에 오른 이 책은 그 후 190주 연속 「뉴욕타임스」 베스트셀러를 기록했으며, 지금까지 전 세계 43개 언어로 출간되었다. 한국에는 1994년(1997년 개정판 출간) 처음 소개되어 지금까지 1백 만 넘는 한국 독자에게 읽혔다. 이처럼 명실상부한 ‘고전 에세이’로 자리 잡은 이 책은 ‘친구 집, 이모네, 우리 집 책꽂이에 꼭 한 권씩은 있었다’, ‘영어 공부하며 수없이 읽었다’, ‘도서관에서 돌려 읽었다’, ‘십 년 만에 꺼내 읽었는데 여전히 좋더라’와 같은 독자 평을 받으며 20년 동안 변치 않고 사랑받아 왔다.1권 따뜻함이 필요한 날독자에게 전하는 말: 한 번에 한 모금씩 천천히 5
인생을 다시 산다면 12사랑의 힘
간단한 일 19
진실한 사랑 22
내가 기억하는 모든 것 24주0
심장이 들려준 말 29
다른 방식 32
한 번에 하나 39
선물 41
소년 소방대원 43
강아지와 소년 47
파란 리본 50
나도 그런 형이 될 수 있다면 54
어떤 용기 57
작은 관심 59
미소 64
당신은 모를 거예요 69
카르페 디엠 74
고백 83
행복은 전염된다 89
특별한 치료 94
난 당신을 알아요 99
껴안는 판사 105
기적의 약 111
랍비와 마부 115지금 그대로의 나
황금 부처 119
무덤 앞에서 123
진실만을 말할 것 125
대단한 꼬마 127
나는 나 129
5번가의 천사 134
예시 돈덴 137
한 문장의 답안지 144
인생이라는 게임 146
인간이 되기 위한 규칙 149
인디언 로우 152삶이라는 배움터
사랑이 남긴 것 165
난 이제 나 자신이 좋다 168
한 장의 종이 170
특별함 178
배우는 방법 180
손 182
할렘 가의 왕실 기사단 184
보름달이 뜬 밤 194
나의 그림 198
나는 교사다 205
동물학교 209
잃어버린 짐 212
내가 알아야 할 모든 것은
유치원에서 배웠다 218영원한 나의 편
아이들은 삶 속에서 배운다 223
내가 아버지를 선택한 이유 227
세상에서 가장 부드러운 손길 241
넌 내 사랑하는 아들이지 246
당신이 무엇을 하는지보다
어떤 사람인지가 더 중요하다 252
엄마의 하루 254
세상에서 가장 완벽한 가정 260
세 단어 267
아이들에 대하여 274책을 옮기고 나서: 살고 사랑하고 배운 이야기 276]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/영혼을-위한-닭고기-수프-1-따뜻함이-필요한-날.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/영혼을 위한 닭고기 수프 1 따뜻함이 필요한 날.md</guid><dc:creator><![CDATA[잭 캔필드, 마크 빅터 한센, 류시화]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:30:53 GMT</pubDate></item><item><title><![CDATA[세이노의 가르침：피보다 진하게 살아라]]></title><description><![CDATA[undefined※ 예전 글에 저자가 요즘 생각을 덧붙인 글과 새롭게 작성한 글은 모두 글꼭지 앞에 '2022' 표시가 있습니다.(책에서는 회색과 검정색으로 '2022' 표시를 구분해 두었으니, 본문 미리보기에서 '일러두기' 페이지를 참조해 주세요.)서문 61부 아무것도 가진 게 없다고 느껴질 때앞길이 보이지 않을 때
2022 삶이 그대를 속이면 분노하라	25
2022 천재 앞에서 주눅 들지 말라	31
2022 스트레스의 뿌리를 없애라	38
2022 실패하면 제로 점으로 내려가라	47
2022 미래를 미리 계산하지 마라 53
2022 건강을 잃으면 모든 것을 잃는다고? 61
2022 10분 이상 고민하지 말라	68내 학력이 초라하게 느껴질 때
2022 학력이나 학벌이 빈약한 경우 어떻게 해야 하나	70
2022 학벌 좋은 사람들이 알아야 할 것	75
2022 부자가 되려면 학교 공부를 열심히 해야 하는가	80
2022 고학력은 부자가 되는 데 도움이 되는가	97
2022 자격증의 환상에서 벗어나라 104
2022 전문직에 종사하면 부자가 될까 109
2022 전공은 취직하는 데 있어 어떤 역할을 하는가 114
전공은 실전에서 어떤 의미가 있는가	120
2022 무엇을 공부하여야 하는가	124어떤 일을, 어떻게 해야 하는가
2022 성격에 맞는 일을 하라 134
2022 무슨 일이든지 더 잘하는 방법이 있다 140
2022 이런 일은 하지 말아라 147
2022 아무 일이나 재미있게 하라 152
2022 허드렛일부터 제대로 해라 158
2022 주 5일제 근무 좋아하지 마라 163
2022 하기 싫은 일을 해야 몸값이 오른다 166
돈주머니를 쥔 올바른 사장을 골라라	171
2022 8시간 근무에 집착하지 말라 177
2022 세상이 원하는 기준에 맞추어 일하라	182
2022 Integrity - 높은 지위에 오르고 싶다면	186
2022 일의 대가는 질로 따져라 192
2022 일의 종류에 따라 부자 되는 길이 다르다 199
2022 좋아하는 일이라고 섣불리 하지 마라	204
2022 장사를 할 때의 자세 211
사업을 할 때 알아야 할 것들 (1)	217
사업을 할 때 알아야 할 것들 (2) - 사람 관리	222
2022 사업을 할 때 알아야 할 것들 (3)	233
2022 장사나 사업의 아이템	237
영업이 뭡니까?	240
2022 영업에 대하여 (1)	241
2022 영업에 대하여 (2) 245
2022 영업에 대하여 (3) 2472부 부자로 가는 길목에서돈, 똑바로 알자
2022 돈에 대한 위선을 버려라 251
2022 돈과 먼저 친해져라 256
2022 시간이 돈이 되게 만들어라	261
돈은 오직 기회의 첫 단추만 채워 준다	264
돈 갖고 사람을 차별하면 안 된다고?	268
2022 돈을 모을 때는 날파리들을 조심해라 273
2022 사기꾼 판별법	281
나는 무소유의 삶은 살지 못한다	295성공을 향해 나아가려면
2022 너만의 게임을 만들어라	300
2022 젊을수록 돈을 아껴라	317
2022 이생망(이번 생은 망했다), 정말 그럴까? 323
2022 변화가 없는 삶은 불행하다 327
전쟁터에서 휴머니즘을 찾지 마라	332
2022 야망을 갖지 마라 335
2022 LIFE와 LIVING 339나는 가난한 사람인가?
가난은 사회구조적 현상인가	344
2022 가난이 세습되는 이유 350
2022 가난한 사람들은 선량한가? 356
가난한 자의 특성은 버려라	363
2022 부자가 되지 못하게 만드는 심리	368부자들은 대체 어떤 사람들인가?
2022 부자들의 쇼윈도 앞에서 서성이지 말아라 372
2022 부자들에게는 금덩어리가 없다 378
부자는 불행한 도둑놈이 아니다	381
2022 부자들에게는 과소비가 없다 387
2022 있는 놈들은 돈을 어디에 얼마나 펑펑 쓸까?	391
2022 부자는 검소하면 안 된다	397
2022 어느 필명 기부자의 나눔 이야기	403〈부자아빠의 진실게임〉 기고글 일부
금융지식이 부자 만들어 주지 않는다	408
2022 그래도 집을 사는 것이 낫다	409
삶의 우열은 돈으로 가려지는 것이 아니다	411
주식 투자는 쓸 일이 없는 여유자금으로 하라	413
놀면서 돈을 벌 수 있다는 헛된 환상을 버려라	414
부자가 되려면 좁은 문으로 가라	416
이게 재테크인가?	4183부 삶의 전반에 조언이 필요할 때세상을 살아가는 지혜
혼자 끙끙대지 마라	421
2022 좋은 의사를 만나는 법 424
2022 좋은 변호사를 만나려면 434
2022 책을 어떻게 읽을 것인가 453
2022 협상 능력을 길러라 465
2022 은행 저축은 목돈을 만들 때까지만 해라	473
2022 운명적 사랑을 믿지 말아라 481
2022 기회는 사람이 준다. 윗사람에게 잘해라	486
2022 외로움을 즐겨라 491
2022 법을 어느 정도나 지켜야 할까? 494
2022 공무원 만나는 법 504
2022 공무원하고의 다툼은 판례해석 다툼이다 (문과생을 위한 글)	538
2022 대한항공 땅콩사건, 서울시향 불화 등에 대한 생각	541
2022 성공할 남자 고르는 법원제 ‘내 딸들아. 이런 놈은 제발 만나지 말아라’	553
2022 개새끼들에게는 욕을 하자	565
2022 Fuck You Money	574
2022 물건을 잘 사야 잘산다	578
2022 접대를 받지 말라	587
2022 아내들이여, 남편부터 변화시켜라	595
2022 나는 평등주의가 싫다	599
2022 나의 어린 시절과 아버지	607
2022 공인중개사에 대하여	615
2022 공대에 관하여	617
2022 심청이는 효녀가 아니었다	619
2022 망년회를 하지 마라	628이코노미스트 및 신동아 기고글 일부
싸워 봤자 나만 손해 본다!	634
法과 친구가 되라!	637
정리해고의 사회학	639세이노가 독자들에게
2022 메일을 보낸 독자들을 위한 공통 답변 2004. 6. 8. 654
차라리 점쟁이에게 가라: 짜증이 나서 올리는 글 2004. 6. 30.	662
2022 설날? 내게서 덕담을 기대하지 마라 2006. 1. 31.	663
2022 나는 도전한다, 그러므로 존재한다 2007. 2. 8.	670
2022 프로강사가 되려면 2007. 6. 12.	676
조루증 독자들에게 2007. 6. 19. 677
미안하다 2008. 10. 11. 678
KBS2 다큐멘터리를 봐라! 2009. 5. 16. 679동아일보 기고글 일부
‘바가지 요금’ 탓하지 말라 2001. 1. 14.	680
삶이 만만하다면 미래는 없다 2001. 2. 4.	682
일터와 가까운 곳에 살아라 2001. 2. 25. 684
당신의 가족부터 만족시켜라 2001. 3. 14.	685
집 쉽게 팔려면 여심을 잡아라 2001. 3. 25.	687
내가 신문에 글을 쓰는 이유 2001. 5. 27.	688
전문가라고 모든 걸 맡기진 말라 2001. 5. 30.	690
돈 빌려줄 땐 주민-호적등본 받아라 2001. 6. 24.	692
말이 통하지 않을 땐 침묵하라 2001. 6. 27.	693
당신은 정말 시간이 없는가 2001. 7. 1.	695
인터넷은 놀이터가 아니다 2001. 7. 22.	697
승자는 적이, 패자는 친구가 많다 2001. 7. 18.	699
당신의 아군이 적군이다 2010. 11. 9.	701
부동산에 빨리 눈떠라 2001. 8. 1.	707
친구와 상품거래 할 때 2001. 8. 5.	708
이해관계 속에는 우정이 설 자리가 없다 2001. 8. 22.	710
빨리 부자 되려면 부자들 마음을 읽어라 2001. 8. 29.	712
목돈 빌려줄 땐 친구라도 냉철하게 2001. 9. 2.	714
부티보다 귀티 나게 외모에도 신경 쓰라 2001. 9. 5.	716번외 글
세이노의 성공담 2001. 1. 11. 주간동아 718
SBS ‘그것이 알고 싶다’ 311회 인터뷰 2004. 10. 2. 721마무리
이 책을 마무리하며 722
부록 1 | 세이노를 만나다 724
부록 2 | 세이노 추천도서 734
저자와의 만남 736]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/세이노의-가르침-피보다-진하게-살아라.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/세이노의 가르침 피보다 진하게 살아라.md</guid><dc:creator><![CDATA[세이노(SayNo)]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:30:47 GMT</pubDate></item><item><title><![CDATA[남이야 뭐라 하건!]]></title><description><![CDATA[오랫동안 국내 독자들의 사랑을 받은 『미스터 파인만!』(사이언스북스, 1997)의 개정판이다. 리처드 파인만은 어린 자신을 과학의 세계로 인도하면서 중요한 것은 사물의 이름이 아니라 그 뒤에 있는 패턴이나 본질이며, 권위 있는 이가 이름 붙였거나 설명했다고 믿으면 안 된다는 것을 가르쳐 준 아버지와의 추억, 남이 어떻게 생각하든 자신이 옳다고 믿는 바를 따라서 살아야 한다는 것을 가르쳐 준 첫사랑이자 첫 부인인 알린 파인만과의 애틋한 사랑 이야기, 미국 항공우주국(NASA)의 관료주의 속에서 미제 사건이 되어 버릴 뻔했던 챌린저 호 사건의 비밀을 밝힌 파인만의 활약 등을 중심적으로 소개한다. 그리고 원자 폭탄 개발 이후 과학의 의미와 가치에 대한 파인만의 오랜 사색이 압축적으로 담겨 있는 「에필로그- 과학의 가치」는 철학을 싫어했던 그가 한 사람의 심오한 과학사상가임을 감동적으로 보여 준다.머리말제1부 호기심 많은 파인만 씨
나는 모든 것을 아버지로부터 배웠다
남이야 뭐라 하건!
하나, 둘, 셋...을 세는 것처럼 쉽다
출세하기
시티 호텔
허먼이 도대체 누구야?
비열한 성차별주의자 파인만!
방금 그 사람하고 내가 악수를 했다고, 믿을 수 있겠어?
편지, 사진 그리고 그림제2부 파인만 씨, 워싱턴에 가다
들어가면서
자살 행위
냉엄한 사실들
여섯 시 방향을 조심하라!
은밀한 조사
환상적인 숫자
문제의 부록
제23차 교정본
언론 플레이
조사를 마치고
부록 F: 우주 왕복선의 안전성에 대한 개인적 견해에필로그
과학의 가치옮긴이 주
옮긴이 글
찾아보기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/남이야-뭐라-하건.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/남이야 뭐라 하건.md</guid><dc:creator><![CDATA[리처드 필립 파인만]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:26:10 GMT</pubDate></item><item><title><![CDATA[파인만 씨 농담도 잘하시네 1]]></title><description><![CDATA[양자역학을 재정립해 노벨 물리학상을 수상하고, 아인슈타인과 함께 20세기 최고의 물리학자로 불리는 리처드 파인만 박사의 독특하고도 재미있는 인생 이야기. 물리학자이면서 금고털이, 봉고 연주자, 화가 등 여러 경험이 녹아있는 그의 일대기에는 고정관념을 깨는 그만의 발상법과 끊임없는 호기심, 대담성이 어우러져 독자에게 삶의 재치와 감동을 전해준다. 파라커웨이에서 MIT까지
생각으로 라디오를 고치는 아이
완두콩 쉽게 자르기
누가 문을 훔쳐갔나?
라틴어냐? 이탈리아어냐?
언제나 탈출을 시도하며
그 회사 연구실장이 바로 나요 프린스턴 대학원 시절
파인만 씨, 농담도 잘하시네!
저요오오오오!
&lt;고양이 지도&gt;라구?
위대한 과학자들
페인트 섞기
나만의 계산법
독심술사
아마추어 과학자 원자폭탄, 그리고 군대
불발탄
사냥개 흉내내기
밑바닥에서 본 로스앨러모스
금고털이가 금고털이를 만나다
조국은 나를 원하지 않는다. ]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/파인만-씨-농담도-잘하시네-1.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/파인만 씨 농담도 잘하시네 1.md</guid><dc:creator><![CDATA[리처드 필립 파인만, 김희봉]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:25:45 GMT</pubDate></item><item><title><![CDATA[로드]]></title><description><![CDATA[undefinedundefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/로드.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/로드.md</guid><dc:creator><![CDATA[코맥 매카시, 정영목]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:25:28 GMT</pubDate></item><item><title><![CDATA[오두막]]></title><description><![CDATA[undefined시작하는 말
두 길이 만나는 곳
몰려드는 어둠
전환점
거대한 슬픔
저녁 식사에 누가 올까?
파이(π) 한 조각
선착장의 하나님
챔피언들의 아침 식사
오래전에 머나먼 정원에서
물 위를 걷다
여기 심판관이 오시다
짐승의 뱃속에서
마음들의 만남
동사와 그 밖의 자유
친구들의 축제
슬픔의 아침
마음의 선택
퍼져 나가는 물결
맺는 말
『오두막』의 뒷이야기
추천의 말]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/오두막.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/오두막.md</guid><dc:creator><![CDATA[윌리엄 폴 영]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:24:01 GMT</pubDate></item><item><title><![CDATA[여우 8]]></title><description><![CDATA[사라져가는 숲과 친구들을 지키기 위해
인간의 말을 배운 여우가 전하는 위트 있는 경고!
맨부커상 수상 작가 조지 손더스가 쓴 슬프고 사랑스러운 우화“현존하는 영어권 최고의 단편소설 작가” “영미문학계의 천재” “작가들의 작가”라는 평을 듣는 조지 손더스의 소설 『여우 8』이 출간되었다. 어깨너머로 인간의 말을 배운 여우가 인간들에게 쓴 편지의 형식을 띠고 있는 이 짧은 소설은 2013년 전자책으로 먼저 출간되었다가 2018년 디자이너 첼시 카디널의 일러스트와 함께 종이책으로 출간되었다. 맨부커상 수상작인 『바르도의 링컨』에서 죽은 영혼들의 목소리에 생명력을 불어넣어 삶과 죽음 그리고 인간의 존재 조건에 대해 탐구했던 작가는, 이 소설에서는 인간에게 숲을 빼앗기고 같은 무리의 여우들을 모두 잃어버린 여우의 목소리를 빌려 인간의 환경 파괴와 지나친 소비주의에 대한 경고를 전한다. 조지 손더스는 이 작품에서 그 어느 때보다 독창적이고 독보적인 스타일과 풍자적이고 위트 있는 목소리로 “일종의 행위로서의 문학”을 완성해낸다.undefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/여우-8.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/여우 8.md</guid><dc:creator><![CDATA[조지 손더스, 민은영]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:23:41 GMT</pubDate></item><item><title><![CDATA[착취도시, 서울：당신이 모르는 도시의 미궁에 대한 탐색]]></title><description><![CDATA[자본과 인간이 싸우는 미세 허파
서울 쪽방 탐사 대기록
대도시는 어떻게 먹이사슬망이 되었나
쪽방에 들어가는 순간 생은 늪이 된다이 책은 르포다. 기자 정신으로 잠입해 취재를 하고, 하나의 단서를 잡으면 문어발식으로 확장해 증거를 수집해나간다. 사회부 소속으로 경찰서를 출입하는 일은 ‘사망’ ‘빈곤’ ‘불법’ 등 중요한 사회 문제를 사건의 발생과 종결로만 보게끔 시야를 제한시킨다. 그래서 저자는 기획취재부로 옮겼다. 이제 기자 신분임을 숨기고 지방에서 올라온 자취생 혹은 부동산 투기꾼으로 가장해 쪽방촌에 대한 정보를 수집해나간다. 그러자 서울 대도시 밑바닥층의 빈곤 문제가 하나의 비즈니스처럼 체계적인 이윤 추구 행위에 둘러싸여 있음이 드러났다.이 책은 작은 자서전이기도 하다. 부산 출신의 저자는 서울로 진학하면서 대학 시절 내내 주거빈곤자로 불안한 생활을 했다. 기숙사, 하숙, 반지하 원룸, LH 매입임대 주택, 산동네 분리형 원룸, LH 대학생 전세자금대출이 저자가 거쳐온 주거 역사다. 사회생활을 하면서는 가난한 과거사를 숨겼다. 요즘 가난은 훌륭한 서사의 자원이 되기도 하지만, 악바리 같은 부정적 이미지를 심어줘 불리한 약점이 될 우려가 있기 때문이다. 하지만 취재 과정에서 만난 청년 세대들이 자신이 직면한 빈곤을 외면하자 저자는 그들의 이야기를 끌어내기 위해 오히려 자신의 주거 빈곤사와 가난의 경험을 적극 드러내게 됐다. 그런 면에서 이 책은 가난에 대한 한 사람의 시선이 바뀌고 넓어지는 성장담이기도 하다.수많은 빈자, 중간 착취자, 소유주가 이 책에 등장한다. 실명을 밝히기도 하고 가명 처리한 인물도 있다. 위험을 무릅쓰고 빈곤의 실태를 이야기해준 사람들이다. 그들은 쪽방에 한번 발을 담갔다가 죽을 때까지 빠져나오지 못하는 절망에 대하여 증언했다. 바로 서울 동자동, 창신동, 사근동 주민들이다.들어가며1부 지옥고 아래 쪽방 ‘현대판 쪽방’ 고시원 사람들
2018년 11월 9일 국일고시원 화재 | 327호, 이명도, 64세 | 326호, 홍아무개, 59세 ‘비정한 도시’의 최저 주거 전선
단돈 만 원에 당신의 비참한 삶을 삽니다 | 살아서 들어가는 관棺, 쪽방 | 박씨의 쪽방 쪽방촌의 빈곤 비즈니스
강씨 일가 | 벗어날 수 없는 쪽방의 굴레 | 쪽방에 산다는 것 | 누가 쪽방으로 돈을 버는가 | 쪽방촌 생태계의 축, 중간 관리인 | ‘지옥고 아래 쪽방’을 보도하다 ‘지옥고 아래 쪽방’ 그 후
쪽방촌에 배달된 신문 | 다시 만난 박씨 2부 대학가 신쪽방촌 자전적 ‘주거 난민’ 이야기
20대의 나는 ‘주거 난민’이었다 | 역행하는 청년 주거빈곤 대학가가 쪽방촌이 되고 있다
우체통과 계량기가 집에 대해 말해주는 것들 | 당신의 원룸은 ‘신쪽방’입니까 | 도심 속 섬, 사근동의 비밀 | 그들이 기숙사를 반대한 까닭 | 신쪽방 잠입 취재 서울, 뜨내기들의 욕망 도시
사근동에서 온 답장 | 당신에게 집은 어떤 의미인가요? | 청춘에게 더욱 비정한 도시 | ‘프로듀스 101’의 축소판, 서울 나오며]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/착취도시-서울-당신이-모르는-도시의-미궁에-대한-탐색.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/착취도시 서울 당신이 모르는 도시의 미궁에 대한 탐색.md</guid><dc:creator><![CDATA[이혜미]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:22:04 GMT</pubDate></item><item><title><![CDATA[나의 가해자들에게：학교 폭력의 기억을 안고 어른이 된 그들과의 인터뷰]]></title><description><![CDATA[“세상에 착한 일진이 어디 있어요?
일진이면 일진이고, 좋은 애면 좋은 애지.”
유튜브 조회 수 300만 왕따였던 어른들 무삭제 인터뷰집2019년 4월 유튜브에는 왕따였던 어른들 Stop Bullying이라는 제목의 시리즈 영상 2편이 올라왔다. 학창 시절 ‘왕따’를 당했던 끔찍한 기억을 여린 몸에 새긴 채 그대로 어른으로 커 버린 이들 10명이 모여 각자 자기 경험담을 털어 놓는 방식의 이 인터뷰 영상물들은 순식간에 조회 수 300만 회를 넘기며 큰 반향을 불러일으켰다. 성원에 힘입어 2편의 영상물이 더 제작되었고 이 시리즈는 6개월여가 지난 지금까지 누적 조회 수 300만 회를 기록하며 더 많은 이들에게 퍼져 나가고 있다.『나의 가해자들에게』는 바로 이 영상물에 담긴 인터뷰 전문을 다듬어 실은 책이다. 영상물들의 재생 시간은 다 합쳐 20여 분 남짓이지만, 실제 진행된 인터뷰는 5시간을 훌쩍 넘었다. 어디서도 들을 수 없는 값진 이야기를 이대로 버리기는 아깝다는 판단에, 책으로 출간하게 된 것. 여기에 영상이 나가고 나서의 삶을 담담히 풀어 놓는 10명의 후일담을 담아 단행본으로서의 가치를 높였다.우리는 흔히 학교 폭력 문제를 10대 시절의 일로만 생각하지만, 사실 이 기억은 지독한 트라우마가 되어 어른이 된 후에도 지속적인 영향을 끼치기 쉽다. 이 책은 바로 이런 점에서 학교 폭력 문제를 전혀 새로운 시선으로 조명한 최초의 책이라 할 수 있다. 또한 실제로 왕따를 당했던 이들이 날것 그대로 전하는 생생한 이야기는 독자들에게 왕따가 실제로 얼마나 심각한 문제인지 확실히 인식시키는 한편, 같은 아픔으로 고민하는 청소년들에게 더없는 공감과 위로가 되어줄 것이다.시작하기 전에
시작하며여자 반출석부
조회 시간
1교시 | 소외의 기억
2교시 | 그때의 감정
3교시 | 가해자와 방관자
4교시 | 가족
점심시간 | 왕따가 되기 전의 나
5교시 | 어른이 된 왕따
6교시 | 우리에게 필요한 것
7교시 | 내가 꿈꾸는 나의 미래남자 반출석부
조회 시간
1교시 | 소외의 기억
2교시 | 그때의 감정
3교시 | 가해자와 방관자
4교시 | 가족
점심시간 | 기억나는 학교의 풍경
5교시 | 어른이 된 왕따
6교시 | 우리에게 필요한 것
7교시 | 내가 꿈꾸는 나의 미래방과 후
가연 | 민아 | 희정 | 주연 | 지영 | 권배 | 의현 | 요셉 | 성호 | 재경]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/나의-가해자들에게-학교-폭력의-기억을-안고-어른이-된-그들과의-인터뷰.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/나의 가해자들에게 학교 폭력의 기억을 안고 어른이 된 그들과의 인터뷰.md</guid><dc:creator><![CDATA[씨리얼]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:20:48 GMT</pubDate></item><item><title><![CDATA[당신의 이름을 지어다가 며칠은 먹었다]]></title><description><![CDATA[2008년 ‘젊은 시의 언어적 감수성과 현실적 확산 능력을 함께 갖췄다’는 평을 받으며 『실천문학』으로 등단한 박준 시인의 첫 시집이 출간되었다. 시인은 당시 한 인터뷰에서 “촌스럽더라도 작고 소외된 것을 이야기하는 시인이 되고 싶어요. 엄숙주의에서 해방된 세대의 가능성은 시에서도 무한하다고 봐요”라 말한 바 있다. 그렇게 ‘작고 소외된’ 것들에 끝없이 관심을 두고 탐구해온 지난 4년, 이제 막 삼십대에 접어든 이 젊은 시인의 성장이 궁금하다. 모름지기 성장이란 삶의 근원적인 슬픔을 깨닫는 것일 터, 이번 시집에 이 세계를 받아들이고 살아간다는 것, 그리고 그 안에서 마주하는 죽음의 순간들에 대한 사유가 짙은 것은, 박준 시인의 깊어져가는 세계를 증거할 것이다.시인의 말1부 나의 사인(死因)은 너와 같았으면 한다인천 반달
미신
당신의 연음
동지
슬픔은 자랑이 될 수 있다
동백이라는 아름다운 재료
꾀병
용산 가는 길-청파동 1
2:8-청파동 2
관음-청파동 3
언덕이 언덕을 모르고 있을 때
光
나의 사인(死因)은 너와 같았으면 한다
태백중앙병원2부 옷보다 못이 많았다지금은 우리가
미인처럼 잠드는 봄날
유월의 독서
호우주의보
기억하는 일
야간자율학습
환절기
낙(落)
오래된 유원지
파주
발톱
당신의 이름을 지어다가 며칠은 먹었다
학(鶴)
옷보다 못이 많았다
여름에 부르는 이름
이곳의 회화를 사랑하기로 합니다
별들의 이주-화포천
광장3부 흙에 종이를 묻는 놀이모래내 그림자극
마음 한철
별의 평야
청룡열차
천마총 놀이터
가을이 겨울에게 여름이 봄에게
낙서
저녁-금강
문병-남한강
꽃의 계단
눈을 감고
날지 못하는 새는 있어도 울지 못하는 새는 없다
꼬마
연
눈썹-1987년4부 눈이 가장 먼저 붓는다연화석재
2박 3일
잠들지 않는 숲
입속에서 넘어지는 하루
희망소비자가격
미인의 발
해남으로 보내는 편지
누비 골방
가족의 휴일
유성고시원 화재기
오늘의 식단-영(暎)에게
동생
당신이라는 세상
세상 끝 등대 1
세상 끝 등대 2발문│이번 생의 장례를 미리 지내며 시인은 시를 쓰네
허수경(시인)]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/당신의-이름을-지어다가-며칠은-먹었다.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/당신의 이름을 지어다가 며칠은 먹었다.md</guid><dc:creator><![CDATA[박준]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:19:47 GMT</pubDate></item><item><title><![CDATA[연애의 책]]></title><description><![CDATA[부엌에 나가 금방 무친 나물과 함께 상을 들이고 싶은 마음이 있었다 그 방에 있자니 오래된 아내처럼 굴고 싶어진 것이다 일으켜 밥을 먹이고 상을 물리고 나란히 누워 각자 먼 곳으로 갔다가 같은 이부자리에서 깨어나는 일
_「잠복」 부분어제는 사랑이 처음 배운 단어인 것처럼 고백이 하고 싶었어요
_「어제」 부분그날은 모두가 웃고 있었고
당신은 술병을 높이 들어올렸다
아무도 모르게 둘이서만
다른 곳으로 갈 수도 있을 것이다
헝클어진 신발들 틈에서
나는 당신의 신발을 한눈에 알아본다
_「사랑의 방」 부분“한국 최고의 연애 시집”(황현산)이라는 찬사를 받은 유진목 시인의 첫 시집 『연애의 책』을 문학동네포에지 57번으로 새롭게 복간한다. 『연애의 책』은 2016년, 시집 한 권 분량의 시를 투고받아 검토한 다음 펴내는 삼인시집선 1번으로 세상에 처음 선을 보인 바 있다. 평론가 황현산과 시인 김정환, 김혜순 세 선정위원의 3년여에 걸친 엄밀한 선정과정의 첫 열매였다. 유진목 시인은 문예지나 신춘문예에서 몇 편의 시를 발표하며 등단한 것이 아닌 처음부터 완결된 고유한 한 권의 세계로 등장한 것이다. 초판 해설을 쓴 조재룡 평론가에 따르면 유진목 시인은 사랑의 자취와 행위, 그 순간 피어오르는 제 마음을 적는 데 몰입하는 것처럼 보인다. 시인은 그가 지나온 ‘저기-삶’을 ‘여기-현실’로 붙들어 매며 장면과 장면(scene)에 밴 사랑의 자국과 상흔을 탁월하게 연출해낸다. 그의 시가 우리에게 내비추어 보여주는 것은 삶의 슬퍼서 찬란한 어둠이고, 삶의 저 즐거워서 컴컴한 빛이다. 그는 상징을 어루만지며, 타인을 호명하는 방식에 각별한 의미를 부여한다. 그렇게 ‘그리움’이라고 부르기에 부족한, 그 어떤 말로도 표현하기 어려운, 특이하고도 독특한 시적 순간을 연애의 사건으로 시로 만들어낸다. 이렇게 아직 우리에게 존재하지 않았던 연애시는 도착한다. 어느새 우리를 다른 곳으로 데려다놓고, 다른 곳을 보게 하는, 그런 시를.(조재룡)우리 이제 뭐할까
한번 더 할까그래
그러자너는 아랫목에 놓인 홍시 같아
너는 윗목에 놓인 요강 같아너는 빨개지고
너는 차오르고우리는 이제 무엇이 될까그사이 마당은 희어지고너를 버릴 때도 이렇게 뜨거우면
너가 그대로 다른 땅에 스미면아직은 깊은 밤에 혼자 나와
너를 안고 둥글게 울었다
―「동지」 전문시인의 말
개정판 시인의 말신체의 방 / 잠복 / 낮잠 / 소설 / 뒷문이 있는 집 / 밖에는 사람들이 웃고 있다 / 접몽 / 에밀 졸라 / 동산 / 호텔 니케로 / 동지 / 그믐 / 수화 / 사이렌의 여름 / 밝은 미래 / 망종 / 울음의 순서 / 반송 / 미경에게 / 리의 세계 / 미선나무 / 벚꽃 여관 / 교대 / 식물의 방 / 혼자 있기 싫어서 잤다 / 아침에 / 매장 / 자목련 이후 / 뒤에 / 동정 / 너라고 말하면 된다 / 지상의 피크닉 / 오늘의 날씨 / 나의 아름다운 세탁소 / 푸른 모서리 / 부재중 통화 / 타전의 전말 / 배꼽 부근 / 아버지와 소와 어머니와 / 미경에게 / 시월 병동 / 당신의 죽음 / 당신의 기원 / 당신, 이라는 문장 / 어제 / 잠보앙가 델 수르 / 첩첩산중 / 사이 / 한밤 / 사랑의 방created: 2024-12-02 02:19
tag: 독서 국내도서 소설/시/희곡 프랑스소설
title: 낭만적 연애와 그 후의 일상
author: 알랭 드 보통
category: 국내도서
total_page: 0
publish_date: 2016-08-24
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/goods/30547371/XL" target="_self">https://image.yes24.com/goods/30547371/XL</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌undefined낭만적 연애와 그 후의 일상1부 | 낭만주의
매혹
신성한 시작
사랑에 빠지다
섹스와 사랑
청혼2부 | 그 후로 오래오래
별것 아닌 일들
토라짐에 대하여
섹스와 검열
감정전이
모든 게 네 탓
가르치기와 배우기3부 | 아이들
사랑의 가르침
사랑스러움
사랑의 한계
섹스와 양육
빨래의 위신4부 | 외도
바람피우는 남자
찬성론
반대론
양립할 수 없는 욕망들
비밀5부 | 낭만주의를 넘어서
애착 이론
성숙함을 향해
결혼할 준비가 되다
미래옮긴이의 말]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/연애의-책.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/연애의 책.md</guid><dc:creator><![CDATA[유진목]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:19:28 GMT</pubDate></item><item><title><![CDATA[다시, 역사의 쓸모：합리적이고 품위 있는 선택을 위한 20가지 지혜]]></title><description><![CDATA[30만 독자가 사랑한 《역사의 쓸모》
더 깊어진 통찰과 한층 풍부해진 경험으로 돌아오다!
“선택에 후회를 남기고 싶지 않을 때
우리에겐 역사가 필요하다“5년 연속 역사 베스트셀러, 국립어린이청소년도서관 ‘청소년추천도서’, 예스24 ‘올해의 책’, 경남·청주·양주 등 전국 지자체 ‘올해의 책’ 등 대한민국에 쓸모 열풍을 불러일으켰던 《역사의 쓸모》가 새로운 이야기로 돌아왔다. 신간 《다시, 역사의 쓸모》는 대한민국 대표 역사 커뮤니케이터 최태성이 지난 5년간 새롭게 발굴한 역사의 쓸모를 담은 책으로 ‘역사를 배워야 하는 이유’에 답했던 전작에서 한 걸음 더 나아가 ‘삶에 역사의 지혜를 들여오는 방법’을 다룬다.700만 명의 가슴을 울린 명강의의 주인공답게 최태성은 수백 년 전 일에 생명을 불어넣고 현대에도 유효한 의미를 찾아 친절하게 풀어내는 탁월한 이야기 솜씨를 발휘한다. 여기에 그간 더 깊고 예리해진 시선과 한층 풍부해진 경험을 더한 《다시, 역사의 쓸모》는 지식을 넘어 삶과 세상을 탐구하는 도구로서 역사를 활용하는 품격 있는 역사 사용법을 소개하며 독자들을 다시 한번 역사의 쓸모 세계로 초대한다.그 어느 때보다 사회 변화가 빠른 시대에 우리에게 절실한 것은 삶의 기준을 바로 세워줄 무언가다. 한두 달만 지나도 낡은 것이 되어버리는 쏟아지는 정보들 대신 수백 년의 시간이 검증한 역사의 통찰에 몸을 기대어 보면 어떨까? 세상에 휩쓸리지 않고 후회 없는 선택을 하며 살아가고 싶은 이들을 위해 《다시, 역사의 쓸모》는 역사에서 찾은 시간이 지나도 변하지 않는 단단한 가치들을 담아냈다. 여전히 인간다운 삶의 쓸모를 고민하는 사람이라면 이 책에서 ‘한 번의 인생, 어떻게 살아야 하는가’에 대한 답을 찾을 수 있을 것이다.|들어가는 글| 시간이 지나도 변하지 않는 가치를 찾는 일1장 | 다시, 역사를 찾는 이유평범한 내가 역사의 주인공이 되는 순간
우연을 필연으로 만드는 힘
각자도생의 시대에 사랑이 갖는 의미
진짜 이야기를 알아가는 지적 기쁨2장 | 삶의 품위를 지켜주는 역사의 통찰김득신: 애쓰고 노력한 끝에는 결국 이룸이 있다
혜경궁: 홍씨 선한 마음으로 세상을 바라봐야 하는 이유
의자왕: 승리 이후를 결정짓는 승자의 품격
황현과 최재형: 어지러운 세상에서 나의 존엄을 지키는 법
우씨왕후: 내 삶의 주인은 나라는 단순한 진실
한명회와 임사홍: 압구정의 주인 한명회는 왜 몰락했을까3장 | 일상에 정성을 더하는 오래된 지혜새로운 발상: 난공불락의 요새를 함락시킨 생각의 전환
거시적 안목: 유럽의 신항로 개척이 알려주는 것
상상력: 얼마나 멀리까지 그릴 수 있는가
차별의 한계: 시대의 막을 내리게 만드는 불공정
성공의 뒷면: 아름다운 결과는 아름다운 과정을 보장하지 않는다
교육의 목표: 이완용을 만든 교육, 윤동주를 만든 교육4장 | 여정의 끝에서 비로소 깨달은 것들자랑할 만한 역사가 있다는 것
새로운 길이 만들어지는 이유
성공이 아닌 섬김을 실천했던 사람
추사 김정희가 말년에 깨달은 행복의 정의]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/다시-역사의-쓸모-합리적이고-품위-있는-선택을-위한-20가지-지혜.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/다시 역사의 쓸모 합리적이고 품위 있는 선택을 위한 20가지 지혜.md</guid><dc:creator><![CDATA[최태성]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:18:35 GMT</pubDate></item><item><title><![CDATA[깊이에의 강요]]></title><description><![CDATA[오래도록 깊은 여운을 남기는 쥐스킨트의 단편 소설집파트리크 쥐스킨트의 단편 소설인 「깊이에의 강요」,「승부」,「장인(匠人) 뮈사르의 유언」과 에세이 「문학의 건망증」등 총 네 편의 작품을 한데 묶었다. 짧은 이야기 뒤로 남겨진 긴 여백 속에서 작가의 세상을 보는 시각을 읽을 수 있는 작품집이다.깊이에의 강요
승부
장인(匠人) 뮈사르의 유언
문학의 건망증]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/깊이에의-강요.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/깊이에의 강요.md</guid><dc:creator><![CDATA[파트리크 쥐스킨트, 김인순]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:14:21 GMT</pubDate></item><item><title><![CDATA[쓰레기책：왜 지구의 절반은 쓰레기로 뒤덮이는가]]></title><description><![CDATA[undefined· 들어가며 | 쓰레기는 돌아오는 거야· CHAPTER 1 쓰레기는 어디서 오는가기억 | 탄생 | 점령 | 풍경· CHAPTER 2 쓰레기는 어디로 가는가잘 가, 쓰레기 | 쓰레기더미에서 노는 아이들 | 드넓은 몽골, 드넓은 쓰레기산 | 아름다운 풍경을 지킬 수 있을까 | 쓰레기를 팔아 먹고사는 사람들 | 쓰레기의 주인이십니까? | 세계의 휴지통이었던 나라 | 충격적인 태평양 쓰레기섬· CHAPTER 3 묻거나 태우거나	다시 쓰거나다시 바닷속으로 | 우리는 열심히 플라스틱 먹방 중 | 강이 인류를 공격할 때 | 비닐봉지는 출입금지 | 캐나다는 왜 필리핀에 쓰레기를 버렸을까 | 발등에 불 떨어진 유럽 | 태워 없애다가 생긴 일 | 바젤협약의 탄생 | 스마트 쓰레기 국가가 된 중국· CHAPTER 4 누구나 알지만 누구도 모르는 쓰레기의 비밀플라스틱이 점령한 세계 | 달콤한 나의 도시 | 나는 매일 24시간 쓰레기를 만들고 있다 | 자본주의, 무한소비의 굴레 | 거대한 변화 속에서· CHAPTER 5 쓰레기를 자원으로 바꾸는 힘혐오시설에서 예술작품으로 | 스키 타러 쓰레기장에 갑니다 | 일본에는 없는 직업, 환경미화원 | 컵 보증금 제도와 공유 컵 | NO 플라스틱 마켓 | 쓰레기를 가져오면 채소를 드려요 | 대만이 쓰레기 배출에 철저한 이유· CHAPTER 6 오 마이 쓰레기, 남은 음식부터 동물사체까지음식이 쓰레기가 되는 시간 | 음식 쓰레기를 먹어 치우는 바퀴벌레 호텔 |하수처리장이 해결하지 못하는 것들 | 버려지는 음식을 구하라 | 한쪽은 굶어 죽고 한쪽은 버리기 바쁜 아이러니 | 쓰레기를 태양으로 보내자고? | 동물은 죽으면 쓰레기장으로 간다· CHAPTER 7 쓰레기 재앙이 온다스티븐 호킹의 마지막 메시지 | 우리의 욕망과 싸워야 하는 이유 | 공동체, 조금씩 서로 기댄다는 것 | 지금이라도 당장 해야 할 노력들 | 상상하라, 무너져도 다시 쌓으려면· 나오며 | 지금의 선택이 미래를 바꿀 거야
· 감사의 말
· 참고 목록]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/쓰레기책-왜-지구의-절반은-쓰레기로-뒤덮이는가.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/쓰레기책 왜 지구의 절반은 쓰레기로 뒤덮이는가.md</guid><dc:creator><![CDATA[이동학]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:13:53 GMT</pubDate></item><item><title><![CDATA[우리는 플라스틱 없이 살기로 했다]]></title><description><![CDATA[“화학물질이 안 좋은 건 알지만 별수 없잖아.” “비닐 포장을 해야 신선하고 오래가지.” “쓰레기 분리배출만 잘하면 되는 거 아냐?” 이런 생각을 하는 당신에게 권하는 책!
플라스틱으로 뒤덮인 세상에 대한 어느 평범한 가족의 유쾌한 반란이 시작된다!우리는 화학물질의 바다에서 살고 있지만, 일상적으로 쓰는 수많은 플라스틱과 비닐의 성분이 무엇인지, 그것이 구체적으로 건강과 환경에 어떤 영향을 미치는지 잘 모른다. 그리고 그 ‘알 수 없다’는 인식과 ‘나쁜 건 알지만 안 쓸 수가 없다’는 체념은 곧 ‘어쩔 수 없으니 그냥 쓰자’는 무감한 행동으로 이어지곤 한다. ‘정말로 모른 척 넘어가도 되는 걸까?’라는 찜찜한 마음을 안고.이런 우리와 다를 바 없던, 그저 쓰레기 분리배출은 잘한다고 스스로 우쭐해하던 보통의 가족이 감히 ‘플라스틱 없이 한 달 살아 보기’에 도전했다! 그들은 왜 이런 실험을 감행하게 되었을까? 이 플라스틱이 넘쳐나는 세상에서 제대로 먹고살 수나 있었을까? 이 책 『우리는 플라스틱 없이 살기로 했다』는 충분히 예상 가능한 엄청난 역경과 시행착오를 거치면서도 재미있고 유쾌하게 ‘플라스틱 없이 살기’를 해나간 산드라 가족의 좌충우돌 실험 보고서다.이들 가족의 이야기를 따라가다 보면, 넘쳐나는 플라스틱이 왜 문제인지, 우리의 건강과 환경에 어떻게 영향을 미치는지, 왜 재활용 시스템만을 믿어서는 안 되는지 등 우리 삶과 환경의 관계를 바라보는 새로운 시야를 얻게 된다. 그리고 ‘나도 이 정도는 해볼 수 있겠다’는 용기와 아이디어를 얻을 수 있다. 작은 모래알이라도 모이면 더 큰 변화를 일으킬 수 있다.추천의 말
프롤로그 : ‘플라스틱 별’은 싫어요1부 모든 시작은 다 어려운 법
친환경적으로 산다고 착각했던 날들
나를 바꾸어 놓은 한 편의 영화
플라스틱 없이 살 수 있을까?
가족과 함께해야 진짜지
시작부터 좌절 모드
생각만큼 쉽지 않다
스파게티도 못 먹게 되는 걸까?
강력한 지원군의 등장
서서히 변해 가는 장보기 패턴
잠깐! 비닐 포장이 정말 그렇게 나쁜 거야?
동료의 충고
냉장고, 세탁기, 청소기는 어쩌지?
플라스틱 없던 시절이 가르쳐 준 것
괜한 짓을 벌인 걸까…?
너무 완벽하게 해내려 하진 말아요
우리 집에 플라스틱 물건이 이렇게나 많았던가!
애들 장난감은 다 어떡하지?
일단 다 치우고 시작하자2부 이제 출발이다
시작 선포식을 겸한 생일 파티
적응하기 어려운 돼지털 칫솔
신문에도 나고 텔레비전에도 나오고
공개토론에 나서다
무한 소비를 부추기는 프레임이 문제
좀 더 계속해도 될 만큼은 자신감이 생기다
플라스틱 없이 보낸 크리스마스, 단 하나의 예외
별난 한 해를 보내며 드리는 인사3부 실험을 넘어서
새해맞이 중간 결산
그간의 경험으로 알게 된 것들
플라스틱이 위생적이라는 편견은 버려!
그래, 육식도 그만 끊자!
대체품이 없으면 아예 안 쓰는 것도 한 방법
동지들이 있어 외롭지 않다네
세상은 여전히 플라스틱으로 가득하고…
크로아티아에서의 절망과 희망
왜 더 오래 쓸 수 있게 만들지 않을까?
마지막 도전 분야, 옷은 어쩌지?
장바구니를 바꾸자, 비닐에서 진짜 천으로!
결코 최종적일 수 없는 결론에필로그 : 그간 있었던 일고맙습니다
‘올바른 소비’를 위한 팁
옮긴이 후기created: 2024-12-02 02:13
tag: 독서 국내도서 사회정치 생태/환경 환경문제
title: 우리는 플라스틱 없이 살기로 했다
author: 산드라 크라우트바슐, 류동수
category: 국내도서
total_page: 320
publish_date: 2016-09-07
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/goods/32079372/XL" target="_self">https://image.yes24.com/goods/32079372/XL</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌“화학물질이 안 좋은 건 알지만 별수 없잖아.” “비닐 포장을 해야 신선하고 오래가지.” “쓰레기 분리배출만 잘하면 되는 거 아냐?” 이런 생각을 하는 당신에게 권하는 책!
플라스틱으로 뒤덮인 세상에 대한 어느 평범한 가족의 유쾌한 반란이 시작된다!우리는 화학물질의 바다에서 살고 있지만, 일상적으로 쓰는 수많은 플라스틱과 비닐의 성분이 무엇인지, 그것이 구체적으로 건강과 환경에 어떤 영향을 미치는지 잘 모른다. 그리고 그 ‘알 수 없다’는 인식과 ‘나쁜 건 알지만 안 쓸 수가 없다’는 체념은 곧 ‘어쩔 수 없으니 그냥 쓰자’는 무감한 행동으로 이어지곤 한다. ‘정말로 모른 척 넘어가도 되는 걸까?’라는 찜찜한 마음을 안고.이런 우리와 다를 바 없던, 그저 쓰레기 분리배출은 잘한다고 스스로 우쭐해하던 보통의 가족이 감히 ‘플라스틱 없이 한 달 살아 보기’에 도전했다! 그들은 왜 이런 실험을 감행하게 되었을까? 이 플라스틱이 넘쳐나는 세상에서 제대로 먹고살 수나 있었을까? 이 책 『우리는 플라스틱 없이 살기로 했다』는 충분히 예상 가능한 엄청난 역경과 시행착오를 거치면서도 재미있고 유쾌하게 ‘플라스틱 없이 살기’를 해나간 산드라 가족의 좌충우돌 실험 보고서다.이들 가족의 이야기를 따라가다 보면, 넘쳐나는 플라스틱이 왜 문제인지, 우리의 건강과 환경에 어떻게 영향을 미치는지, 왜 재활용 시스템만을 믿어서는 안 되는지 등 우리 삶과 환경의 관계를 바라보는 새로운 시야를 얻게 된다. 그리고 ‘나도 이 정도는 해볼 수 있겠다’는 용기와 아이디어를 얻을 수 있다. 작은 모래알이라도 모이면 더 큰 변화를 일으킬 수 있다.추천의 말
프롤로그 : ‘플라스틱 별’은 싫어요1부 모든 시작은 다 어려운 법
친환경적으로 산다고 착각했던 날들
나를 바꾸어 놓은 한 편의 영화
플라스틱 없이 살 수 있을까?
가족과 함께해야 진짜지
시작부터 좌절 모드
생각만큼 쉽지 않다
스파게티도 못 먹게 되는 걸까?
강력한 지원군의 등장
서서히 변해 가는 장보기 패턴
잠깐! 비닐 포장이 정말 그렇게 나쁜 거야?
동료의 충고
냉장고, 세탁기, 청소기는 어쩌지?
플라스틱 없던 시절이 가르쳐 준 것
괜한 짓을 벌인 걸까…?
너무 완벽하게 해내려 하진 말아요
우리 집에 플라스틱 물건이 이렇게나 많았던가!
애들 장난감은 다 어떡하지?
일단 다 치우고 시작하자2부 이제 출발이다
시작 선포식을 겸한 생일 파티
적응하기 어려운 돼지털 칫솔
신문에도 나고 텔레비전에도 나오고
공개토론에 나서다
무한 소비를 부추기는 프레임이 문제
좀 더 계속해도 될 만큼은 자신감이 생기다
플라스틱 없이 보낸 크리스마스, 단 하나의 예외
별난 한 해를 보내며 드리는 인사3부 실험을 넘어서
새해맞이 중간 결산
그간의 경험으로 알게 된 것들
플라스틱이 위생적이라는 편견은 버려!
그래, 육식도 그만 끊자!
대체품이 없으면 아예 안 쓰는 것도 한 방법
동지들이 있어 외롭지 않다네
세상은 여전히 플라스틱으로 가득하고…
크로아티아에서의 절망과 희망
왜 더 오래 쓸 수 있게 만들지 않을까?
마지막 도전 분야, 옷은 어쩌지?
장바구니를 바꾸자, 비닐에서 진짜 천으로!
결코 최종적일 수 없는 결론에필로그 : 그간 있었던 일고맙습니다
‘올바른 소비’를 위한 팁
옮긴이 후기created: 2024-12-02 02:13
tag: 독서 국내도서 사회정치 생태/환경 환경문제
title: 우리는 플라스틱 없이 살기로 했다
author: 산드라 크라우트바슐, 류동수
category: 국내도서
total_page: 320
publish_date: 2016-09-07<br>
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/goods/32079372/XL" target="_self">https://image.yes24.com/goods/32079372/XL</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌“화학물질이 안 좋은 건 알지만 별수 없잖아.” “비닐 포장을 해야 신선하고 오래가지.” “쓰레기 분리배출만 잘하면 되는 거 아냐?” 이런 생각을 하는 당신에게 권하는 책!
플라스틱으로 뒤덮인 세상에 대한 어느 평범한 가족의 유쾌한 반란이 시작된다!우리는 화학물질의 바다에서 살고 있지만, 일상적으로 쓰는 수많은 플라스틱과 비닐의 성분이 무엇인지, 그것이 구체적으로 건강과 환경에 어떤 영향을 미치는지 잘 모른다. 그리고 그 ‘알 수 없다’는 인식과 ‘나쁜 건 알지만 안 쓸 수가 없다’는 체념은 곧 ‘어쩔 수 없으니 그냥 쓰자’는 무감한 행동으로 이어지곤 한다. ‘정말로 모른 척 넘어가도 되는 걸까?’라는 찜찜한 마음을 안고.이런 우리와 다를 바 없던, 그저 쓰레기 분리배출은 잘한다고 스스로 우쭐해하던 보통의 가족이 감히 ‘플라스틱 없이 한 달 살아 보기’에 도전했다! 그들은 왜 이런 실험을 감행하게 되었을까? 이 플라스틱이 넘쳐나는 세상에서 제대로 먹고살 수나 있었을까? 이 책 『우리는 플라스틱 없이 살기로 했다』는 충분히 예상 가능한 엄청난 역경과 시행착오를 거치면서도 재미있고 유쾌하게 ‘플라스틱 없이 살기’를 해나간 산드라 가족의 좌충우돌 실험 보고서다.이들 가족의 이야기를 따라가다 보면, 넘쳐나는 플라스틱이 왜 문제인지, 우리의 건강과 환경에 어떻게 영향을 미치는지, 왜 재활용 시스템만을 믿어서는 안 되는지 등 우리 삶과 환경의 관계를 바라보는 새로운 시야를 얻게 된다. 그리고 ‘나도 이 정도는 해볼 수 있겠다’는 용기와 아이디어를 얻을 수 있다. 작은 모래알이라도 모이면 더 큰 변화를 일으킬 수 있다.추천의 말
프롤로그 : ‘플라스틱 별’은 싫어요1부 모든 시작은 다 어려운 법
친환경적으로 산다고 착각했던 날들
나를 바꾸어 놓은 한 편의 영화
플라스틱 없이 살 수 있을까?
가족과 함께해야 진짜지
시작부터 좌절 모드
생각만큼 쉽지 않다
스파게티도 못 먹게 되는 걸까?
강력한 지원군의 등장
서서히 변해 가는 장보기 패턴
잠깐! 비닐 포장이 정말 그렇게 나쁜 거야?
동료의 충고
냉장고, 세탁기, 청소기는 어쩌지?
플라스틱 없던 시절이 가르쳐 준 것
괜한 짓을 벌인 걸까…?
너무 완벽하게 해내려 하진 말아요
우리 집에 플라스틱 물건이 이렇게나 많았던가!
애들 장난감은 다 어떡하지?
일단 다 치우고 시작하자2부 이제 출발이다
시작 선포식을 겸한 생일 파티
적응하기 어려운 돼지털 칫솔
신문에도 나고 텔레비전에도 나오고
공개토론에 나서다
무한 소비를 부추기는 프레임이 문제
좀 더 계속해도 될 만큼은 자신감이 생기다
플라스틱 없이 보낸 크리스마스, 단 하나의 예외
별난 한 해를 보내며 드리는 인사3부 실험을 넘어서
새해맞이 중간 결산
그간의 경험으로 알게 된 것들
플라스틱이 위생적이라는 편견은 버려!
그래, 육식도 그만 끊자!
대체품이 없으면 아예 안 쓰는 것도 한 방법
동지들이 있어 외롭지 않다네
세상은 여전히 플라스틱으로 가득하고…
크로아티아에서의 절망과 희망
왜 더 오래 쓸 수 있게 만들지 않을까?
마지막 도전 분야, 옷은 어쩌지?
장바구니를 바꾸자, 비닐에서 진짜 천으로!
결코 최종적일 수 없는 결론에필로그 : 그간 있었던 일고맙습니다
‘올바른 소비’를 위한 팁
옮긴이 후기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/우리는-플라스틱-없이-살기로-했다.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/우리는 플라스틱 없이 살기로 했다.md</guid><dc:creator><![CDATA[산드라 크라우트바슐, 류동수]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:13:41 GMT</pubDate></item><item><title><![CDATA[작은 인간 ： 인류에 관한 102가지 수수께끼]]></title><description><![CDATA[undefinedundefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/작은-인간-인류에-관한-102가지-수수께끼.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/작은 인간 인류에 관한 102가지 수수께끼.md</guid><dc:creator><![CDATA[마빈 해리스]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:12:50 GMT</pubDate></item><item><title><![CDATA[어른의 중력：생의 1/4 승강장에 도착한 어린 어른을 위한 심리학]]></title><description><![CDATA[· 이 세계의 어른 아이, ‘2030 금쪽이’들을 위한 심리학
· 2030을 상담해온 심리학자가 제시하는, 방황하는 어린 어른을 위한 영혼의 지도
· 대상화된 ‘MZ세대’를 대체할, 생애 주기 분석에 입각한 심리학적 이름 ‘쿼터라이프’
· ‘안정형’과 ‘의미형’, 서로 다른 모두가 결핍을 메우기 위해 고군분투하는 시기
· 국내 최고 트라우마 상담가 김태경 교수, 영화 〈벌새〉 김보라 감독 강력 추천팬데믹 이후 더 두드러지게 보이는 현상 가운데 하나는, 20대 정신건강에 대한 위기가 표면으로 드러났다는 점이다. 한국의 20대, 30대의 사망 원인 1위는 ‘자살’이며 이제 숨길 수 없는 문제가 되었다. 그럼에도 사회는 여전히 20대에게 이중적인 시선을 보낸다. ‘가장 좋을 때’라거나 ‘청춘’이라는 낭만적인 말로 그들을 표현하거나 ‘MZ세대’처럼 기성세대와 다른 특별한 특성을 부여하는 듯하면서 본질적으로는 마케팅 용어로서 그들을 대상화한다. 이 책은 자신이 통제할 수 없는, 어른의 무게를 처음 마주한 2030대의 이야기를 한다. 안개처럼 흐릿하지만 무거운 중력, 어린 시절 무한한 가능성은 현실에 맞게 작아진다는 사실을 인정해야 하는 시기, 하지만 동시에 내가 잘하는 게 있을 것이라는 가능성에 대한 작은 희망. 그리고 용기 없는 나에게 누군가 나타나 이 세계에서 나의 가능성을 길어 올려주길 바라는 그 마음들. 방황하는 그 마음을 위한 책이다.청소년기를 통과했지만 아직도 방황과 고민으로 가득한 성인들의 마음을 놀랍도록 잘 담아낸 이 책은 이 시기에 겪게 되는 보편적인 방황과 고민에 대해 따뜻한 분석을 건넨다. 이제 성인이 되었으니 알아서 잘하라며 사회는 등을 떠밀지만, 20대, 30대를 맞은 당사자들의 마음은 앞이 잘 보이지 않는 막막한 괴로움과 서툰 방황으로 가득하다. 이는 시대와 지역을 막론하고 역사적으로 매우 보편적인 현상이다.융 심리학에 영향을 받은 심리학자인 저자는 가장 먼저 그들의 ‘심리학적’인 이름을 되찾는 일부터 시작한다. 아이도 아니고 어른도 아닌 생의 1/4 지점, ‘쿼터라이프’라는 생애 주기를 지정하고, 이 시기를 변하지 않는 심리적 단계로 구분하여, 그들의 방황과 고민을 위한 정확한 지도를 전달한다. 심리학을 넘어 이 세대의 문제에 접근하는 저자의 통찰력 있는 시각, 흡입력 있는 필치가 책의 깊이를 더한다. 상담심리학자인 저자는 실제 상담에서 접한 수많은 젊은이들의 사례 중에서도 가장 생생하면서도 핵심적이고 보편적인 부분을 효과적으로 재구성해 마치 캐릭터처럼 보여주며, 그들이 온전한 나를 찾고 세상으로 나아가는 과정을 드러낸다. 너무나 내 마음 같은 수많은 이야기 속에서 독자는 이들 깊은 내면에 자리한 장애물에 대한 탐색과 해결 과정에 함께 참여하게 된다. MBTI에 친숙한 독자라면 ‘안정형’과 ‘의미형’이 각각 고민하고 분투하는 과정에 대해서도 더욱 직관적으로 이해할 수 있을 것이다.마치 ‘영혼의 지도’를 따라 찾아가는 듯한 이 온전한 스토리텔링을 따라가다 보면 독자는 온전한 자기 이해와 삶 속으로 함께 걸어 나가는 경험을 할 수 있다. 방황하는 이 시대의 2030에게 이 책은 현대적 융 심리학이 제시할 수 있는 어쩌면 가장 온전하고 안전한 지도일지도 모른다.머리말: 어른의 무게가 보이지 않는 중력처럼 무겁게 느껴질 때1부 생의 1/4, 정의되지 않은 이름 없는 시기1장 20대는 눈부시다는 거짓말: 왜 누구도 이 고통에 대해서 말하지 않을까?
2장 누군가는 걸어온 길: 그들은 언제나 방향을 잃고, 잃고, 찾았다
3장 지금보다 더 나은 삶: 방황을 끝낼 안전한 지도가 우리에게 있다면2부 어른의 무게를 넘어4장 의미형
5장 안정형
6장 분리
7장 경청
8장 구축
9장 통합맺음말: 길을 잃었을 때는 완전히 다른 미래에 온 마음을 바쳐야 한다
감사의 말 ~/OneDrive/Obsidian/Blogs (main)
$ git add .
warning: in the working copy of 'books/0_reading-log(auto-sync).html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'books/do-it-점프-투-파이썬-중학생도-첫날부터-실습하는-초고속-입문서.html', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'books/싯다르타.html', LF will be replaced by CRLF the next time Git touches it]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/어른의-중력-생의-1／4-승강장에-도착한-어린-어른을-위한-심리학.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/어른의 중력 생의 1／4 승강장에 도착한 어린 어른을 위한 심리학.md</guid><dc:creator><![CDATA[사티아 도일 바이오크, 임슬애]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:12:27 GMT</pubDate></item><item><title><![CDATA[자존감 수업：하루에 하나, 나를 사랑하게 되는 자존감 회복 훈련]]></title><description><![CDATA[심리학 책 아무리 읽어도 자존감 그대로인 사람에게 추천하는 책!
정신과 의사 ‘윤답장’ 선생의 자존감 셀프 코칭법자존감 전문가이자 정신과 의사인 윤홍균 원장이 2년 넘게 심혈을 기울여 쓴 책으로, 자존감이 우리 삶에 미치는 영향을 친절하게 알려주고, 자존감을 끌어올리는 실질적인 방법을 알려주는 책. 높은 자존감을 갖고 싶지만 방법을 모르는 사람, 낮은 자존감 때문에 내면의 불화와 갈등을 겪고 있는 이들이 건강한 자존감을 회복하도록 돕는다.틈만 나면 뭔가를 배우고 열심인데 늘 결핍감에 시달리는 사람, 겸손과 배려가 넘쳐 자존감까지 떨어진 사람, 작은 말에도 쉽게 상처받는 사람, 상대의 반응이 두려워 눈치보는 사람, 사랑과 이별의 과정이 유난히 힘든 사람, 진짜 원하는 것이 뭔지 헷갈려 엉뚱한 곳에 에너지를 쏟는 사람, 감정과 싸우느라 에너지가 쉽게 고갈되는 사람, 결국 이런 모습이 싫어 자신을 사랑하지 못한 채 살아가는 사람들이 보면 크게 도움을 받을 수 있는 책이다.다양한 칼럼과 방송을 통해 ‘윤답장’ 선생으로 유명한 저자는 “나도 뒤처지는 기분, 포기하고 싶은 마음, 중독에 빠져 희망을 놓고 싶은 충동에 사로잡히곤 했다”고 고백하며, 자신이 그랬듯 더 많은 사람들이 자존감을 회복해 건강한 삶을 살길 바라는 마음을 담아 이 책을 펴냈다.저자는 자존감을 회복하는 과정을 자전거 타기에 비유하고 있다.“우리는 자존감에 올라타 중심을 잡고 살아야 할 운명인데, 자존감은 자전거처럼 쉴 새 없이 움직인다. 이 책은 자존감이라는 자전거를 타는 법을 알려주고, 넘어지지 않고 오래 타는 법, 안전하게 넘어지는 법, 착용해야 할 보호장비에 대해서 알려준다.” “자전거를 타는 동안 우리는 분명 한두 번 넘어질 것이다. 자전거를 배운 지 30년이 넘은 사람도 가끔 넘어지고 깨지는 이치와 같다. 하지만 자전거를 일으켜 다시 올라탈 줄 알며, 상처를 치료할 줄 아는 사람은 더 이상 자전거를 두려워하지 않는다. 오히려 자주 타고 싶고, 애용하며, 즐기게 될 것이다”.Prologue 문제는 자존감이다Part1 자존감이 왜 중요한가1 자존감의 세 가지 축
2 자존감에 대한 오해와 편견
3 왜 지금 자존감이 중요한가Part2 사랑 패턴을 보면 자존감이 보인다1 사랑받을 자격을 의심하는 사람들
2 자신의 가치를 부정하는 사람
3 끊임없이 묻고 확인하는 사랑
4 싸우면서 끊지 못하는 관계
5 이별이 무서워 떠나지 못하는 사랑
6 미움받을까 두려워 자신을 포장하는 사람
2장을 마치며: 사랑 탓도, 내 탓도 아니다Part3 자존감이 인간관계를 좌우한다1 나는 얼마나 인정받고 있을까
2 자존감을 깎아내리는 직업이 있다
3 나는 얼마나 쓸모 있는 존재인가
4 결정 장애에 빠진 사람들
5 심리학 책을 아무리 읽어도 자존감이 그대로인 이유
6 나는 특이하다고 생각하는 사람
7 눈치 보는 사람의 심리
8 지나치게 의존하는 사람들
3장을 마치며: 적당한 거리가 나를 지켜준다Part4 자존감을 방해하는 감정들1 왜 감정은 뜻대로 조절하기 어려울까
2 감정 조절을 위해 구별해야 할 것들
3 다루기 힘든 감정 다루기: 창피함, 공허함, 양가감정
4 뜨거운 감정 다루기: 자기혐오, 죄책감, 자기연민, 자기애
5 차가운 감정 다루기: 실망, 무시, 냉소, 무관심
4장을 마치며: 감정이라는 에너지를 이용하라Part5 자존감 회복을 위해 버려야 할 마음 습관1 미리 좌절하는 습관
2 무기력
3 열등감
4 미루기와 회피하기
5 예민함
5장을 마치며: 받아들이고 원하고 지속하라Part6 자존감 회복을 위해 극복할 것들1 상처 극복하기
2 저항 극복하기
3 비난 극복하기
4 악순환 극복하기Part7 자존감을 끌어올리는 다섯 가지 실천1 자신을 맹목적으로 사랑하기로 ‘결심하기’
2 자신을 사랑하기
3 스스로 선택하고 결정하기
4 ‘지금, 여기’에 집중하기
5 패배주의를 뚫고 전진하기Epilogue 당신은 밀림의 왕이다]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/자존감-수업-하루에-하나-나를-사랑하게-되는-자존감-회복-훈련.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/자존감 수업 하루에 하나 나를 사랑하게 되는 자존감 회복 훈련.md</guid><dc:creator><![CDATA[윤홍균]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:12:03 GMT</pubDate></item><item><title><![CDATA[메리골드 마음 세탁소]]></title><description><![CDATA[‘메리골드 마음 세탁소’ 100쇄 돌파!
영미 동시출간 기념 한정 버블 에디션“마음의 얼룩을 마법처럼 지워드립니다”
전 세계 독자와 언론이 주목하는 K-힐링 ‘문학 테라피’
오래 소장할 수 있는 튼튼한 양장본 전격 출간!출간 1년 7개월 만에 100쇄 돌파!
영미 펭귄랜덤하우스 동시 출간!
싱가포르 키노쿠니야 서점 종합 1위!★★★온라인서점 선정 2023년 소설 베스트셀러 1위!
★★★한국 소설 최초! 펭귄랜덤하우스 최고가 수출
★★★영국, 미국 포함 10개국 해외 출간, 20개국 수출 계약 진행
★★★2023년 교육청 선정 도서, 청소년이 선정한 추천 도서
★★★2024년 10여 지자체·대학교 ‘올해의 책’ 선정윤정은 작가의 베스트셀러 소설 『메리골드 마음 세탁소』가 100쇄 돌파와 영국·미국 동시 출간을 기념하여 ‘버블 에디션’으로 새롭게 출간된다. 지금까지 일본, 중국, 프랑스, 이탈리아, 브라질을 포함한 해외 10개국에 출간되고 20개국에 판권이 계약된 『메리골드 마음 세탁소』는 출간 1년 7개월여 만에 ‘K-힐링’의 독보적 위치에서 한국 문학을 대표하는 작품 중 하나가 되었다. 펭귄랜덤하우스를 통해 출간된 영미판은 영국의 시사주간지 《이코노미스트》에서도 주목할 만큼 해외의 독자들과 언론의 관심을 받고 있다. 세계 각국에 지점을 두고 운영되는 서점 ‘키노쿠니야’ 싱가포르에서 종합순위 1위를 기록하기도 했다. 국내에서도 2024년 전국 각지의 지자체와 대학교의 ‘올해의 책’으로 선정되면서, 여전히 마음을 울리는 문학 테라피로 독자들의 사랑을 입증하고 있다.세계적으로 한국 힐링 소설의 폭발적 인기를 견인하고 있는 『메리골드 마음 세탁소』가 국내 독자들을 위해 새롭게 선보이는 ‘버블 에디션’은 펭귄랜덤하우스의 영미판 표지에서 재탄생되었다. 매일 일기예보를 살피어 맑은 날, 흐린 날, 춥지도 덥지도 않은 어떤 날들이 우리 앞에 당도할 때 불현듯 놀라지 않을 수 있도록, 힘든 순간에도 곧 좋은 날이 올 거라고, 인생의 일기예보처럼 마음을 편안하게 해주는 소설 『메리골드 마음 세탁소』와 함께 웃고, 궁금해하고, 성장하는 시간을 선물하기에도 제격이다.우리는 가끔 시간을 되돌려 과거로 돌아가 후회됐던 일을 되돌리고 싶어 한다. 그런데 과연 그 일을 지워버리는 게 현명한 선택일까? 그리고 그 기억을 지웠을 때 지금의 내가 있을 수 있을까? 만약 그 기억만 없다면 앞으로 행복만 할 수 있을까? 『메리골드 마음 세탁소』는 한밤중 언덕 위에 생겨난, 조금 수상하고도 신비로운 세탁소에서 벌어지는 일들을 그린 힐링 판타지 소설이다. 창백하게 하얀 얼굴에 젓가락처럼 마른 몸, 까맣고 구불구불 긴 머리의 미스테리한 여자는 세탁소를 찾아오는 누군가를 위해 매일같이 따뜻한 차를 끓인다. 차를 마신 이들은 어느 누구에게도 말하지 못했던 비밀스러운 이야기들을 자기도 모르게 그녀에게 털어놓는다. 아픈 날의 기억을 얼룩 지우듯 모조리 깨끗이 지워달라고 부탁한 사람들은 과연 세탁소를 나서며 행복해질 수 있을까?『하고 싶은 대로 살아도 괜찮아』를 비롯해 약 50만 독자들에게 큰 사랑을 받아온 윤정은 작가가 문학상 수상 이후 11년 만에 출간한 장편소설 『메리골드 마음 세탁소』은 조용한 마을에 마법처럼 등장한 세탁소를 배경으로 펼쳐진다. 우연히 세탁소를 찾아온 사람들의 갖가지 사연과 속 깊은 대화를 통해 세탁소 주인 ‘지은’의 내면에 찾아오는 변화를 따뜻한 시선으로 그려냈다. 가난에 시달려 꿈을 포기한 어린 시절, 사랑했던 연인의 배신, 부와 명예에 홀려 놓쳐버린 삶, 학교 폭력으로 인한 상처와 방황, 자식을 위해 몸 바쳐 보낸 청춘 등 우리 각자의 삶을 닮은 이야기가 마음을 울린다. 상처를 인정하고 마음을 열어 보이는 용기와, 이웃의 아픔에 공감하고 상처를 위로하는 따뜻한 마음이 작품 전반에 진하게 녹아 있다. 이 책 『메리골드 마음 세탁소』는 벼랑 끝에 몰린 것 같은 어느 날, 마음 같은 건 없었으면 좋겠다고 생각되는 그런 날에 숨어들어 상처를 털어낼 수 있는 은신처가 되어줄 것이다.메리골드 마음 세탁소 009
에필로그 267]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/메리골드-마음-세탁소.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/메리골드 마음 세탁소.md</guid><dc:creator><![CDATA[윤정은]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:11:50 GMT</pubDate></item><item><title><![CDATA[부지런한 사랑：몸과 마음을 탐구하는 이슬아 글방]]></title><description><![CDATA[undefined프롤로그_부지런히 쓸 체력, 부지런히 사랑할 체력 _05글방의 시작
나의 어린 스승들에 관하여 _13
믿어지는 문장들 _17
재능과 반복 _23
음식과 글쓰기 _27형제 글방
오, 형제여 _33
소년의 마음으로 쓰는 소년의 글 _46
탄생과 거짓말 _51여수 글방
무엇이 야한가 _57
문제 해결의 경험치 _64
주어가 남이 될 때 _69
잡담과 간식 _75
몸의 일기 _79
여수 아이들에게 쓴 편지 _83
글투의 발견 _134
쉬운 감동, 어려운 흔들림 _140청소년 글방
건전 교사 _147
남중생과 나 _155
재능과 운명 _159
그날 입은 옷 _167
그리움과 디테일 _171
긴장과 눈물 _175나의 유년과 어딘 글방
으악 너무너무 무섭다 _183
일기 검사 _190
해명하지 않을 용기 _203
먼저 울거나 웃지 않고 말하기 _207어른여자 글방
언니들의 문장 _213코로나 시대의 글방
코로나 시대의 글쓰기 교사 _227
어린이의 허송세월 _231
만날 수 없잖아, 느낌이 중요해 _261
입체적인 타인들 _265
남의 고달픔을 쓰는 연습 _269
접속사 없이 말하는 사랑 _275에필로그_나의 오랜 스승으로부터 _280created: 2024-12-02 02:10
tag: 독서 국내도서 에세이 한국에세이
title: 부지런한 사랑：몸과 마음을 탐구하는 이슬아 글방
author: 이슬아
category: 국내도서
total_page: 0
publish_date: 2020-10-21
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/goods/93710310/XL" target="_self">https://image.yes24.com/goods/93710310/XL</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌undefined프롤로그_부지런히 쓸 체력, 부지런히 사랑할 체력 _05글방의 시작
나의 어린 스승들에 관하여 _13
믿어지는 문장들 _17
재능과 반복 _23
음식과 글쓰기 _27형제 글방
오, 형제여 _33
소년의 마음으로 쓰는 소년의 글 _46
탄생과 거짓말 _51여수 글방
무엇이 야한가 _57
문제 해결의 경험치 _64
주어가 남이 될 때 _69
잡담과 간식 _75
몸의 일기 _79
여수 아이들에게 쓴 편지 _83
글투의 발견 _134
쉬운 감동, 어려운 흔들림 _140청소년 글방
건전 교사 _147
남중생과 나 _155
재능과 운명 _159
그날 입은 옷 _167
그리움과 디테일 _171
긴장과 눈물 _175나의 유년과 어딘 글방
으악 너무너무 무섭다 _183
일기 검사 _190
해명하지 않을 용기 _203
먼저 울거나 웃지 않고 말하기 _207어른여자 글방
언니들의 문장 _213코로나 시대의 글방
코로나 시대의 글쓰기 교사 _227
어린이의 허송세월 _231
만날 수 없잖아, 느낌이 중요해 _261
입체적인 타인들 _265
남의 고달픔을 쓰는 연습 _269
접속사 없이 말하는 사랑 _275에필로그_나의 오랜 스승으로부터 _280]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/부지런한-사랑-몸과-마음을-탐구하는-이슬아-글방.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/부지런한 사랑 몸과 마음을 탐구하는 이슬아 글방.md</guid><dc:creator><![CDATA[이슬아]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:11:25 GMT</pubDate></item><item><title><![CDATA[눈사람 자살 사건]]></title><description><![CDATA[독자들의 많은 사랑을 받았지만 안타깝게도 절판되었던 최승호의 우화집 『황금털 사자』(해냄, 1997)를 복간하였다. 이번에 복간하면서 선생께서 제목도 “눈사람 자살 사건”으로 바꾸었고, 내용도 상당 부분 바꾸었다. 박상순 시인의 북디자인이 또한 책을 새롭게 만드는 데 큰 몫을 했다. 표지 디자인은 물론 본문의 그림도 다 바뀌었다. 따라서 복간이라기보다는 개정판에 가깝다고 하겠다. 최승호 우화집 『눈사람 자살 사건』에 나오는 우화들은 대개 짧다. 웬만한 산문시보다도 짧다. 그런데 그 짧은 문장에 담긴 의미는 결코 가볍지 않다. 결코 녹록지 않다. 또한 처음 책이 나온 지 30년이 훌쩍 지났지만, 최승호 선생이 들려주는 한 편 한 편의 우화는 지금의 세상과 빗대어도 전혀 어색함이 없다. 고전이 그렇듯이 좋은 글은 세월의 풍화를 이겨내는 법이다. 삶이란 무엇인지, 인간관계란 무엇인지, 생태계 속에서 인간과 자연은 어떻게 함께하는지 등등 주옥같은 우화를 만나보기 바란다.책머리에인생연습
거울의 분노
눈사람 자살 사건
개미
비누로 만든 교회
흑암지옥
눈사람의 방문
동냥
천국의 거울
고슴도치 두 마리
마지막 개똥벌레
불면의 시대
도둑
콧구멍 없는 송아지
고수
해탈한 구더기
코뿔소의 선택
초
구덩이
발 없는 새
깨어진 항아리
인간 동물원
망치뱀
이상한 물고기
바다의 비밀
네모 속의 비단잉어
낚시꾼을 끌고 간 물고기
쓸개 빠진 곰
북어대가리
황금털 사자
개미귀신
심판
생명
오, 징그러운 고기
불로장생
요강
놀림
빠른 시계들
편지
왕도
흉
발이 큰 올빼미
벌목
들장미
누에
안개
꿈
가면을 쓴 늙은이
흑국의 슬픔
혀
새우의 힘
독사와 돼지
앵무새 학교
게들의 식탁
구름을 먹는 기린
물뚱뚱이 왕
늪
질투
제비와 제비꽃
어느 기회주의자의 죽음
암탉은 말한다
빵가게 주인
할미꽃
천왕지팡이
고통과 광기
분열된 다올 씨
두 겹의 꿈
결박
오해
열등감
정원사
슬픔
처세술 강의
물 위에 쓰는 우화그림 목록]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/눈사람-자살-사건.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/눈사람 자살 사건.md</guid><dc:creator><![CDATA[최승호]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:11:08 GMT</pubDate></item><item><title><![CDATA[날씨와 얼굴]]></title><description><![CDATA[undefined프롤로그: 마음에 걸리는 얼굴을 유심히 바라보았다1부 동물에 대해 잊어버린 것우리는 혼자 먹지 않는다
미래를 말하고 싶다면
이토록 구체적인 고기
다시 차리는 식탁
목숨을 세는 방식
동물어가 번역되는 상상
어떤 시국선언
가짜 해법에 속지 말 것2부 나 아닌 얼굴들한여름의 택배 노동자
우리 사랑을 아무것도 아닌 것으로 하지 않으리
이주여성이 마이크를 들었다
눈 밝은 어느 독자를 생각하며
인터뷰하는 마음
깊게 듣는 사람
슬픔을 모르는 수장들
누구나 반드시 소수자가 된다
서로 다른 운동이 만나는 순간
당연하지 않은 부모
납작하지 않은 고통
가릴 수 없는 말들3부 반복하고 싶지 않은 것의 목록쓰레기로 이루어진 언덕과 바다에서
산불을 바라보며
어떤 멸종
몸을 씻으며 하는 생각
최초의 해방
여자를 집으로 데려오는 여자들
결코 절망하지 않을 친구들에게에필로그: 더 많이 보는 눈created: 2024-12-02 02:10
tag: 독서 국내도서 에세이 한국에세이
title: 날씨와 얼굴
author: 이슬아
category: 국내도서
total_page: 190
publish_date: 2023-02-20
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/goods/117519001/XL" target="_self">https://image.yes24.com/goods/117519001/XL</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌undefined프롤로그: 마음에 걸리는 얼굴을 유심히 바라보았다1부 동물에 대해 잊어버린 것우리는 혼자 먹지 않는다
미래를 말하고 싶다면
이토록 구체적인 고기
다시 차리는 식탁
목숨을 세는 방식
동물어가 번역되는 상상
어떤 시국선언
가짜 해법에 속지 말 것2부 나 아닌 얼굴들한여름의 택배 노동자
우리 사랑을 아무것도 아닌 것으로 하지 않으리
이주여성이 마이크를 들었다
눈 밝은 어느 독자를 생각하며
인터뷰하는 마음
깊게 듣는 사람
슬픔을 모르는 수장들
누구나 반드시 소수자가 된다
서로 다른 운동이 만나는 순간
당연하지 않은 부모
납작하지 않은 고통
가릴 수 없는 말들3부 반복하고 싶지 않은 것의 목록쓰레기로 이루어진 언덕과 바다에서
산불을 바라보며
어떤 멸종
몸을 씻으며 하는 생각
최초의 해방
여자를 집으로 데려오는 여자들
결코 절망하지 않을 친구들에게에필로그: 더 많이 보는 눈]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/날씨와-얼굴.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/날씨와 얼굴.md</guid><dc:creator><![CDATA[이슬아]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:10:52 GMT</pubDate></item><item><title><![CDATA[시와 반시 2024. 여름]]></title><description><![CDATA[계간 시전문 문예지 「시와반시」 2024년 여름호.소리를 건지다창작시 노래 콘서트권주열 시인의 시적 궤도를 이탈하는 기호들(6)反詩 여름 시단Neos Esprit기획특집 : 시드니 한인 문학기획특집 : 시드니 한인 시인 대표시노태맹 시인의 푼크툼(6)에세이 伐木丁丁시인의 그림(26)쉬어가는 페이지 : 시적 상상을 위한 도사리(17)대구의 시인들(4)윤일현 시인의 고전의 숲 함께 걷기(6)리뷰 : 김형술 시인의 여름 서가나의 대표시편집후기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/시와-반시-2024-여름.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/시와 반시 2024 여름.md</guid><dc:creator><![CDATA[시와반시편집부]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:09:45 GMT</pubDate></item><item><title><![CDATA[연금술사]]></title><description><![CDATA[undefinedundefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/연금술사.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/연금술사.md</guid><dc:creator><![CDATA[파울로 코엘료, 최정수]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:08:38 GMT</pubDate></item><item><title><![CDATA[베로니카 죽기로 결심하다]]></title><description><![CDATA[당신이 진실로 원하는 삶은 무엇입니까?‘영혼의 연금술사’ 파울로 코엘료
삶의 축복과 기적에 바치는 최상의 찬사!『연금술사』 『순례자』를 비롯한 여러 작품을 통해 전 세계 3억 2천만 독자의 마음을 움직인 우리 시대 가장 사랑받는 작가 파울로 코엘료의 장편소설 『베로니카, 죽기로 결심하다』가 새 옷을 입고 선보인다. 열정 없는 삶에 빠져 꿈을 잃어버리고 자살을 시도했다가 정신병원에서 눈을 뜬 베로니카의 이야기를 그린 이 소설은 1998년 브라질에서 처음 출간된 이후 50개 언어로 번역되어 25년 가까이 전 세계에서 꾸준한 사랑을 받았고, 소설을 원작으로 한 동명의 영화가 미국과 일본에서 각각 제작되고 소설 내용이 모티프가 된 밴드곡이 작곡되는 등 또다른 창작에 영감을 주며 다양한 예술의 형태를 통해 독자들을 만났다. 특히 전 세계가 감염병의 공포에 내몰렸던 ‘코로나 시대’에는 『연금술사』와 함께 작가의 책 중 전 세계적으로 가장 높은 판매고를 기록하며 앞이 보이지 않는 절망 속에서도 다시금 살아갈 용기를 건네는 이야기의 힘을 또 한번 확인하게 했다.인생에는 우리를 파괴하든, 강하게 만들든 둘 중 하나의 결과만이 나오는 싸움이 있다. 정신병원 입원도 그중 하나다. 그 기이하고 극단적인 환경에서 얻은 것이 있다면 완전한 자유였다. 나를 남들과 똑같이 만들려는 가족의 모든 노력은 정확히 반대의 결과를 낳았다. 이제 나는 또래의 모든 청년들과 완벽히 달랐다. _파울로 코엘료『피에트라 강가에서 나는 울었네』 『악마와 미스 프랭』과 함께 ‘그리고 일곱번째 날’ 3부작에 속하는 이 소설은 작가로서 35주년을 맞이한 ‘영혼의 연금술사’ 파울로 코엘료의 경험이 직접 반영된 작품이기도 하다. 당장 세상을 떠나려 했지만 예기치 않게 허락된 일주일의 유예기간 동안 생의 열정을 다시 발견한 베로니카의 모습에는 수차례 정신병원에 격리 수용되었던 작가의 젊은 시절이 고스란히 담겨 있고, 스스로의 삶 깊은 곳에서 길어낸 경험과 성찰은 더욱 진솔하게 다가오며 깊은 울림을 전한다.undefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/베로니카-죽기로-결심하다.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/베로니카 죽기로 결심하다.md</guid><dc:creator><![CDATA[파울로 코엘료, 이상해]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:08:25 GMT</pubDate></item><item><title><![CDATA[데미안]]></title><description><![CDATA[undefined
두 세계
카인
예수 옆에 매달린 도둑
베아트리체
새는 알에서 나오려고 투쟁한다
야곱의 싸움
에바 부인
종말의 시작
]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/데미안.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/데미안.md</guid><dc:creator><![CDATA[헤르만 헤세, 전영애]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:08:10 GMT</pubDate></item><item><title><![CDATA[위대한 개츠비]]></title><description><![CDATA[undefinedundefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/위대한-개츠비.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/위대한 개츠비.md</guid><dc:creator><![CDATA[F. 스콧 피츠제럴드, 김욱동]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:07:28 GMT</pubDate></item><item><title><![CDATA[멋진 신세계]]></title><description><![CDATA[undefined머리글 _008제1장 _030
제2장 _052
제3장 _067
제4장 _106
제5장 _126
제6장 _146
제7장 _174
제8장 _196
제9장 _221
제10장 _229
제11장 _238
제12장 _265
제13장 _285
제14장 _303
제15장 _317
제16장 _329
제17장 _348
제18장 _364옮긴이의 말: 현재를 예언하는 소설 _390]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/멋진-신세계.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/멋진 신세계.md</guid><dc:creator><![CDATA[올더스 헉슬리, 안정효]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:06:52 GMT</pubDate></item><item><title><![CDATA[이방인]]></title><description><![CDATA[undefined이방인1부
2부『이방인』에 대한 편지 - 알베르 카뮈
미국판 서문 - 알베르 카뮈
『이방인』을 다시 읽는다 - 로제키요작품해설 - 김화영
작가연보]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/이방인.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/이방인.md</guid><dc:creator><![CDATA[알베르 까뮈, 김화영]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:05:53 GMT</pubDate></item><item><title><![CDATA[인간 실격]]></title><description><![CDATA[undefined인간 실격
서문
첫 번째 수기
두 번째 수기
세 번째 수기
후기직소작품 해설 / 김춘미
작가 연보]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/인간-실격.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/인간 실격.md</guid><dc:creator><![CDATA[다자이 오사무]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:05:44 GMT</pubDate></item><item><title><![CDATA[첫사랑]]></title><description><![CDATA[톨스토이, 도스토옙스키와 함께 러시아 문학 3대 거장으로 꼽히는 투르게네프
피할 수 없는 사랑의 행복과 상처에 관한 이야기 「첫사랑」 외 2편톨스토이, 도스토예프스키와 함께 러시아 문학의 3대 거장으로 손꼽히는 투르게네프의 대표작. 한 여자를 사이에 둔 아버지와 아들의 삼각관계를 투르게네프 특유의 부드럽고 섬세한 필치로 그려 내고 있으며, 등장인물들의 탁월한 심리 및 성격 묘사가 돋보이는 작품이다. 「첫사랑」 외에도 1840년대 모순과 갈등으로 혼란한 러시아 사회에서 방황하는 귀족 출신 젊은이들의 사랑과 좌절을 그린 「귀족의 보금자리」, 벙어리이자 귀머거리 농노와 그가 사랑한 강아지에 대한 감동적인 이야기 「무무」가 함께 수록되어 있다.첫사랑
귀족의 보금자리
무무]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/첫사랑.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/첫사랑.md</guid><dc:creator><![CDATA[이반 투르게네프, 이항재]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:05:36 GMT</pubDate></item><item><title><![CDATA[Do it! 점프 투 장고：파이썬 웹 개발부터 배포까지!]]></title><description><![CDATA[장고의 기본 프레임워크를 이해하는데 좋은 책. 내용은 짧은 편.
MES 프로젝트의 데이터베이스 Backend로 장고를 사용하면서 공부했다.파이썬 입문자도 2주 만에 만들어 운영할 수 있는 게시판 서비스!
게시판 만들기로 웹 개발 전 과정 완벽 입문!파이썬 입문서로 많은 독자에게 사랑받는 『Do it! 점프 투 파이썬』 저자 박응용 선생님은 책을 출간한 뒤 “이 책을 읽은 다음에는 무엇을 공부해야 하나요?”라는 질문을 수없이 받았다고 합니다. 그래서 그에 대한 답으로 『Do it! 점프 투 장고』를 내놓았습니다. 이 책은 장고라는 파이썬 프레임워크로 실제 서비스 중인 파이보(pybo.kr)라는 질문·답변 게시판을 만든 뒤 AWS에 배포하는 과정까지 친절하게 안내합니다. 그야말로 웹 개발의 전 과정을 빠르게 경험하고 입문할 수 있는 책이죠. 이 책은 파이썬 입문자라면 누구나 쉽게 실습할 수 있도록 ‘수정 내용 표시’, ‘주의 사항 말풍선’, ‘팁’으로 배려했습니다. 이 책으로 웹 개발부터 서비스 배포까지 빠르게 입문해 보세요!_01장 장고 개발 준비!
01-1 필자가 생각하는 장고란?
01-2 파이썬 설치하기
01-3 장고 개발 환경 준비하기
01-4 장고 프로젝트 생성하기
__01-5 파이참 설치하고 장고 개발 서버 실행하기_02장 장고 기본 요소 익히기!
02-1 주소와 화면을 연결하는 URL과 뷰
02-2 데이터를 관리하는 모델
02-3 개발 편의를 제공하는 장고 Admin
02-4 질문 목록과 질문 상세 기능 구현하기
02-5 URL 더 똑똑하게 사용하기
02-6 답변 등록 기능 만들기
02-7 화면 예쁘게 꾸미기
02-8 부트스트랩으로 더 쉽게 화면 꾸미기
02-9 표준 HTML과 템플릿 상속 사용해 보기
02-10 질문 등록 기능 만들기_03장 파이보 서비스 개발!
03-1 내비게이션 기능 추가하기
03-2 게시판 페이징 기능 추가하기
03-3 템플릿 필터 직접 만들어 보기
03-4 질문에 달린 답변 개수 표시하기
03-5 로그인·로그아웃 구현하기
03-6 회원가입 구현하기
03-7 모델에 글쓴이 추가하기
03-8 글쓴이 표시하기
03-9 게시물 수정 &amp; 삭제 기능 추가하기
03-10 댓글 기능 추가하기
03-11 views.py 파일 분리하기
03-12 추천 기능 추가하기
03-13 스크롤 초기화 문제점 해결하기
03-14 마크다운 기능 적용하기
03-15 검색, 정렬 기능 추가하기
03-16 도전! 저자 추천 파이보 추가 기능_04장 세상에 선보이는 파이보 서비스!
04-1 깃으로 버전 관리하기
04-2 깃허브 사용해 보기
04-3 파이보를 위한 서버 운영 방법 알아보기
04-4 AWS 라이트세일 사용해 보기 ? 1달 무료
04-5 세상에 파이보 공개하기
04-6 서버·개발 환경을 위한 settings 분리하기
04-7 MobaXterm으로 서버에 접속하기
04-8 웹 브라우저와 서버, 파이보 작동 방식 이해하기
04-9 WSGI 서버 Gunicorn 사용하기
04-10 웹 서버, Nginx 사용해서 파이보에 접속하기
04-11 서버 환경에서 장고 Admin 사용하기
04-12 서버 환경에서 DEBUG 모드 끄기
04-13 장고에 로깅 적용하기
04-14 파이보에 도메인 적용하기 - 비용 발생
__04-15 PostgreSQL 데이터베이스 적용하기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/do-it-점프-투-장고-파이썬-웹-개발부터-배포까지.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/Do it 점프 투 장고 파이썬 웹 개발부터 배포까지.md</guid><dc:creator><![CDATA[박응용]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:04:22 GMT</pubDate></item><item><title><![CDATA[Do it! 점프 투 파이썬：중학생도 첫날부터 실습하는 초고속 입문서]]></title><description><![CDATA[쉽고 빠르게 배울 수 있는 좋은 입문서undefined첫째마당 파이썬 기초 익히기01장 파이썬이란 무엇인가?
01-1 파이썬이란?
01-2 파이썬의 특징
__파이썬은 인간다운 언어이다
__문법이 쉬워 빠르게 배울 수 있다
__무료이지만 강력하다
__간결하다
__프로그래밍을 즐기게 해 준다
__개발 속도가 빠르다
01-3 파이썬으로 무엇을 할 수 있을까?
__파이썬으로 할 수 있는 일
__파이썬으로 할 수 없는 일
01-4 파이썬 설치하기
__윈도우에서 파이썬 설치하기
__맥에서 파이썬 설치하기
01-5 파이썬 둘러보기
__파이썬 기초 실습 준비하기
__파이썬 기초 문법 따라 해 보기
01-6 파이썬과 에디터
__IDLE 에디터로 파이썬 프로그램 작성하기
__명령 프롬프트 창에서 파이썬 프로그램 실행하기
____추천하는 에디터02장 파이썬 프로그래밍의 기초, 자료형
02-1 숫자형
__숫자형은 어떻게 만들고 사용할까?
__숫자형을 활용하기 위한 연산자
02-2 문자열 자료형
__문자열은 어떻게 만들고 사용할까?
__문자열 안에 작은따옴표나 큰따옴표를 포함시키고 싶을 때
__여러 줄인 문자열을 변수에 대입하고 싶을 때
__문자열 연산하기
__문자열 인덱싱과 슬라이싱
__문자열 포매팅이란?
__문자열 포매팅 따라 하기
__문자열 포맷 코드
__포맷 코드와 숫자 함께 사용하기·
__format 함수를 사용한 포매팅
__f 문자열 포매팅
__문자열 관련 함수들
02-3 리스트 자료형
__리스트는 어떻게 만들고 사용할까?
__리스트의 인덱싱과 슬라이싱
__리스트 연산하기
__리스트의 수정과 삭제
__리스트 관련 함수
02-4 튜플 자료형
__튜플은 어떻게 만들까?
__튜플의 요솟값을 지우거나 변경하려고 하면 어떻게 될까?
__튜플 다루기
02-5 딕셔너리 자료형
__딕셔너리란?
__딕셔너리는 어떻게 만들까?
__딕셔너리 쌍 추가, 삭제하기
__딕셔너리를 사용하는 방법
__딕셔너리 관련 함수
02-6 집합 자료형
__집합 자료형은 어떻게 만들까?
__집합 자료형의 특징
__교집합, 합집합, 차집합 구하기
__집합 자료형 관련 함수
02-7 불 자료형
__불 자료형은 어떻게 사용할까?
__자료형의 참과 거짓
__불 연산
02-8 자료형의 값을 저장하는 공간, 변수
__변수는 어떻게 만들까?
__변수란?
__리스트를 복사하고자 할 때
__변수를 만드는 여러 가지 방법
02장 되새김 문제03장 프로그램의 구조를 쌓는다! 제어문
03-1 if 문
__if 문은 왜 필요할까?
__if 문의 기본 구조
__들여쓰기 방법 알아보기
__조건문이란 무엇인가?
__다양한 조건을 판단하는 elif
__조건부 표현식
03-2 while 문·
__while 문의 기본 구조
__while 문 강제로 빠져나가기
__while 문의 맨 처음으로 돌아가기
__무한 루프
03-3 for 문
__for 문의 기본 구조
__예제를 통해 for 문 이해하기
__for 문과 continue 문
__for 문과 함께 자주 사용하는 range 함수
__리스트 컴프리헨션 사용하기
03장 되새김 문제04장 파이썬의 입출력
04-1 함수
__함수란 무엇인가?
__함수를 사용하는 이유는 무엇일까?
__파이썬 함수의 구조
__매개변수와 인수
__입력값과 리턴값에 따른 함수의 형태
__매개변수를 지정하여 호출하기
__입력값이 몇 개가 될지 모를 때는 어떻게 해야 할까?
__키워드 매개변수, kwargs
__함수의 리턴값은 언제나 하나이다
__매개변수에 초깃값 미리 설정하기
__함수 안에서 선언한 변수의 효력 범위
__함수 안에서 함수 밖의 변수를 변경하는 방법
__lambda 예약어
04-2 사용자 입출력
__사용자 입력 활용하기
__print 자세히 알기
04-3 파일 읽고 쓰기
__파일 생성하기
__파일을 쓰기 모드로 열어 내용 쓰기
__파일을 읽는 여러 가지 방법
__파일에 새로운 내용 추가하기
__with 문과 함께 사용하기
04-4 프로그램의 입출력
____sys 모듈 사용하기
04장 되새김 문제05장 파이썬 날개 달기
05-1 클래스
__클래스는 왜 필요한가?
__클래스와 객체
__생성자
__클래스의 상속
__메서드 오버라이딩
__클래스 변수
05-2 모듈
__모듈 만들기
__if name == "main": 의 의미
__클래스나 변수 등을 포함한 모듈
__다른 파일에서 모듈 불러오기
__다른 디렉터리에 있는 모듈을 불러오는 방법
05-3 패키지
__패키지 만들기
__패키지 안의 함수 실행하기
__init.py 의 용도
__relative 패키지
05-4 예외 처리
__오류는 언제 발생하는가?·
__오류 예외 처리 기법
__오류 회피하기
__오류 일부러 발생시키기
__예외 만들기
05-5 내장 함수
__abs
__all
__any
__chr
__dir
__divmod
__enumerate
__eval
__filter
__hex
__id
__input
__int
__isinstance
__len
__list
__map
__max
__min
__oct
__open
__ord
__pow
__range
__round
__sorted
__str
__sum
__tuple
__type
__zip
05-6 표준 라이브러리
__datetime.date·
__time
__math.gcd
__math.lcm
__random
__itertools.zip_longest
__itertools.combination
__functools.reduce
__operator.itemgetter
__shutil
__glob
__pickle
__os
__threading
__tempfile
__traceback
__json
__urllib
__webbrowser
05-7 외부 라이브러리
__pip
__Faker
__sympy
05장 되새김 문제둘째마당 파이썬 실력 키우기06장 파이썬 프로그래밍, 어떻게 시작해야 할까?
06-1 내가 프로그램을 만들 수 있을까?
06-2 3과 5의 배수를 모두 더하기
06-3 게시판 페이징하기
06-4 간단한 메모장 만들기
06-5 탭 문자를 공백 문자 4개로 바꾸기
06-6 하위 디렉터리 검색하기07장 파이썬 날아오르기
07-1 파이썬과 유니코드
__최초의 문자 셋, 아스키코드
__유니코드의 등장
__유니코드로 문자열 다루기
07-2 클로저와 데코레이터
__클로저란?
__데코레이터란?
07-3 이터레이터와 제너레이터
__이터레이터란?
__이터레이터 만들기
__제너레이터란?
__제너레이터 표현식
__제너레이터와 이터레이터
__제너레이터 활용하기
07-4 파이썬 타입 어노테이션
__동적 언어와 정적 언어
____파이썬 타입 어노테이션08장 정규 표현식
08-1 정규 표현식 살펴보기
__정규 표현식은 왜 필요한가?
08-2 정규 표현식 시작하기
__정규 표현식의 기초, 메타 문자
__파이썬에서 정규 표현식을 지원하는 re 모듈
__정규식을 이용한 문자열 검색
__match 객체의 메서드
__컴파일 옵션
__역슬래시 문제
08-3 강력한 정규 표현식의 세계로
__문자열 소비가 없는 메타 문자
__그루핑
__전방 탐색
__문자열 바꾸기
____greedy와 non-greedy부록
Do it! 파이썬 코딩 면허 시험 20제
Do it! 챗GPT와 함께 파이썬 공부하기1분 코딩, 되새김 문제 및 파이썬 코딩 면허 시험 풀이
찾아보기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/do-it-점프-투-파이썬-중학생도-첫날부터-실습하는-초고속-입문서.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/Do it 점프 투 파이썬 중학생도 첫날부터 실습하는 초고속 입문서.md</guid><dc:creator><![CDATA[박응용]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:04:18 GMT</pubDate></item><item><title><![CDATA[IT 비전공자를 위한 파이썬 업무 자동화]]></title><description><![CDATA[해도 해도 끝나지 않는 반복 업무... 어떻게 해결할 수 있을까요?상사의 지시, 고객사 대응, 메일 처리, 일정 문의, 정산 작업... 해도 해도 줄기는커녕 늘어나는 반복 업무. 매크로와 단축키 신공에 의지해도 해결되지 않는 이유는 왜일까요? 우리가 주로 사용하는 오피스 프로그램(엑셀, 파워포인트, 워드, 아웃룩 등)은 사무 업무에 적합한 기능을 갖추었지만, 대용량의 데이터를 처리하고 이를 활용한 반복 업무를 구현하는 데 한계가 있습니다. 그렇다면 어떻게 이 문제를 해결할 수 있을까요? 그 답은 ‘파이썬 업무 자동화’에 있습니다.Chapter 01 회사 업무에 파이썬을 쓰는 이유1.1 함흥차사 개발팀... 내가 직접 구현할 수는 없을까?
1.2 파이썬 업무 자동화로 어디까지 할 수 있을까?
1.3 당신의 코딩 학습이 절대 늦지 않은 이유
1.4 파이썬 회사 실무 활용, 10분 만에 맛보기Chapter 02 업무 자동화를 위한 최소한의 파이썬 지식2.0 챕터를 시작하기 전에
2.1 파이썬 기초를 쉽게 학습할 수 있는 방법 3가지
2.2 나의 프로그램을 만들기 위한 환경설정
2.3 1시간 만에 배우는 파이썬 구동을 위한 최소한의 지식
2.4 IT 개발자들은 모르는 비전공자 직장인의 진짜 업무Chapter 03 인터넷 자동화 (인터넷 제어 &amp; 정보 획득)3.0 챕터를 시작하기 전에
3.1 매일 아침 회의 자료 때문에 1시간 일찍 출근하기 싫어
3.2 인터넷 기본 개념 및 Selenium 기본 문법
3.3 인터넷 자동화 현업 실습Chapter 04 데이터 처리 자동화 (데이터 관리 &amp; 편집 자동화)4.0 챕터를 시작하기 전에
4.1 데이터 처리 자동화의 필요성
4.2 데이터 처리 자동화의 종류 및 기본 문법
4.3 데이터 처리 자동화 현업 실습Chapter 05 개인화된 자료 자동화 (MS Office &amp; 사진 &amp; 영상)5.0 챕터를 시작하기 전에
5.1 MS Office 파일 제작에 왜 자동화가 필요할까?
5.2 MS Office 파일 제작 자동화 현업 실습
5.3 사진 제작에 왜 자동화가 필요할까?
5.4 사진 제작 자동화 현업 실습Chapter 06 커뮤니케이션 자동화 (메일 &amp; 문자)6.0 챕터를 시작하기 전에
6.1 메일 발송 자동화 기본 실습
6.2 메일 발송 자동화 현업 실습
6.3 문자 발송 자동화 기본 실습
6.4 문자 발송 자동화 현업 실습Chapter 07 단순 반복 업무 자동화 (a.k.a 물리적인 자동화)7.0 챕터를 시작하기 전에
7.1 반복적인 클릭, 키보드 타이핑... 좀 없앨 수 있나?
7.2 물리 자동화 현업 실습Chapter 08 협업 자동화8.0 챕터를 시작하기 전에
8.1 팀을 위한 프로그램 제작 (PyInstaller 활용)
8.2 팀과 함께 보는 데이터 공유 (구글 스프레드시트 활용)
8.3 협업 자동화 현업 실습]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/it-비전공자를-위한-파이썬-업무-자동화.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/IT 비전공자를 위한 파이썬 업무 자동화.md</guid><dc:creator><![CDATA[비현코]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:04:12 GMT</pubDate></item><item><title><![CDATA[vue 2.x + node.js + mysql로 실무 웹사이트 만들기]]></title><description><![CDATA[이 책은 Vue.js를 이용하여 프론트엔드를 개발하고, Node.js로 MySQL 데이타베이스를 사용하는 REST API 를 구축하여 실무용 웹사이트를 만드는 과정에 대해서 설명하고 있습니다. 이 책은 기본적인 HTML, CSS, Javascript를 익힌 개발자를 대상으로 작성하였으며 실제 사이트를 만드는 과정에서 어떻게 적용하는지 프로젝트를 진행하면서 설명하고 있습니다.차례
프로젝트를 시작하기전에
어떤 웹사이트를 만들것인지 정리해보자
가. 웹사이트 기능정의서
나. REST API 명세서
다. DB 테이블 명세서
라. 개발 명세서
프로젝트를 시작할 준비를 하자
가. Vue.js 프로젝트 생성
나. git 루트 디렉토리 변경
다. Node.js 프로젝트 생성
DB 테이블을 생성하고, 기초 코드를 작성하자
가. 필요한 DB 테이블 생성
나. 백엔드 어플리케이션 구동에 필요한 Core 파일과 config파일 작성
다. Vue.js 기본 설정
Vue.js의 기본구조를 살펴보자
가. Vue.js의 구조
나. HTML 구조
다. 스타일 영역
라. 스크립트 영역
SQL 쿼리문 기초
가. SELECT
나. INSERT
다. UPDATE
라. DELETE
회원가입 페이지를 만들어 보자.
가. 회원가입 페이지를 만들어보자
나. 서버사이드에서의 회원가입 처리
로그인과 로그아웃을 만들자
가. 로그인 처리 로직
나. 로그인 페이지 작성하기
나. 서버사이드에서의 로그인 처리
다. 미들웨어를 이용한 JWT 처리
라. 프론트엔드에서 JWT처리
라. 로그아웃 처리하기
게시판을 만들어보자 1
가. 게시판을 위한 라우트 설정
나. 중첩된 라우트를 이용한 페이지 만들기
다. 게시글 목록보기의 스킨화, 컴포넌트 동적 로드
라. 서버사이드에서 게시글 목록 응답하기
게시판을 만들어보자 2
가. 재사용 가능한 컴포넌트를 만들어 보자.
나. 게시글 작성 페이지
다. 서버사이드 에서의 파일 업로드 처리
라. 서버사이드에서 게시글 작성에 관한 처리
게시판을 만들어보자 3
가. 게시글 내용보기 페이지
나. 게시글의 조회수 처리하기
다. 수정,삭제 기능을 넣어보자.
직접 구현해보기) 댓글 기능을 넣어보자
직접 구현해보기) 게시판의 권한을 처리해 보자
내정보 페이지와 네비게이션 가드
릴리즈 서버에 배포하자
가. 릴리즈 서버에서의 구동
나. PM2 를 이용한 Node.js 어플리케이션 구동
이 책을 마치며
]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/vue-2x-nodejs-mysql로-실무-웹사이트-만들기.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/vue 2x  nodejs  mysql로 실무 웹사이트 만들기.md</guid><dc:creator><![CDATA[장선근]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:04:06 GMT</pubDate></item><item><title><![CDATA[Progressive Web App 프로그레시브 웹 앱의 모든 것]]></title><description><![CDATA[실습 프로젝트를 만들면서
Progressive Web App의 기초부터 고급 기술까지,
한 권으로 마스터한다!이 책은 Progressive Web App의 다양한 기능들과 그 동작 원리에 대해서 자세히 설명하고 있으며, 이해하기 어려운 개념들은 별도로 알기 쉽게 정리하고 있다. 또한 실습과 관련된 각종 Tool의 설치 과정부터 사용 방법까지 포함하고 있으며 실습에 필요한 핵심 사전 지식 역시 함께 제공한다. (HTML, CSS, HTTP, Node.js, Javascript Promise &amp; Fetch) 더불어 복잡한 Code 역시 최대한 단순화하여 이해하기 쉽게 설명하고 있다.1장 프로그레시브 웹 앱스(Progressive Web Apps, PWA) 개요
1.1. Progressive Web Apps란 무엇인가?
1.2. PWA에 사용되는 핵심 기술
1.3. Web Framework(React, Angular, Vue)와 Progressive Web Apps
1.4. 강좌 구성 및 학습 방법2장 Progressive Web Apps 실습 진행을 위한 사전 지식
2.1. HTML
2.2. CSS
2.3. HTTP
2.4. Node.js
2.5. Javascript (Promise &amp; Fetch)3장 실습 개시 : 개발 환경 설정
3.1. Node &amp; NPM
3.2. Code Editor
3.3. Browser 및 Chrome Development Tools4장 실습 Project 미리보기 및 초기 Project Setup
4.1. 실습 project 미리보기 : PWAmarket
4.2. 초기 project 만들기 : App Shell5장 Android Emulator : Android Studio 설치
5.1. Android Studio 설치
5.2. Virtual Device setup6장 Manifest
6.1. Manifest 소개 및 Manifest Properties 자세히 알아보기
6.2. 실습 project에서 manifest file의 생성 및 사용7장 Service Worker 기본 : service worker를 이용한 caching
7.1. Service Worker 소개 및 Cache API
7.2. Service Worker 등록(register), 설치(install), 활성화(activate)
7.3. Service Worker와 Caching8장 Service Worker 심화 : 다양한 caching 전략
8.1. Service Worker에 적용 가능한 다양한 caching 전략들
8.2. Caching 전략 활용
8.3. Service Worker 전략에 Routing 사용9장 Deploy to real Online Server : Firebase
9.1. Firebase Server 개요 및 기본 setup
9.2. Frontend와 Backend의 연결10장 Indexed Database API(IndexedDB)
10.1. IndexedDB 개요 및 browser support
10.2. IndexedDB에 저장하기
10.3. IndexedDB에 저장된 data 사용하기
10.4. IndexedDB와 firebase DB의 data consistency 유지하기11장 Background Synchronization
11.1. Background Sync 소개
11.2. Background Sync 기능 구현 (frontend)
11.3. Background Sync 기능 구현 (backend)12장 Push Notifications 기본 : Displaying Notifications
12.1. Push Notifications 소개
12.2. Notification API와 Displaying Notifications13장 Push Notifications 심화 : Subscriptions &amp; Push Messages
13.1. Subscriptions와 Push Notifications
13.2. Push Messages를 보내고(backend) 받기(frontend)
13.3. Notification이 Client User Action에 반응하게 만들기14장 Media API(Camera Control)
14.1. Media API 소개
14.2. 실습 project에 Media(Camera) 기능 도입15장 Geolocation API
15.1. Geolocation API 소개
15.2. Geolocation 입력 기능 구현
15.3. Geolocation 저장 기능 구현(frontend, backend)
15.4. 참고 Google API를 이용해서 실제 사용자 address 가져오기16장 Workbox
16.1. Workbox 및 강좌 소개
16.2. Workbox 설치와 기본 setup
16.3. 실습 project에 Workbox 적용하기
16.4. Workbox Router 개선하기 : indexedDB 연동
16.5. Background Sync와 Push Notifications 적용17장 Bonus : @google-cloud/storage package Version Up
17.1. @google-cloud/storage version 구분
17.2. 참고 자료
17.3. @google-cloud/storage version 변경 작업18장 Bonus : Minify
18.1. Minify를 위한 package 설치
18.2. 실습 Project에 uglify-js 적용19장 Bonus : Lighthouse
19.1. Lighthouse 소개
19.2. Lighthouse 사용20장 Bonus : 학습 참고 자료]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/progressive-web-app-프로그레시브-웹-앱의-모든-것.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/Progressive Web App 프로그레시브 웹 앱의 모든 것.md</guid><dc:creator><![CDATA[최한섭]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:04:01 GMT</pubDate></item><item><title><![CDATA[당신도 논리적으로 말할 수 있습니다：일잘러가 되기 위한 PREP 말하기 공식]]></title><description><![CDATA[“말 잘하기에도 확실한 법칙이 있다.
비즈니스 커뮤니케이션 분야 최고의 실용서!”생각정리클래스 복주환 대표 강력추천
일본 아마존 자기계발 베스트셀러
토스트마스터즈 일본 콘테스트 68회 수상자의 비법 대공개
일한 만큼 인정받고 싶은 일잘러를 위한 필독서말 잘하는 사람은 이야기가 논리적이라는 공통점이 있다. 논리적인 깔끔한 말은 상대를 보기 좋게 설득하고, 내가 원하는 것을 얻게 해주며, 때로는 무논리인 상대의 입에 재갈을 물린다. 그래서 누구나 논리적으로 말하기를 배우고 싶어 하지만 단기간 훈련만으로는 쉽지 않다. 이번에 출간된 『당신도 논리적으로 말할 수 있습니다』는 스피치 대회인 토스트마스터즈 일본 콘테스트에서 68회 입상하고, 1위를 포함해 전국 챔피언 자리로 일본 내 최고 기록을 가진 저자가 논리적 말하기 공식인 ‘PREP 기법’을 상세히 소개한 책이다.PREP(프렙)은 결론(Point), 이유(Reason), 사례(Example), 요약(Point)의 머리글자를 따서 만든 말하기 기법이다. 하고자 하는 이야기의 결론을 먼저 말하고(P), 그에 대한 이유(R)와 사례(E)를 제시한 다음 마지막에 다시 한 번 요약(P)하는 방법이다. 고객에게 물건을 팔 때, 상사에게 보고하거나 회의에서 안건을 발표할 때, 면접 볼 때 등 상대방을 논리적으로 설득하고 싶을 때 PREP 기법은 하나의 공식처럼 간편하게 활용할 수 있다. 특히 일한 만큼 인정받고 싶은 일잘러에겐 필독서다. “결론이 뭔가?”라는 질문에 막힘없이 논리적으로 답할 수 있는 가장 구체적이고 편리한 방법이기 때문이다.“논리적으로 말하는 방법에 대해 자신 있게 추천할 수 있는 책을 만났다.” 우리나라 최고의 생각정리 컨설턴트인 생각정리클래스의 복주환 대표는 이 책을 강력추천하며 기꺼이 감수자로서 나섰다. 복 대표는 평소 ‘논리적 사고와 말하기 기술’에 관해 묻는 사람들에게 딱 한 가지 방법만 소개한다면 PREP 기법을 추천한다. 그런 면에서 이 책은 PREP 기법에 대해 가장 일목요연하게 정리되어 있고, 원리도 쉽게 설명되어 있는 ‘비즈니스 커뮤니케이션 분야 최고의 실용서’라고 추천 이유를 밝혔다.추천의 글. 논리적 말하기에도 공식이 있습니다
프롤로그. 논리적으로 말하기란 의외로 쉽다1장. 논리적인 이야기의 구조논리적 이야기란 무엇인가
4단 구성으로 논리가 만들어진다
연역법과 귀납법은 이렇게 구성된다
PREP 기법에는 모든 논리가 들어 있다
비즈니스를 위한 기승전결, PREP 기법2장. 이야기를 알기 쉽게 전달하는 5가지 포인트한 문장을 짧게 만든다
주어를 분명하게 밝힌다
구체적이고 정확한 단어를 선택한다
접속사를 능숙하게 구사한다
중요한 내용은 반복해서 상기시킨다
PREP 기법을 강조하는 데는 이유가 있다3장. 결론(P: 요점)부터 먼저 전달한다무엇이 중요한지 먼저 파악하라
어떤 경우든 요점을 결정해야 한다
눈치 보지 말고 요점을 말한다
결론을 먼저 말하면 인정받는 이유
결론부터 말하기가 실패한 사례4장. 이유(R)를 덧붙여 설명한다이유를 명쾌하게 말할 수 있는가
모든 ‘왜냐하면’을 열거한다
‘왜?’가 사고력을 키운다
이유는 간결하고 구체적으로
이유가 적절하지 않은 사례5장. 사례나 데이터(E)로 근거를 제시한다사람은 구체성에 설득된다
숫자를 구체적으로 제시하라
사실을 전달하라
상상력을 자극하라
상대를 설득하는 3가지 요소
근거 제시는 화제 전환의 기회가 된다
이유와 근거가 뒤섞여 실패한 사례6장. 요약(P)을 마지막에 한 번 더 말한다반복하면 기억이 강화된다
반복으로 충분히 이해시킨다
반복으로 요점을 확실히 전달한다
듣는 사람이 움직여야 제대로 이야기가 전달된 것이다
요약이 제대로 마무리되지 못한 사례7장. PREP 기법으로 프레젠테이션 실력을 업그레이드하자프레젠테이션에 PREP 기법을 활용한다
결론(P)이 여러 개인 경우
이유(R)가 여러 개인 경우
근거(E)가 여러 개인 경우
요약(P)이 여러 개인 경우
질의응답에 잘 대처하려면
질의응답에도 PREP 기법을 활용한다
PREP 기법을 부분적으로 활용하는 방법에필로그. 논리적인 사람이 된다는 것
교육 프로그램 소개]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/당신도-논리적으로-말할-수-있습니다-일잘러가-되기-위한-prep-말하기-공식.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/당신도 논리적으로 말할 수 있습니다 일잘러가 되기 위한 PREP 말하기 공식.md</guid><dc:creator><![CDATA[오시마 도모히데, 김혜영, 복주환]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:55 GMT</pubDate></item><item><title><![CDATA[당신의 인생이 왜 힘들지 않아야 한다고 생각하십니까：쇼펜하우어 아포리즘]]></title><description><![CDATA[20주 연속 철학 1위! 10만 부 돌파 기념 스페셜 에디션!
조선, 동아, 한겨레, 서울, 한국에 소개된 책!
서울대 학생이 많이 읽은 도서 20 선정!온전하고 자유로운 삶을 위한
쇼펜하우어의 독한 가르침“인간의 불행 중 상당수는
혼자 있을 수 없어서 생기는 일이다”쇼펜하우어는 니체의 철학, 헤세와 카프카의 문학, 프로이트와 융의 심리학에 지대한 영향을 끼친, 19세기 서양 철학계의 상징적인 인물이다. 그는 “인생은 의미가 없다. 그러므로 태어나지 않는 것이 최선이고, 태어났다면 최대한 빨리 죽는 것이 차선이다.”라고 말해 흔히 염세주의자로 알려졌지만, 그 어떤 철학자, 작가보다 치열하게 살았다. 이 책은 『당신의 인생이 왜 힘들지 않아야 한다고 생각하십니까』가 출간 6개월 만에 독자들의 사랑을 받으며 10만 부 돌파 베스트셀러가 된 것을 기념해 펴낸 스페셜 에디션이다.쇼펜하우어가 세상을 떠난 지 150년의 세월이 흘렀지만, 우리가 오늘날까지 쇼펜하우어를 기억하고 그가 남긴 저서에서 인생의 해답을 찾으려는 이유가 뭘까? 그것은 쇼펜하우어가 인생 그 자체를 텍스트 삼아 삶의 고통을 철학으로 승화시켰기 때문이다. 인생은 고통이며, 고통은 집착에서 비롯되고, 따라서 집착을 버림으로써 우리는 고통의 소멸에 이를 수 있다는 ‘비관에 대한 비관’을 제시했기 때문이다. 그래서 그의 철학은 행복해지고 싶어서 결국 불행해져 버린 현대인들에게 시사하는 바가 크다.쇼펜하우어는 일평생 열한 권의 책을 썼고, 그중 생전에 출판된 저서는 여덟 권이다. 괴테를 비롯한 수많은 사람과 편지를 주고받았고, 1만 페이지가 넘는 일기를 거의 하루도 빼놓지 않고 썼다. 『당신의 인생이 왜 힘들지 않아야 한다고 생각하십니까』는 그의 도서들과 편지, 일기 등에서 쇼펜하우어의 삶에 대한 통찰과 정곡을 찌르는 인생 조언을 모아 엮은 책이다. 쇼펜하우어를 알고 있는 사람도, 알지 못했던 사람도 이 책을 읽게 되는 순간, 옛 철학자의 독설 안에 감춰진 열망과 투지를 느낄 수 있을 것이다.편역자의 글
쇼펜하우어의 글1부나는 ‘나’로서 존재한다
다수는 그저 많은 숫자일 뿐, 많다고 정의가 되는 건 아니다
산책의 동료는 ‘고뇌’로 족하다
나만 힘들고, 나만 피곤하고, 나만 희생당한다는 착각
현명할수록 명예와 체면이 얼마나 가벼운 것인지를 안다
누구나 자신의 산에 오르기를 꿈꾼다
늙음의 덧없음
인생에서 ‘죽음’보다 확실한 것은 없다
부모는 자녀를 개인으로 바라봐주지 않는다
가진 자에게도, 다스리는 자에게도 ‘장수’는 징계다
판단을 타인에게 의존하지 말라
우리가 사소한 일에 위로받는 이유는 사소한 일에 고통받기 때문이다2부행복이란 단어를 제거하면 행복할 수 있다
신의 은총에 인생을 던지고 싶지 않다
내가 강해질수록 나는 더욱 치명적인 상처를 입는다
자신이 증오스러울 땐 자는 것이 최고다
‘사유’를 통해 인간은 인간다워진다
인간의 불행 중 상당수는 혼자 있을 수 없어서 생기는 일이다
나는 왜 다른 사람의 판단에 휘말리는 것일까?
아파하고 싶지 않다면 아픔과 친해져야 한다
우정을 우연에 맡겨서는 안 된다
죽음이 오기 전까지 최선을 다하고 싶다
정신적으로 성숙해지려면 마흔 살은 되어야 한다
‘사람들이 원하는 나’로 평생을 살 수는 없다3부왜 주님이라는 자는 항상 분노하고 계시는가
잘못된 독서는 나쁜 친구와 어울리는 것보다 나쁘다
권태는 언제나 우리 등 뒤에 서 있다
소유는 만족이 아니라, 의무의 시작이다
나보다 비참한 자들이 나를 행복하게 해준다
교육의 궁극적 목표는 성장이 아닌 ‘개조’에 있다
정신적으로 성숙한 사람일수록 감성이 극도로 예민하다
인간의 성격은 어떻게 만들어지는가
적과 동지를 구별하는 가장 좋은 방법
인간을 불평분자로 만드는 악당
불행이 터졌을 때보다 불행이 지나간 후가 더 중요하다
보잘것없는 재능으로 너무 많은 것을 얻었다4부그대의 오늘은 최악이었다, 내일은 오늘보다 더 나쁠지도 모른다
범죄자를 위한 사회의 헌신은 공짜가 아니다
가진 자들의 머릿속에는 노동자들에게 더 많은 노동을 전가하는 계획밖에 없다
대체 왜 우리는 노력하는가, 왜 청춘은 꿈을 꾸는가
세계관은 소년 시절에 완성된다
내 안에 악마가 숨어 있다
그다지 불행할 것도, 불편할 것도 없다
승리의 횟수가 늘어날수록 외톨이가 되었다
우리에게 신이 필요한 이유
부강한 국가가 국민의 행복은 아니듯 강력한 국가가 국민의 힘은 아니다
죽음마저도 자연의 일부이다
부처는 밥을 지을 때도 온정성을 쏟는다5부사람들이 나를 보지 않더라도 정직할 것
국가는 길들여지지 않는 인간을 두려워한다
스스로 생각하는 사람은 군주와 같다
‘고독’과 ‘권태’는 나의 말이 되었다
철학은 자명한 이치에 대한 반항이다
청년 시절은 처지와 환경이 어떻든 대체로 불만족스럽다
위대한 작품은 항상 시대에 버림받았다
남들이 나를 거부할 때, 내 안에는 거대한 기운이 용솟음친다
‘부’를 목적으로 지식을 습득하지 마라
인간은 그 자체로 하나의 우주이며, 독립된 세계이며, 유일한 표상이다
나는 타인에게 필요한 물건이 되길 거부하겠다
환상 속에 갇힌 어린아이로 살겠다
오직 질문을 통해서만 성장한다]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/당신의-인생이-왜-힘들지-않아야-한다고-생각하십니까-쇼펜하우어-아포리즘.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/당신의 인생이 왜 힘들지 않아야 한다고 생각하십니까 쇼펜하우어 아포리즘.md</guid><dc:creator><![CDATA[아르투어 쇼펜하우어, 김욱]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:52 GMT</pubDate></item><item><title><![CDATA[돈의 속성 300쇄 리커버]]></title><description><![CDATA[undefined200쇄 기념 개정 증보판을 내면서
프롤로그돈은 인격체다
나는 나보다 더 훌륭한 경영자에게 투자한다
복리의 비밀
일정하게 들어오는 돈의 힘
돈은 중력의 힘을 가졌다
리스크가 클 때가 리스크가 가장 작을 때다
남의 돈을 대하는 태도가 내 돈을 대하는 태도다
100억을 상속받았는데 절대 잃지 말라는 유언이 붙었다면
빨리 부자가 되려면, 빨리 부자가 되려 하면 안 된다
경제 전문가는 경기를 정말 예측할 수 있나?
삼성전자 주식을 삼성증권에 가서 사는 사람
다른 이를 부르는 호칭에 따라 내게 오는 운이 바뀐다
반복되는 운은 실력이고 반복되는 실패는 습관이다
뉴스를 통해 사실과 투자 정보를 구분하는 법
돈마다 시간은 다르게 흐른다
달걀을 한 바구니에 담지 않았는데 왜 모두 깨질까?
부자가 되는 세 가지 방법
돈을 모으지 못하는 이유
자신이 금융 문맹인지 알아보는 법
주식으로 수익을 내는 사람들의 세 가지 특징
얼마나 벌어야 정말 부자인가?
내가 재산을 지키기 위해 매일 하는 일
가난은 생각보다 훨씬 더 잔인하다
금융 공황 발생에 따른 세 가지 인간상
내가 청년으로 다시 돌아가 부자가 되려 한다면
지혜는 기초학문으로부터 시작된다
부자가 되기 위해 우선 당장 할 수 있는 일 한 가지
앞으로 주식이 오를 것 같습니까?
현재 임대료를 내는 사람들의 숨은 가치
부동산에 투자하는 것이 좋을까? 주식이 좋을까?
나의 독립기념일은 언제인가?
돈을 다루는 네 가지 능력
이런 곳에 나는 투자 안 한다
보험은 저축이 아니다
예쁜 쓰레기
경제에 대한 해석은 자신의 정치적 신념에서 벗어나 있어야 한다
마중물과 종잣돈 1억 만들기의 다섯 가지 규칙
좋은 부채, 나쁜 부채
세상의 권위에 항상 의심을 품어라
좋은 돈이 찾아오게 하는 일곱 가지 비법
직장인들이 부자가 되는 두 가지 방법
감독(자산배분)이 중요한가? 선수(포지션)가 중요한가?
은행에서 흥정을 한다고요?
떨어지는 칼을 잡을 수 있는 사람
재무제표에 능통한 회계사는 투자를 정말 잘할까?
김승호의 투자 원칙과 기준
자식을 부자로 만드는 방법
만약 삼성전자 주식을 아직도 가지고 있었더라면
국제적 수준의 행동 에티켓과 세계화 과정
당신의 출구전략은 무엇인가?
모든 비즈니스는 결국 부동산과 금융을 만난다
똑똑한 사람들이 오히려 음모에 빠진다
사기를 당하지 않는 법
투자의 승자 자격을 갖췄는지 알 수 있는 열한 가지 질문
두량 족난 복팔분
부의 속성
흙수저가 금수저를 이기는 법
당신 사업의 퍼(PER)는 얼마인가?
큰 부자는 하늘이 낸다
창업을 꿈꾸는 젊은이는 작은 회사로 가라
능구(能久)와 공부(工夫)
아직도 할 사업은 끝도 없이 많다
사업가는 스스로에게 자유를 줄 수 있는 유일한 직업
돈마다 품성이 다르다
가족 안에서 가장 부자가 되었을 때 부모와 형제에 대한 행동요령
실패할 권리
책이 부자로 만들어줄까?
신은 왜 공평하지 않을까?
항상 투자만 하는 송 사장과 항상 화가 나 있는 그의 아내
동업을 어떻게 생각하세요?
길을 모르겠으면 큰길로 가라
쿼터 법칙
기도로는 부자가 될 수 없다
재산을 모을 때는 농부가 되고 투자할 때는 어부가 돼라
돈을 모으는 네 가지 습관200쇄 기념 증보판
시장을 이길 능력이 없다면
당신의 재산을 지키기 위해 투표하라
선진국 대한민국
당신의 주식 투자 기회를 박탈한다면?
누군가에게 길을 가르쳐 준다는 것은
난 오늘 언제라도 내 운명을 바꿀 기회가 있다
부자가 될 준비를 마쳤는지 알 수 있는 30개 질문
사회적 기업을 꿈꾸는 젊은이들에게
투자에 있어서 변하지 않는 진리
돈에 대한 불편한 진실
절대로 다시 가난해지지 말자
에필로그]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/돈의-속성-300쇄-리커버.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/돈의 속성 300쇄 리커버.md</guid><dc:creator><![CDATA[김승호]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:49 GMT</pubDate></item><item><title><![CDATA[동물농장]]></title><description><![CDATA[undefined동물농장 7
자유와 행복 125
나는 왜 쓰는가 133작품 해설 145
작가 연보 159created: 2024-12-02 01:51
tag: 독서 국내도서 유아 정가제Free 유아토이북 토이북 사운드북
title: 동물 농장 사운드북：우리 아기 오감발달
author: 샘 태플린, 페데리카 아이오사
category: 국내도서
total_page: 0
publish_date: 2018-04-12
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/goods/59721686/XL" target="_self">https://image.yes24.com/goods/59721686/XL</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌와글와글 동물 농장에는 누가 살고 있을까요?
청각과 언어 감각, 시각과 촉각을 기르는 ‘만능 사운드북’!닭이 꼬꼬댁 꼬꼬! 병아리가 삐약삐약! 양이 매애 매애! 오리가 꽥꽥! 활기차고 재미난 소리를 내는 동물 친구들을 만나 보세요. 그림에 초점을 맞추고, 손가락으로 오돌토돌한 촉감을 느끼고, 구멍 뒤에 숨은 동물들을 찾아볼 수도 있어요. 아기와 함께 다양한 놀이를 즐겨 보세요!undefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/동물농장.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/동물농장.md</guid><dc:creator><![CDATA[조지 오웰, 도정일]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:41 GMT</pubDate></item><item><title><![CDATA[마케팅 천재들의 비밀노트 350：천재들의 아카이브를 몰래 엿보다]]></title><description><![CDATA[undefined프롤로그PART 1 무엇을 팔 것인지, 알고 시작하라 : 마케팅의 시작1장 세계 최고의 마케터가 되는 법 | 마케팅 전략 | 사만다 스톤(Samantha Stone)
2장 4P : 잘 파는 사람의 특징 | 마케팅 믹스 | 로비 피츠워터(Robbie Fitzwater)
3장 알고 싶은가? 질문하라! | 마케팅 조사 | 마시 코넷, 프랭크 프렌더가스트(Marci Cornett, Frank Prendergast)
4장 마케팅 시대에서 관계의 시대로 | 소비자 커뮤니케이션 | 스콧 머레이(Scott Murray)
5장 특별한 브랜드를 만드는 법 | 브랜딩과 마케팅 | 데이비드 비섹(David Bisek)
6장 디지털 세상에서 고객을 맞이하라 | 디지털 고객 경험 | 리사 아폴린스키(Lisa Apolinski)
7장 마케팅의 꽃, 마케팅 측정 | 마케팅 성과 측정 | 브루스 시어(Bruce Scheer)PART 2 매력적인 콘텐츠는 기회가 된다 : 콘텐츠 마케팅8장 콘텐츠 마케팅은 최고의 선택이다 | 콘텐츠 마케팅 전략 | 카린 아보우(Dr. Karine Abbou)
9장 블로그가 가진 비밀 | 블로그 | 빅토리아 베니언(Victoria Bennion)
10장 사람들의 귀는 늘 열려있다 | 팟캐스트 | 마리온 아브람스, 채드 파리즈만 (Marion Abrams, Chad Parizman)
11장 콘텐츠의 왕 | 동영상 | 로라 벤델랜드 도만(Laura Vendeland Doman)
12장 새로운 커뮤니케이션의 탄생 | 라이브 스트리밍 | 이안 앤더슨 그레이(Ian Anderson Gray)
13장 메시지는 고객을 끌어온다 | 메시지와 카피라이팅 | 알 보일, 주세페 프라토니(Al Boyle, Giuseppe Fratoni)PART 3 소셜 미디어로 생각하라 : 소셜 미디어 마케팅14장 소셜 미디어는 이미 포화상태다 | 소셜 미디어 마케팅 전략 | 카미 후이제(Kami Huyse)
15장 페이스북을 위해 | 페이스북 | 맨디 에드워즈(Mandy Edwards)
16장 링크드인의 알고리즘을 해킹하라 | 링크드인 | 리처드 블리스(Richard Bliss)
17장 톡톡 튀는 아이디어를 자랑하라 | 틱톡 | 조앤 테일러(Joanne Taylor)
18장 오늘을 팔로우하고 내일을 태그하라 | 인스타그램 | 발렌티나 에스코바르-곤잘레즈(Valentina Escobar-Gonzalez, MBA)
19장 당신의 영향력을 10배 키우는 트위터 | 트위터 | 줄리아 브램블(Dr.Julia Bramble)
20장 디지털 광고의 주인공이 되어라 | 디지털 광고 | 줄스 모리스(Jules Morris)PART 4 놓치기 쉬운 마케팅 : 마케팅 스탠다드21장 집으로 편지를 보내라 | 우편 | 제프 타란(Jeff Tarran)
22장 이메일 마케팅을 포기할 수 없는 이유 | 이메일 | 로비 피츠워터(Robbie Fitzwater)
23장 검색은 인터넷을 움직이는 원동력이다 | 검색 엔진 최적화 | 래리 아론슨(Larry Aronson)
24장 미디어 공룡의 멸종? | 신문·옥외 광고·라디오 | 롭 르라셔(Rob LeLacheur)
25장 우리가 하나씩은 가지고 있는 것 | 판촉물 | 산디 로드리게즈(Sandee Rodriguez)
26장 커뮤니케이션은 기술이다 | 전략적 커뮤니케이션 | 다니엘 네슬레(Daniel Nestle)
27장 입에서 입으로 전해지는 힘 | WOMM | 잭 세이퍼트(Zack Seipert)
28장 커뮤니티, 마케팅 그 이상이 되다 | 커뮤니티 | 피오나 루카스(Fiona Lucas)PART 5 다음엔 어떤 새로운 것이 등장할까? : 마케팅의 미래29장 사람들은 우리를 어떻게 보는가? | 퍼스널 브랜딩 | 마크 W. 셰퍼(Mark Schaefer)
30장 우리에게 가상 공간이 주어진다면? | 메타버스 | 브라이언 파이퍼(Brian Piper)
31장 웹3의 놀라운 가치 | 웹3 | 조에리 빌라스트(Joeri Billast)
32장 인공지능 마케팅은 인공적이지 않다 | 인공지능(AI) | 메리 캐스린 존슨 (Kathryn Johnson)
33장 돈 주고도 못할 경험을 선사하라 | 경험 마케팅과 UGC | 안나 브레이빙턴(Anna Bravington)
34장 고객과 나 사이 장벽을 깨다 | 포용 마케팅 | 페퍼브룩스(PepperBrooks)에필로그
감사의 글
참고자료]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/마케팅-천재들의-비밀노트-350-천재들의-아카이브를-몰래-엿보다.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/마케팅 천재들의 비밀노트 350 천재들의 아카이브를 몰래 엿보다.md</guid><dc:creator><![CDATA[마크 W. 셰퍼, 박지혜]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:38 GMT</pubDate></item><item><title><![CDATA[부자 아빠 가난한 아빠 20주년 특별 기념판]]></title><description><![CDATA[전 세계에서 가장 많이 팔린 경제경영서
‘부자 아빠 가난한 아빠’ 20주년 기념
업그레이드 에디션 출간!
세계 금융 변화에 맞춘 41개의 NEW 코멘트
토론과 실천을 위한 10가지 스터디세션 등 500매 분량의 내용 추가
1997년 미국에서 처음 출간된 이래 전 세계 51가지 언어로 109개국에서 출판되어 4000만 부(국내 350만 부)가 판매된 경제경영 재테크 분야 최고의 밀리언셀러 ‘부자 아빠 가난한 아빠’ 시리즈. 20년의 세월을 통해 검증된 부자들의 돈과 투자에 대한 지침들과 오늘날의 시대상에 맞춘 새로운 정보들이 추가된 『부자 아빠 가난한 아빠 20주년 특별 기념판』이 ㈜민음인에서 출간되었다. 지난 20년간 독자들에게 가장 많은 사랑을 받아 온 『부자 아빠 가난한 아빠 1』의 내용에 세계 금융 변화에 맞춘 41개의 ‘20년 전 그리고 오늘’과 토론과 실천을 위한 10가지 ‘스터디세션’ 등 원고지 500매 분량이 추가된 업그레이드 에디션이다. 돈에 대한 선입관을 깨뜨리는 파격적인 내용과 세월이 흘러도 변치 않는 투자의 원칙들은, 비트코인 광풍, 부동산 경매 시장의 활기 등 다양한 양상의 투자에 대한 관심이 높아지고 있는 오늘날에도 여전히 ‘돈’과 ‘투자’의 흔들리지 않는 기준이 되어 줄 것이다.무엇보다 이 책이 독자들에게 파고든 이유는 돈에 대한 일반적인 상식을 뒤집었기 때문이다. 저자는 사람들이 가난한 이유는 돈이 없어서가 아니라, 돈을 금기시하며 금융 지식을 멀리하는 사고와 문화 때문이라고 말한다. 저자의 가난한 아버지는 공부를 많이 했지만, 늘 카드대금 청구서와 주택융자금에 시달렸다.(“돈을 좋아하는 것은 모든 악의 근원이다. 공부 열심히 해서 좋은 직장을 구해야지. 위험을 피하고 안정적으로 살아라.”) 반면 친구의 부자 아버지는 정규 교육은 제대로 받지 못했지만 금융 IQ를 터득하여 막대한 부를 쌓았다.(“돈이 부족한 것은 모든 악의 근원이다. 공부 열심히 해서 좋은 회사를 차려라. 네가 똑똑한 사람을 고용해야 한다. 무엇보다 위험을 관리하는 법을 배워야 한다.”) 이 책에서는 저자가 유년 시절 겪은 두 아버지를 통해 가난한 사람과 부자의 사고방식을 비교한다. 직설적인 화법과 몰입도 있는 스토리텔링으로 경제에 대한 기초 상식은 물론, 자산과 부채의 개념과 성공적인 투자를 위한 금융 IQ를 기르는 비법 등을 누구나 이해할 수 있도록 쉽고 명쾌하게 전한다.20주년 기념 서문 | 20년이 지나도 변하지 않는 것들
서문 | 부자 아버지 vs. 가난한 아버지Chapter 1
교훈 1 부자들은 돈을 위해 일하지 않는다
Study Session 1Chapter 2
교훈 2 왜 금융 지식을 배워야 하는가
Study Session 2Chapter 3
교훈 3 부자들은 자신을 위해 사업을 한다
Study Session 3Chapter 4
교훈 4 부자들의 가장 큰 비밀, 세금과 기업
Study Session 4Chapter 5
교훈 5 부자들은 돈을 만든다
Study Session 5Chapter 6
교훈 6 돈을 위해 일하지 말고 교훈을 얻기 위해 일하라
Study Session 6Chapter 7
부자로 가는 길을 가로막는 장애물은 무엇인가?
Study Session 7Chapter 8
부자가 되는 10단계
Study Session 8Chapter 9
아직도 더 알고 싶다면 당신이 해야 할 일들
Study Session 9마치며
Study Session 10Bonus Book Excerpt
『부자 아빠 가난한 아빠 2』 미리 읽기]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/부자-아빠-가난한-아빠-20주년-특별-기념판.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/부자 아빠 가난한 아빠 20주년 특별 기념판.md</guid><dc:creator><![CDATA[로버트 기요사키, 안진환]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:34 GMT</pubDate></item><item><title><![CDATA[새별의 심플한 PPT 디자인 노하우：포토샵 없이 완성하는 파워포인트 디자인]]></title><description><![CDATA[심플한 파워포인트 디자인의 대명사
‘새별’이 알려주는 PPT 디자인의 모든 것!
새별의 파워포인트 콘텐츠 누적 조회 수 2,500만
한눈에 보이는 Before &amp; After PPT 이미지 수록
실습 예제 파일·다이어그램 50선·컬러 팔레트 QR코드 제공
개인 브랜딩 시대. 내가 쓰고 그리는 문장과 그림, 말투 등 나를 보여주는 것에는 여러 가지 도구가 있다. 한편 학교나 직장 안에서 나를 보여줄 수 있는 핵심 도구는 ‘파워포인트’이다. 파워포인트는 만능 재주꾼으로 발표할 때의 PPT는 나의 스피치를 돋보이게 만드는 반사판 역할을 하고, 보고를 위해 만드는 PPT 자료는 그간의 업무 성과를 가시적으로 보여주는 대변인이 되기도 한다. 취업과 이직을 위해 PPT로 만든 포트폴리오는 새로운 기회를 열어주는 열쇠가 된다. PC에는 다양한 프로그램이 설치되어 있지만 그중에서도 가장 쉽게 사용할 수 있고, 최대의 효과를 낼 수 있는 건 단연 PPT 프로그램이다.이제는 제안서, 회사 소개서, 카드뉴스 등도 포토샵이나 디자인 프로그램 없이 만들 수 있다. 이번에 새롭게 출간된 『새별의 심플한 PPT 디자인 노하우』에는 포토샵 없이도 다양한 콘텐츠를 만들 수 있는 ‘새별’만의 노하우가 담겨 있다. 전작 『새별의 파워포인트 디자인 수업』을 절판하고, 새로운 내용과 새로운 기술을 담은 이 책은 심플하고 간결한 PPT를 만들기 위해 필요한 방법을 단계별로 나누어 해설한다. 또한 전작에서는 볼 수 없었던 PPT 디자인의 Before &amp; After를 한눈에 볼 수 있게 담아, 내가 만든 PPT 디자인이 무엇이 부족하고, 어떤 걸 보충하면 완벽해지는지 알 수 있다. 그리고 실습 예제 파일과 새별표 컬러 팔레트, 다이어그램 50선을 특별 부록으로 담아 언제 어디서든 파워포인트 스킬을 업그레이드할 수 있다.서문
감사의 말씀
이 책의 구성
이 책 활용법
예제 미리 보기
PPT 능숙도 자가 진단
바쁘신 분들은 이것만 보세요PART 1 | 1단계 아이디어 스케치하기CHAPTER 1. 엉킨 아이디어 풀기
왜 만드는지 한 문장으로 정리하기 | 2. 메모장으로 떠오르는 아이디어 적기 | 3. 마인드맵으로 내용 구조화하기 | 4. ‘페르소나 기법’을 활용하여 전달 대상 분석하기 | 5. PPT 디자인 컨셉 정하기 | 6. 자료 표현 수단 세분화하기
CHAPTER 2. PPT 기본 기능 200% 활용하기
복제 기능으로 다이어그램 쉽게 만들기 | 2. 그룹화 기능으로 인포그래픽 만들기 | 3. 그룹화 해제 기능으로 다이어그램 만들기 | 4. 기본 도형으로 지정해서 깔끔한 스타일 유지하기 | 5. 서식 복사/붙여 넣기 기능으로 작업 속도 높이기 | 6. 슬라이드 마스터에서 크기 변경하기 | 7. 슬라이드 마스터에서 기본 글꼴 변경하기 | 8. 슬라이드 마스터에서 색 조합 변경하기 | 9. 나만의 단축키 만들기
PART 2 | 2단계 글 다듬고 내용 배치하기CHAPTER 1. 텍스트 정리하기
한 슬라이드에 내용 3가지로 정리하기 | 2. 1~2개의 글꼴 사용하기 | 3. 왼쪽 정렬 또는 양쪽 정렬로 안정감 주기 | 4. 글꼴 스타일에 따라 자간 조율하기 | 5. 보기 편할 정도로 행간 넓히기
CHAPTER 2. 레이아웃 다듬기
같은 내용은 같은 크기로 정리하기 | 2. 정렬 기능으로 간격 동일하게 맞추기 | 3. 복잡해 보이는 요소는 빼거나 슬라이드 분할하기 | 4. 33 비율로 배열하기 | 5. 글머리 기호 대신 숫자 사용하기 | 6. 중요한 내용은 도형과 픽토그램으로 강조하기
PART 3 | 3단계 도형과 선으로 디자인하기CHAPTER 1. 도형 활용하기
윤곽선 없는 도형으로 깔끔함 연출하기 | 2. 불투명 도형으로 다이어그램 만들기 | 3. 직사각형으로 단순 텍스트 묶어주기 | 4. 무채색 직사각형으로 내용 단위 묶어주기 | 5. 개체 복제 기능으로 인포그래픽 만들기 | 6. 불투명 도형을 목차 디자인에 활용하기
CHAPTER 2. 선 활용하기
선으로 제목 영역과 내용 영역 구분해주기 | 2. 이미지에 보조선을 넣어 설명 연결시키기 | 3. 괄호를 넣어 핵심 메시지 넣기 | 4. 선으로 설명 영역 구분하기
PART 4 | 4단계 시각 자료와 색상 편집하기CHAPTER 1. 시각 자료 편집하기
초점이 하나로 맞춰진 사진으로 표지 만들기 | 2. 저화질 이미지는 고화질 이미지로 대체하기 | 3. 사진 크기 동일하게 편집하기 | 4. 도형에 맞춰 자르기 기능으로 깔끔하게 연출하기 | 5. 사진이 글씨를 가라지 않도록 밝기 조율하기 | 6. 픽토그램 스타일은 하나로 통일하기 | 7. 사진과 글꼴 크기 비율 맞추기 | 8. 선과 음영으로 깔끔하게 표 정리하기
CHAPTER 2. 색상 조율하기
3가지 색으로 색 조합하기 | 2. 배경색은 무채색으로 맞추기 | 3. 글꼴과 배경색이 대조되게 하기 | 4. 그래프의 주요 데이터는 강조색, 나머지는 무채색으로 표현하기
PART 5 | 5단계 나만의 PPT 템플릿 만들기CHAPTER 1. 심플하고 세련된 나만의 템플릿 만들기
도형과 사진으로 깔끔하게 세련된 표지 만들기 | 2. 흐름이 잘 보이는 목차 만들기 | 3. 사진으로 소표지 만들기 | 4. 내용 레이아웃(제목 바) 만들기 | 5. 테마를 저장하여 다른 PPT에 적용하기
PART 6 | 6단계 상황과 목적에 맞는 PPT 만들기CHAPTER1. 보기 편한 보고서 디자인하기
보고서 표지 슬라이드 만들기 | 2. 보고서 목차 슬라이드 만들기 | 3. 보고서 소표지 슬라이드 만들기 | 4. 보고서 내용 슬라이드 만들기 1 (스마트아트 활용하기) | 5. 보고서 내용 슬라이드 만들기 2 (표 만들기) | 6. 보고서 내용 슬라이드 만들기 3 (흐름도 만들기)
CHAPTER 2. 계약으로 이끄는 제안서 디자인하기
제안서 표지 슬라이드 만들기 | 2. 제안서 목차 슬라이드 만들기 | 3. 제안서 단계 슬라이드 만들기 | 4. 제안서 서비스 소개 슬라이드 만들기 | 5. 제안서 효과 슬라이드 만들기 | 6. 제안서 키워드 강조 슬라이드 만들기
CHAPTER 3. 팔리는 기획안 디자인하기
기획안 표지 슬라이드 만들기 | 2. 기획안 목차 슬라이드 만들기 | 3. 기획안 상품 소개 슬라이드 만들기 | 4. 기획안 목업(Mockup) 합성 슬라이드 만들기 | 5. 기획안 특장점 슬라이드 만들기 | 6. 기획안 마케팅 방안 슬라이드 만들기
CHAPTER 4. 강의 교안 디자인하기
강의 교안 프로필 슬라이드 만들기 | 2. 강의 교안 내용 복습 슬라이드 만들기 | 3. 강의 교안 강의 주제 슬라이드 만들기 | 4. 강의 교안 동영상 슬라이드 만들기 | 5. 강의 교안 내용 요약 슬라이드 만들기 | 6. 강의 교안 내용 정리 슬라이드 만들기
CHAPTER 5. 회사 소개서 디자인하기
회사 소개서 표지 슬라이드 만들기 | 2. 회사 소개서 목차 슬라이드 만들기 | 3. 회사 소개서 소표지 슬라이드 만들기 | 4. 회사 소개서 비전 슬라이드 만들기 | 5. 회사 소개서 연혁 슬라이드 만들기 | 6. 회사 소개서 연락처 슬라이드 만들기
CHAPTER 6. 취업용 포트폴리오 디자인하기
취업용 포트폴리오 표지 슬라이드 만들기 | 2. 취업용 포트폴리오 주요 이력 슬라이드 만들기 | 3. 취업용 포트폴리오 핵심 역량 표현 슬라이드 만들기 | 4. 취업용 포트폴리오 업무 적합도 슬라이드 만들기 | 5. 취업용 포트폴리오 프로그램 숙련도 슬라이드 만들기 | 6. 취업용 포트폴리오 사진 레이아웃 슬라이드 만들기
PART 7 | 7단계 PPT로 SNS 콘텐츠 만들기CHAPTER 1. 나만의 로고 만들기
CHAPTER 2. 한눈에 보이는 블로그 썸네일 만들기
CHAPTER 3. 주목성 있는 카드뉴스 만들기
CHAPTER 4. 한 장짜리 포스터 만들기
CHAPTER 5. 모핑 기능으로 슬라이드 만들기
표지 슬라이드 만들기 | 2. 디자인 슬라이드 만들기 | 3. 목차 슬라이드 만들기 | 4. 내용 슬라이드 만들기 1 | 5. 내용 슬라이드 만들기 2 | 6. 내용 슬라이드 만들기 3
Outro PPT 제작 후 자체 점검 체크 리스트
참고 PPT 제작에 도움을 주는 유용한 웹사이트 목록
부록 1 새별 추천 컬러 팔레트 20
부록 2 새별의 다이어그램 50(특별 제공)
참고 문헌
INDEX]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/새별의-심플한-ppt-디자인-노하우-포토샵-없이-완성하는-파워포인트-디자인.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/새별의 심플한 PPT 디자인 노하우 포토샵 없이 완성하는 파워포인트 디자인.md</guid><dc:creator><![CDATA[유새별]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:20 GMT</pubDate></item><item><title><![CDATA[세컨드 브레인 부스트]]></title><description><![CDATA[“저장하는 뇌에서 생산하는 뇌로, 생산성과 창의력을 극대화하라!”
‘아는 자’가 ‘가진 자’가 되는 초정보·초연결·초디지털 시대,
최상의 퍼포먼스를 위한 최적의 프로세스
아마존 베스트 1위, 전 세계 10개국 출간!
다니엘 핑크, 세스 고딘이 강력 추천한 새로운 시스템의 시작!
1000만 명이 열광한 ‘제2의 뇌’를 구축하는 핵심 전략!
세계적 베스트셀러 『세컨드 브레인』 저자의 또 다른 화제작!
AI가 보고서를 쓰고 그림을 그리는 초기술시대, 정보를 생산하는 것이 인간에 국한되지 않는 오늘날 우리는 실시간으로 쏟아지고 동시에 사라지는 거대한 정보의 급류에 휩쓸리고 있다. 현대의 지식 과잉 사회에서는 단순히 정보를 많이 모으는 것이 성공을 담보하지 않으며, 자신의 업무에 유용한 자료를 선별하고 가공하여 재생산하는 것이 필수적인 능력이 된다. 하지만 여전히 많은 사람들이 맹목적으로 정보를 수집하고 저장하는 기초 단계에 머물러 있다. 심지어 자신이 자료를 갖고 있다는 사실조차 잊어버리고 비슷한 내용을 여기저기 담아두기도 한다. 이는 우리가 정보를 어떻게 선택하고 저장해야 하는지 기준을 명확히 알지 못하기 때문이다. 이 책은 정보의 홍수 속에 길을 잃고 헤매는 사람들에게 쉽고 간단하면서도 효율적인 정보 관리 방법인 PARA를 소개하고, 이의 구축과 실행, 활용 방법을 상세히 알려준다. PARA는 모든 자료를 단 4개의 범주로 구분하는 획기적인 시스템으로, 다니엘 핑크, 세스 고딘 등 세계적인 지식인과 혁신가들이 열광하고 극찬한 ‘세컨드 브레인’의 핵심 도구이다. 일과 일상의 모든 부분에서 생산성과 창의성을 높여주는 PARA를 통해 누구나 자신의 목표를 달성하고 성공을 향해 나아가게 될 것이다.들어가는 글 _ 정보의 목적은 저장이 아닌 실행이다1부 구축:PARA 이해하기1장 PARA는 무엇이 다른가
2장 프로젝트별 정리의 힘
3장 1분 만에 PARA를 설정하는 법
4장 정리를 쉽게 만드는 5가지 핵심 요령
5장 PARA 시스템을 어떻게 유지할 것인가2부 실행: PARA 활용하기6장 프로젝트와 영역을 구분하는 법
7장 영역과 자원을 구분하는 법
8장 PARA를 동일하게 확장하는 법
9장 정보가 계속해서 흐르게 하라
10장 다른 사람과 함께 PARA 사용하기3부 잠재력에서 영향력으로, 창조적 과정의 완성11장 프로젝트 목록을 만들어라
12장 시스템을 위한 3가지 핵심 습관
13장 집중력, 창의력, 시점을 높이는 PARA 정리법
14장 언제든 다시 시작할 수 있다
15장 개인 맞춤형 시스템 구축하기FAQ 함께 알아두면 유용한 추가 질문들]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/세컨드-브레인-부스트.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/세컨드 브레인 부스트.md</guid><dc:creator><![CDATA[티아고 포르테, 이희령]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:15 GMT</pubDate></item><item><title><![CDATA[폭풍의 언덕]]></title><description><![CDATA[undefinedundefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/폭풍의-언덕.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/폭풍의 언덕.md</guid><dc:creator><![CDATA[에밀리 브론테]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:03:04 GMT</pubDate></item><item><title><![CDATA[주홍글씨]]></title><description><![CDATA[미국 문학사의 영원한 고전!
도덕적 규범에 짓눌린 한 여인의 모습을 상징적으로 그린 걸작청교도주의의 본고장인 17세기 보스턴을 무대로 삼은 이 소설은 늙은 남편에 앞서 바다를 건너온 헤스터가 젊은 목사와 사랑하는 사이가 되어 아기까지 갖자 간통죄라는 낙인이 찍히는 데서 시작한다. 애정의 삼각관계, 즉 불의의 남녀 관계를 다루는 듯하지만 작가 너새니얼 호손의 관심은 사랑의 곡절이 아니라 이것이 빚어내는 죄의식의 처리에 있다. 복수심의 노예로 타락해가는 남편, 착하나 의지가 약한 탓에 허위와 가책에 허덕이는 목사, 그를 끝내 감싸주며 안간힘을 다해 자신에게 주어진 삶의 고난에 맞서는 여인, 그리고 이들의 기구한 인연을 맺어주는 불의의 열매인 어린 딸, 이들 네 사람을 중심으로 호손은 죄와 벌의 문제를 끊임없이 분석해나간다.감옥 문
장터
알아보다
만남
일하는 헤스터
펄
장관의 관저에서
요정 소녀와 목사
의사
의사와 환자
마음속의 비밀들
밤을 새운 목사
다른 모습의 헤스터
헤스터와 의사
헤스터와 펄
숲속의 길
목사와 교인
쏟아지는 햇빛
냇가의 아이
미로에 갇힌 목사
뉴잉글랜드의 경축일
행렬
드러난 주홍글씨의 비밀
결론작품 해설
너새니얼 호손 연보created: 2024-12-02 01:50
tag: 독서 국내도서 소설/시/희곡 장르소설 판타지
title: 레드 드래곤 7：주홍빛 물방울
author: ""
category: 국내도서
total_page: 287
publish_date: 2004-12-04
cover_url: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://image.yes24.com/momo/TopCate43/MidCate09/4283371.jpg" target="_self">https://image.yes24.com/momo/TopCate43/MidCate09/4283371.jpg</a>
status: 완료
start_read_date: 2024-12-02
finish_read_date: 2024-12-02
my_rate: 0
book_note: ❌신에게 버림받은 돌연변이 레드 드래곤. 앞날의 운명조차 알 수 없는 그의 숨 막히는 생존기!
사내의 입에서 터져 나오는 괴성. 그리고 그의 몸은 점점 거대해져 갔다. 그의 피부는 이미 사람의 것이 아니었다. 마치 갑옷처럼 촘촘하게 엮어진 붉은 색의 비늘이 자라나고 있었고, 몸은 이제 사람의 몇 배 이상 거대해져 있었다. 천천히 그의 등을 뚫고 자라나는 붉은 날개. 그 날개의 웅장함이란 이루 말할 수가 없었다.undefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/주홍글씨.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/주홍글씨.md</guid><dc:creator><![CDATA[나다니엘 호손, 조승국]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:02:59 GMT</pubDate></item><item><title><![CDATA[카라마조프 가의 형제들 세트]]></title><description><![CDATA[undefinedundefined]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/카라마조프-가의-형제들-세트.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/카라마조프 가의 형제들 세트.md</guid><dc:creator><![CDATA[표도르 도스토예프스키, 김연경]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:02:52 GMT</pubDate></item><item><title><![CDATA[싯다르타]]></title><description><![CDATA[테스트 용 파일"싯다르타"는 고대 인도의 젊은 남자 싯다르타의 영적 여정을 다룬 소설입니다. 주인공 싯다르타는 자아를 찾기 위해 다양한 삶의 방식을 경험하며 성장합니다.
브라만의 아들 싯다르타는 존경받는 브라만 가문의 아들로 태어났으나, 전통적인 종교 교육과 생활에서 벗어나 진리를 찾기 위해 떠납니다. 사문과의 생활 친구 고빈다와 함께 고행 생활을 하는 사문이 되어 물질적 쾌락을 부정하고 명상을 통해 깨달음을 추구합니다. 고타마 붓다와의 만남 싯다르타는 고타마 붓다(석가모니)를 만나 가르침을 듣지만, 자신만의 길을 가기로 결심합니다. 고빈다는 붓다의 제자가 되지만, 싯다르타는 홀로 떠납니다. 카밀라와의 삶 싯다르타는 도시로 가서 매춘부 카밀라를 만나 사랑을 배우고, 상인 카마스와미에게서 물질적 성공을 배웁니다. 그러나 이 모든 것이 그에게 진정한 만족을 주지 못합니다. 강가의 깨달음 싯다르타는 강가에서 배를 젓는 배사공 바수데바를 만나 그의 단순한 삶을 통해 깊은 깨달음을 얻습니다. 결국, 그는 강을 통해 삶의 진정한 본질을 이해하게 됩니다. 영적 여정: 싯다르타의 삶은 자아를 찾기 위한 끝없는 탐구입니다.
자기 발견: 다른 사람들의 가르침이 아닌, 자신의 경험을 통해 깨달음을 얻는 것이 중요하다는 메시지를 전달합니다.
이원성의 초월: 세속적인 삶과 영적인 삶을 모두 경험하며 이 둘의 경계를 넘나드는 과정이 묘사됩니다. 영적 탐구와 철학: "싯다르타"는 동양 철학과 서양 철학을 통합한 헤세의 대표작으로, 많은 이들에게 영감과 깨달음을 주었습니다.
개인주의와 자아 실현: 싯다르타의 이야기는 현대 사회에서도 여전히 중요한 주제인 자기 발견과 자아 실현에 대해 깊이 생각하게 합니다.
문학적 가치: 아름다운 문체와 깊이 있는 철학적 성찰로 인해 세계 문학사에서 중요한 위치를 차지합니다. 철학과 영성에 관심 있는 독자: 자아 탐구와 영적 여정을 다룬 책을 찾는 독자에게 적합합니다.
자기 계발서 애호가: 자신의 삶의 의미를 찾고자 하는 사람들에게 큰 영감을 줄 수 있습니다.
문학 애호가: 헤르만 헤세의 문학적 재능과 아름다운 글쓰기를 경험하고 싶은 독자에게 추천합니다.
]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/싯다르타.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/싯다르타.md</guid><dc:creator><![CDATA[헤르만 헤세, 박병덕]]></dc:creator><pubDate>Sun, 01 Dec 2024 17:01:27 GMT</pubDate></item><item><title><![CDATA[직장인을 위한 챗GPT：업무 스킬업부터 자기 계발까지! 694개 ChatGPT 파워 프롬프트 가이드]]></title><description><![CDATA[비즈니스 솔루션, 마케팅 인사이트부터 스트레스 관리와 자기 계발까지
챗GPT로 직장인의 워라밸 완성하기26가지 산업 분야별 정리, 바쁜 현대 직장인에게 최적화된 챗GPT 가이드
694개 역할 맞춤형 프롬프트 조합 제공, 기획자, 프로덕트 매니저, 마케터, 영업 담당자 등 문과 출신에게 딱 맞는 챗GPT 실습서이 책은 일반인도 챗GPT를 마치 '검색창'처럼 쓸 수 있게 해주는 ‘파워 프롬프트’를 소개합니다. 이제 직장생활뿐 아니라 개인적 삶에서도 생산성과 효율성을 높일 수 있습니다. 먼저, 5단계 만능 프로세스 ‘① 핵심 문제 - ② 주요 역할 - ③ 역할별 프롬프트 - ④ 방법 탐색 - ⑤ 단계별 수행 지침’을 이용해 26가지 산업 분야별로 업무 효율을 극대화하는 방법을 얻습니다. 다음으로, 스트레스 관리부터 자기 계발까지 개인적 삶에 구체적인 도움을 줄 수 있는 유명 콘텐츠 프레임워크를 프롬프트에 활용해 유용한 팁을 얻습니다. 마지막으로, 워라밸을 완성하기 위한 작업 관리의 모범 사례를 살펴보고, 챗GPT가 사용자에게 역으로 질문하는 ‘역할 전환’ 방법을 사용하여 더 상세한 응답을 얻는 방법을 안내합니다. 이 책에서 소개하는 694개의 프롬프트를 원하는 대로 조합하여 여러분이 원하는 최상의 결과를 얻어보세요!1부 챗GPT 프롬프트의 세계1장 프롬프트 공식과 프롬프트 템플릿
프롬프트란 무엇인가요?
사람은 타고난 ‘프롬프트 엔지니어’입니다
그렇다면 프롬프트 공식이란 무엇인가요?
파워 프롬프트
프롬프트 템플릿이란 무엇인가요?
프롬프트 - 좋은 놈, 나쁜 놈, 이상한 놈2장 페르소나, 역할, 활동, 방법
아웃사이드-인 사고법에 관한 간략한 설명
아웃사이드-인 사고법의 5가지 핵심 질문
페르소나란 무엇인가요?
역할이란 무엇인가요?
활동이란 무엇인가요?
방법 또는 전문 기술이란 무엇인가요?
역할과 페르소나의 관계
역할과 활동의 관계
역할, 활동, 방법/전문 기술의 관계
역할, 목록, 단계별 프롬프트 공식의 조합3장 역할 맞춤형 프롬프트
역할 맞춤형 프롬프트의 효과 증폭시키기
롤플레이 즐기기4장 목록 프롬프트
주제별 목록 생성 프롬프트 공식
정보를 목록으로 정리하기5장 단계별 프롬프트
단계별 접근법과 목록의 조합
프롬프트 레시피2부 산업별 프롬프트6장 산업 분야7장 기술 및 IT
핵심 문제
주요 역할
역할 맞춤형 프롬프트
주요 활동
작업
역할에 따른 주요 활동 목록 생성하기
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기8장 제품 및 서비스 관리
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기9장 영업 및 마케팅
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기10장 인사 관리
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기11장 고객 서비스
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기12장 헬스케어 및 의료
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기13장 금융 및 은행
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기14장 리테일 및 이커머스
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기15장 제조 및 생산
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기16장 에너지 및 설비
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기17장 운송 및 물류
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기18장 건축 및 건설 엔지니어링
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기19장 교육 및 훈련
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기20장 농업 및 식품 생산
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기21장 숙박 및 관광
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기22장 부동산 및 자산 관리
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기23장 통신
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기24장 미디어 및 엔터테인먼트
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기25장 제약 및 생명공학
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기26장 환경 및 재생 에너지
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기27장 자동차 및 운송 장비
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기28장 시설 관리
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기29장 수상 운송 및 해양
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기30장 전문 서비스 - 컨설팅, 법률, 회계
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기31장 정부 및 공공 서비스
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기32장 비영리 단체 및 사회적 기업
핵심 문제
주요 역할
역할 맞춤형 프롬프트
역할에 따른 방법/기술 목록 생성하기
방법/기술을 수행하는 단계별 지침 생성하기3부 자기 계발을 위한 프롬프트33장 자기 계발
문제 맞춤형 프롬프트
자기 계발을 수행하는 방법/기술 목록 생성하기
문제 해결을 위한 단계별 지침 생성하기34장 창의적 글쓰기
일반적인 장르
글의 핵심 요소
설정
주제
타임라인
캐릭터
배경 사건
장소
플롯
서브플롯
장면
스토리 아크
글쓰기가 가능하다면 작곡도 가능할까요?
작사는 어떨까요?
음악 제작에 유용한 AI 플랫폼35장 콘텐츠 유형에 따른 글쓰기
일반적인 콘텐츠 프레임워크
_콘텐츠 프레임워크를 활용한 프롬프트 공식36장 직장인의 워라밸을 위한 프롬프트
개인적 삶과 직업적 삶에서의 작업 관리
자유 형식 작업과 구조화된 작업
자유 형식 작업
자유 형식 작업의 구조화
구조화된 작업
변화를 쉽게 받아들이는 모범 사례
_구조화된 작업의 해석4부 프롬프트 활용 전략37장 참조 모델, 방법론, 인터프리터를 활용한 프롬프트
모범 사례
참조 모델
일반적인 참조 모델
산업 분야별 참조 모델
방법론
인터프리터
번역
시스템 프로그래밍 인터프리터38장 기존 콘텐츠 분석 및 개선
비교 및 대조
역사적 사건을 분석하는 프롬프트
역사적 사건들을 비교하는 프롬프트
응답 개선에 유용한 ‘컴백’
응답 스타일 변경하기
유명 인사 스타일로 응답 변경하기
가상 캐릭터 스타일로 응답 변경하기
몬티 파이썬 인물 스타일로 응답 변경하기
상반된 관점과 정반대 관점
상반된 관점
정반대 관점39장 역할 전환
역할 전환, 한 번에 하나씩 질문하기
_역할 전환 - UFO 헌터40장 챗GPT와 함께 한 걸음 더 나아가기부록 무료 참고 자료 및 프롬프트]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/직장인을-위한-챗gpt-업무-스킬업부터-자기-계발까지-694개-chatgpt-파워-프롬프트-가이드.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/직장인을 위한 챗GPT 업무 스킬업부터 자기 계발까지 694개 ChatGPT 파워 프롬프트 가이드.md</guid><dc:creator><![CDATA[이안 클레이턴, 김상규]]></dc:creator><pubDate>Sun, 01 Dec 2024 16:52:35 GMT</pubDate></item><item><title><![CDATA[이 책은 돈에 관한 동기부여 이야기：돈에 대해 어떠한 노력도 하지 않는 너에게]]></title><description><![CDATA[undefined추천의 글
프롤로그. 내가 절약하는 이유
프로 짠테커 테스트1장. 나는 부자가 되기로 결심했다나는 흙수저를 넘어 콩고물 수저였다
아무도 내 인생을 책임져주지 않는다
141만 원, 내겐 너무 커 보였던 첫 월급
나의 첫 파이프라인
적금은 최고의 스트레스 해소법
1년에 2,000만 원 모으기
22살 자취 시작, 그럼에도 절약왕
24살에 1억 원을 모으기까지2장. 나의 소비는 절약에서 시작된다수입이 적다면 지출을 줄이는 수밖에
신용카드 할부는 그만
식비를 줄이는 현실적인 노하우
진짜 입을 옷이 없나요?
예쁜 쓰레기는 이제 그만
찾아보자, 대체품
나혼산에 대한 로망
짠순이도 연애할 수 있습니다3장. 누구나 할 수 있는 짠테크 노하우앱테크: 잘 모은 포인트가 현금으로
영수증 재테크: 내가 쓴 영수증도 돈이 된다
중고 기프티콘: 외식이 하고 싶을 땐
중고마켓: 생각보다 많은 제품이 있다
재활용품: 환경도 지키고 혜택도 받고
알뜰폰: 휴대폰 요금, 너도 아낄 수 있어
공과금: 100원이라도 줄일 수 있다면
교통비: 더 이상 고정비가 아니야
체험단: 인플루언서만 하는 게 아니야
생수 말고 수돗물: 수질 검사도 했습니다
기부: 기부도 하고 세액공제도 받고4장. 소소하지만 소중한 나의 파이프라인돈 되는 유튜브
프로 적금러의 투자 도전기
24살 아파트 청약 최연소 당첨자가 되기까지
개인 브랜딩을 통한 협업
책 쓰기와 강의5장. 부자가 되기 위해 네가 꼭 했으면 하는 것들목표 정하기
동기부여 버튼 만들기
가계부 쓰기
예산 계획하기
무지출 데이 도전하기
선저축 후지출과 적금 쪼개기
임장 다니기
청약통장 개설하기
마음도 미니멀하게
목표가 같은 사람과 어울리기에필로그. 절약도 전염된다
부록. 나의 10년 부자 계획표]]></description><link>https://64etuor.github.io/200_books/00_achives/2024/이-책은-돈에-관한-동기부여-이야기-돈에-대해-어떠한-노력도-하지-않는-너에게.html</link><guid isPermaLink="false">200_Books/00_Achives/2024/이 책은 돈에 관한 동기부여 이야기 돈에 대해 어떠한 노력도 하지 않는 너에게.md</guid><dc:creator><![CDATA[곽지현(절약의달인 자취린이)]]></dc:creator><pubDate>Sun, 01 Dec 2024 16:50:18 GMT</pubDate></item><item><title><![CDATA[로베스피에르]]></title><description><![CDATA[<a data-tooltip-position="top" aria-label="참을 수 없는 존재의 가벼움 > 1장" data-href="참을 수 없는 존재의 가벼움#1장" href="https://64etuor.github.io/200_books/00_achives/2024/참을-수-없는-존재의-가벼움.html#1장_0" class="internal-link" target="_self" rel="noopener nofollow">🔙이전 문서로 돌아가기</a>막시밀리앵 로베스피에르(Maximilien Robespierre)는 프랑스 혁명의 중요한 인물로, 1758년에 태어나 1794년에 처형되었습니다. 그는 프랑스 혁명 초기에 입법 의회와 국민 협회의 중요한 멤버로 활동했으며, 혁명적 정부의 핵심 인물 중 한 명으로 부상했습니다.로베스피에르는 프랑스 혁명의 가장 극단적이고 폭력적인 단계인 '테러의 시대(Terror)'를 주도했습니다. 그는 혁명을 보호하고 적들을 제거하기 위해 폭력과 대규모 처형을 사용했습니다. 그의 이러한 행동은 그를 '테러의 상징'으로 만들었으며, 많은 무고한 사람들이 길로틴으로 처형되었습니다.로베스피에르는 자코뱅 클럽의 지도자로, 공화주의와 평등의 이상을 강하게 옹호했습니다. 그는 또한 왕정을 폐지하고 프랑스 제1공화국을 설립하는 데 중요한 역할을 했습니다. 그는 국가의 강력한 중앙 집권화를 추진했으며, 개인의 자유보다는 공공의 이익을 우선시하는 정치 철학을 가지고 있었습니다.하지만, 로베스피에르는 그의 독재적이고 폭력적인 방법들로 인해 결국 많은 적을 만들었습니다. 1794년, 그는 반대파에 의해 권력에서 축출되었고, 길로틴으로 처형되었습니다. 그의 사망은 '테러의 시대'의 종말을 의미하며, 프랑스 혁명의 변화를 가져왔습니다.로베스피에르의 역사적 평가는 복잡합니다. 어떤 이들은 그를 혁명적 이상을 위해 싸운 영웅으로 보는 반면, 다른 이들은 그의 폭력과 독재를 비판하며 두려움의 상징으로 여깁니다. 그의 인물과 행동은 프랑스 혁명과 그 이후의 역사에 깊은 영향을 미쳤으며, 현대에도 여전히 많은 토론과 연구의 대상이 되고 있습니다.]]></description><link>https://64etuor.github.io/200_books/00_achives/canvas/로베스피에르.html</link><guid isPermaLink="false">200_Books/00_Achives/Canvas/로베스피에르.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Dec 2024 15:54:53 GMT</pubDate></item><item><title><![CDATA[240719 - 46번 국도, 소양강]]></title><description><![CDATA[드리운 노을
늙은 벼처럼 낮은 울음이 수면 우로 꺾이고,길섶의 억새가
초혼의 몸짓으로 흩날리던,뭍에 비친 자취만으로도
영영토록 침전한 추기의 끝자락.한 쪽 다리 가지인 양 강물에 담그고
역사로 알리지 못한 이천년의 맡서럽게 스러진 소산한 세월
저녁놀 담뿍 밴 낡은 노래를 읊는다.]]></description><link>https://64etuor.github.io/900_writings/poems/240719-46번-국도,-소양강.html</link><guid isPermaLink="false">900_Writings/Poems/240719 - 46번 국도, 소양강.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Dec 2024 10:52:37 GMT</pubDate></item><item><title><![CDATA[241118_이제현_인공지능을활용한슬기로운연구생활]]></title><link>https://64etuor.github.io/500_resources/generative-ai/인공지능을-활용한-연구/241118_이제현_인공지능을활용한슬기로운연구생활.html</link><guid isPermaLink="false">500_Resources/Generative AI/인공지능을 활용한 연구/241118_이제현_인공지능을활용한슬기로운연구생활.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Dec 2024 10:15:05 GMT</pubDate></item><item><title><![CDATA[(리팩토링)Excel VBA_테이블 구조 변경 자동화]]></title><description><![CDATA[이전 버전의 VBA 코드(<a data-href="Excel VBA_테이블 구조 변경 자동화" href="https://64etuor.github.io/600_tech-stack/00_achieves/excel-vba/excel-vba_테이블-구조-변경-자동화.html#_0" class="internal-link" target="_self" rel="noopener nofollow">Excel VBA_테이블 구조 변경 자동화</a>)는 말 그대로 데이터를 가져오는 범위가 셀 주소로 명시된 하드 코딩이었다. 그런데 시간이 지나니 생산 계획을 짜는 팀에서 테이블에 열도 추가하는 등의 수정을 했다. 당연히 올바른 셀 주소에서 값을 가져올 수 없으니 그대로 매크로를 실행한 엉뚱한 값을 가져올 것이다. 그러니 수정이 필요했다. 필요한 작업은,
열의 인덱스 검색으로 필요한 열의 데이터만 가져오기
기존에 부여하던 W/O 는 더이상 필요 없음(3중 결합키의 중복값을 발견해서 아예 별도의 임의 id를 부여한 테이블을 따로 만듦)
기존 achProcess는 데이터베이스에 따로 테이블로 등록했으므로 더이상 필요 없음
Power BI의 데이터 원본을 엑셀에서 데이터베이스로 교체했기 때문에 Plan_ID도 더이상 필요 없음(인덱스 열 자동 추가됨)
13열에서 10열로 축소하여 구조 재편
Transformed라는 시트가 이미 있다면 삭제하는 과정 추가
Sub TransDataStructure_Latest() Dim ws As Worksheet, newWs As Worksheet Dim lastRow As Long, lastCol As Long, i As Long, j As Long, newRow As Long Dim colIndices As Object Dim header As Variant, headerIndex As Long Application.ScreenUpdating = False Application.Calculation = xlCalculationManual Set ws = ThisWorkbook.Sheets("Original") ' 기존 'Transformed' 시트가 있다면 삭제 Application.DisplayAlerts = False On Error Resume Next ThisWorkbook.Sheets("Transformed").Delete On Error GoTo 0 Application.DisplayAlerts = True ' 새 'Transformed' 시트 생성 Set newWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)) newWs.Name = "Transformed" With ws lastRow = .Cells(.Rows.Count, "A").End(xlUp).Row lastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column End With ' 필요한 열의 인덱스 검색 Set colIndices = CreateObject("Scripting.Dictionary") Dim headers As Variant headers = Array("Line", "Type", "Customer", "Project Name", "P/O", "PN", "Remark", "Sum") For i = 1 To lastCol For headerIndex = LBound(headers) To UBound(headers) If Trim(ws.Cells(1, i).Value) = Trim(headers(headerIndex)) Then colIndices(headers(headerIndex)) = i Exit For End If Next headerIndex Next i ' Customer 열을 찾지 못했다면 "Customer " (공백 포함)으로 다시 검색 If Not colIndices.Exists("Customer") Then For i = 1 To lastCol If Trim(ws.Cells(1, i).Value) = "Customer" Then colIndices("Customer") = i Exit For End If Next i End If newRow = 2 ' 새 시트의 시작 행 (1행은 헤더) ' 데이터 처리 For i = 2 To lastRow For j = 12 To lastCol ' 날짜 열은 12번째 열부터 시작 If ws.Cells(i, j).Value &lt;&gt; "-" And ws.Cells(i, j).Value &lt;&gt; "" Then For headerIndex = LBound(headers) To UBound(headers) header = headers(headerIndex) If colIndices.Exists(header) Then newWs.Cells(newRow, headerIndex + 1).Value = ws.Cells(i, colIndices(header)).Value End If Next headerIndex newWs.Cells(newRow, 9).Value = ws.Cells(1, j).Value ' Date newWs.Cells(newRow, 10).Value = ws.Cells(i, j).Value ' PlanQty newRow = newRow + 1 End If Next j Next i ' 헤더 추가(데이터를 어디서 활용할지 모르니 가급적 공백과 특수문자 사용은 지양할 것) newWs.Range("A1:J1").Value = Array("Line", "Type", "Customer", "Project Name", "PO", "PN", "Remark", "Sum", "Date", "PlanQty") ' 날짜 형식 지정 newWs.Columns("I:I").NumberFormat = "yyyy-mm-dd" Application.ScreenUpdating = True Application.Calculation = xlCalculationAutomatic MsgBox "Data structure transformation completed.", vbInformation
End Sub For i = 1 To lastCol For headerIndex = LBound(headers) To UBound(headers) If Trim(ws.Cells(1, i).Value) = Trim(headers(headerIndex)) Then colIndices(headers(headerIndex)) = i Exit For End If Next headerIndex Next i
생산 계획표의 열 이름에 뒤에 공백을 넣는 경우가 있었다.(Customer 값을 찾지 못하는 문제가 발생해서 보니 원본 열의 이름이 “Customer”가 아니라 “Customer “였다.) 그래서 Trim으로 앞뒤 공백을 제거하는 과정을 넣었다. 혹시 몰라 “Customer ”를 찾게 하는 코드도 추가했다.워낙 간단한 코드라서 큰 문제랄 건 없었다. 귀찮아서 리팩토링을 미루던 코드인데, 생성형 ai의 도움으로 순식간에 작업이 끝났다. 이제 사람이 코드를 치는 것보다는 설계에 집중하고, 실무는 ai가 하는 시대가 온 것 같다. 아무튼 이전과 달리 딕셔너리에 데이터 배열을 넣고 한번에 출력 되게 하니 성능도 좋아진 것 같다.(물론 컴퓨터들이 성능이 좋아져서 사람이 체감하긴 어렵다.)]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/excel-vba/(리팩토링)excel-vba_테이블-구조-변경-자동화.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Excel VBA/(리팩토링)Excel VBA_테이블 구조 변경 자동화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 01 Dec 2024 09:36:36 GMT</pubDate></item><item><title><![CDATA[Benchmarking Large Language Models in Retrieval-Augmented Generation_prodocs]]></title><link>https://64etuor.github.io/500_resources/generative-ai/논문/benchmarking-large-language-models-in-retrieval-augmented-generation_prodocs.html</link><guid isPermaLink="false">500_Resources/Generative AI/논문/Benchmarking Large Language Models in Retrieval-Augmented Generation_prodocs.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 21 Nov 2024 13:27:48 GMT</pubDate></item><item><title><![CDATA[Benchmarking Large Language Models in Retrieval-Augmented Generation]]></title><link>https://64etuor.github.io/500_resources/generative-ai/논문/benchmarking-large-language-models-in-retrieval-augmented-generation.html</link><guid isPermaLink="false">500_Resources/Generative AI/논문/Benchmarking Large Language Models in Retrieval-Augmented Generation.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 21 Nov 2024 13:27:41 GMT</pubDate></item><item><title><![CDATA[데이터 분석 부트캠프 과정소개서]]></title><link>https://64etuor.github.io/700_studies/2411-2503-메타코드-데이터-분석/데이터-분석-부트캠프-과정소개서.html</link><guid isPermaLink="false">700_Studies/2411-2503 메타코드 데이터 분석/데이터 분석 부트캠프 과정소개서.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 20 Nov 2024 05:09:12 GMT</pubDate></item><item><title><![CDATA[Excel VBA_셀 내용 번역기]]></title><description><![CDATA[외국계 회사다 보니 재무 관련된 모든 문서는 영어로 작성되야 한다. 우리 직원 중 한 명이 비품 관련 업무를 하는데 비품의 이름, 필요한 사유 등 모든 정보를 하나씩 파파고 번역기로 번역하는 모습을 보고, 너무나 비효율적이라고 생각했다. 그래서 엑셀 셀 각각을 한글에서 영어로 번역해주는 모듈을 만들기로 했다.모듈을 만들기 전에 항상 검색을 먼저 한다. 누군가가 이미 구현해 놓았다면 간편하게 사용이 가능한 경우가 많다. 이 경우, 오빠두엑셀에서 필요한 기능을 이미 모두 구현해 놓은 자료를 무료로 <a data-tooltip-position="top" aria-label="https://www.oppadu.com/resources/%EC%97%91%EC%85%80-googletranslate-%ED%95%A8%EC%88%98/%ED%95%B4%EC%A3%BC%EA%B3%A0" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.oppadu.com/resources/%EC%97%91%EC%85%80-googletranslate-%ED%95%A8%EC%88%98/%ED%95%B4%EC%A3%BC%EA%B3%A0" target="_self">공유</a> 해주고 있었다. 해당 기능을 약간 수정하여 한글→영어로 번역하도록 코드를 약간 수정해준다. 아래는 오빠두엑셀에서 제공한 자료의 코드 수정한 부분만 발췌한 내용이다.Function Trans(OriginalText) sFrom = "ko"
sTo = "en" OriginalText = ENCODEURL(OriginalText)
strURL = "https://translate.google.com/m?sl=" &amp; sFrom &amp; "&amp;tl=" &amp; sTo &amp; "&amp;q=" &amp; OriginalText
oResult = GetHttp(strURL) sResult = Splitter(oResult, "&lt;div class=""result-container""&gt;", "&lt;/div&gt;")
If Len(sResult) = 0 Then
sResult = Splitter(oResult, "result-container&gt;", "&lt;/DIV&gt;")
End If Trans = sResult End Function
<br><img alt="Pasted image 20241022091008.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241022091008.png" target="_self">원하는 대로 기능이 잘 작동하는 걸 볼 수 있다.]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/excel-vba/excel-vba_셀-내용-번역기.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Excel VBA/Excel VBA_셀 내용 번역기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 22 Oct 2024 00:11:14 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20241022091008.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20241022091008.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Excel VBA_개체 내 문자 치환 모듈]]></title><description><![CDATA[기존에 엑셀로 작성된 한글 작업표준서를 해외 외주를 위해 영문판으로 제작해야 했다. 엑셀로 작성된 문서라 여러가지 한계가 많았다. 그 중에 가장 불편한 것은 ‘개체 내 문자’는 엑셀 기본 찾기/바꾸기 기능으로 치환할 수가 없다는 것이었다. 그래서 이것을 해결하고자 모듈을 제작했다.개체 내 삽입된 문자의 일괄 찾기 및 바꾸기(치환) 기능을 가진 모듈을 구현하여 번역 작업 효율 향상Sub TextReplacement() Dim Ws As Worksheet Dim shp As Shape Dim xFindStr As String Dim xReplace As String Dim xValue As String Dim count As Long Dim totalCount As Long xFindStr = Application.InputBox("Find:", xTitleId, "", Type:=2) xReplace = Application.InputBox("Replace with:", xTitleId, "", Type:=2) On Error Resume Next For Each Ws In Application.ActiveWorkbook.Worksheets For Each shp In Ws.Shapes xValue = shp.TextFrame.Characters.Text If InStr(xValue, xFindStr) &gt; 0 Then count = UBound(Split(xValue, xFindStr)) - LBound(Split(xValue, xFindStr)) totalCount = totalCount + count End If shp.TextFrame.Characters.Text = VBA.Replace(xValue, xFindStr, xReplace, 1) Next shp Next Ws MsgBox totalCount &amp; " 개의 단어가 치환되었습니다.", vbInformation End Sub <img alt="Pasted image 20241021172447.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241021172447.png" target="_self"><br><img alt="Pasted image 20241021172523.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241021172523.png" target="_self"><br><img alt="Pasted image 20241021172539.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241021172539.png" target="_self"><br><img alt="Pasted image 20241021172622.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20241021172622.png" target="_self">일단 예전에 작성된 표준서는 위와 같이 일일이 수정했지만, 새로운 버전의 표준서는 전부 PPT로 작성해서 굳이 이 모듈을 사용할 필요가 없었다. 그래도 잠깐의 시간 투자로 지루한 번역 작업을 효율적으로 할 수 있었으니 만족.]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/excel-vba/excel-vba_개체-내-문자-치환-모듈.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Excel VBA/Excel VBA_개체 내 문자 치환 모듈.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 21 Oct 2024 23:55:03 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20241021172447.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20241021172447.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Power BI_Python Script를 활용한 공정능력평가 그래프 그리기]]></title><description><![CDATA[신규로 발주한 생산 설비의 FAT를 진행하고 데이터를 분석해야 했다.
가능했던 방법은,
미니탭 사용
Python matplotlibrary 사용
두가지인데,
이중 미니탭의 장점은 간단하고 빠르다는 것, 단점은 구독 비용.(라이센스 1개 3년 구독 비용이 370만원에 육박한다.)
회사에서 보유하고 있는 공유 라이센스가 있지만, FAT를 하면 갑자기 여러 부서에서 미니탭 수요가 급증하므로 필요할 때 쓰기가 어렵다. 또 모든 회사가 미니탭을 구독해서 사용하지는 않으므로 직접 구현해보는 것도 괜찮다고 판단.
그리고 이전부터 존재한다고 알고는 있었지만 한번도 사용해 보지는 않은, Power BI 내의 Python Script 기능을 학습하는 겸 직접 구현해 보기로 했다. (필수) Python 설치(나는 이미 설치되어 있으므로 생략)
(선택) Visual Studio Code 설치(Power BI에 Python Script를 외부 IDE로 작성하는 기능이 있어서 있으면 좋다. 단, 양자간 동기화는 되지 않는다. Copy and Paste 필요.)
Power BI 설정에서 Python home directory 선택(파이썬이 이미 설치된 상태라면 자동으로 선택되어 있을 수도 있음)
<img alt="Pasted image 20240920142431.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920142431.png" target="_self">
Power BI를 실행하여 Python Visual 객체를 삽입(Py 아이콘)<br>
<img alt="Pasted image 20240920142225.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920142225.png" target="_self">
Build 패널의 Values에 필요한 데이터 삽입<br>
<img alt="Pasted image 20240920142804.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920142804.png" target="_self">
이러면 준비가 완료된 것이다.
이후에는 Python script editor에 코드를 작성해주면 된다. 라이브러리는 Power BI 옵션에 설정했던 파이썬 버전을 따라가므로 필요한 라이브러리가 있다면 미리 설치해두면 좋다.
(내가 사용한 라이브러리는 pandas, numpy, matplotlib, scipy 이다.)
Python script editor의 외부 IDE 기능을 써서 script를 열어보면,<br>
<img alt="Pasted image 20240920143228.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920143228.png" target="_self">
위와 같은 화면을 볼 수 있다. 기본으로 os, uuid, matplotlib, pands를 import 하는 것을 볼 수 있다. 그리고 아래의 dataset을 보면 데이터를 임시로 csv로 저장하고 pandas로 프레임을 만들어 준다는 걸 알 수 있다.
그리고 데이터셋에서 중복값을 삭제하도록 기본 설정되어 있으므로, 만약 데이터가 의미 있는 중복값을 갖고 있다면 고유 id를 생성하여 지워지지 않도록 막아주면 된다.(나는 Power BI Query Editor에서 Index열을 추가해줬다.)이제 코드를 작성하면 된다. 한가지 주의할 점은 위의 코드의 주석으로 안내된 내용처럼 외부IDE에서 코드를 작성하고 저장한다고 해도 Power BI의 Python script editor에 적용되는 것은 아니다. 작성한 코드를 복사해서 Python script editor에 붙여넣기 하는 작업이 필요하다.import numpy as np
import matplotlib.pyplot as plt
from scipy import stats # Define the variables and their specification limits
variables = [ { 'name': 'Distance1', 'lsl': 180, 'usl': 182, 'xlabel': 'Distance1' }, { 'name': 'Distance2', 'lsl': 354, 'usl': 356, 'xlabel': 'Distance2' }, { 'name': 'Distance3', 'lsl': 180, 'usl': 182, 'xlabel': 'Distance3' }, { 'name': 'Distance4', 'lsl': 354, 'usl': 356, 'xlabel': 'Distance4' }
] # Determine the number of plots
n_vars = len(variables)
cols = 2
rows = (n_vars + cols - 1) // cols # Calculate rows based on number of variables # Create the figure and axes
fig, axes = plt.subplots(rows, cols, figsize=(10 * cols, 6 * rows)) # Flatten axes array for easy indexing
axes = axes.flatten() # Loop over variables and create plots
for i, var in enumerate(variables): ax = axes[i] var_name = var['name'] lsl = var['lsl'] usl = var['usl'] xlabel = var['xlabel'] # Check if the variable exists in the dataset if var_name not in dataset.columns: continue data = dataset[var_name].dropna() # Remove NaN values # Calculate statistics mean = data.mean() std_dev = data.std() # Calculate Cp and Cpk cp = (usl - lsl) / (6 * std_dev) cpu = (usl - mean) / (3 * std_dev) cpl = (mean - lsl) / (3 * std_dev) cpk = min(cpu, cpl) # Plot histogram ax.hist(data, bins=50, density=True, alpha=0.7, color='skyblue') # Plot normal distribution curve x = np.linspace(lsl - 3*std_dev, usl + 3*std_dev, 100) ax.plot(x, stats.norm.pdf(x, mean, std_dev), 'g-', lw=2) # Vertical lines for LSL, USL, and Mean ax.axvline(lsl, color='r', linestyle='dashed', linewidth=2) ax.axvline(usl, color='r', linestyle='dashed', linewidth=2) ax.axvline(mean, color='k', linestyle='dashed', linewidth=2) # Text annotations ax.text(0.05, 0.95, f'Cpk: {cpk:.2f}', transform=ax.transAxes, verticalalignment='top', fontsize=13, fontweight='bold') ax.text(0.05, 0.88, f'Cp: {cp:.2f}', transform=ax.transAxes, verticalalignment='top') ax.text(0.05, 0.83, f'Mean: {mean:.2f}', transform=ax.transAxes, verticalalignment='top') ax.text(0.05, 0.78, f'Std.Dev: {std_dev:.2f}', transform=ax.transAxes, verticalalignment='top') ax.text(0.05, 0.73, f'LSL: {lsl:.1f}', transform=ax.transAxes, verticalalignment='top') ax.text(0.05, 0.68, f'USL: {usl:.1f}', transform=ax.transAxes, verticalalignment='top') # Labels and title ax.set_xlabel(xlabel) ax.set_ylabel('Frequency') ax.set_title(f'{xlabel} - Cpk Analysis', fontsize=18, fontweight='bold') # Set x-axis limits to focus on the area around LSL and USL x_margin = (usl - lsl) * 0.2 ax.set_xlim(lsl - x_margin, usl + x_margin) # Hide any unused subplots
for j in range(i + 1, len(axes)): fig.delaxes(axes[j]) # Adjust layout
plt.tight_layout()
plt.show() 객체 안에 2열로 Plot의 갯수(위 variables 리스트의 딕셔너리 갯수)만큼 그래프가 표시되도록 했다.
표본 데이터의 갯수에 따라 bins의 값을 수정해 준다.ax.hist(data, bins=50, density=True, alpha=0.7, color='skyblue')
그리고 출력된 그래프를 보고 x_margin = (usl - lsl) * 0.2 ax.set_xlim(lsl - x_margin, usl + x_margin)
의 margin 값을 수정해 준다. (값이 USL, LSL과 동떨어질 경우는 그래프가 이상하게 표시될 수 있으니 아예 수식을 수정하는 것이 낫다.)아래와 같이 출력된 결과물을 확인한다. 결과물을 보고 수정이 필요한 부분이나 추가할 내용이 있으면 코드를 수정해준다.<br>
<img alt="Pasted image 20240920144925.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920144925.png" target="_self"><br><img alt="Pasted image 20240920145027.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920145027.png" target="_self">다중 플롯도 잘 출력된다.]]></description><link>https://64etuor.github.io/600_tech-stack/power-bi/power-bi_python-script를-활용한-공정능력평가-그래프-그리기.html</link><guid isPermaLink="false">600_Tech Stack/Power BI/Power BI_Python Script를 활용한 공정능력평가 그래프 그리기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 17 Oct 2024 21:28:17 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240920142431.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920142431.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Excel VBA_테이블 구조 변경 자동화]]></title><description><![CDATA[<img alt="Pasted image 20240920131455.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920131455.png" target="_self">생산 계획을 짜는 팀에서 위와 같이 구조화되지 않은 테이블 형식으로 배포를 한다. 현재 내가 만든 Database에 그대로 입력할 수 없는 형태의 데이터이기 때문에 정형화된 테이블로 바꿔줄 필요가 있었다.
아래와 같이 새로운 엑셀 파일을 만들고, 계획표에서 필요한 부분만 복사하여 붙여 넣었다. 그리고 아래와 같이 VBA 코드를 작성한다.Sub TransDataEXECUTE_OLD() Dim ws As Worksheet, achProcessWs As Worksheet Dim lastRow As Long, lastCol As Long, i As Long, j As Long Dim newWs As Worksheet, newRow As Long, achProcessRow As Long Dim dataArray As Variant, achProcessArray As Variant Dim planId As Long Dim typeCol As Integer, achProcessCol As Integer Dim po As String, pn As String, wo As String Application.ScreenUpdating = False ' Turn off screen updating Application.Calculation = xlCalculationManual ' Turn off automatic calculations Set ws = ThisWorkbook.Sheets("Original") ' Sheet with original data Set achProcessWs = ThisWorkbook.Sheets("AchProcess") ' Sheet with AchProcess data Set newWs = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)) newWs.Name = "Transformed" lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row ' Find the last row lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column ' Find the last column achProcessRow = achProcessWs.Cells(achProcessWs.Rows.Count, "A").End(xlUp).Row ' Last row in AchProcess sheet ' Copy headers and add new headers newWs.Range(newWs.Cells(1, 1), newWs.Cells(1, 8)).Value = ws.Range(ws.Cells(1, 1), ws.Cells(1, 8)).Value newWs.Cells(1, 9).Value = "Date" newWs.Cells(1, 10).Value = "PlanQ'ty" newWs.Cells(1, 11).Value = "Plan_ID" newWs.Cells(1, 12).Value = "AchProcess" newWs.Cells(1, 13).Value = "W/O" ' Add W/O header newRow = 2 ' Starting row for the new sheet dataArray = ws.Range(ws.Cells(1, 1), ws.Cells(lastRow, lastCol)).Value ' Array for data achProcessArray = achProcessWs.Range(achProcessWs.Cells(1, 1), achProcessWs.Cells(achProcessRow, 2)).Value ' Array for AchProcess data planId = 1 ' Starting Plan ID typeCol = 2 ' Assuming Type is in the second column For i = 2 To UBound(dataArray, 1) ' Loop through rows For j = 12 To UBound(dataArray, 2) ' Loop through date columns If dataArray(i, j) &lt;&gt; "-" And dataArray(i, j) &lt;&gt; "" Then ' Check for non-empty and non-dash values ' Copy the first 11 columns newWs.Range(newWs.Cells(newRow, 1), newWs.Cells(newRow, 8)).Value = Application.Index(dataArray, i, Array(1, 2, 3, 4, 5, 6, 7, 8)) newWs.Cells(newRow, 9).Value = dataArray(1, j) newWs.Cells(newRow, 10).Value = dataArray(i, j) newWs.Cells(newRow, 11).Value = "P" &amp; planId ' Assigning unique Plan_ID ' Search for AchProcess based on Type For achProcessCol = 1 To UBound(achProcessArray, 1) If achProcessArray(achProcessCol, 1) = dataArray(i, typeCol) Then newWs.Cells(newRow, 12).Value = achProcessArray(achProcessCol, 2) ' Assign AchProcess Exit For End If Next achProcessCol ' Generate W/O po = dataArray(i, 5) ' Assuming P/O is in the 6th column pn = dataArray(i, 6) ' Assuming PN is in the 7th column wo = po &amp; Left(pn, 3) &amp; Right(pn, 5) newWs.Cells(newRow, 13).Value = wo ' Assign W/O newRow = newRow + 1 planId = planId + 1 ' Increment Plan ID End If Next j Next i newWs.Columns("I:I").Select Selection.NumberFormat = "yyyy-mm-dd" Application.ScreenUpdating = True ' Turn on screen updating Application.Calculation = xlCalculationAutomatic ' Turn on automatic calculations
End Sub W/O라는 열은, 계획에 Primary Key가 없기 때문에(P/O 하나에 온갖 제품이 다 엮여 있다.) 관계형 데이터베이스에서 데이터가 꼬인다. 그래서 궁여지책으로 3열 결합 키를 임의로 부여했다.(나중에 안 거지만 이렇게 3중 결합 키를 사용했는데도 중복된 키가 나왔다… 데이터 정규화의 중요성)
이 버전을 처음에 작성할 때는 Power BI와 연결한 원본을 Excel파일로 관리했기 때문에 별도의 ID를 부여할 필요가 있었다.(아니면 Power BI의 Query Editor에서 인덱싱 열을 추가해도 됐지만 당시에는 몰랐다.)
achProcess는 생산 실적을 집계하는 공정(예를 들어 포장)이 무엇인지 achProcess 시트의 테이블에서 제품 타입을 기반으로 실적 집계 공정을 검색해서 구조 변경된 데이터에 추가하도록 했다.이제 아래와 같이 데이터를 붙여 넣고 이제 매크로를 실행하면,<br>
<img alt="Pasted image 20240920132118.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920132118.png" target="_self">
이렇게 세로 배열로 변환된 데이터가 나온다. 이걸 데이터베이스 데이터로 추가해주면 Power BI에 반영된다.<br>
<img alt="Pasted image 20240920132539.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920132539.png" target="_self">]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/excel-vba/excel-vba_테이블-구조-변경-자동화.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Excel VBA/Excel VBA_테이블 구조 변경 자동화.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 20 Sep 2024 08:23:19 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240920131455.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240920131455.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Visio 활용 - 개발 절차 검토]]></title><description><![CDATA[회사에서 제품 개발 절차를 검토하라는 지시와 함께 관련 여러 문서를 검토할 일이 있었다.
하지만 문서의 양이 방대하고 각 절차의 복잡성과 결재 라인 등이 복잡하며, 선/후 관계가 한 눈에 파악되지 않기 때문에 이런 문제를 극복하기 위하여 Visio를 사용했다.처음에 다이어그램을 그리기 시작했을 때 생각했던 사이즈보다 훨씬 커졌지만, 다행히 Visio의 유연한 캔버스 사이즈 덕분에 작업을 원활히 이어갈 수 있었다. 다른 다이어그램 도구들과 달리 Visio는 복잡한 워크플로우와 대규모 다이어그램을 처리하는 데 매우 유리했다.그리는 작업이 결코 쉽지는 않았지만 완성하고 보니, 문서로 읽기만 했을 때는 한 눈에 들어오지 않던 문제들이 속속들이 보이기 시작했다. 필수적인 결재 절차가 누락된 경우도 여러 건이었으며, 이러한 문제는 기존에 문서만으로는 쉽게 파악할 수 없었다.그렇게 절차를 검토하면서 그 외 중요하게 다뤄야 할 관련 문서 중, 문제가 있는 것들은 해당 문제가 있는 부분만 따로 발췌하여 다이어그램 옆에 삽입하고, 정확히 어떤 프로세스와 연관되어 있는지 표시해 두었다. 이러한 시각적 작업은 팀원들과의 협업에서도 유용하게 활용되었으며, 중요한 피드백을 쉽게 수집할 수 있었다.<img alt="Pasted image 20240905095444.png" src="https://64etuor.github.io/settings/assets/image/pasted-image-20240905095444.png" target="_self"><br>MOC:: <a data-href="📚 652 Process Documentation" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 652 Process Documentation</a> | <a data-href="📚 634 Software Development" href="https://64etuor.github.io/000_index/📚-634-software-development.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 634 Software Development</a> | <a data-href="📚 618 AI Frameworks" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 618 AI Frameworks</a><br>Depart. :: <a data-href="👤 3. Data Science" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">👤 3. Data Science</a> | <a data-href="👤 4. AI" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">👤 4. AI</a><br><a href="https://64etuor.github.io?query=tag:ProcessImprovement" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#ProcessImprovement">#ProcessImprovement</a> <a href="https://64etuor.github.io?query=tag:WorkflowVisualization" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#WorkflowVisualization">#WorkflowVisualization</a> <a href="https://64etuor.github.io?query=tag:VisioUsage" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#VisioUsage">#VisioUsage</a> <a href="https://64etuor.github.io?query=tag:Tags/Process" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Tags/Process">#Tags/Process</a> <a href="https://64etuor.github.io?query=tag:Visio" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Visio">#Visio</a> <a href="https://64etuor.github.io?query=tag:Microsoft" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Microsoft">#Microsoft</a> <a href="https://64etuor.github.io?query=tag:Diagram" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Diagram">#Diagram</a>]]></description><link>https://64etuor.github.io/600_tech-stack/00_achieves/visio/visio-활용-개발-절차-검토.html</link><guid isPermaLink="false">600_Tech Stack/00_Achieves/Visio/Visio 활용 - 개발 절차 검토.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 05 Sep 2024 01:08:17 GMT</pubDate><enclosure url="https://64etuor.github.io/settings/assets/image/pasted-image-20240905095444.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/settings/assets/image/pasted-image-20240905095444.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Flutter 개발 환경 설정]]></title><description><![CDATA[아래는 Flutter 개발 환경 설정을 위한 완성된 문서입니다. 이 문서는 Flutter SDK 설치부터 Android SDK 설정, flutter doctor를 통한 환경 설정 확인까지 포함하고 있습니다.Flutter는 하나의 코드베이스로 iOS와 Android 앱을 개발할 수 있는 강력한 프레임워크입니다. 이 문서에서는 Flutter 개발 환경을 설정하는 방법을 단계별로 자세히 설명하겠습니다.
Flutter SDK 설치
IDE 설치 및 설정
Android SDK 설정
flutter doctor로 환경 설정 확인
모바일 에뮬레이터 설정
Flutter 프로젝트 생성 및 실행 Flutter 공식 웹사이트(<a data-tooltip-position="top" aria-label="https://flutter.dev/)%EC%97%90%EC%84%9C" rel="noopener nofollow" class="external-link is-unresolved" href="https://flutter.dev/)%EC%97%90%EC%84%9C" target="_self">https://flutter.dev/)에서</a> 운영체제에 맞는 Flutter SDK를 다운로드합니다. Windows: .zip 파일
macOS: .dmg 파일
Linux: .tar.xz 파일 다운로드한 파일의 압축을 원하는 디렉터리로 해제합니다. 예시: C:\src\flutter (Windows), ~/flutter (macOS/Linux) Flutter SDK를 시스템 PATH에 추가하여 터미널에서 Flutter 명령어를 쉽게 실행할 수 있도록 합니다.
시스템 속성 -&gt; 고급 시스템 설정 -&gt; 환경 변수를 엽니다.
사용자 변수 또는 시스템 변수의 Path를 선택하고 편집을 클릭합니다.
Flutter SDK의 bin 폴더 경로를 추가합니다. 예시: C:\src\flutter\bin 터미널에 다음 명령어를 입력하여 .bashrc, .bash_profile, 또는 .zshrc 파일에 Flutter 경로를 추가합니다.export PATH="$PATH:`pwd`/flutter/bin"
변경 사항을 적용하기 위해 터미널을 재시작하거나 source ~/.bashrc를 실행합니다.Flutter가 올바르게 설치되었는지 확인하기 위해 flutter doctor 명령어를 사용합니다.flutter doctor
이 명령어는 Flutter 설치 상태를 진단하고 필요한 추가 설치 항목을 안내합니다.Flutter 개발을 위해 주로 사용하는 IDE는 다음과 같습니다:
Visual Studio Code: 가볍고 빠르며, Flutter 플러그인을 통해 강력한 지원을 제공합니다.
Android Studio: 전체적인 Android 개발 도구와 통합되어 있으며, 강력한 디버깅 기능과 에뮬레이터 지원을 제공합니다. <br>Visual Studio Code 다운로드 및 설치: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://code.visualstudio.com/" target="_self">https://code.visualstudio.com/</a> 에서 다운로드합니다.
Flutter 플러그인 설치: VS Code를 실행한 후, 왼쪽 사이드바에서 Extensions 아이콘을 클릭합니다.
"Flutter"와 "Dart" 플러그인을 검색하여 설치합니다. Flutter 프로젝트 생성: View -&gt; Command Palette -&gt; Flutter: New Project를 선택하여 새로운 Flutter 프로젝트를 생성합니다. <br>Android Studio 다운로드 및 설치: <a rel="noopener nofollow" class="external-link is-unresolved" href="https://developer.android.com/studio" target="_self">https://developer.android.com/studio</a> 에서 다운로드합니다.
Flutter 플러그인 설치: Android Studio를 실행하고, Plugins 메뉴로 이동하여 "Flutter" 플러그인을 설치합니다. 이는 Dart 플러그인을 자동으로 설치해줍니다. Android SDK 설치: Android Studio에서 SDK Manager를 열어 Android SDK, SDK Platform, 그리고 Android Virtual Device (AVD)를 설치합니다. Flutter 프로젝트 생성: File -&gt; New -&gt; New Flutter Project를 선택하여 새로운 Flutter 프로젝트를 생성합니다. Flutter는 Android SDK Command-line tools가 필요합니다. 이를 설치하기 위해 다음 단계를 따릅니다. Android Studio 실행: Android Studio를 실행합니다. SDK Manager 열기: File -&gt; Settings (macOS에서는 Preferences)로 이동한 후, Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK를 선택합니다. SDK Tools 탭 선택: SDK Tools 탭으로 이동합니다. Android SDK Command-line tools 체크: 목록에서 Android SDK Command-line tools (latest)를 선택합니다.
체크박스에 체크가 되어 있지 않다면, 체크하고 Apply 버튼을 눌러 설치를 진행합니다. 설치 확인: 설치가 완료되면 OK 버튼을 눌러 설정을 저장합니다. Flutter 개발 환경이 올바르게 설정되었는지 확인하려면, 터미널에서 다음 명령어를 실행합니다.flutter doctor
flutter doctor는 다음과 같은 사항들을 점검합니다:
Flutter SDK 설치 여부
Android SDK 설치 여부
Xcode 설치 여부 (macOS에서만)
Android Studio 및 Flutter/Dart 플러그인 설치 여부
연결된 디바이스(에뮬레이터 또는 실제 디바이스) 여부
각 항목의 상태가 출력되며, X 마크가 있는 경우 해당 항목에 문제가 있음을 나타냅니다. 문제가 발생한 경우 Flutter는 그에 따른 해결 방법을 제안합니다.만약 flutter doctor 출력에서 Android SDK Command-line tools와 관련된 문제가 발생한 경우, 위에서 설명한 대로 SDK Tools 탭에서 Android SDK Command-line tools (latest)를 설치했는지 확인하고, 설치 후 flutter doctor를 다시 실행합니다.
AVD Manager 실행: Android Studio에서 AVD Manager를 엽니다 (Tools -&gt; Device Manager). 새로운 가상 장치 생성: Create Virtual Device 버튼을 클릭하고, 원하는 기기 유형과 Android 버전을 선택하여 새로운 가상 장치를 만듭니다. 에뮬레이터 실행: 생성한 가상 장치를 선택하고 Play 버튼을 눌러 에뮬레이터를 실행합니다. Xcode 설치: Mac App Store에서 Xcode를 다운로드하고 설치합니다. Xcode 설정: Xcode를 실행하고 Preferences -&gt; Locations 탭에서 Command Line Tools를 설정합니다. iOS 시뮬레이터 실행: Xcode의 Window -&gt; Devices and Simulators에서 iOS 시뮬레이터를 실행할 수 있습니다. Flutter 프로젝트를 생성하여 환경 설정이 제대로 동작하는지 테스트합니다.flutter create my_flutter_app
생성한 Flutter 프로젝트 디렉터리로 이동한 후, 앱을 실행합니다.cd my_flutter_app
flutter run
flutter doctor를 통해 모든 환경이 제대로 설정되었음을 확인한 후, 앱이 정상적으로 실행되면 Flutter 개발 환경이 성공적으로 설정된 것입니다.
Hot Reload: 코드 변경 사항을 빠르게 적용하기 위해 터미널에서 r 키를 누릅니다.
Hot Restart: 전체 앱을 재시작하기 위해 R 키를 누릅니다.
이 문서에서 설명한 단계를 따라 Flutter 개발 환경을 성공적으로 설정할 수 있습니다. flutter doctor 명령어를 통해 환경 설정이 올바르게 되었는지 확인하고, 필요한 경우 추가 설정을 적용하세요. 이제 Flutter의 다양한 위젯과 플러그인을 활용하여 본격적으로 앱 개발을 시작할 수 있습니다.<br>MOC:: <a data-href="📚 630 Programming" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 630 Programming</a> | <a data-href="📚 634 Software Development" href="https://64etuor.github.io/000_index/📚-634-software-development.html#_0" class="internal-link" target="_self" rel="noopener nofollow">📚 634 Software Development</a> | <a data-href="📚 637 Mobile App Development" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">📚 637 Mobile App Development</a><br>Depart. :: <a data-href="👤 2. Programming" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">👤 2. Programming</a><br><a href="https://64etuor.github.io?query=tag:Flutter" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Flutter">#Flutter</a> <a href="https://64etuor.github.io?query=tag:Development" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Development">#Development</a> <a href="https://64etuor.github.io?query=tag:Setup" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Setup">#Setup</a> <a href="https://64etuor.github.io?query=tag:IDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#IDE">#IDE</a> <a href="https://64etuor.github.io?query=tag:SDK" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SDK">#SDK</a> <a href="https://64etuor.github.io?query=tag:FlutterDoctor" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#FlutterDoctor">#FlutterDoctor</a> <a href="https://64etuor.github.io?query=tag:AndroidSDK" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#AndroidSDK">#AndroidSDK</a> <a href="https://64etuor.github.io?query=tag:CommandLineTools" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CommandLineTools">#CommandLineTools</a>]]></description><link>https://64etuor.github.io/500_resources/00_achieves/flutter/flutter-개발-환경-설정.html</link><guid isPermaLink="false">500_Resources/00_Achieves/Flutter/Flutter 개발 환경 설정.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 13 Aug 2024 01:12:33 GMT</pubDate></item><item><title><![CDATA[EventListnerOption]]></title><description><![CDATA[last updated : 2024-07-31Passive event listeners are a new feature <a data-tooltip-position="top" aria-label="https://dom.spec.whatwg.org/#dom-addeventlisteneroptions-passive" rel="noopener nofollow" class="external-link is-unresolved" href="https://dom.spec.whatwg.org/#dom-addeventlisteneroptions-passive" target="_self">in the DOM spec</a> that enable developers to opt-in to better scroll performance by eliminating the need for scrolling to block on touch and wheel event listeners. Developers can annotate touch and wheel listeners with {passive: true} to indicate that they will never invoke preventDefault. This feature <a data-tooltip-position="top" aria-label="https://www.chromestatus.com/features/5745543795965952" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.chromestatus.com/features/5745543795965952" target="_self">shipped in Chrome 51</a>, <a data-tooltip-position="top" aria-label="https://bugzilla.mozilla.org/show_bug.cgi?id=1266066" rel="noopener nofollow" class="external-link is-unresolved" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1266066" target="_self">Firefox 49</a> and <a data-tooltip-position="top" aria-label="https://bugs.webkit.org/show_bug.cgi?id=158601" rel="noopener nofollow" class="external-link is-unresolved" href="https://bugs.webkit.org/show_bug.cgi?id=158601" target="_self">landed in WebKit</a>. Check out the video below for a side-by-side of passive event listeners in action:<br><a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=NPM6172J22g" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=NPM6172J22g" target="_self">demo video</a>Smooth scrolling performance is essential to a good experience on the web, especially on touch-based devices.
All modern browsers have a threaded scrolling feature to permit scrolling to run smoothly even when expensive
JavaScript is running, but this optimization is partially defeated by the need to wait for the results of<br>
any touchstart and touchmove handlers, which may prevent the scroll entirely by calling <a data-tooltip-position="top" aria-label="http://www.w3.org/TR/touch-events/#the-touchstart-event" rel="noopener nofollow" class="external-link is-unresolved" href="http://www.w3.org/TR/touch-events/#the-touchstart-event" target="_self"><code></code></a>preventDefault() on the event. While there are particular scenarios where an author may indeed want to prevent scrolling, analysis indicates that the majority of touch event handlers on the web never actually
call preventDefault(), so browsers often block scrolling unnecessarily. For instance, in Chrome for Android 80% of the touch events that block scrolling never actually prevent it. 10% of these events add more than 100ms of delay to the start of scrolling, and a catastrophic delay of at least 500ms occurs in 1% of scrolls.<br>Many developers are surprised to learn that <a data-tooltip-position="top" aria-label="http://rbyers.github.io/janky-touch-scroll.html" rel="noopener nofollow" class="external-link is-unresolved" href="http://rbyers.github.io/janky-touch-scroll.html" target="_self">simply adding an empty touch handler to their document</a> can have a<br>
significant negative impact on scroll performance. Developers quite reasonably expect that the act of observing an event <a data-tooltip-position="top" aria-label="https://dom.spec.whatwg.org/#observing-event-listeners" rel="noopener nofollow" class="external-link is-unresolved" href="https://dom.spec.whatwg.org/#observing-event-listeners" target="_self">should not have any side-effects</a>.<br>The fundamental problem here is not limited to touch events. <a data-tooltip-position="top" aria-label="https://w3c.github.io/uievents/#events-wheelevents" rel="noopener nofollow" class="external-link is-unresolved" href="https://w3c.github.io/uievents/#events-wheelevents" target="_self"><code></code> events</a>wheel<br>
suffer from an identical issue. In contrast, <a data-tooltip-position="top" aria-label="https://w3c.github.io/pointerevents/" rel="noopener nofollow" class="external-link is-unresolved" href="https://w3c.github.io/pointerevents/" target="_self">pointer event handlers</a> are
designed to never delay scrolling (though developers can declaratively suppress scrolling altogether with the touch-action CSS property), so do not suffer from this issue. Essentially the passive event listener proposal brings the performance properties of pointer events to touch and wheel events.<br>This proposal provides a way for authors to indicate at handler registration time whether the handler may call preventDefault() on the event (i.e. whether it needs an event that is <a data-tooltip-position="top" aria-label="https://dom.spec.whatwg.org/#dom-event-cancelable" rel="noopener nofollow" class="external-link is-unresolved" href="https://dom.spec.whatwg.org/#dom-event-cancelable" target="_self">cancelable</a>). When no touch or wheel handlers at a particular point require a cancelable event, a user agent is free to start scrolling immediately without waiting for JavaScript. That is, passive listeners are free from surprising performance side-effects.First, we need a mechanism for attaching additional information to an event listener. Today the capture argument to addEventListener is the closest example of something like this, but its usage is pretty opaque: document.addEventListener('touchstart', handler, true);
<br><a data-tooltip-position="top" aria-label="https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions" rel="noopener nofollow" class="external-link is-unresolved" href="https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions" target="_self"><code></code></a>EventListenerOptions lets us write this more explicitly as: document.addEventListener('touchstart', handler, {capture: true});
<br>This is simply the new (extensible) syntax for existing behavior - specifying <a data-tooltip-position="top" aria-label="http://javascript.info/tutorial/bubbling-and-capturing#capturing" rel="noopener nofollow" class="external-link is-unresolved" href="http://javascript.info/tutorial/bubbling-and-capturing#capturing" target="_self">whether you want the listener invoked during the capture phase or bubbling phase</a>.Now that we have an extensible syntax for specifying options at event handler registration time, we can add a new passive option which declares up-front that the listener will never call preventDefault() on the event. If it does, the user agent will just ignore the request (ideally generating at least a console warning), as it already does for events with Event.cancelable=false. A developer can verify this by querying Event.defaultPrevented before and after calling preventDefault(). Eg: addEventListener(document, "touchstart", function(e) { console.log(e.defaultPrevented); // will be false e.preventDefault(); // does nothing since the listener is passive console.log(e.defaultPrevented); // still false }, Modernizr.passiveeventlisteners ? {passive: true} : false);
<br>Now rather than having to block scrolling whenever there are any touch or wheel listener, the browser only needs to do this when there are non-passive listeners (see <a data-tooltip-position="top" aria-label="http://w3c.github.io/touch-events/#cancelability" rel="noopener nofollow" class="external-link is-unresolved" href="http://w3c.github.io/touch-events/#cancelability" target="_self">TouchEvents spec</a>). passive listeners are free of performance side-effects.By marking a touch or wheel listener as passive, the developer is promising the handler won't call preventDefault to disable scrolling. This frees the browser up to respond to scrolling immediately without waiting for JavaScript, thus ensuring a reliably smooth scrolling experience for the user.<br>Because older browsers will interpret any object in the 3rd argument as a true value for the capture argument, it's important for developers to use feature detection or <a data-tooltip-position="top" aria-label="https://github.com/WebReflection/dom4" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/WebReflection/dom4" target="_self">a polyfill</a> when using this API, to avoid unforeseen results. Feature detection for specific options can be done as follows:// Test via a getter in the options object to see if the passive property is accessed
var supportsPassive = false;
try { var opts = Object.defineProperty({}, 'passive', { get: function() { supportsPassive = true; } }); window.addEventListener("testPassive", null, opts); window.removeEventListener("testPassive", null, opts);
} catch (e) {} // Use our detect's results. passive applied if supported, capture will be false either way.
elem.addEventListener('touchstart', fn, supportsPassive ? { passive: true } : false); <br>To make this simpler you can use the feature detect from <a data-tooltip-position="top" aria-label="https://github.com/rafrex/detect-it" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/rafrex/detect-it" target="_self">Detect It</a>, eg: elem.addEventListener('touchstart', fn, detectIt.passiveEvents ? {passive:true} : false);
<br><a data-tooltip-position="top" aria-label="https://modernizr.com/" rel="noopener nofollow" class="external-link is-unresolved" href="https://modernizr.com/" target="_self">Modernizr</a> also has a detect <a data-tooltip-position="top" aria-label="https://github.com/Modernizr/Modernizr/pull/1982" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/Modernizr/Modernizr/pull/1982" target="_self">here</a>. There is an <a data-tooltip-position="top" aria-label="https://github.com/heycam/webidl/issues/107" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/heycam/webidl/issues/107" target="_self">open standards debate</a> around providing a simpler API for dictionary member feature detection.There are scenarios where an author may intentionally want to consistently disable scrolling by cancelling all touch or wheel events. These include:
Panning and zooming a map
Full-page/full-screen games
In these cases, the current behavior (which prevents scrolling optimization) is perfectly adequate, since scrolling itself is being prevented consistently. There is no need to use passive listeners in these cases, though it's often still a good idea to apply a touch-action: none CSS rule to make your intention explicit (eg. supporting browsers with Pointer Events but not Touch Events). However, in a number of common scenarios events don't need to block scrolling - for instance:
User activity monitoring which just wants to know when the user was last active
touchstart handlers that hide some active UI (like tooltips)
touchstart and touchend handlers that style UI elements (without suppressing the click event).
For these scenarios, the passive option can be added (with appropriate feature detection) without any other code changes, resulting in a significantly smoother scrolling experience.There are a few more complicated scenarios where the handler only wants to suppress scrolling under certain conditions, such as:
Swiping horizontally to rotate a carousel, dismiss an item or reveal a drawer, while still permitting vertical scrolling. <br>In this case, use <a data-tooltip-position="top" aria-label="https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action" rel="noopener nofollow" class="external-link is-unresolved" href="https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action" target="_self">touch-action: pan-y</a> to declaratively disable scrolling that starts along the horizontal axis without having to call preventDefault() (<a data-tooltip-position="top" aria-label="https://rbyers.github.io/touch-action.html" rel="noopener nofollow" class="external-link is-unresolved" href="https://rbyers.github.io/touch-action.html" target="_self">test page</a>).
To continue to work correctly in all browsers, calls to preventDefault should be conditional on the lack of support for the particular touch-action rule being used (note that Safari 9 currently only supports touch-action: manipulation). A UI element (like YouTube's volume slider) which slides on horizontal wheel events without changing the scrolling behavior on vertical wheel events. Since there is no equivalent of "touch-action" for wheel events, this case can only be implemented with non-passive wheel listeners.
Event delegation patterns where the code that adds the listener won't know if the consumer will cancel the event. One option here is to do delegation separately for passive and non-passive listeners (as if they were different event types entirely).
<br>It's also possible to leverage touch-action as above (treating Touch Events as you would <a data-tooltip-position="top" aria-label="https://w3c.github.io/pointerevents/" rel="noopener nofollow" class="external-link is-unresolved" href="https://w3c.github.io/pointerevents/" target="_self">Pointer Events</a>. <br>You can get a quick idea of the benefit possible (and potential breakage) by forcing touch/wheel listeners to be treated as passive via chrome://flags/#passive-listener-default (new in Chrome 52). This makes it easy to do your own side-by-side comparisons like <a data-tooltip-position="top" aria-label="https://twitter.com/RickByers/status/719736672523407360" rel="noopener nofollow" class="external-link is-unresolved" href="https://twitter.com/RickByers/status/719736672523407360" target="_self">this popular video</a>.<br>See <a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=6-D_3yx_KVI" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.youtube.com/watch?v=6-D_3yx_KVI" target="_self">this video</a> for tips on how to use Chrome's Developer Tools to identify listeners that are blocking scrolling. You can <a data-tooltip-position="top" aria-label="http://rbyers.net/scroll-latency.html" rel="noopener nofollow" class="external-link is-unresolved" href="http://rbyers.net/scroll-latency.html" target="_self">monitor event timestamps</a> to measure scroll jank in the wild, and use <a data-tooltip-position="top" aria-label="https://www.chromium.org/developers/how-tos/trace-event-profiling-tool" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.chromium.org/developers/how-tos/trace-event-profiling-tool" target="_self">Chromium's tracing system</a> to look at the InputLatency records for scrolling when debugging.<br>The Chrome team is working on a proposal for both a <a data-tooltip-position="top" aria-label="https://code.google.com/p/chromium/issues/detail?id=543598" rel="noopener nofollow" class="external-link is-unresolved" href="https://code.google.com/p/chromium/issues/detail?id=543598" target="_self">PerformanceTimeline API</a> and more <a data-tooltip-position="top" aria-label="https://code.google.com/p/chromium/issues/detail?id=520659" rel="noopener nofollow" class="external-link is-unresolved" href="https://code.google.com/p/chromium/issues/detail?id=520659" target="_self">DevTools features</a> to help web developers get better visibility into this problem today. <br>When a page exhibits substantial scroll jank, it's always an indication of an underlying peformance issue somewhere. Passive event listeners do nothing to address these underlying issues, so we still strongly encourage developers to ensure that their application meets the <a data-tooltip-position="top" aria-label="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail?hl=en" rel="noopener nofollow" class="external-link is-unresolved" href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail?hl=en" target="_self">RAIL guidelines</a> even on low-end devices. If your site has logic that runs for &gt;100ms at a time, it will still feel sluggish in response to taps / clicks. Passive event listeners just allow developers to decouple the issue of having JS responsiveness reflected in scroll performance from the desire to monitor input events. In particular, developers of third-party analytics libraries can now have some confidence that their use of light-weight event listeners will not fundamentally change the observed performance characteristics of any page using their code.<br>See the links <a data-tooltip-position="top" aria-label="https://github.com/WICG/EventListenerOptions" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/WICG/EventListenerOptions" target="_self">here</a> for more details. For questions or concerns, feel free to <a data-tooltip-position="top" aria-label="https://github.com/WICG/EventListenerOptions/issues" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/WICG/EventListenerOptions/issues" target="_self">file issues on this repo</a>, or reach out to <a data-tooltip-position="top" aria-label="https://twitter.com/RickByers/" rel="noopener nofollow" class="external-link is-unresolved" href="https://twitter.com/RickByers/" target="_self">@RickByers</a>.// EventListenerOptions.polyfill.js
// ==ClosureCompiler==
// @compilation_level SIMPLE_OPTIMIZATIONS
// @output_file_name EventListenerOptions.shim.min.js
// @language ECMASCRIPT5
// ==/ClosureCompiler== (function() { var supportsPassive = false; document.createElement("div").addEventListener("test", function() {}, { get passive() { supportsPassive = true; return false; } }); if (!supportsPassive) { var super_add_event_listener = EventTarget.prototype.addEventListener; var super_remove_event_listener = EventTarget.prototype.removeEventListener; var super_prevent_default = Event.prototype.preventDefault; function parseOptions(type, listener, options, action) { var needsWrapping = false; var useCapture = false; var passive = false; var fieldId; if (options) { if (typeof(options) === 'object') { passive = options.passive ? true : false; useCapture = options.useCapture ? true : false; } else { useCapture = options; } } if (passive) needsWrapping = true; if (needsWrapping) { fieldId = useCapture.toString(); fieldId += passive.toString(); } action(needsWrapping, fieldId, useCapture, passive); } Event.prototype.preventDefault = function() { if (this.__passive) { console.warn("Ignored attempt to preventDefault an event from a passive listener"); return; } super_prevent_default.apply(this); } EventTarget.prototype.addEventListener = function(type, listener, options) { var super_this = this; parseOptions(type, listener, options, function(needsWrapping, fieldId, useCapture, passive) { if (needsWrapping) { var fieldId = useCapture.toString(); fieldId += passive.toString(); if (!this.__event_listeners_options) this.__event_listeners_options = {}; if (!this.__event_listeners_options[type]) this.__event_listeners_options[type] = {}; if (!this.__event_listeners_options[type][listener]) this.__event_listeners_options[type][listener] = []; if (this.__event_listeners_options[type][listener][fieldId]) return; var wrapped = { handleEvent: function (e) { e.__passive = passive; if (typeof(listener) === 'function') { listener(e); } else { listener.handleEvent(e); } e.__passive = false; } }; this.__event_listeners_options[type][listener][fieldId] = wrapped; super_add_event_listener.call(super_this, type, wrapped, useCapture); } else { super_add_event_listener.call(super_this, type, listener, useCapture); } }); } EventTarget.prototype.removeEventListener = function(type, listener, options) { var super_this = this; parseOptions(type, listener, options, function(needsWrapping, fieldId, useCapture, passive) { if (needsWrapping &amp;&amp; this.__event_listeners_options &amp;&amp; this.__event_listeners_options[type] &amp;&amp; this.__event_listeners_options[type][listener] &amp;&amp; this.__event_listeners_options[type][listener][fieldId]) { super_remove_event_listener.call(super_this, type, this.__event_listeners_options[type][listener][fieldId], false); delete this.__event_listeners_options[type][listener][fieldId]; if (this.__event_listeners_options[type][listener].length == 0) delete this.__event_listeners_options[type][listener]; } else { super_remove_event_listener.call(super_this, type, listener, useCapture); } }); } }
})(); ]]></description><link>https://64etuor.github.io/600_tech-stack/javascript/eventlistneroption.html</link><guid isPermaLink="false">600_Tech Stack/Javascript/EventListnerOption.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Tue, 30 Jul 2024 23:58:44 GMT</pubDate></item><item><title><![CDATA[Markdown Syntax]]></title><description><![CDATA[To create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level. For example, to create a heading level three (&lt;h3&gt;), use three number signs (e.g.,&nbsp;### My Header).Alternatively, on the line below the text, add any number of&nbsp;==&nbsp;characters for heading level 1 or&nbsp;--&nbsp;characters for heading level 2.Dataview (inline field '='): Error: -- PARSING FAILED -------------------------------------------------- &gt; 1 | = | ^ Expected one of the following: '(', 'null', boolean, date, duration, file link, list ('[1, 2, 3]'), negated field, number, object ('{ a: 1, b: 2 }'), string, variable
Markdown applications don’t agree on how to handle a missing space between the number signs (#) and the heading name. For compatibility, always put a space between the number signs and the heading name.You should also put blank lines before and after a heading for compatibility.To create paragraphs, use a blank line to separate one or more lines of text.Unless the&nbsp;<a data-tooltip-position="top" aria-label="https://www.markdownguide.org/basic-syntax/#paragraphs" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.markdownguide.org/basic-syntax/#paragraphs" target="_self">paragraph is in a list</a>, don’t indent paragraphs with spaces or tabs.<br>&nbsp;Note:&nbsp;If you need to indent paragraphs in the output, see the section on how to&nbsp;<a data-tooltip-position="top" aria-label="https://www.markdownguide.org/hacks/#indent-tab" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.markdownguide.org/hacks/#indent-tab" target="_self">indent (tab)</a>.To create a line break or new line (&lt;br&gt;), end a line with two or more spaces, and then type return.<br>You can use two or more spaces (commonly referred to as “trailing whitespace”) for line breaks in nearly every Markdown application, but it’s controversial. It’s hard to see trailing whitespace in an editor, and many people accidentally or intentionally put two spaces after every sentence. For this reason, you may want to use something other than trailing whitespace for line breaks. If your Markdown application&nbsp;<a data-tooltip-position="top" aria-label="https://www.markdownguide.org/basic-syntax/#html" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.markdownguide.org/basic-syntax/#html" target="_self">supports HTML</a>, you can use the&nbsp;&lt;br&gt;&nbsp;HTML tag.For compatibility, use trailing white space or the&nbsp;&lt;br&gt;&nbsp;HTML tag at the end of the line.There are two other options I don’t recommend using. CommonMark and a few other lightweight markup languages let you type a backslash (\) at the end of the line, but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. And at least a couple lightweight markup languages don’t require anything at the end of the line — just type return and they’ll create a line break.You can add emphasis by making text bold or italic.To bold text, add two asterisks or underscores before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks without spaces around the letters.Markdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold the middle of a word for emphasis.To italicize text, add one asterisk or underscore before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk without spaces around the letters.Markdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to italicize the middle of a word for emphasis.To emphasize text with bold and italics at the same time, add three asterisks or underscores before and after a word or phrase. To bold and italicize the middle of a word for emphasis, add three asterisks without spaces around the letters.&nbsp;Note:&nbsp;The order of the&nbsp;em&nbsp;and&nbsp;strong&nbsp;tags might be reversed depending on the Markdown processor you're using.Markdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to bold and italicize the middle of a word for emphasis.To create a blockquote, add a&nbsp;&gt;&nbsp;in front of a paragraph.&gt; Dorothy followed her through many of the beautiful rooms in her castle.
The rendered output looks like this:
Dorothy followed her through many of the beautiful rooms in her castle.
Blockquotes can contain multiple paragraphs. Add a&nbsp;&gt;&nbsp;on the blank lines between the paragraphs.&gt; Dorothy followed her through many of the beautiful rooms in her castle.
&gt;
&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
The rendered output looks like this:
Dorothy followed her through many of the beautiful rooms in her castle.
The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
Blockquotes can be nested. Add a&nbsp;&gt;&gt;&nbsp;in front of the paragraph you want to nest.&gt; Dorothy followed her through many of the beautiful rooms in her castle.
&gt;
&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
The rendered output looks like this:
Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. Blockquotes can contain other Markdown formatted elements. Not all elements can be used — you’ll need to experiment to see which ones work.&gt; #### The quarterly results look great!
&gt;
&gt; - Revenue was off the chart.
&gt; - Profits were higher than ever.
&gt;
&gt; *Everything* is going according to **plan**.
The rendered output looks like this: Revenue was off the chart.
Profits were higher than ever. Everything&nbsp;is going according to&nbsp;plan.
For compatibility, put blank lines before and after blockquotes.You can organize items into ordered and unordered lists.To create an ordered list, add line items with numbers followed by periods. The numbers don’t have to be in numerical order, but the list should start with the number one.CommonMark and a few other lightweight markup languages let you use a parenthesis ()) as a delimiter (e.g.,&nbsp;1) First item), but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. For compatibility, use periods only.To create an unordered list, add dashes (-), asterisks (*), or plus signs (+) in front of line items. Indent one or more items to create a nested list.<br>If you need to start an unordered list item with a number followed by a period, you can use a backslash (\) to&nbsp;<a data-tooltip-position="top" aria-label="https://www.markdownguide.org/basic-syntax/#escaping-characters" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.markdownguide.org/basic-syntax/#escaping-characters" target="_self">escape</a>&nbsp;the period.Markdown applications don’t agree on how to handle different delimiters in the same list. For compatibility, don’t mix and match delimiters in the same list — pick one and stick with it.To add another element in a list while preserving the continuity of the list, indent the element four spaces or one tab, as shown in the following examples.&nbsp;Tip:&nbsp;If things don't appear the way you expect, double check that you've indented the elements in the list four spaces or one tab.* This is the first list item.
* Here's the second list item. I need to add another paragraph below the second list item. * And here's the third list item.
The rendered output looks like this:
This is the first list item.
Here’s the second list item. I need to add another paragraph below the second list item. And here’s the third list item.
* This is the first list item.
* Here's the second list item. &gt; A blockquote would look great below the second list item. * And here's the third list item.
The rendered output looks like this:
This is the first list item.
Here’s the second list item. A blockquote would look great below the second list item. And here’s the third list item.
<br><a data-tooltip-position="top" aria-label="https://www.markdownguide.org/basic-syntax/#code-blocks" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.markdownguide.org/basic-syntax/#code-blocks" target="_self">Code blocks</a>&nbsp;are normally indented four spaces or one tab. When they’re in a list, indent them eight spaces or two tabs.1. Open the file.
2. Find the following code block on line 21: &lt;html&gt; &lt;head&gt; &lt;title&gt;Test&lt;/title&gt; &lt;/head&gt; 3. Update the title to match the name of your website.
The rendered output looks like this: Open the file. Find the following code block on line 21: &lt;html&gt; &lt;head&gt; &lt;title&gt;Test&lt;/title&gt; &lt;/head&gt; Update the title to match the name of your website. 1. Open the file containing the Linux mascot.
2. Marvel at its beauty. ![Tux, the Linux mascot](/assets/images/tux.png) 3. Close the file.
The rendered output looks like this: Open the file containing the Linux mascot. <br>
Marvel at its beauty.
<img alt="Tux, the Linux mascot" src="https://mdg.imgix.net/assets/images/tux.png" referrerpolicy="no-referrer" target="_self" class="is-unresolved"> Close the file. You can nest an unordered list in an ordered list, or vice versa.1. First item
2. Second item
3. Third item - Indented item - Indented item
4. Fourth item
The rendered output looks like this:
First item
Second item
Third item Indented item
Indented item Fourth item
To denote a word or phrase as code, enclose it in backticks (`).If the word or phrase you want to denote as code includes one or more backticks, you can escape it by enclosing the word or phrase in double backticks (``).To create code blocks, indent every line of the block by at least four spaces or one tab. &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;/html&gt;
The rendered output looks like this:&lt;html&gt; &lt;head&gt; &lt;/head&gt;
&lt;/html&gt;
<br>&nbsp;Note:&nbsp;To create code blocks without indenting lines, use&nbsp;<a data-tooltip-position="top" aria-label="https://www.markdownguide.org/extended-syntax/#fenced-code-blocks" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.markdownguide.org/extended-syntax/#fenced-code-blocks" target="_self">fenced code blocks</a>.To create a horizontal rule, use three or more asterisks (***), dashes (---), or underscores (___) on a line by themselves.*** --- _________________
The rendered output of all three looks identical:]]></description><link>https://64etuor.github.io/500_resources/obsidian/markdown-syntax.html</link><guid isPermaLink="false">500_Resources/Obsidian/Markdown Syntax.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 27 Jul 2024 17:10:59 GMT</pubDate><enclosure url="https://mdg.imgix.net/assets/images/tux.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://mdg.imgix.net/assets/images/tux.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[240615 - 되돌아가는되돌이의되돌아가는일]]></title><description><![CDATA[여기로간들저기로간들집이란닿지않는것이며평온하게되는곳은영영없는듯만하여서어지러운하루를더어지러운것으로만들어야만이하루가온전히끝나고또내일이온줄도모르고내일을살게되는이런순리야말로시간의연속성이허락한유한한축복가운데가장무한한것이며집을찾아떠난이들이영영돌아오는법이없는까닭은그런순리에서이탈하고낙오하여부득불외로워지고마는존재들의가진재산이라봐야고작ㅡ제한없이만끽할수있는것이오로지이순간과순간과찰나의찰나뿐인탓이다. 우리는그렇게내일을알수없기에축복받은바와진배없다고양이는고양이대로살것이며강아지는강아지대로살아져도갇힌데서는살지못하는족속들이되고만사람들은필연처럼그시간의꼬랑지를따라서몸을흔들어대며좇아가다가실족하기를여러번이고그러다가다리가부러져서영영과거에갇힌이들에게눈을흘기다가또몇몇이실족을할것이며그꼬랑지만보다가돌부리에넘어지는사람,속도를못이겨서자빠진사람,무언가에떠밀려서널부러진사람,부류들이다양한데이사람들이다거기서주저앉은까닭은주저앉아서가아니라도로일어나지않아서이다. 실날같이빛을비추던시간의미등은이미저멀리떠나가버렸으니도통어디로가야할지갈피를못잡는도다.매일같이밤이되면번개같은찰나에다시태어나고다시태어나영원의요람을딛고일어선사람은그러나다시금빛을갈구하게될것이며빛을갈구하다가또저빛에타죽는불나방같은것들이이처럼진부하게이어진시간의한축에화장된가루처럼휘날릴것이어서활활타는이순간을기록하여명명하기를지금이라고하였으니이어찌장관이아니라고할수있으며어찌저불속에몸을불사르는걸저항할수가있냐는말이다. 오늘 집을 떠난 것들이 영영
집에 닿지 못하는 이유일 게다.]]></description><link>https://64etuor.github.io/900_writings/poems/240615-되돌아가는되돌이의되돌아가는일.html</link><guid isPermaLink="false">900_Writings/Poems/240615 - 되돌아가는되돌이의되돌아가는일.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 24 Jul 2024 13:57:26 GMT</pubDate></item><item><title><![CDATA[빈 페이지 6]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/빈-페이지-6.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/빈 페이지 6.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 15 Jun 2024 03:27:04 GMT</pubDate></item><item><title><![CDATA[240127 - 엄마_미완]]></title><description><![CDATA[ "난 아직도 작은 엄마 생각이 나. 그 왜 우리 어릴 때, 가끔씩 작은 엄마랑 다 같이 모여서 도너츠 만들던 거, 그때가 왜 그렇게 좋고 기억에 남는지 모르겠어."
"누난 꼭 술 마시면 그 소리 하더라."
핀잔 아닌 핀잔을 매번 주게 되는 건 멋 없는 사람의 숙명인지 이번에도 또 이렇게 답하고 말았다. 적어도 대화가 슬픈 종막을 향해 뻗는 것이 아닌 게 다행이고, 곧 이게 산 사람이 지향해야 할 삶의 방향이다. 대략 이런 비루한 철학을 갖고 다시 말하건대, 추억할 수 있는 한 때를 공통으로 지닌 사람들이 관계를 지속하기에 가장 좋은 점은 바로 이런 것이다. 말하고 또 말해도 질리지 않는 무언가를 서로 공유하고 있다는 것. 어린 시절 한 동네에 살았던 사촌 누나와는 제법 이야기할 거리가 많다. 가령 나와 누나가 부모님을 따라 같이 중이염을 치료하러 갔던 일. 치료를 받고 울면서 나오는 누나를 내가 그정도에 우냐며 많이 놀렸던 일. 그리고 그 직후에 치료를 받으러 들어가서는 정작 나는 바지에 오줌을 싼 일. 이를 테면 다 좋은 추억들이다. 적어도 함부로 입을 놀리면 그게 평생 놀릴 거리가 돼서 나를 따라다닐 수 있다는 교훈을 얻은 점에선. 다른 사촌들과는 유별나게 이 사촌 누나와 마음의 거리가 가까운 것도 다 이런 공유하는 사건들이 있어서라는 생각이 들었다. 그리고 그 병원에서 서럽게 울던 어린 여자아이가 벌써 두 아이의 엄마가 되고, 오줌을 싼 녀석은 결혼 못한 노총각으로 남아서 서로의 삶의 행태가 많이 달라졌음에도 여전히 가끔 전화를 주고 받을 수 있는 건 기억의 어딘가에 깊게 수몰된 예전의 자신들을, 서로가 서로를 건져 올려줄 수 있는 그런 관계이기 때문인 것 같다. 엄마가 된 사촌 누나는 즉 그에게서 작은 엄마인, 우리 엄마에 대한 얘기를 종종 꺼내곤 했다.(물론 내가 시작하는 경우가 더 많긴 할 테지만) 그리고 내가 6살이고 누나가 7살이던 무렵, 우리 엄마랑 같이 도너츠를 만들던 얘기는 이야기의 단골 주제였다. 엄마가 사 온 도너츠 가루 믹스를 물과 섞어서 몸에 반죽 칠갑을 하면서 어렵게 반죽을 만들고, 고사리손인데다가 없는 솜씨로 꾸역꾸역 모양을 내고. 나는 도넛이 죄다 구멍이 뚫린 원형인 모양이 너무 재미가 없어서 별모양이라든지, 항상 이상한 모양의 도너츠를 만들었다. 그리고 그걸 튀겨 먹었다. 그게 몇 번 반복되니 사촌 누나는 왜 도넛이 보통 구멍이 뚫린 원형인지 알게 된 눈치였지만, 여전히 난 배가 볼록하게 튀어나온 덜 익은 별 모양의 도넛을 먹었다. ##내가 기억하는 내 유년시절의 가장 아름다운 부분들이란 마찬가지로 이런 범상함의 범주 안에서 대게 크게 벗어나지 않는다. 크게 풍족할 것도 없었고, 작금과 비교하면 불편하고 일면 지루할 수도 있는 그런 시시한 일상의 기억들. 모임에 다녀온 아비는 술에 취해서 까끌까끌한 수염이 난 턱으로 아이의 얼굴을 비비고, 아이는 그게 싫어서 도망을 다니고, 집을 오래 비운 아비에게 아이는 우리 집에 한번 놀러 오라며 전화를 하고, 가끔은 경양식집에 가서 외식을 하고, 서점에 가서 함께 책을 고르고, 꽉 막힌 도로에 갇혔을 적에는 차 안에서 군것질거리나 까먹고, 터미널 앞에서 파는 군밤이 몹시 먹고 싶어서 어머니를 조르고, 그런 아이를 어머니는 한번도 다그치지 못하고, 어머니가 글을 쓰고, 그 등을 보며 아이도 글을 쓰고.
이런 두서 없게만 늘어질만한 모든 일상의 기억들을 아마 나는 예전부터 '행복'이라 부르기로 스스로 약조를 한 것인지, 달리 계기가 없고도 이런 옛날이 생각날 때면 저도 몰래 미소를 짓곤 하는 것이다.(물론 이건 동시에 아프기도 한 일일테다.) 이렇게 쓰고 보면 특별할 것 없는 보통의 일상으로만 보이는데, 당사자들에게는 왜 그렇게 애틋할 수 있는지 종종 생각하게 된다. 반죽도 형편 없고, 맛도 기괴해서 도저히 상품성이라곤 없는 그런 도너츠를 만들어 먹던 기억이 왜 그렇게 인상이 깊었을까. 요즈음의 시대 관점이라면 그 재료비와 노력이면 차라리 도너츠를 사 먹는 게 합리적이라는 논리가 옳을 법도 한데 왜 우리는 그런 비합리적이고 이상한 행동들을 더 오래 기억하는 걸까? ㅡ라고 파고 들면 얘기가 너무 길어질 거 같아 각설하고 나의 의견을 덧붙이는 것으로 대신하자면, 그 기억 안에는 나의 주체적인 감정과 경험이 있기 때문이다.(이런 관점에서 보자면, 우린 돈을 내고 주체적인 감정과 경험이 더해진 더 오래 남을 기억들을 포기하는 셈일 수도 있겠다.)
@@@@@@@다음에@@@@@@@@@내 큰 조카는 벌써 6살이 되었다. 도너츠를 만들기 좋은 나이다. 한창 개구진 나이라 까불기도 잘 까불고 생명력이 왕성해서 불쌍한 삼촌을 데리고 잘 놀아주기도 한다. 고마운 조카를 위하여 다음 번에는 시시한 장난감을 사주는 대신에 함께 도너츠를 만들어 보면 어떨까 한다. 아니면, 할로윈 때에 맞춰서 다같이 잭-오-랜턴을 만들어도 좋겠다. 그리고 할로윈이 끝나고 나면 그 호박머리를 으깨셔, 생크림과 계란, 시나몬, 너트맥 등을 넣고, 또 파이지를 만들어서 함께 고소한 땅콩 호박파이를 구워 먹어도 좋겠다. 그리고 호박파이가 너무 맛이 없어서, 다들 웃음보가 터지면 그보다 더 좋을 일은 없겠다.]]></description><link>https://64etuor.github.io/900_writings/essays/240127-엄마_미완.html</link><guid isPermaLink="false">900_Writings/Essays/240127 - 엄마_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 06 Mar 2024 12:38:13 GMT</pubDate></item><item><title><![CDATA[240114 - 흘러내린 아이스크림을 한 입 먹어도 이는 상하지 않겠지만 확실히 이상한 사람이 될 수 있다]]></title><description><![CDATA[세상이 주저 앉았다. 타이어 압력 경고등에 불이 들어온 것을 보니 무슨 일이 나긴 났나 보다. 회사에 지각을 할까 부랴부랴 남은 길을 달려 주차를 해놓고 보니 타이어가 한여름 아이스크림처럼 녹아 있었다. 영 맛없어 보이는 모양새다.&nbsp;일단 출근을 먼저 하고 바로 긴급출동 서비스를 요청했다. 얼마뒤에 오신 기사님이 말씀하시길 펑크가 나도 너무 크게 났다, 지렁이(펑크씰)를 박아도 구멍이 다 메워지지 않을 것 같다고 하셨다. 그말대로 구멍에 지렁이를 꾸겨 넣고 비눗물을 발라보니 보글보글 기포가 야무지게 올라온다. 구멍이 어찌나 큰지 쥐가 파먹은 거처럼 타이어가 움푹 패였다. 무슨 일이 있었던 건지 짐작조차 가지 않았다. 아무튼 일단 지렁이를 박은 그 상태로 임시로 공압을 채우고 타이어 교체를 하러 갔다.타이어 가게에 가보니 내가 사용하던 타이어 사이즈가 없어서 주문을 해야 했다. 일단 중고 타이어를 끼워 줄 테니 주문한 타이어가 배송되거든 교체를 하자는 사장님 말씀에 그래 주십사 부탁을 드리고는 펑크난 타이어를 교체하는 걸 구경했다. 넓적한 주걱같은 게 달린 금속 암이 양쪽으로 있는 기계로 타이어가 휠 드럼면을 감싸고 있는 부분을 쩍 하고 찍는다. 휠의 상하좌우로 그렇게 쩍 쩍 찍어대고, 회전하는 원판위의 갈고리 같은 데에 타이어가 휠에서 삐져나온 부분을 걸고 한바탕 위잉 하고 돌리니 신통하게도 타이어가 금세 들려 나온다. 마침내 사장님이 손으로 타이어와 휠을 분리하는데 이상하게도 왠 땡그랑 하는 금속음이 들렸다. 사장님은 금속음의 정체를 주워서 내게 보여주시며 “이게 타이어를 뚫고 들어갔네요.”라고 하셨다. 직경은 15CM 쯤에 폭은 4CM쯤 되는 반원 기둥 형태의 쇠덩어리에 양쪽 끝에는 원형 구멍이 하나씩 뚫려 있었다. 어디에 쓰는 물건인지 도통 짐작이 가질 않았다. 사장님도 모르시겠다니 평범한 물건은 아니지 싶다. 애초에 끝이 뾰족한 못도 아니고 이렇게 큰 뭉뚝한 금속덩어리가 타이어를 뚫고 들어갔다는게 도무지 이해가 되질 않았다. 세상에는 참 이상한 일이 많이 일어나기 마련이지만, 이런 일은 또 처음이고 신기했다. 물론 신기한 건 잠시뿐이고, 예정에 없던 지출을 생각하니 타이어를 한 입 씹은 것마냥 입맛이 영 쓰다. 타이어 하나가 펑크났다고 한쪽 타이어만 갈 수는 없는 노릇이니 이게 다 얼마며, 이건 또 왠 날벼락인가.‘사람만 안 다치면 나머지는 어떻게든 된다.’내 아버지가 금전적으로 큰 손해를 볼 때마다 입버릇처럼 하시던 말씀이 갑자기 떠올랐다. 당장 생계 걱정 때문에 속이 쌔까맣게 타들어가는 표정으로, 정말 억지로 속을 삭이는게 역력한 말투로 당신은 그렇게 말씀하시곤 했다. 그리고 그런 당신의 말을 지키지 못한 적이 없다. 내 부모님은 어떻게든 어려운 때를 극복해냈고 다행히 우리 가족이 굶거나 길거리에 나앉는 일만은 없었다. 그렇게 보면 시련이 우리에게 꼭 나쁘기만 한 것도 아니지 싶다. 시련은 때때로 우리에게 큰 선물을 준다. 어떠한 일이 생기더라도 어떻게든 해결할 수 있다는 우리 가족의 막연한 자신감이 그로부터 왔다. 이렇게 다시금 그때를 생각하니, 오늘의 불운이란 또 정말 사소하기 그지없어서 종국에는 현미경으로 들춰 봐야 그 흔적이나 짐작할 지경이다. 마음의 위로가 얼마간 되었다. 그냥 조금 이상한 일이 일어난 것뿐이라고 생각하니 짐짓 안정이 되는 듯도 했다.하기사 세상에 이상한 일들이 꼭 이뿐만은 아닐 것이다. 세상을 살면 이상한 일이란 부지기수로 일어나는 것이어서 새삼 놀라고 응석부리기도 객쩍은 면이 있다. 세상을 살다 보면은 어찌됀 영문인지 긴 쇠막대기같은 게 타이어를 뚫고 들어가는 그런 일도 있는가하면, 말만한 사람이, 당최 어찌 한건지 가슴팍을 뚫고 들어와서 물감처럼 번지고, 또 녹아내리는 그런 일도 있는 법이다. 오히려 이런 마법같은 일들이 없다면 사는 재미가 심히 반감이 되지 않을까.이상한 일들이, 이상하게 계속해서 일어나는, 이상한 날들이다.어째 그거 참,딱히 별 이상할 것도 없다.]]></description><link>https://64etuor.github.io/900_writings/essays/240114-흘러내린-아이스크림을-한-입-먹어도-이는-상하지-않겠지만-확실히-이상한-사람이-될-수-있다.html</link><guid isPermaLink="false">900_Writings/Essays/240114 - 흘러내린 아이스크림을 한 입 먹어도 이는 상하지 않겠지만 확실히 이상한 사람이 될 수 있다.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 06 Mar 2024 12:18:33 GMT</pubDate></item><item><title><![CDATA[Love wins all!]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/love-wins-all!.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/Love wins all!.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 25 Feb 2024 06:23:03 GMT</pubDate></item><item><title><![CDATA[영이]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/영이.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/영이.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 25 Feb 2024 06:21:30 GMT</pubDate></item><item><title><![CDATA[LOVE WINS ALL]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/love-wins-all.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/LOVE WINS ALL.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 25 Feb 2024 06:19:00 GMT</pubDate></item><item><title><![CDATA[20240127]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/20240127.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/20240127.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 27 Jan 2024 08:36:05 GMT</pubDate></item><item><title><![CDATA[처음 듣는 단어를 지어 적으려는 나에게]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/처음-듣는-단어를-지어-적으려는-나에게.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/처음 듣는 단어를 지어 적으려는 나에게.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 27 Jan 2024 08:30:54 GMT</pubDate></item><item><title><![CDATA[푸른 숲을 열면(이상, 호박파이, 거리, 6살)]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/푸른-숲을-열면(이상,-호박파이,-거리,-6살).html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/푸른 숲을 열면(이상, 호박파이, 거리, 6살).pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 27 Jan 2024 08:30:53 GMT</pubDate></item><item><title><![CDATA[참을 수 없는 존재의 가벼움 발제 (20240120)]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/참을-수-없는-존재의-가벼움-발제-(20240120).html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/참을 수 없는 존재의 가벼움 발제 (20240120).pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 20 Jan 2024 06:30:57 GMT</pubDate></item><item><title><![CDATA[Kirkus Reviews - the Unbearable lightness of being]]></title><description><![CDATA[ "Unbearable Lightness of Being" by Milan Kundera is a profoundly insightful novel that delves into the intricate nuances of love, politics, and existential dilemmas. Set against the backdrop of the 1968 Prague Spring and its subsequent Soviet-led invasion, the story primarily follows the lives of Tomas, a surgeon and a philanderer, and Tereza, his wife and a photographer, along with other central characters like Sabina, Tomas's mistress, and Franz, her lover.Kundera masterfully explores the dichotomy of lightness and weight, a central theme of the novel. This philosophical concept questions whether life is a fleeting, insignificant occurrence (lightness) or a series of meaningful events and responsibilities (weight). Through his characters, Kundera examines how each approach impacts one's existence and relationships.The novel is also remarkable for its exploration of political and historical contexts, particularly the impact of Czechoslovakia's political turmoil on its citizens. It provides a poignant commentary on how external political forces can intrude into and shape personal lives, relationships, and moral decisions.Moreover, Kundera's narrative style, characterized by its introspective and often non-linear approach, invites readers to engage deeply with the characters' psychological landscapes. This introspection is balanced with moments of irony and humor, making the novel as intellectually stimulating as it is emotionally resonant.In terms of its impact on literature and culture, "The Unbearable Lightness of Being" stands out for its philosophical depth, its innovative narrative structure, and its profound exploration of human emotions and the existential plight. It remains a vital read for anyone interested in the intersections of love, personal freedom, and the inescapable influence of historical and political contexts on human life.https://www.kirkusreviews.com/book-reviews/milan-kundera/the-unbearable-lightness-of-being/]]></description><link>https://64etuor.github.io/200_books/00_achives/canvas/kirkus-reviews-the-unbearable-lightness-of-being.html</link><guid isPermaLink="false">200_Books/00_Achives/Canvas/Kirkus Reviews - the Unbearable lightness of being.canvas</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Fri, 19 Jan 2024 09:04:52 GMT</pubDate></item><item><title><![CDATA[210811 - 하늘]]></title><description><![CDATA[심술 궂은 모양도 예쁘다
하늘은. 당신의 얼굴에서
항상 그런 하늘을 보았다]]></description><link>https://64etuor.github.io/900_writings/poems/210811-하늘.html</link><guid isPermaLink="false">900_Writings/Poems/210811 - 하늘.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:45:17 GMT</pubDate></item><item><title><![CDATA[070721 - 이십일세기 이십일세]]></title><description><![CDATA[바닥을 눌은 장판으로 덮고
미리 늙은 살갗을 우에 포갠 방구석
벌레와 함께 기어 올라타는 습기와
내달리기만 배우고 난 날뛰고 들끓는 마음
육평 남짓 지평선에 분주해 공기마저 뿌옇고 남의 신발만 오다니는 창문
달빛 비집고 와 소리치니
그 훤한 굉음에 날개 없는 모습 들킬까
한 켠에 물러난 소인, 이십일세기의 아무개 나는 재주 없어 서러운 이
달에 오를 헛된 희망 품지 않으니 복이다
복이로다
가난한 자의 복이로다]]></description><link>https://64etuor.github.io/900_writings/poems/070721-이십일세기-이십일세.html</link><guid isPermaLink="false">900_Writings/Poems/070721 - 이십일세기 이십일세.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:42:40 GMT</pubDate></item><item><title><![CDATA[200413 - 거울_미완]]></title><description><![CDATA[///글 전체적으로 대화 중간 중간, 몸짓 등의 묘사 추가“아니, 그러니까 말이야. 해고 통지를 당일에 했다고. 그게 말이 된다고 생각해? 그것도 또 당장에 일을 못 구하면 생활이 안 되는 애한테.”소파에 앉아 있던 남자는 손에 쥐고 있던 책을 탁자에 내려놓았다.“일을 워낙 못 했다며. 애초에 정규직도 아니고.”여자는 표정이 변한다.“사장이 그렇게 구박을 해대는데 누가 일을 잘하겠어. 자신감도 떨어지고 맨날 긴장한 상태라 눈치만 보는데.”“뭐, 그 사람 입장도 입장이지만, 사장 쪽 입장에서도 생각해 봐야지. 말도 잘 안 통하고 눈치도 없는 사람을 계속 고용하는 건 사장한테도 손해잖아.”“아니, 그러니까 그럼 좀 미리 얘기를 해서 다른 일을 구해볼 시간을 좀 주는 게 맞다는 거지 내 말은.”세진은 손까지 저어가며 말을 했다.“당신도 새로 온 직원이 일 못 해서 잔일만 늘어났다고 푸념하더니. 왜 갑작스레 그 사람의 충실한 변호인이 되셨을까?”“일을 못 하는 건 못하는 거고 해고는 다른 얘기지. 내 말뜻 다 알면서 말을 돌린다?”“뭐, 어쨌든 우리가 고용인은 아니니까. 그 부분은 고용인과 피고용인이 풀 문제라고 생각하는데요, 서세진 씨?”“외국인 노동자 법에는 그런... 뭐 없나?”“정규직도 아닌데다 일한지 얼마 되지도 않았는데... 힘들지. 그리고 그런 법이 있다 한들 그 법을 어떻게 알아보고 자기 권리를 구제해달라고 진정을 넣어? 우리말도 모르는데.”“아니 안 좋은 방향으로만 말하지 말고, 오늘 윤이 사장한테 그만 두라고 바득바득 한소리 듣고 나서 얘가 어딜 갔나 보니까 화장실에서 울고 있더라니까? 가만히 있기 뭐해서 무슨 일이냐고 언니한테 다 말해보라고 하니까 윤이 글쎄. 언니, 돈없어요, 일없어요. 하면서 우는데...”“윤이 그 사람이 당신보다 나이가 많다고 하지 않았어?”“주방 이모들도 그렇고 우리가 다 그냥 여자직원들을 언니라고 부르라고 해서 그렇지. 말을 잘 못하니까 동생처럼 챙겨줘야 하는 느낌도 나고, 아무튼 그게 문제가 아니라, 불쌍해서 어째 우리 윤.”“사정이 얼마나 안 좋은 건데? 윤, 그 여자 가족은 있고?”“남편이랑 둘이 산다는 거 같은데, 자세한 건 모르지. 아무튼 집세 낼 돈도 빠듯한가봐. 남편은 일도 안 하고 있다 그러지. 그러면서도 도와달라고 말은 못하고 울기만 하고. 말 못하고 낑낑대는 강아지 같더라니까?”“사정이야 딱해도 뭐 어떡해. 우리가 그 사람들 고용해줄 수 있는 거도 아니고.”“윤이 저렇게 그만 두고 나면 맘이 너무 불편할 거 같으니까 그러지, 걱정 되고.”“정 맘 불편하면 도와줄 방법이 있나 찾아보든가. 왜 요새 농촌에도 외국인들이 와서 일 많이 한다며, 그쪽으로 알아봐도 좋고.”“우리 집도 좀 있으면 마늘하고 고추 뽑기 시작할 텐데. 한번 전화해볼까?”“알아봐서 나쁠 건 없지.”세진은 안방에 들어가 충전중이던 자신의 핸드폰을 뽑아 들고 즉시 자신의 어머니에게 전화를 걸었다. 그녀는 한참을 통화하고 끊고 거실로 돌아왔다.“요새 해안에도 태국인들이 많이 와 있나봐? 엄마 하는 말 들으니까 이제 외국인 없으면 농사도 못 짓는다는데?”“우리나라도 이제 다른 선진국들이랑 비슷한 문화가 생기겠네.”“어떤 문화?”“뭐, 워킹홀리데이 비자나 이민 장려하는 제도나 그런 거 있잖아. 그런 나라들이 외국 사람들한테 비자나 영주권 주면서 자국민들 기피하는 산업을 맡기듯이.”“나 어려서 시골 살 때만해도 국제 결혼하는 사람들이 종종 있었는데. 우리 옆집 아저씨도 베트남 아가씨 얻어서 결혼했고. 그래도 외국 사람이 많이 산다는 생각은 해본 적 없는데 이제는 좀 본격적인가 봐. 우리야 명절 때나, 중요한 일 있을 때나 한 번씩 가는 게 전부니까 잘 몰랐는데, 세상이 많이 바뀌긴 했다.”“그래서 장모님이랑 통화한 건? 일손은 좀 필요하시대?”“응, 동네에 외국인들 모아 놓고, 그 뭐야 인력사무소처럼 해놓고 중개해주는 사람이 또 있나 봐. 그쪽에서 사람들 불러다 쓰면 하루에 8만원은 줘야 된대. 우리 부모님도 다 나이 드셔서 계속 일 해줄 사람 있음 좋긴 하겠다고 하시던데.”“그 윤 씨 연락처는 갖고 있어?”“걔 핸드폰 개통도 안 해서 번호는 없고, 페이스북 메신저로는 연락할 수 있어.”“농사일이 힘들어서 하려고 할지 모르겠네. 그나마 더운 나라 출신이라 더위는 안 타려나? 사람 쓰게 되면 월급은 얼마나 주신대?”“몰라, 아직 물어보진 않았는데, 보통 얼마나 주는지 보고 그만큼 주면 되지 않을까?”그러자 용국은 핸드폰으로 뭔가 하는가 싶더니,“요새 최저시급으로 따지면 주40시간 기준 한 달에 180만원은 줘야 되네.”“두 명이면 360만원이네. 그것도 꽤 부담이긴 하다.”“장인이랑 장모님 연세면 일하기도 힘드실 건데, 몸에 무리도 가고... 농사짓던 규모는 계속 그대로 유지하시니까... 뭐 투자라고 생각하면 나쁘진 않지. 그전에도 수확 철에는 사람 불러다 쓰고 했잖아? 그 비용도 꽤 들 텐데 아무튼 다 따져서 계산해보고 뭐가 더 유리한지 셈하면 되지. 그리고 윤 씨 그분 의견도 들어야 되고.”“암튼 당장 내일이라도 윤이한테 연락해서 물어보기부터 할 게.”이튿날 세진이 자신이 일하는 식당에 나갔을 때, 정말 윤의 모습은 보이지 않았다. 내심 사장이 맘을 돌려 먹고 윤에게 출근하라고 연락하진 않았을까 기대했던 세진은 못내 아쉬운 맘이 들었다. 그녀는 메신저를 통해 윤에게 메시지를 남겼다. 금방 답이 돌아왔다.//퇴근하고 돌아온 세진은 진이 빠져서 현관문을 열었다. “왔어?” 하는 소리가 거실로부터 들린다. 용국이다. 세진은 대충 신을 벗어 놓고 거실로 들어갔다. 그리고 곧장 소파에 앉아 TV를 보고 있던 용국의 무릎 위에 머리를 대고 소파에 드러누웠다.“힘들어~”“많이 바빴어?”“들어온 건 티 안 나도 나간 건 티가 난다더니. 윤이 나가니까 하필 오늘 또 무슨 날인지 단체손님도 많고 정신없었어.”“밥은?”“점심때 너무 바빠서 밥도 못 먹고 있다가 4시나 돼서 늦게 먹었더니 저녁 생각이 없네. 오늘은 그냥 굶을까봐. 여보는?”“아직 안 먹었는데, 라면이나 하나 끓여먹지 뭐.”“밥 먹어. 반찬 다 있는데 왜 라면을 먹어.”세진은 눈을 감고서 얘기했다.“매운 게 땡기네.”용국은 자기 무릎을 베고 눈을 꼭 감은 세진을 바라보다가 무슨 생각을 했는지 그녀의 머리 양 갈래를 양손에 각각 쥐었다. 그리고 머리카락을 그녀의 턱에 걸치게 하고 서로 반대편으로 감았다.“어휴, 세진이가 얼마나 힘들었는지 수염이 다 났네.”세진은 눈을 감은 그대로 웃음이 터져서 킥킥 대다가 벌떡 몸을 일으켜 앉았다.“아, 그러고 보니까 오늘 윤이랑 연락했어.”“뭐래?”“뭐 말이 통해야 말이지. 그, 메신저로 얘기하려니까 너무 답답해서 나 쉬는 날 만나자고 했어.”// 윤과 만나서 얘기한 세진.“오빠, 나 할 말 있는데...”“뭐?”“오늘 윤이랑 만났잖아. 얘기를 좀 했는데. 일은 하고 싶다는데 당장 집 구할 돈도 없나봐.”“처가(아내 부모님집 뭐라고 하는지 모름. 나중에 확인)에 같이 살기도 그럴 텐데... 불편한 게 한둘이 아닐걸, 음식 문제도 있고.”“그치? 그래서 내가 좀 얘길 해봤는데... 그 뭐야... 우리가 집 좀 구해주면 어떤가 해서...”용국은 빤히 세진을 쳐다보다가,“이미 그러기로 하고 온 거 아니야?” 라고 말했다.“...오빤 날 너무 잘 알아.”“첫 달만? 아님 계속?”“일단 4달만 일해주면 좋겠다고 했거든. 엄마랑 얘기한 거도 딱 그 정도면 바쁜 일은 끝나니까. 근데 뭐 우리 집 일 도와주는 거기도 하고... 내가 좀 아껴서 좀 계속 도와주면 어떨까 싶은데...”“월급 받을 때까지 한 달만 해줘도 될 거 같은데, 내 생각은.”세진은 몸을 배배 꼬았다. 용국은 눈을 게슴츠레 뜨더니,“하지만 이미 그렇게 말하셨겠지.”세진은 실실거리며 웃다가,“오늘 우리 외식할까?” 라며 화제를 돌렸다.“오늘만큼은 내가 먹고 싶은 거 먹어야겠네.”세진은 채비를 하라고 용국의 등을 떠밀며 보챘다.// 외식하러 나가서 대화. 음식 나오고 먹고 하는 묘사 추가.“나도 참 대단하다. 지도 식당에서 서빙이나 하는 주제에 오지랖이나 부리고. 참 정신머리 없는 년이야, 그지? 꼭 남편도 지 같은 거 만나서 부부 쌍으로 바보네. 우리 남편은 책을 많이 읽으면 똑똑해져야 되는데 어째 점점 더 바보가 되는 거 같애.”“어디서 일하는지가 뭐가 중요해. 그거 너랑 같이 일하는 사람들도 다 무시하는 말이잖아.”“네이, 알겠습니다~”“그리고 책이야 그냥 좋으니까 읽는 거지. 흥미도 있고, 또 번역할 때 도움 되기도 하고. 똑똑해지려고 읽는 건 아닌데 뭐. 바보면 어때, 좋아서 하는 일에 꼭 무슨 결과 같은 게 필요한 건 아니잖아. 우리가 그냥 서로가 좋아서 결혼한 거처럼.”“좋아서 결혼한 거 치곤 시큰둥한 말툰데?”“좋은 게 원래 그런 거지. 밋밋하고, 아무 냄새도 없고. 자극적인 건 곁에 계속 두면 꼭 싫어지는 때가 오거든.”용국은 말을 마치고 잠깐 뜸을 들이더니 덧붙여 말했다.“그래서 말인데 세진아. 이번에 윤 씨 그분 도와주기로 한 거, 어찌 되든 그냥 우리가 좋아서 한 일이라고 생각하자. 무슨 일이 생기든 간에. 우리가 좋아서 하는 일이야, 좋아서 하는 일은 대가를 바라지 않잖아. 혹시 결과가 나빠도 할 수 없어. 우리가 좋은 사람이라서 도와주는 게 아니야. 그냥 우리가 필요하기도 하고 원하기도 해서 그 사람들하고 일종의 거래를 하는거지. 그냥 그렇게 생각했으면 좋겠어, 어찌 되든.”“꼭 무슨 일이 생길 거처럼 얘기를 하네. 불안하게.”“만약이란 게 있으니까, 사람일 어찌 될지 아무도 모르고.”//세진의 소개로 그녀의 고향 시골에 일을 하러 간 윤과 윤의 남편, 세진과 용국이 그들이 지낼 집을 알아봐주고 도와줌.“작년에도 마늘 뽑으면서 태국 애들도 많이 데려다가 써봤는데, 이 태국 애들은 여자애들은 괜찮은데 남자들은 영 못 쓰겠어. 술만 처먹을 줄 알구.”용국이 숟가락을 딱 놓더니,“가만히 있는 한국남자 가슴도 뜨끔하네요.” 라고 답하자 세진의 어머니, 즉, 용국의 장모가 자지러진다.옆에서 또 거들어 얘기를 한다.“그런데 얘네들은 왜 이렇게 어른들한테 반말을 하냐?”용국은 다시 밥숟가락을 들다 말고 대답했다.“한국 사람들이 다들 자기한테 반말만 하니 반말만 배웠겠죠.”세진이 용국의 허벅지를 꼬집었다.“그렇지 않을까요? 허허.” 하며 용국은 멋쩍게 웃었다.//개통된 번호가 없어서 페이스북 메신저로만 연락이 되는 윤, 어른들이 스마트폰이 익숙치 않아 세진이 윤과의 연락을 담당하게 됨. 그리고 시골 어른들에게 윤과 그녀의 남편에 대한 불만 등을 접하며 윤에 대한 말투가 달라지기 시작하는 세진, 나중에 결국 도망간 윤과 남편 이야기세진은 어머니의 말을 듣고 골이 지끈 아프다. 그녀는 바로 메신저로 윤에게 통화를 걸었다.“윤, 남편 왜 일 안 나와?”“남편, 아파.”“남편 어제 또 술 마셨어?”“네.”세진은 이마를 짚는다.“윤도 일 못 나와?”“가.”“빨리 좀 갈 수 있어? 지금 밖에서 기다리고 있어.”“네.”//시골에서 세진에게 전화가 옴. 묘사 추가.“왜 무슨 일인데 그래?”“몰라. 윤이랑 남편 사는 집에 가봤는데 짐도 싹 빼고 없어졌대.”“말도 없이?”“어제는 일 좀 잘 해달라고 식당에 데려가서 고기랑 술도 원껏 먹였다는데, 지금 한바탕 난리지. 갑자기 일 할 사람이 없어졌으니. 진짜 이것들이... 도와준 은혜도 모르고.”“뭔가 사정이 있었겠지. 무슨 일인지 모르니까 나쁘게 말하진 말자.”“오빠는 가만 보면 걔네들 편만 든다?”“그렇잖아, 일이 너무 힘들어서 그랬을 수도 있고... 사람 다 똑같아. 나한테 힘든 건 남한테도 힘든 거지. 나도 그때 일 도와드릴 때 너무 덥고 허리도 아파서 솔직히 몇 번이나 도망가고 싶더라. 마누라 얼굴 생각하면서 참았지.”세진은 눈썹을 찌푸렸다.“우리 엄마 아빤 그 일 평생 하셨어.”“평생 해 오신 만큼 익숙한 부분이 있잖아. 처음 하는 사람한텐 더 힘들 수 있지. 아무튼 그게 중요한 게 아니라 일단 벌어진 일이니까 어떻게 대처할지 생각하자.”“어이구, 옳습니다. 참 똑똑하셔서 좋으시겠습니다. 아주 세상에서 제일 똑똑하시지. 그래, 오빠가 다 옳다. 항상 지가 제일 똑똑하지. 그렇게 똑똑한데 왜 돈은 많이 못 버나 몰라.”흥분해서 빠르게 말을 뱉은 세진은 즉시 후회스럽다. 눈살을 찌푸리고 그녀는 슬그머니 용국의 눈치를 보았으나 용국은 세진을 멀뚱히 쳐다보기만 했다.“미안. 방금 한 말 취소.”“뭐가?”“갑자기 흥분해서 말실수 했어. 미안해.”“진심으로 한 말 아닌 거 아니까 괜찮아.”“괜찮아. 화내도 돼. 근데 진짜 오빠 화내는 거 한번 보고 싶긴 하다.”“정말 보고 싶어?”“조금?”세진이 약간 흠칫했다.“나 사실 비밀이 있는데... 나 사실... 화나면 초록색 괴물로 변하는 체질이야.”“막 힘도 세지고? 아유, 무서워.”세진이 실소를 터트리며 손 사레를 쳤다.“아, 나는 지금 너무 화가 난다. 보여준다. 크앙!”용국은 소파에 앉아 있던 세진에게 달려들어 마구 간지럽혔다. 그들은 대소하며 뭍에서 엉킨 물고기처럼 엎치락뒤치락하다가 누가 먼저랄 것도 없이 서로를 원하여 사랑을 나눴다. 일을 마치고 그대로 함께 소파에 누워있던 두 남녀. 남자가 소파 한구석으로 밀려나 널브러져 있던 담요로 둘의 몸을 덮을 때 여자가 입을 열었다.“근데 진짜 궁금하다. 연애할 때는 솔직히 오빠 결혼하고 나면 좀 달라질 줄 알았거든? 연애할 때야 서로 좋은 모습만 보이려고 하니까... 진짜 결혼하게 되면 서로 싸우기도 하고... 울 엄마도 그렇게 말하고. 다들 그렇잖아. 근데 참 신기해?”말을 하다가 세진이 옆에 누워 있는 용국을 껴안으며 다시 말했다.“가끔은 감정 없는 사람처럼 느껴져서 좀 무섭기도 하고. 보통은 화내야 정상인 일에도 오빤 화 안 내잖아.”용국은 세진의 머리를 쓰다듬으며 말했다.“화낼 줄 모르는 사람이 어딨어.”“여깄지.”“나도 화가 날 때가 있지. 표를 잘 안 내서 그렇지.”“그러니까 보통은 그게 안 되잖아. 너무 막 화가 나면 흥분해서 막. 응?”“화를 내서 뭔가 해결될 만한 일이면 화를 내겠지. 근데 대부분 화를 내면 갈등이나 뭐 그런 게 악화되잖아. 그러니까 앞으로 뭐가 이득이 될지 판단하고 행동하는 거지.”“아니 그러니까, 그걸 어떻게 해. 어떻게 그렇게 절제를 잘 하셔?”용국은 잠깐 생각하는 듯 보이더니 세진을 마주 보게 옆으로 누으며 말했다.“예전에, 내가 한 열일곱 살쯤 됐었나, 나 동생이랑 한 번 심하게 싸운 적이 있었거든?”“뭐 땜에?”“그건 중요한 게 아니구, 아마 별 일 아니었을 거야. 아무튼 그렇게 한창 말싸움을 하는데 우연히 벽에 걸려 있던 거울에 내 모습이 딱 비치는 거야. 근데 거울 안에 보이는 그 사람이 너무 못나고 못 생겨 보이더라.”“그래서 어떻게 됐어?”“몰라, 그냥 그걸 딱 보고 충격을 받았는지 몸에 열이 확 빠져나가면서 좀 허탈해지는데, 싸우다가 딱 맥이 빠져서 할 말도 없고. 동생이 뭐라고 소리를 지르는데 들리지도 않고... 아마 그 이후부터 좀 그런 생각을 많이 했지. 내 옆에 항상 거울이 있는 거처럼 느껴지고. 그래서 거울에서 그 못난 사람 또 볼까 무섭기도 하고.”세진이 허공에 손을 휘저으며 말했다.“여기쯤 있나, 그 거울?”용국은 웃음이 터졌다. 그는 갑자기 세진의 엉덩이를 장난스레 꽉 쥐었다.“아니, 니 엉덩이 뒤에 있네. 세진이 엉덩이 다 보인다. 얼레리꼴레리.”//“그 윤 씨네 갑자기 없어져서 일손 부족하시잖아. 마침 나 일거리도 많지 않은데 내가 가서 도와드리지 뭐. 어쨌든 우리가 소개한 사람들이니까 죄송한 마음도 좀 들고.”“사람 사서 쓰면 되지.”“이참에 점수나 따지 뭐.”//윤이 살던 집주인이 세진에게 전화를 걸어 집을 청소해 놓으라고 화를 냄. 청소를 하러 세진과 용국이 집을 찾아감.“아유 냄새. 얘넨 뭐 이렇게 더럽게 살았대? 태국도 어지간한가 보다. 벌레들이 형님 하겠네. 뭔 소스를 주방에 천지로 발라놨네.”“옛날에 조선에 왔던 선교사들이 그랬다는데, 조선에 와서 가장 힘든 점이 조선인들의 불결함이었다고. 머리는 자르지도 않고 상투를 틀어서 잘 감지도 않지. 방에는 짚을 깔아 놓고 생활하는데 짚을 어떻게 청소해. 온갖 밥 먹다 튄 오물도 스미고 하다못해 애기 똥오줌도 좀 스몄을 것이고. 아무튼 그게 일상인 사람 기준에선 그걸 뭐 더럽다고 생각하나, 한국인도 다 예전엔 똑같았지 뭐. 지금의 우리가 우리 기준에서 남을 판단하는 거. 조금 다르게 생각해볼 필요도 있지 않을까요-오?”용국은 말을 마치며 세진의 눈치를 보곤 머쓱했는지 말꼬리를 올렸다.“헛소리 그만 하시고 청소나 하세요. 용국 씨? 더러운 게 더러운 거지.”코와 눈썹을 찡긋거리다 세진은 뭔가 생각난 듯 말했다.“나 가서 쓰레기봉투 좀 사올게. 여기 버릴 거 좀 다 정리하고 있어, 여보?”“아, 예. 입 다물고 청소나 하고 있겠습니다.”세진은 미소를 띠고 헬렐레 거리며 밖으로 나갔다. 그리고 다시 돌아왔을 때, 용국은 벽에 걸린 때 묻은 전신거울 앞에 가만히 서 있었다. 세진은 볼멘소리로,“아니, 청소 안 하고 뭐 해.” 라고 하자, 용국이 손짓을 하며 그녀를 부른다.“세진아, 여기 봐.”“뭐 볼 게 있다고?”“이리 와서 서 봐.”세진이 다가가자 용국은 그녀의 어깨를 왼팔로 감쌌다. 그리고는 거울을 응시하며 말했다.“거울이 더러우니까 우리도 더럽게 보이네. 우리 그냥 여기 사는 드-러운 부부 같지 않아?”세진은 실로 어이가 없다.“장난 그만 하고 빨리 하고 가자. 여기 오래 있고 싶지 않아.”용국은 잔뜩 웃으면서 네, 네 주억거리더니 다시 정리를 하기 시작했다.//도망간 윤과 남편 몫을 대신해 용국이 일을 돕는 편, 그리고 휴일에 일손을 보태러 온 세진과의 대화. 결말 부분. 윤에 대한 용국과 세진 대화, 통화 내용 등 추가.세진은 일을 마치고 온 즉시 용국에게 전화를 걸었다.“여보세요?”“여보입니다. 밥은 먹었어?”“아니, 나도 이제 막 집에 들어온 참이야. 일이 늦게 끝나서 그냥 배달음식 시켜 먹자고 하시네. 탕수육도 시켰으니 장인어른이랑 술도 한 잔 하고 해야지.”“그 이기적인... 나쁜 놈들 때문에 우리 서방만 고생하네.”“사정도 모르는데 뭐... 그리고 이기적인 거... 나쁜 건가? 동물은 이기적인 게 정상이지 뭐.”“걱정을 해줘도 꼭 그렇게 말대꾸를 해야 속이 시원해?”“그냥, 이기적인 걸 나쁘다고 하면... 그렇다고 하면 세상에 나쁜 사람이 너무 많잖아. 나쁜 사람이 많은 세상에서 살고 싶지 않다 나는.”“사실인데 뭐.”“나도 남이 바라는 대로 행동할 맘이 없는 거처럼, 다른 사람도 남 좋은 일만 하고 살 수 없는 거랑 똑같은 거잖아? 그러니까 굳이 남한테 쓸데없는 기대 같은 거 하지 않으면, 뭐 참 살 만한 세상이지.”“뭔 말이야.”“아니다, 신경 쓰지 마. 적어도 내 세상은 참 좋다. 내가 존경하고 좋아하는 사람이 평생 내 옆에 있으니까.”“있잖아, 오빠는 가만 보면 바보 같은데 가끔 이렇게 보면 참 똑똑해.”“바보라고 생각하고 보면 바보처럼 보이고, 똑똑한 사람으로 생각하고 나서 사람을 보면 똑똑한 사람으로 보이는 거지. 우린 그러니까 세상을 좋게 보자. 굳이 나쁜 생각할 필요 없잖아. 나쁘다, 나쁘다 하면 괜찮던 것도 다 나빠지는데.”“그럼 오늘부터 매일 나한테 ‘좋다, 착하다, 예쁘다, 사랑스럽다’ 해주기?”“나만?”“난 맘속에 오빨 항상 그렇게 생각하고 있어.”영호는 잠시 침묵했다. 세진은 갸웃하며 기다리다 물었다.“왜 말이 없어?”“거짓말하는 사람이 좋은 사람인지, 나쁜 사람인지 잠깐 생각하고 있었어.”“내가 거짓말했다는 거야?”“그런 말은 안 했는데... 찔려?”“아니, 완전 떳떳하거든?”세진은 마치 옆에 용국이 있는 양, 가슴을 젖히고 말했다. 그들은 화기애애하게 웃다가,“내일 또 일 나가잖아. 피곤할 텐데 얼른 자.”“그래, 여보도.”용국이 답했다.// 휴일에 고향집에 내려간 세진“종일 땡볕에 나가 일하니까, 이거 봐봐 이거. 얼굴 탄 거 좀 봐. 꼭 썬크림 바르고 일하랬잖아.”“마누라 없으면 내가 로션도 못 바르는 인간인데, 무슨 썬크림이야. 근데 오늘 아침에 딱 거울을 보면서 든 생각인데, 나 이렇게 얼굴 까마니까 꼭 태국 사람 같지 않아? 사왓디-캅.”용국은 합장을 하며 세진에게 고개를 숙인다.“누가 봐도 태국인이네. 새로운 국적을 따셔서 좋겠어요? 졸지에 국제부부가 됐네.”“나쁠 거 없지. 태국에 좋은 해변이 그렇게 많다네. 스노쿨링하기 좋은 바다도 많고. 먹거리도 많고.”“이야, 남편 잘 둬서 태국은 내 집처럼 다닐 수 있겠다.”“태국 음식 중에 맛있는 거 참 많은데. 제가 현지인의 솜씨로 한번 대접해드리죠, 부인.”“아이고, 아주 성은이 망극하옵니다. 사왓디-카.”세진은 활짝 웃는 얼굴로 용국을 마주보며 합장했다. 용국도 따라 고개를 숙인다.화장대 거울에 얼굴색 다른 두 사람이 서로 절하는 모습이 비친다.(묘사, 대화 등 결말에 어울리도록 더 길게 수정)끝.]]></description><link>https://64etuor.github.io/900_writings/novels/200413-거울_미완.html</link><guid isPermaLink="false">900_Writings/Novels/200413 - 거울_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:41:54 GMT</pubDate></item><item><title><![CDATA[민들레 씨 앉은 자리_미완]]></title><description><![CDATA[봄이다. 추위가 제법 무뎌지고 그간 좀처럼 평화다운 평화를 못 누린 대지가 뿜는 숨결에 얼굴이 달아오른다. 곳곳에 오만 식물의 싹이 대가리를 내밀고 이미 절경이 된 벚꽃이 그 잎을 어지럽게 휘날릴 제, 나는 그 모습을 보며 술을 마시기를 즐겼다. 어찌 보면 이 봄은 내가 술을 정당히 마시기 위한 훌륭한 핑계였으며, 정녕 누구라도 반박을 못 할 만치 훌륭한 핑계였다. 오십이 되었을 적, 마다하는 마누라를 구워삶아 시골에 들어앉게 된 지 어언 이십년이 지났다. 행복하다 호언치는 못 하더라도 불행해본 기억도 없다. 이따금 이렇게 봄이 되면 내가 술을 마시는 동안 다 늙은 소녀는 푸성귀며, 상추며 심은 밭을 돌보다가 종종 민들레를 꺾어 오곤 했다. 나는 으레 냉이라도 따왔음 된장국이라도 끓일 것인데- 하고 혀를 차다가도 뭐가 좋은지 미화같이 실실 웃는 소녀를 보며 애잔한 마음이 들었음이다. 후후 불어 민들레 씨를 날린다. 그 많은 씨앗이 어디로 가는지 사람 눈으로 다 쫓을 리 만무하건만 부지런히 눈알을 굴리는 게 영 못 미더웠다. ‘아니, 하나만 보고 쫓아가야지.’ 답답한 맘에 핀잔을 주어도 소녀는 아랑곳없음이다. 아니면 내 말이 들리지 않던가. 괜한 생각을 한 맘에 또 비수가 꽂힌 것은 훌륭한 안주가 됨이다. 술 한 잔을 더 먹고 보면 소녀는 이미 눈앞에 없다. 이것이 우리 봄의 일상이며, 사계의 시작에 맞추어 자연과 또 한해를 안락하게 더불어 살길 기도하는 영험한 제사 대신인 셈이다.]]></description><link>https://64etuor.github.io/900_writings/essays/민들레-씨-앉은-자리_미완.html</link><guid isPermaLink="false">900_Writings/Essays/민들레 씨 앉은 자리_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:38:56 GMT</pubDate></item><item><title><![CDATA[180512 - 시드니, 밤]]></title><description><![CDATA[그럼 우리는 매일 밤 절망하는 낯짝이 되어서 사는 사람들이라,주름이 곧잘 패일까 찡그리는 기색 없이, 눈물 하나 없이 우는 눈으로고래마냥 밤공기를 마냥 마시고 있고, 술도 양껏 마시고,저와 똑같이 어질러져 있는 건물들 사이로 웅웅 대며 기척하는 외로움들에,관망하는 자세로 술잔을 높이 드니,어떤 이는 빽빽 소리를 지르고,차는 하나 대꾸도 없이 저 좁은 도로를 잘도 빨리 달린다.어딜 가느냐. 갈 데 없긴 매한가진 걸.여기서 우리 술을 한 잔 주고 받거든,오늘 밤은 어깨춤을 추며 즐거운 듯 흉내낼 요량이라도 될 텐데,너는 잘도 빨리 달리고,돌아오는 고함 소리, 여기 저 외로운 건물의 사이로 득달나게 가로질러 간다.갈 데 없는 소리만 이 밤에 요란하다.]]></description><link>https://64etuor.github.io/900_writings/poems/180512-시드니,-밤.html</link><guid isPermaLink="false">900_Writings/Poems/180512 - 시드니, 밤.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:38:19 GMT</pubDate></item><item><title><![CDATA[행복론_미완]]></title><description><![CDATA[3년간을 호주에 있다가 한국에 다시 돌아올 적에 했던 가장 큰 걱정은, 당시 한국의 사정이 몹시 힘들고, 그런 사정 탓인지 몇몇 사람들이 자신이 태어난 나라를 ‘헬조선’이라 조롱하는 게 예사라는 것이었다. 그것이 사실이라면 몹시 슬픈 현실이었다. 누구의 잘못으로 멀쩡한 땅이 불과 3년만에 지옥이 돼 버린 건지 경위를 짐작할 수도 없을뿐더러 아니, 신이 아니고서야 멀쩡한 땅을 3년만에 지옥으로 만드는 게 가당한 일인가. 이것이 세월의 힘인지 참, 강산이 4년이면 변한다는 말이 참으로 헛된 말이 아니라는 생각을 했다. 어쨌든 나는 가진 재주가 없으니 그새 지옥으로 변모한 조국에서 살아갈 길이 막막하였다.아무튼 귀국을 하였는데 참 사람들이 지옥에 사는 것치고는 낯빛들이 좋다. 어느 누굴 보더라도 배곯은 기색도 없고 차라리 얼굴은 반질하니 기름기가 돌았으며 씩씩하게 걷는 것이 강제노역을 당하거나 형벌을 받고 있다는 기색을 찾아볼 수 없다. 이 모두가 잘 훈련된 배우들이고, 북한의 선전마냥 있지도 않은 것을 있다고 하거나, 억지로 수령의 은혜에 감동하여 불합리한 것을 기쁘게 감내하는 연기 따위를 하는 것이라면, 생각이 거기에 미치니 그것은 퍽 서글픈 일이겠다하며 공항을 빠져 나온다.집으로 돌아와 부모님의 일을 돕고 그렇게 시간을 조용히 흘려보냈다. 여기저기 다니며 그간 못 뵈었던 사람들을 만나기도 했으며, 책도 몇 권쯤 보았고, 시간이 날 적에는 그간 시간이 없다는 핑계로 미뤄온 게임도 하곤 했다. 아무튼 몇 달이면 사람을 적잖이 보기에 충분한 시간인데 나는 도무지 ‘헬조선’이란 말이 누구 입에서 나온 말인지 예상을 할 수 없다. 헬조선을 외치는 사람은 그렇게 온라인상에선 그리도 벌떼 같았건만 이것은 일부러 찾으려도 통 만나기가 어렵다. 5공시절의 분위기마냥 자신이 말한 ‘진실’이나 주변의 ‘고발’ 때문에 길을 나다니면 불시에 구속을 당하고 고문을 당할까 무서워 모조리 꽁꽁 숨어버린 것이 아니라면 나는 최소한 한 명의 진실된 발언자를 만났어야 앞뒤가 맞다.분명 공정하지 않은 사회다. 허나 이 나라 이 땅의 역사를 처음부터 다시 살펴보건대, 이만큼 공정한 사회는 과거에 단 한 번도 존재하지 않았다. 이건 비단 영웅 몇 명의 힘으로 일구어 낸 것이 아니다. 사회의 가치관은 사회에 살고 있는 사람들이 가진 가치관의 평균이다. 당신이 보다 공정하고]]></description><link>https://64etuor.github.io/900_writings/essays/행복론_미완.html</link><guid isPermaLink="false">900_Writings/Essays/행복론_미완.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:37:30 GMT</pubDate></item><item><title><![CDATA[230423 - 글쓰기챌린지후기]]></title><description><![CDATA[&nbsp;목을 꽉 죄는 게 불편해서 셔츠의 맨 위 마지막 단추를 잠그는 걸 항상 기피하면서도, 유독 글쓰기에서만은 그게 잘 안 됐습니다.&nbsp;글에서만큼은 항상 더 나은 사람으로 보이고 싶어서, 더 잘난 인간으로 보이고 싶어서.&nbsp;참 그게 얼마나 가식적인 일인지 알면서도 그 단추 하나를 평생 못 풀고 여기까지 와버린 후에는 차라리 그건 재능의 영역이다라고 단정짓고 싶은 맘도 들곤 했습니다.&nbsp;그런 저에게 이번 글쓰기 챌린지에서 쓰신 글들은 정말로 파격적이었고 그래서 더 흥미있게 읽었습니다. 사욕이 살짝 섞이겠지만, 솔직담백한 성격이란 건 역시 타고나야 한다는 제 변명의 강력한 증거인 셈도 되고요.&nbsp;같은 주제를 가지고도 이런 각양각색의 글이 탄생하는 것에 꽤나 놀라웠고, 그 전개도 색달라서 하나 지루하지 않게 읽어나간 것 같습니다. 다음 활동이 기대되는 부분입니다.&nbsp;그리고 역시 이런 사회를 물려줄 수 밖에 없던 어른으로서의 부채감을 언급하지 않을 수가 없습니다. 저에게는 가식이의 일면이자, 마지막 단추같은 그 감정이 누군가에게 실존하는 데에 뜻밖의 반가움을 느낄 수 밖에 없네요. 진부한 말이지만 뭐, 세상은 아직 살만한 것 같습니다.&nbsp;여러모로 뿌듯하고 또 부끄러운 마음이 드는 밤입니다. 다들 수고하셨습니다.]]></description><link>https://64etuor.github.io/900_writings/essays/230423-글쓰기챌린지후기.html</link><guid isPermaLink="false">900_Writings/Essays/230423 - 글쓰기챌린지후기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:36:03 GMT</pubDate></item><item><title><![CDATA[230311 - 걷기, 쓰기, 생각하기]]></title><description><![CDATA[유독 게으르고 태만한 본성을 아직도 극복하지 못하여 영 운동 같은 건강한 습관은 갖지 못한 사람입니다. 그래서 꾀를 낸답시고 고육지책으로 생각한 게 바로 많이 걷기입니다. 많이 걷는 것이 건강에 도움이 된다는 사실이야 너무 뻔하고 심심한 얘기고, 걷는 행위 자체도 참으로 심심한 일입니다. 그러니 걷는 습관을 얘기하자면 이 글 또한 너무 심심해질 테니까, 어떻게 그 심심한 걷기를 이 게으른 사람이 꾸준히 할 수 있었는지를 설명 드리는게 낫지 않을까 싶습니다.결론부터 말하자면, 글을 쓰는 것입니다. 앞의 말속에 생략된 단어들을 이 뒤에 나열하면, 생각, 걷기, 상상 등이 있을 것입니다. 글을 쓰는 것이란 결국 단어와 단어의 조합이고, 앞에 나열된 단어들을 조합해보면 생각하며 걷기, 걸으면서 상상하기 등이 될 텐데요. 여기에 글을 쓰는 것이 또 합쳐지면 글을 쓰는 생각을 하면서 걷기, 상상에 대한 글을 쓰며 걷기, 그리고 지금 제가 하는 중인 걷기에 대한 글을 쓰기도 가능하겠네요.정말 참 쓸모없는 생각들이라고 생각이 드신다면 그도 옳습니다. 다만 글이라는 것은 공간이나 시간 등 조건의 제약과 관계없이 어디서든 할 수 있는 것이므로, 걷기에 접목될 수 있는 행위의 한 가지 좋은 예로 생각하시는 게 더 좋을 것 같습니다. 그리고 굳이 변을 하나 덧붙이자면, 글이란 것은 한밤의 어둠을 다 머금은 호수의 정적일 수도, 마음 한구석에 맥동하는 애틋한 감정일 수도, 그리고 이 모든 상상조차 한순간에 날려 버릴 만큼 강렬한 태풍일 수도 있는 것이니, 그 가변성과 다목적성만큼은 충분히 인정할 만하다고 생각합니다.아무튼 걷기 목표를 달성하기 위해 제가 하는 행동들은 앞서 설명 드린 제 생각과 글만큼이나 참 보잘것 없습니다. 다만 꾸준할 뿐이죠. 30분 이내의 거리는 걷기, 가급적이면 계단 이용하기, 차는 기본적으로 출퇴근용으로만, 식당은 직접 가서 먹기(배달은 종종 맛이 반감되기도 하죠.) 등등. 이 사소한 일들이 글을 쓰는 행위와 합쳐져서 꽤나 즐거운 일이기도 합니다. 그리고 즐거운 일은 억지로 하지 않아도 자연스럽게 하게 되죠. 제가 꾸준히 걷는 이유는 결국 글 쓰는 생각이 즐겁기 때문이겠네요.(리처드 탈러 분이 쓰신 ‘넛지’의 개념과 상당히 유사할 수 있다는 생각이 듭니다. 작년에 넛지:파이널 에디션이 출간되었으니 행동 경제학에 관심 있으신 분은 읽어보시는 걸 추천드립니다. 그리고 거기에 더해 책을 읽는 즐거움을 느끼셨다면 이랜텍 독서모임의 문은 항상 여러분을 향해 열려 있다는 사실을 주지해주시길 바랍니다.)유난히 날씨가 좋은 주말이었습니다. 토요일이라는 핑계로 실컷 늦잠을 자고 일어나서 밖을 나가봤더니 5월이 온 줄로 착각을 했죠. 그 햇볕이 마냥 좋아서 이유도 없이 한참을 산책했습니다만, 그 이유도 없는 산책 덕에 조금은 더 건강해지고, 내용이야 궁색할지언정 이런 글이라도 하나 남았으니 제 딴에는 썩 남는 장사란 생각이 듭니다.&nbsp;여러분은 이런 산책. 어떠신가요?_11 Mar 23]]></description><link>https://64etuor.github.io/900_writings/essays/230311-걷기,-쓰기,-생각하기.html</link><guid isPermaLink="false">900_Writings/Essays/230311 - 걷기, 쓰기, 생각하기.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:34:55 GMT</pubDate></item><item><title><![CDATA[210220 - 나무가 자란 것 같았다]]></title><description><![CDATA[&nbsp;설에 고향을 찾아가던 길, 한가롭게 국도를 타고 느긋하게 차를 몰았다. 충남 아산에서 강원 양구까지는 세 시간 내지 네 시간이 걸리는 먼 길이건만 본체 느긋한 성격이라 느릿느릿한 귀경길이 그다지 따분하지 않았다. 예전에 보았던 풍경을 다시 보는 것이 새로웠다. 라디오에서 듣는 사람들의 각양각색의 사연도 좋다. 매년 반복되곤 하지만, 이즈음의 라디오 사연 중에는 취직이나 결혼을 하라는 친인척들의 잔소리에 대한 푸념이 많다. 그런 흔한 스트레스를 받아본 적 없는 입장으로서는 가족들에게 감사한 맘이&nbsp;들 뿐이었다.&nbsp;아니면 나 자신이 통 무신경하여 그런 잔소리를 신경 쓰거나 기억해본 일이 없던가, 뭐 이것은 어찌 되었든 상관없는 일이니 기왕이면 가족의 공으로 두는 편이 낫겠다.&nbsp;고속도로를 달리는 게 아닌지라 표지판을 수도 없이 마주하였다. 은근히 표지판에 쓰인 지명의 유례를 추측하고 머리를 굴리다 보면 지루할 틈이 없다. 가령 며느리고개라는 지명을 표지판에서 보게 되면 나는 긍정적인 생각이&nbsp;떠오르기보다는&nbsp;대번에 옛적 또 어느 집 어떤 며느리가 저기서 또 고생을 한 사연이 있나 생각하기도 하고, 그러나 곧 나는 하기야 예전이야 고생한 며느리들이 한둘일까 보냐며 셈하는 게 금세 질려 버리기도 했다. 하긴 그 질려 버린 인간조차 이번 설에는 사람이 많이 오지 않아 일손이 부족하니 전을 부치러 일찍 가겠다며 다짐한 걸 못 지키고 한껏&nbsp;풍경 놀음을&nbsp;하고 있으니, 공평한 사회란 건 참으로 오기가 어려운 것이다. 그러니까 이것은 표지판에서 시작해 공평한 사회에 대한 생각으로 끝난 어떤 얘기인 듯한데, 어떻게 쌀을 축내는 한 인간으로 태어나 이런 시시한 생각들을 끊이지 않고 할 수 있는 것인지 스스로도 참 놀라울 지경이었다. 놀랍고 어처구니가 없지만 때론 자못&nbsp;나&nbsp;자신을 대견하게 생각하는 바가 있으니 그 이유는 나이를 먹고 경험이 쌓여 일면 생각과 의식이 고착화되고 편견이 쌓일 법도 한데&nbsp;머릿속엔&nbsp;항상 흐르는 물처럼 생각이 멈추지 않는다는 점이다. 아니, 생각이 많은 사람들이 곧잘 우유부단하게 굴 듯 사실은 대견하다는 말은 거짓이며 나는 이런 버릇을 술을 먹기 위한 핑계로만 사용하고 있을 뿐이다. 그러니까 나의 수많은 치부 중에&nbsp;한 가지&nbsp;정도가 될는지. 혼자 이런저런 실없는 생각을 하며 풍치 있는 도로를 달렸다. 적어도 몇 번은 오고 갔을 길 옆의 산 중턱에 못 다 자란 소나무가 보였다. 어째 저번보다 조금은 더 나무가 자란 것 같았다.&nbsp;점심때가&nbsp;조금 지나 좋아하는 막국수집에 들러 점심을 먹고 큰집에 도착했다.코로나 바이러스가 창궐한 탓으로 이번 설은 오지 않은 친척들이 많았다. 나 또한 주변을 의식해 이렇게 오는 게 꺼림칙하긴 했으나, 설 제사상에 내 친어머니의 제사도 함께 지내는 탓에 오지 않기가 어렵다. 커피 한잔을 마시며 근황 따위를 큰아버지와 얘기하다가 잠시 본가로 가 부모님을 뵙고 쉬다가 저녁이 돼 서야 다시 큰집에 내려왔다.저녁 때는 술판이 벌어졌다. 게으른 아들 대신 전을 다 부쳐 놓은 어머니와 술을 한 잔, 아니 정확히는 친척들이 모여 저녁을 먹고 술잔을 돌리는 와중에, 그 전을 다 부친 우리 불쌍한 어머니는 매일같이 술을 마시는 못난 아들을 보시며 잔소리 아닌 잔소리를 하셨다. 술을 좀 줄이라는 어머니의 걱정이 무언지 잘 알면서도 나는 매번 똑같은 대답을 내어 놓을 수밖에 없었다. 내가 밤에 잠에 들려고 노력하여도 생각이 좀처럼 자력으로 멈추지 않는다는 말을 하면 무슨 생각을 하냐는 물음을 재차 받는다. 그럼 나는 멋쩍고 할 말이 없어 토론 같은 것을 한다고 답한다. 어머니는 무슨 토론할 것이 그리 많냐며 삐쭉이시고는 마치 복습을 시키는 선생님처럼 매번 똑같은 말을 하신다.&nbsp;‘야한 생각을 하라.’이것은 내가 수년간 풀지 못한 난제 중의 하나이다. 난 어떻게 야한 생각이 사람을 꿈나라로 오게끔 유도할 수 있는지 도통 갈피를 잡을 수&nbsp;없을 뿐더러,&nbsp;설령 그것이 가능하다 치더라도 그 미래에, 즉 야한 생각을 해서 잠이 잘 들게 된 연후에, 도리어 야한 생각이 어떻게 사람을 잠들게 할 수 있는지 그 인과가 미칠 듯 궁금하여 오히려 잠을 이루지 못하게 될 거라는 확신이 있다. 그리고 그 해답을 못 찾고 불면증에 시달릴 자신 또한 있다. 더불어 야한 생각을 하자면 사람의 상상력의 한계로 말미암아 결국에는 언젠가 누군가를 내 머리 안에 소환하게 될 것인데, 이를 상대방의&nbsp;동의 없이&nbsp;하는 일은 영 마뜩잖은 일이다. 불과 상상이라 할 지라도 타의로 발가벗겨진다는 건 오죽 불쾌한 일일까. 그리고 또 시간이 아깝다. 그런 생각을 할 시간에 공평한 사회를 조금이라도 더 탐구한다면 어쩌면&nbsp;또 다른&nbsp;며느리고개가 생기는 일은 막을 수 있지는 않을는지! 그러니까 결론은 이렇게 길게 설명하기도 우스운 얘기지만, 말하자면 나는 입으로만 일하는 사람보다 한 술 더 뜬, 생각으로만 일하는 사람인 셈이다.&nbsp;아무튼 이런 요상 망측한 이야기의 주인공인, 잠을 잘 못 자는 한 사람은 고향집에서 그동안 못 잔 잠을 다 몰아 잤다. 그전엔 입맛이 없다며 먹는 건지 마는 건지 했던 밥도 몰아서 다 먹은 듯하다. 막국수는 기어이 한 번을 더 먹고 왔다.&nbsp;아산의 집으로 돌아오는 중 다시금 본 그 나무는&nbsp;며칠 사이&nbsp;더 자란 건지 아닌 건지 알 방도가 없었다.&nbsp;허나&nbsp;그, 대단한, 공평한 사회를 생각하는 사람은 틀림없이 체중이 2kg 늘었다는 것을 밝힌다.]]></description><link>https://64etuor.github.io/900_writings/essays/210220-나무가-자란-것-같았다.html</link><guid isPermaLink="false">900_Writings/Essays/210220 - 나무가 자란 것 같았다.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:33:36 GMT</pubDate></item><item><title><![CDATA[200424 - 10평짜리 방 한 칸에 행복은 얼마나 들었을까]]></title><description><![CDATA[직장을 얻어 출가하여 그저 저렴한 중에 깨끗한 방을 구해서 지냈다. 이 작은 방안에 행복은 얼마나 들었는지 궁금해져 헤아려 본다. 이따금 노을이 나보다 먼저 방안에 들어와서 나를 반긴다. 그럴 때면 몹시 행복한 기분이 든다. 작은 TV 하나, 게임하기에 충분히 좋은 컴퓨터, (읽지 않고 내팽개쳐진) 책 몇 권 등등은 그저 거기에 있기만 해도 기분이 좋다. 눈을 뜨면 컴퓨터를 켜고 음악부터 튼다. 치즈(CHEEZE)의 Mood Indigo와 함께 시작하면 완벽한 하루를 보낼 준비 완료! 작은 방이니 만큼 청소하기가 간편하다. 청소를 자주 하는 편이다. 비록 내 집은 아니나 계약기간 동안만큼은 내가 주인인 셈이다. 엔트로피는 항시 증가한다고 했으므로 물건이든 사람과의 관계이든, 뭐든 잘 닦고 빛내주어야 하고 그게 주인 된 자의 도리라고 생각한다. 그러고 보니 대학을 다니던 시절, 학교 본관에서 창문을 청소해주시던 분과 한 대화가 기억이 난다. 내가 보기에 유리로 된 창문이 너무나 많고 끝이 없어 그분께 안 힘드시냐고 말을 붙였더니 이분이 대답하시기를 마음을 닦는다는 생각으로 하면 괜찮다고 하셨다. 그 대답이 꽤나 인상적이라 기억에 남는다. 하여튼 나는 마음을 닦는 경지에는 못 올랐더라도 깔끔한 환경에서 지내면 몸과 마음도 건강해지고, 집의 소유주는 임차인이 집을 잘 관리해주면 기분이 좋을 것이니 서로 남기만 하는 장사다. 시간이 날 적에 커피 한잔을 마시는 것이 좋다. 커피를 자주 마시고 좋아하는 탓에 커피머신, 밀크 프로더를 사고픈 욕심이 있지만 이미 집이 좁다. 믹스커피 한 스틱도 내 맘에 충분히 족하다. 호주에서 다닌 학교에서 받은 컵이 있는데 벌써 3년 넘게 애용 중이다. 이게 참 앙증맞고 귀엽다. 여기에 믹스커피를 타 먹거나, 물을 마시거나 하면서 매일 뽀뽀를 하면 왠지 커피가 더 맛있는 느낌이 든다.(소주도 이 컵에 따라 마신다.) 공기 좋은 호주에서 지내다가 한국에 와 보니 미세먼지가 참 많다. 환기를 해도 자주 먼지청소를 해줘야 한다. 공기청정기를 사다 놓고 이따금 돌린다. 세상 참 좋아졌다. 이따금 기계가 돌아가는 것을 보며(담배를 피우고 들어오면 기가 막히게 알아채고 돌아간다. 흡연자로서 부끄럽다.) 공기가 맑아진다고 생각하면 호주 블루마운틴에서 마셨던 공기가 떠올라(물론 기분 탓) 기분이 절로 좋아진다. 집 뒤편에는 우사가 있다. 가끔 환기를 한다고 창문을 열어 놓으면 소똥 냄새가 달려든다. 강원도의 고향집을 떠올리게 하여 마음이 푸근해진다. 아침이면 새 지저귀는 소리가 들리고, 밤 10시가 되면 어김없이 윗집 코 고는 소리가 들린다. 하루 또 열심히 사셨구나 하는 생각이 들어 그 소리가 귀엽고, 경건하게만 느껴진다. 나도 하루를 또 열심히 살았다. 그렇게 생각하면 보람이 있다. 화장실에 창문이 없어 자주 청소를 해줘야 한다. 문을 닫아 놓으면 물때가 많이 끼는 편이다. 샤워를 할 때마다 한 군데씩 청소를 해준다. 샤워를 하면서 운동도 하니 일석이조다. 부엌은 혼자 쓰기 딱 알맞다. 요리를 자주 하는 편은 아니라 조리도구들은 딱 알맞게만 가지고 있다. 요새는 작은 방에서 자취하는 사람들이 많다 보니 그런 사람들을 타겟으로 한 여러 아이디어 상품들이 많다. 가끔 필요한 게 있으면 그냥 물건을 사기에 앞서 혹시 기발한 상품이 있지 않을까 인터넷을 뒤져 구경하곤 한다. 가끔 그렇게 한참 아이쇼핑을 하는 게 즐겁다. 호주에서 지낼 때 다이슨 청소기를 하나 구매해서 사용했었다. 청소기의 성능도 좋고 소리도 경쾌해서 즐겁게 청소를 하곤 했다. 귀국을 하면서 처분한 뒤로 이따금 그 생각이 나 아쉬운 맘이 들었는데 요새는 중국 제품 또한 좋다고 하여 시험하는 셈 샤오미 무선청소기를 하나 구매하였다. 중국의 기술 발전이 실감된다. 구매한 제품은 디자인도 예쁘고, 성능 또한 훌륭하다. 사기를 잘했다고 생각한다. 청소가 조금 더 즐겁고 편해졌다. 침대 협탁에 고정할 수 있는 스마트폰 거치대를 하나 사서 사용한다. JB-lab이라는 회사의 제품인데 사고 보니 내 자동차 무선 충전 거치대도 이 회사 제품이었다. 아무튼 이 거치대는 무려 무선 충전도 같이 된다. 자기 전에 웹툰을 보거나 유튜브를 시청하거나, 글을 읽거나 할 때 바로 누워 볼 수 있어 참으로 편리하다. 술을 자주 먹는 탓에 늦잠을 잘 때가 있는데 바로 눈앞에서 알람이 울리니 안 일어나고는 배길 재주가 없다. 가끔 스마트폰을 만지작거리다가 잠들어서 충전을 못 시키는 경우도 있었는데 그럴 걱정도 사라졌다.(광고는 아니다.) 이런 기발한 물건을 구할 때면 물건은 자꾸 발전하는데 나는 통 발전이 없는 거처럼 느껴질 때가 있다. 나에게 향상심을 일깨워주니 비록 말은 못 해도 나의 좋은 친구인 셈이다. 내 친구가 고장이 나지 않고 오래 버텨주기를 기대한다. 남자 혼자 사는 집은 으레 ‘홀애비 냄새’가 난다고 하여 방향제를 항상 구비하여 둔다. 찾아오는 손님이 있어서가 아니라 내가 그 홀애비 냄새에 적응하여 나중에는 맡지 못하는 게 무서운 이유다. Cotton Candy향을 좋아해서 Little tree라는 미국 제품을 쓰곤 했는데 최근에 내 취향에 딱 맞는 블랙체리향의 디퓨저를 발견했다. 어쩌다 돈을 얻은 것보다 몇 배는 기쁘다. 퇴근하여 집에 돌아와서 문을 열 때 신선한 향이 나 매번 기분이 상쾌하고 좋다. 화장실에 들어가면 매일 거울로 마주하는 사람은 인물이 썩 훌륭한 건 아니라도 웃음에 어둠이 하나도 없는 것이 보기 좋다. 그전에는 너무나 행복하게 웃는 사람들을 보면 저 사람들은 인생에 참 즐거운 일들만 있는가 보다 싶었는데(질시였을지 모른다.), 오히려 맑은 웃음을 가지고 있는 사람들이 속으로는 근심을 많이 겪어왔던 경우가 많다는 걸 나중에 알게 됐다. 가끔 그런 생각을 하던 어리석은 때를 떠올리며 거울을 보며 피식 웃곤 한다. 예나 지금이나 그 거울의 사람은 나의 좋은 친구이다. 일 년 반 남짓 머문 집인데 본사 발령으로 이사를 갈 때가 되어 이전에 써놓은 글에 마지막 항목을 덧붙인다. 다음번 주인에게 이 작고 귀여운 방이 잘 인도되기를 바란다. 집에는 그곳에 사는 사람의 기운이 깃든다고들 하는데, 부디 나에게도 좋은 기운이 있다면 이곳에 남고, 나의 나쁜 기운은 나와 함께 가기를 바란다. ]]></description><link>https://64etuor.github.io/900_writings/essays/200424-10평짜리-방-한-칸에-행복은-얼마나-들었을까.html</link><guid isPermaLink="false">900_Writings/Essays/200424 - 10평짜리 방 한 칸에 행복은 얼마나 들었을까.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:32:44 GMT</pubDate></item><item><title><![CDATA[180920 - 숨바꼭질]]></title><description><![CDATA[&nbsp;이른 새벽에 전화가 울리는 걸, 발신자만 확인하고 도로 잤다. 으레 남이 곤히 자고 있을 시간에 전화를 해서 외로움을 토로하는 녀석이었다. 이만한 민폐가 없었다.&nbsp;아침에 눈을 떠서 전화를 걸었다. 엉뚱하게도 H의 친구 E가 대신 전화를 받았다. 무슨 말을, 말을 했더랬다. 나는&nbsp;앉은자리에서&nbsp;벼락을 맞았다. H의 발인이 벌써 내일로 잡혔다는 얘기다.&nbsp;한국 직항 비행기 시간엔 도저히 맞출 수가 없어 가장 빠르게 갈 수 있는 경유 비행기를 예약하고, 가방에 여권, 속옷 3장, 양말 3켤레, 책 2권, 한국 신분증과 카드만 챙기고, 방 안은 그냥 난장으로 두고 부랴부랴 공항으로 향했다.&nbsp;시드니에서 인천까지, 홍콩을 경유하는 비행기로 총 16시간, 맑게 개인 날이었음에도 온통 천둥이 치는 통에 잠에 쉬이 들지 못했다. 어물쩡 책을 읽을 요량도 없었다. 뇌는 이미 정상적인 기능을 상실하고 끊임없이 묘하고 기괴한 생각들을 내&nbsp;마음속&nbsp;의심의 항아리에다&nbsp;집어 던졌다.&nbsp;그리고 나는 빌었다.&nbsp;구름 위를 꿈처럼 날아 닿게 될 모든 일들이 꿈이기를 빌었다.&nbsp;내게 언제 한국에 올 거냐 매번 채근하다&nbsp;못해&nbsp;못된 장난을 벌인 것이라고, 도착하거든 아주&nbsp;혼구멍을&nbsp;내주겠다고.&nbsp;그리고 다음 날 오전 장례식장에 도착해 보니, 잔뜩&nbsp;질타 받을&nbsp;운명이었던 녀석은 지레 겁이 났는지 제 사진만 덩그러니 놓고 어디로 갔는지&nbsp;보이지를&nbsp;않았다.&nbsp;화장은 오후 1시쯤으로 예정되어 있던 터라 내가 도착하고 나서 그리 오랜 시간이 지나지 않아서 모든 과정이 마무리됐다. 계속 오열하시던 H의 누나와 어머니를 보는 내내 마음이 괴롭던 걸, 내심 그렇게 빨리 일이 처리된 것이 다행이다 싶었다. 그러나 여전히 산 사람의 시간은 길다. 길고, 무겁다.&nbsp;마지막까지 함께 자리한 친구들에게 밥이라도 꼭 먹이고&nbsp;보내야 겠다는&nbsp;H의 부모님 뜻대로 함께 밥을 먹고, 술잔이 돌았다.&nbsp;술.&nbsp;원체 간이 안 좋은데 사람 좋아하고 술 좋아하던 H의 사인이 십중팔구는 저 탓일 텐데, &nbsp;우리는 아픔을 덜자고 친구가 먹던 그 독을 마셨다. 사람들은 술자리에 H가 없는 것이 너무나 어색하다는 농을 하며 웃었다.&nbsp;오랜만의 한국 방문이라 인사해야 할 사람도 많았고, 볼 일도 보다 보니 금세 시드니로 돌아갈 날짜가 다가왔다. 가기 전에 꼭 들려 가라던 H 어머니의 당부가 있었기 때문에 함께 저녁을 먹기로 하고 숙대입구역으로 왔다.&nbsp;정신이&nbsp;어느 정도&nbsp;개이고 나서 보니&nbsp;3년 만에&nbsp;오는 데도 불구하고 그 주변은 온통 H랑 함께 가봤던 곳 투성이다. 아마 저기 술집에도, 저 식당에도, 이 골목을 따라 들어가면 나오는 먹자골목의 가게 하나 둘&nbsp;셋넷&nbsp;거기에도.&nbsp;너는 그곳에 숨어있다.&nbsp;그런 생각을 하고 말았다. 많은 사람을 저 맘대로 술래로 임명해 놓고, 생전에 때로&nbsp;짓궂지만&nbsp;악의 없이 말하던 양 그대로 자기를 한 번 찾아보라 말하면서.&nbsp;또 멀지 않은 때에 찾아와서 네 장난기 가득한 숨바꼭질에 어울려 주겠다 다짐을 했다.&nbsp;저녁을 먹으면서는 또 술을 먹고 말았다.]]></description><link>https://64etuor.github.io/900_writings/essays/180920-숨바꼭질.html</link><guid isPermaLink="false">900_Writings/Essays/180920 - 숨바꼭질.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:32:16 GMT</pubDate></item><item><title><![CDATA[120501 - 촌놈 판별공식]]></title><description><![CDATA[감기도 안 걸렸는데 의자에만 앉으면은 열이 구백삼십 도다. 할 일이 태산처럼 남았는데 눈과 의식이 빙글빙글 돌기만 해서 나는 공부하기가 아주 틀려버렸다. 수험생이면 누구나 한두 번 진창에 빠지는 것이라고 해서 나까지 이럼 안 되는 것인데, 안 되는 것인데, 생각만 구만리로 걱정이다. 속이 깝깝하고 얼굴은 풍선처럼 부풀어 오르는 것도 같고, 씹어 먹어두 시원찮을 책은 자꾸 우주여행의 길잡이가 돼서 나를 100만 광년 떨어진 성운을 향하여 되풀이해서 인도한다.이런 사람에게는 36와트 전구 불 일굴 전기도 아까운 것이라서 조용히 불을 끈다. 뒤에서 열심히 공부하는 형제자매님들! 면학 분위기 조성의 기대에 부응 못하고서 이렇게 내가 갑니다 아이구. 하구 짐 싸서 뒤돌았는데 사람이 없다. 마침 오늘은 5월 1일 공휴일이니까 그러믄 나두 시간 까먹는 일을 하는 일일 근로자인 셈 치구서 독서실 밖으루 줄행랑을 놓는다.깔깔깔 휴일이구나, 늦저녁 밖으루 나와서 보니깐 사람이 제법 다니고 휴일 분위기가 난다. 삼삼오오 떠들며 다니는 사람들이 무척 반갑고 오늘의 즐거움은 오늘에만 있는 것이어서 나는 맘이 다른 때와 달리 많이 바쁘다. 그런데 이제부터 무얼 하나 골몰하자니, 나는 까먹기 위해 공부하던 것과 마찬가지로 할 것이 없다는 걸 알기 위해서 뭘 할까 생각하는 꼴이다. 이런 때는 여느 사람들의 흉내를 내는 것이 좋겠다. 휘적휘적 거리를 거닐다가 사람 많은 카페를 골라서 시골 대감님처럼 어흠! 하구 들어간다.조잘조잘 재잘재잘 사람들이 꽤나 노니는데 까페 아가씨는 어찌 그리 예쁜지! 저런 사람이 만약에 물 한 잔 떠주고서 이것이 코오우피라고 말하면 나는 응당 물도 코오우피처럼 마셔야 한단 의무감이 생길 법하다. 나는 그러하면 꼴이 우스워지니깐 홀리는 일이 없어야겠다 정신을 바짝 차리구서 꼭 도시 사람인 마냥 내 불타는 마음처럼 뜨거운 카푸치노를 시킨다.휴일은 그런 것이다. 까페에 앉아서 이 산란함, 분주함에 콧방귀를 뀌구서 교양 있는 사람들이 두루 마시는 현대 코오우피를 마셔 주어야만이 이 시대를 살아가는 현대인들의 세련미 넘치는 휴일 보내기를 귓동냥으로나마 듣고 배울 수 있는 것이다. 다리 꼬고 앉아서 주위를 두른다. 카나리아 한쌍도 꺅꺅 그러고 제비 부부도 지지배배, 병아리는 삐약삐약, 노랫소리, 말소리, 커피 내리는 소리, 왁자지껄 어우르는 소리가 까페 구석구석을 왕왕 들쑤셔서 천장이 무너지게 생겼는데 다들 아랑곳 않고 말들이 바쁘다. 여기서 얘기하는 법을 주워 듣자고 귀를 쫑긋 하구 앉았는데 눈에 계속 잡히는 것이 있다.남극으루 빙산 구경 간 일 없고 거기에 얼굴 부대어 본 경험 없어도 나는 안다. 저것은 바로 얼음덩어리!자리를 메운 사람들의 암약 간에 과연 그런 것이 있었던 것이다.세련된 현대 도시인은 아이스 코오우피를 마시는 게 인지상정!나는 땀이 삐질 난다. 정녕 도시 사람들은 감히 촌놈이 그들의 생활영역을 침범하거든 솔찮이 구별하여 비웃으려고 벌써 그런 약속까지 정해두었던가. 나는 부끄럽고 속이 타서 자리에서 일어난다. 카운터로 가서 말 꺼내기가 어려워 저기요. 하니깐 예쁜 아가씨 웃으면서 답해주는 것도 소름이 끼친다. 내 얼굴에다 이미 촌놈의 딱지를 붙여놓았겠지 짐작이 돼서 그냥 종이컵에 담아주세요... 말 한마디 하는데 온 세상이 서럽다. 네, 하는 예쁜 대답조차 괴롭다.안 그래도 쓴 커피를 더없이 쓰게 받아 들구서 또 줄행랑이다. 거리에 가득한 간판이고 사람이고 다들 나의 촌티를 쏘아봐서 나는 갈 데가 없다. 도망치듯이 걸음을 재게 하구 보니까 또 독서실 앞이다. 패잔병이 질리지도 않고 또 패배해서 복귀한다.보면 사실은 독서실만큼 아늑한 곳두 없다. 웬만한 생활을 다 이곳에서 해결할 만큼 풍족한 설비가 되어 있다. 특히나 밥 벌어 오라는 잔소리에 도망쳐 오기로는 더 나은 곳이 없다. 종종걸음 복도를 가로질러 가지고 내 자리에 앉았다.눈물 젖은 책을 씹어 먹는다.그러다 목이 텁텁하니까 커피 한 모금 마신다.아, 커피는 참 인생처럼 쓰다.]]></description><link>https://64etuor.github.io/900_writings/essays/120501-촌놈-판별공식.html</link><guid isPermaLink="false">900_Writings/Essays/120501 - 촌놈 판별공식.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:20:32 GMT</pubDate></item><item><title><![CDATA[221029 - 여성독립운동가 전시관을 관람하고]]></title><description><![CDATA[&lt;밤도 길어가나 봅니다. 우리 식구가 깃들인 이 작은 방은 좁고 거칠은 문창이 달빛에 밝게 물들었습니다. – 가신 님 단재의 영전에 서문&gt;&nbsp;여성독립운동가 전시관에서 이 글을 보게 되었다. 한참 넋이 나가고 눈시울이 붉어져 마음을 가누기 어렵더니, 가히 미망인 박자혜(단재 신채호의 처)위 처절한 심경이 저절로 짐작된다.&nbsp;단재 신채호 선생은 1936년 2월 17일 여순감옥에서 뇌일혈로 의식불명이 되었다. 급보를 받은 부인 박자혜 여사가 여순으로 달려가 간호했지만, 신채호 선생은 의식이 끝내 돌아오지 않고 2월 21일 향년 57세의 나이로 순국한다. 그리고 6년 후, 이 둘 부부의 둘째아들이 사망하고, 박 여사 또한 이듬해 병고로 세상을 떠나게 된다.&nbsp;조선상고사 등으로 우리에게 익숙한 단재 신채호라는 이름에 비하여, 그리고 여느 독립운동가의 것에 비하여, 여성으로 독립운동에 투신하거나 간접적으로 지원하였던 많은 사람들의 이름과 생애는 생소한 게 아직까지의 일반으로 보인다. 비참하고 통탄하는 마음과 동시에 무지한 본인 자신에 대한 부끄러움이 들 뿐이다.&nbsp;민족혼의 불꽃을 꺼뜨리지 않고 후대로 견인한 많은 독립운동가의 노력은, 온전하게 우리들에게 전달되었고, 우리는 그 불꽃을 잘 지켜내고 있는지 생각하게 된다.&nbsp;무장투쟁, 외교활동, 자금지원, 교육 등 어떠한 형태의 독립운동에도 그 비중에 차별이 있을 수는 없다. 하물며 운동가의 성별이야 말해 무엇할까. 그들 자신을 기꺼이 장작으로 던져 피운 불꽃이다. 그중 어떤 불꽃은 덜 뜨거울 리가 있는가.&nbsp;역사를 잊은 민족에게 미래는 없다는 말에 빗대어 보자면, 우리는 후대에 그 불꽃을 잘 보존하여 전달할 의무를 가진 게 아닐까 다시금 생각하지 않을 수 없다.&nbsp;우리 국민에게 널리 알려진 유관순 열사를 위시한, 그리고 상대적으로 덜 알려진 많은 여성운동가들의 존재를 오늘 배웠다.&nbsp;한말 최초의 여성 의병장 윤희순, 만세 운동 어윤희, 단재 신채호의 부인이자 독립운동의 동지 박자혜, 의연히 독립운동을 지원한 임수명, 나열하기 어려울 정도로 많은 사람들, 그리고 기록이 남지 않아 잊혀졌을 그보다 더 많은 사람들.&nbsp;그들을 기억하여야 한다. 그들의 숭고한 노력이 잊혀진 동안, 그리고 한쪽으로 기울어진 잣대를 가지고 역사를 정의하는 동안, 우리는 더 가치있는 무언가를 잃어버릴 수도 있다는 생각이 든다. 균형을 잃은 저울이 어찌 올바로 기능할까.&nbsp;우선은 나 자신의 저울을 고치는 걸 출발점 삼기로 한다. 오늘 새로이 배운 사람들의 이름들을 다시 한번 곱씹어 본다. 그리고 언젠가 누군가에게 그들의 이름을 말할 기회가 생길 적에는, 한민족의 불꽃을 활활 태웠던 사람들이었다는 설명을 보태리라.]]></description><link>https://64etuor.github.io/900_writings/essays/221029-여성독립운동가-전시관을-관람하고.html</link><guid isPermaLink="false">900_Writings/Essays/221029 - 여성독립운동가 전시관을 관람하고.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:19:27 GMT</pubDate></item><item><title><![CDATA[170615 - Animal Test]]></title><description><![CDATA[Animal testing often causes heated debates and protests. The most controversial animal testing is the test that particularly includes testing of medicines for research and biological reproduction. As much as animal testing is controversial, there are justifiable reasons supporting animal testing. Of course, clinical trials are not only negatives.
in the manufacturing of drugs that allows pharmaceutical companies to get drugs onto the marker safer and faster. For example, ‘Pasteur’s experiments’ produced vaccines for children, such as measles, which are dangerous for children because of inoculation of rabies.
When it is turned out that only 1.16% of diseases are common to both human and animal, however, the controversy arose due to not only the ethics of animal testing but also its effectiveness.
In 1957, ‘Talido maideu’ was the main ingredient of a medicine called ‘Kontereu’, produced by a German pharmaceutical company. The drug showed excellent efficacy with sedation or sleeping pills, especially when the pregnant women developed her pregnancy symptoms. There were numerous animal experiments that were conducted at the time of the drug, and then marketed at the time of being declared ‘harmless’ in animal testing, but in 1962, there were tens of thousands of deformed babies and thousands of deaths worldwide. Later, many pharmaceutical companies experimented with mice, rabbits, and primates to simulate the side effects of ‘tallidomaideu’, but when injected with very high concentrations of 75 to 300 times of the drug was injected, particularly in the New Zealand white rabbit, which was able to reproduce its side effects. This shows inefficient side effects that could not only be seen in animals, but only humans.
Secondly, it is unethical to confine an animal’s life to a laboratory and to live a life of pain. Some experiments involve cruel drug experimentation such as drug abuse, strangulation, and others are subjected to cruel experiments. Euthanasia is also being carried out after animal testing. According to the U.S. Department of Agriculture (UDOA) in 2010, 97,123 animals suffered during the trial without anesthesia. Despite the fact that real animals and humans share only 1.16 percent of the population, we are committed to doing so.
Lastly, there are new technologies that can replace animal testing because of advances in science. There are many different technologies, such as ‘INVITO’, which breeds and research cells in ‘PETRIO’ dishes, which are more efficient than animal tests because of human cells. They can also obtain blood samples obtained from humans and study blood samples, and also can be experimented with commercially available, such as ‘EPIDEM’ and ‘THINCET’. In addition, using computer simulations, one can conduct research without experiments on biology.
In conclusion, we should be reminded that animal testing is wasteful inaccurate and unethical and scientists and pharmaceutical companies should looking at the new alternatives that are being developed before resorting to animal testing.]]></description><link>https://64etuor.github.io/900_writings/essays/170615-animal-test.html</link><guid isPermaLink="false">900_Writings/Essays/170615 - Animal Test.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 18 Jan 2024 10:17:33 GMT</pubDate></item><item><title><![CDATA[내가 죽으면 장례식에 누가 와줄까]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/내가-죽으면-장례식에-누가-와줄까.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/내가 죽으면 장례식에 누가 와줄까.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 14 Jan 2024 08:56:02 GMT</pubDate></item><item><title><![CDATA[영원회귀(윤-종훈)]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/영원회귀(윤-종훈).html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/영원회귀(윤-종훈).pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 14 Jan 2024 08:51:17 GMT</pubDate></item><item><title><![CDATA[별 옆이야(별 엽 히야)]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/별-옆이야(별-엽-히야).html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/별 옆이야(별 엽 히야).pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 14 Jan 2024 08:49:17 GMT</pubDate></item><item><title><![CDATA[선악의 탄생]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/선악의-탄생.html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/선악의 탄생.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 14 Jan 2024 08:45:59 GMT</pubDate></item><item><title><![CDATA[노트 연결]]></title><description><![CDATA[
[코어 플러그인] 백링크 지금 노트로 연결된 노트
문서 내 백링크 기능 [코어 플러그인] 나가는 링크
- 지금 노트에서 연결한 노트 외부 링크: [공백도 OK](url)
내부 링크: [[파일 이름]]
표시되는 텍스트 바꾸기:
[[AAA|BBB]] -&gt; <a data-tooltip-position="top" aria-label="Atlas/Note/AAA" data-href="Atlas/Note/AAA" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">BBB</a><br>
[네이버](https://naver.com) -&gt; <a data-tooltip-position="top" aria-label="https://naver.com" rel="noopener nofollow" class="external-link is-unresolved" href="https://naver.com" target="_self">네이버</a>
Place holder (플레이스 홀더) 노트는 없지만 링크를 만들어 놓을 수 있다. 이미지와 마찬가지로 ![] 하면 돼요.![[블록 레퍼런스]]
“블록 레퍼런스” is not created yet. Click to create.파일명 뒤에 #(샵)을 입력하면 해딩을 검색할 수 있어요.![[블록 레퍼런스#해딩 1]]
“블록 레퍼런스#해딩 2” is not created yet. Click to create.파일명 뒤에 ^(윗꺽쇠)를 입력하면 구절을 검색할 수 있어요.<br>`<a data-href="블록 레퍼런스#^2344b3" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">블록 레퍼런스 &gt; ^2344b3</a>
“블록 레퍼런스#^2344b3” is not created yet. Click to create.예시: <br><a data-href="정보의 홍수에서 살겠습니까 정보의 우주에서 살겠습니까#^knowledgeuniverse" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">정보의 홍수에서 살겠습니까 정보의 우주에서 살겠습니까 &gt; ^knowledgeuniverse</a>
<br>
<a href="https://64etuor.github.io?query=tag:태그" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#태그">#태그</a> #태그
<br>
<a href="https://64etuor.github.io?query=tag:치킨/BHC" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#치킨/BHC">#치킨/BHC</a> <a href="https://64etuor.github.io?query=tag:치킨/푸라닭" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#치킨/푸라닭">#치킨/푸라닭</a> <a href="https://64etuor.github.io?query=tag:치킨/교촌" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#치킨/교촌">#치킨/교촌</a>
#치킨/BHC
#치킨/푸라닭
#치킨/교촌
옵시디언 볼트에 있는 모든 태그를 볼 수 있어요.
“태그 플러그인.png” could not be found.
옵시디언 볼트 전체의 그래프 뷰
“CleanShot 2023-10-06 at 00.05.49@2x.png” could not be found. 활성된 노트와 연결된 노트의 그래프 뷰
“로컬 그래프 뷰 설명 1.png” could not be found.
“그래프 뷰 설정.png” could not be found.
깊이, 노트 필터, 특정 노트의 색상 변경, 노드 크기 등등 다양한 설정 가능해요.
]]></description><link>https://64etuor.github.io/500_resources/obsidian/노트-연결.html</link><guid isPermaLink="false">500_Resources/Obsidian/노트 연결.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 07 Oct 2023 11:48:44 GMT</pubDate></item><item><title><![CDATA[Properties]]></title><description><![CDATA[
노트 최고 상단에 입력해야 해요. 공백이 있으면 안돼요.
<a data-tooltip-position="top" aria-label="기본 및 필수 설정 > ^mku0g9" data-href="기본 및 필수 설정#^mku0g9" href="https://64etuor.github.io/.html" class="internal-link" target="_self" rel="noopener nofollow">Properties 기본 설정 방법</a>
---
생성 날짜: 2023-10-07
aliases: - Properties Sample
Text: 텍스트를 입력할 수 있어요.
List: - 리스트 - 형식으로 - 정보를 - 저장해요
Checkbox: false
Number: 1234
Date: Date &amp; Time:
--- ]]></description><link>https://64etuor.github.io/500_resources/obsidian/properties.html</link><guid isPermaLink="false">500_Resources/Obsidian/Properties.md</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 07 Oct 2023 04:54:24 GMT</pubDate></item><item><title><![CDATA[글쓰기 챌린지 시즌1 글모음집(2.13~2.19)]]></title><link>https://64etuor.github.io/900_writings/00_achieves/2401-2403-대전-글쓰기-모임/글쓰기-챌린지-시즌1-글모음집(2.13~2.19).html</link><guid isPermaLink="false">900_Writings/00_Achieves/2401-2403 대전 글쓰기 모임/글쓰기 챌린지 시즌1 글모음집(2.13~2.19).pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 23 Apr 2023 13:24:11 GMT</pubDate></item><item><title><![CDATA[100084_textbook]]></title><link>https://64etuor.github.io/700_studies/00_achieves/2410-2411-spicus-english/100084_textbook.html</link><guid isPermaLink="false">700_Studies/00_Achieves/2410-2411 SPICUS English/100084_textbook.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Thu, 10 Oct 2019 08:53:30 GMT</pubDate></item><item><title><![CDATA[ya4]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya4.jpg" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya4.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/504A/ya4.jpg</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 28 Oct 2018 05:53:48 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya4.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya4.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ya3]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya3.jpg" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya3.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/504A/ya3.jpg</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 28 Oct 2018 05:42:59 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya3.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya3.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ya2]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya2.jpg" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya2.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/504A/ya2.jpg</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 28 Oct 2018 05:42:52 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya2.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya2.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ya1]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya1.jpg" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya1.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/504A/ya1.jpg</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 28 Oct 2018 05:42:39 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya1.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/ya1.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[yaasocial logo transparent]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/yaasocial-logo-transparent.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/yaasocial-logo-transparent.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/504A/yaasocial logo transparent.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 27 Oct 2018 19:37:35 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/yaasocial-logo-transparent.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/yaasocial-logo-transparent.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[YaaSocial!]]></title><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/yaasocial!.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/YaaSocial!.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 27 Oct 2018 19:33:08 GMT</pubDate></item><item><title><![CDATA[banner]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/banner.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/banner.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/banner.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sun, 21 Oct 2018 07:32:00 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/banner.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/banner.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[smmbpb504aa2project1templatev1]]></title><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/504a/smmbpb504aa2project1templatev1.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/504A/smmbpb504aa2project1templatev1.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 24 Sep 2018 09:54:35 GMT</pubDate></item><item><title><![CDATA[Visa Grant Notification for 2018 (1)]]></title><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/visa-grant-notification-for-2018-(1).html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/Visa Grant Notification for 2018 (1).pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 22 Sep 2018 03:01:26 GMT</pubDate></item><item><title><![CDATA[Visa Grant Notification for 2018]]></title><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/visa-grant-notification-for-2018.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/Visa Grant Notification for 2018.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Sat, 22 Sep 2018 02:59:45 GMT</pubDate></item><item><title><![CDATA[Are you ready for a change_ Visit us at blog.naver.com_jungeducation!]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/are-you-ready-for-a-change_-visit-us-at-blog.naver.com_jungeducation!.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/are-you-ready-for-a-change_-visit-us-at-blog.naver.com_jungeducation!.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Are you ready for a change_ Visit us at blog.naver.com_jungeducation!.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 06 Jun 2018 08:08:37 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/are-you-ready-for-a-change_-visit-us-at-blog.naver.com_jungeducation!.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/are-you-ready-for-a-change_-visit-us-at-blog.naver.com_jungeducation!.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[pc#1]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/photo-contest/pc#1.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Photo contest/pc#1.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 16:37:47 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[pc#2]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/photo-contest/pc#2.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Photo contest/pc#2.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 16:37:47 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[photocontest]]></title><description><![CDATA[<img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/photo-contest/photocontest.png" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/photo-contest/photocontest.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Photo contest/photocontest.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 15:32:35 GMT</pubDate><enclosure url="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/photo-contest/photocontest.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/photo-contest/photocontest.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1noads]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/1noads.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/1noads.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 08:13:53 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ws#1]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/wise-shopping-guide/ws#1.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Wise shopping guide/ws#1.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 08:11:21 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ws#2]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/wise-shopping-guide/ws#2.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Wise shopping guide/ws#2.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 08:11:21 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[ws#3]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/assets/wise-shopping-guide/ws#3.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Assets/Wise shopping guide/ws#3.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 08:11:21 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/1.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/1.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 07:51:24 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/2.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/2.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 07:51:24 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3]]></title><description><![CDATA[<img src="https://64etuor.github.io/.html" target="_self">]]></description><link>https://64etuor.github.io/700_studies/00_achieves/kirana-social-media-marketing/social-media-marketing-project#1/3.html</link><guid isPermaLink="false">700_Studies/00_Achieves/Kirana Social Media Marketing/Social Media Marketing Project#1/3.png</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Mon, 04 Jun 2018 07:51:24 GMT</pubDate><enclosure url="https://64etuor.github.io/.html" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://64etuor.github.io/.html"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[kpis formula]]></title><link>https://64etuor.github.io/700_studies/00_achieves/ctic-diploma-of-business-administration/kpis-formula.html</link><guid isPermaLink="false">700_Studies/00_Achieves/CTIC Diploma of Business Administration/kpis formula.txt</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 17 May 2017 01:15:49 GMT</pubDate></item><item><title><![CDATA[StudentWorkbook BSBCUS501 Manage quality customer service]]></title><link>https://64etuor.github.io/700_studies/00_achieves/ctic-diploma-of-business-administration/studentworkbook-bsbcus501-manage-quality-customer-service.html</link><guid isPermaLink="false">700_Studies/00_Achieves/CTIC Diploma of Business Administration/StudentWorkbook BSBCUS501 Manage quality customer service.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 26 Apr 2017 00:27:10 GMT</pubDate></item><item><title><![CDATA[All Courses VET Timetable 2017]]></title><link>https://64etuor.github.io/700_studies/00_achieves/ctic-diploma-of-business-administration/all-courses-vet-timetable-2017.html</link><guid isPermaLink="false">700_Studies/00_Achieves/CTIC Diploma of Business Administration/All Courses VET Timetable 2017.pdf</guid><dc:creator><![CDATA[Yangha Park]]></dc:creator><pubDate>Wed, 19 Apr 2017 23:20:44 GMT</pubDate></item></channel></rss>